
project_build/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .mios32_bsl   00004000  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08004000  08004000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bed4  08010000  08010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000171c  0801bed4  0801bed4  0001bed4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000d0  20000000  0801d5f0  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00004f90  200000d0  0801d6c0  000200d0  2**3  ALLOC
  6 ._usrstack    00000100  20005060  0801d6c0  00025060  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  000200d0  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  00020140  2**0  CONTENTS, READONLY
  9 .debug_aranges 00002660  00000000  00000000  00020173  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000429a7  00000000  00000000  000227d3  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e9c  00000000  00000000  0006517a  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012377  00000000  00000000  0006f016  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00005a74  00000000  00000000  00081390  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000dfab  00000000  00000000  00086e04  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b803  00000000  00000000  00094daf  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002940  00000000  00000000  000b05b2  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <APP_Periodic_100uS>:

/////////////////////////////////////////////////////////////////////////////
// This timer function is periodically called each 100 uS
/////////////////////////////////////////////////////////////////////////////
static void APP_Periodic_100uS(void)
{
 8010000:	b538      	push	{r3, r4, r5, lr}
  // for multiple LEDs from a single timer

  u8 *led_trigger_ptr = (u8 *)&led_trigger[0];
  u8 *led_pwm_counter_ptr = (u8 *)&led_pwm_counter[0];
  int i;
  for(i=0; i<NUM_LED_TRIGGERS; ++i, ++led_trigger_ptr, ++led_pwm_counter_ptr) {
 8010002:	2400      	movs	r4, #0
    if( *led_trigger_ptr ) {
 8010004:	4812      	ldr	r0, [pc, #72]	; (8010050 <APP_Periodic_100uS+0x50>)
 8010006:	5c23      	ldrb	r3, [r4, r0]
 8010008:	b1eb      	cbz	r3, 8010046 <APP_Periodic_100uS+0x46>
      if( --*led_pwm_counter_ptr ) {
 801000a:	4a12      	ldr	r2, [pc, #72]	; (8010054 <APP_Periodic_100uS+0x54>)
 801000c:	5ca1      	ldrb	r1, [r4, r2]
 801000e:	3901      	subs	r1, #1
 8010010:	b2c9      	uxtb	r1, r1
 8010012:	54a1      	strb	r1, [r4, r2]
 8010014:	b149      	cbz	r1, 801002a <APP_Periodic_100uS+0x2a>
	if( *led_pwm_counter_ptr == *led_trigger_ptr ) {
 8010016:	4299      	cmp	r1, r3
 8010018:	d115      	bne.n	8010046 <APP_Periodic_100uS+0x46>
	  if( i == 0 )
 801001a:	b914      	cbnz	r4, 8010022 <APP_Periodic_100uS+0x22>
	    MIOS32_BOARD_LED_Set(1, 1);
 801001c:	2001      	movs	r0, #1
 801001e:	4601      	mov	r1, r0
 8010020:	e00a      	b.n	8010038 <APP_Periodic_100uS+0x38>


/////////////////////////////////////////////////////////////////////////////
// This timer function is periodically called each 100 uS
/////////////////////////////////////////////////////////////////////////////
static void APP_Periodic_100uS(void)
 8010022:	1e62      	subs	r2, r4, #1
      if( --*led_pwm_counter_ptr ) {
	if( *led_pwm_counter_ptr == *led_trigger_ptr ) {
	  if( i == 0 )
	    MIOS32_BOARD_LED_Set(1, 1);
	  else
	    MIOS32_BOARD_J5_PinSet(i-1, 1);
 8010024:	b2d0      	uxtb	r0, r2
 8010026:	2101      	movs	r1, #1
 8010028:	e00b      	b.n	8010042 <APP_Periodic_100uS+0x42>
	}
      } else {
	*led_pwm_counter_ptr = LED_PWM_PERIOD;
 801002a:	2532      	movs	r5, #50	; 0x32
	--*led_trigger_ptr;
 801002c:	3b01      	subs	r3, #1
	    MIOS32_BOARD_LED_Set(1, 1);
	  else
	    MIOS32_BOARD_J5_PinSet(i-1, 1);
	}
      } else {
	*led_pwm_counter_ptr = LED_PWM_PERIOD;
 801002e:	54a5      	strb	r5, [r4, r2]
	--*led_trigger_ptr;
 8010030:	5423      	strb	r3, [r4, r0]

	if( i == 0 )
 8010032:	b924      	cbnz	r4, 801003e <APP_Periodic_100uS+0x3e>
	  MIOS32_BOARD_LED_Set(1, 0);
 8010034:	2001      	movs	r0, #1
 8010036:	4621      	mov	r1, r4
 8010038:	f003 fa1e 	bl	8013478 <MIOS32_BOARD_LED_Set>
 801003c:	e003      	b.n	8010046 <APP_Periodic_100uS+0x46>


/////////////////////////////////////////////////////////////////////////////
// This timer function is periodically called each 100 uS
/////////////////////////////////////////////////////////////////////////////
static void APP_Periodic_100uS(void)
 801003e:	1e60      	subs	r0, r4, #1
	--*led_trigger_ptr;

	if( i == 0 )
	  MIOS32_BOARD_LED_Set(1, 0);
	else
	  MIOS32_BOARD_J5_PinSet(i-1, 0);
 8010040:	b2c0      	uxtb	r0, r0
 8010042:	f003 fa67 	bl	8013514 <MIOS32_BOARD_J5_PinSet>
  // for multiple LEDs from a single timer

  u8 *led_trigger_ptr = (u8 *)&led_trigger[0];
  u8 *led_pwm_counter_ptr = (u8 *)&led_pwm_counter[0];
  int i;
  for(i=0; i<NUM_LED_TRIGGERS; ++i, ++led_trigger_ptr, ++led_pwm_counter_ptr) {
 8010046:	3401      	adds	r4, #1
 8010048:	2c09      	cmp	r4, #9
 801004a:	d1db      	bne.n	8010004 <APP_Periodic_100uS+0x4>
	else
	  MIOS32_BOARD_J5_PinSet(i-1, 0);
      }
    }
  }
}
 801004c:	bd38      	pop	{r3, r4, r5, pc}
 801004e:	bf00      	nop
 8010050:	200000d9 	.word	0x200000d9
 8010054:	200000d0 	.word	0x200000d0

08010058 <APP_Init>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
{
 8010058:	b570      	push	{r4, r5, r6, lr}
  int i;

  // init terminal
  TERMINAL_Init(0);
 801005a:	2000      	movs	r0, #0
 801005c:	f000 f8b2 	bl	80101c4 <TERMINAL_Init>

  // init MIDImon
  MIDIMON_Init(0);
 8010060:	2000      	movs	r0, #0
 8010062:	f00a fc33 	bl	801a8cc <MIDIMON_Init>

  // initialize status LED
  MIOS32_BOARD_LED_Init(0xffffffff);
 8010066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801006a:	f003 f9eb 	bl	8013444 <MIOS32_BOARD_LED_Init>
  MIOS32_BOARD_LED_Set(1, 0);
 801006e:	2001      	movs	r0, #1
 8010070:	2100      	movs	r1, #0
 8010072:	f003 fa01 	bl	8013478 <MIOS32_BOARD_LED_Set>
  led_pwm_counter[0] = LED_PWM_PERIOD;
 8010076:	4a10      	ldr	r2, [pc, #64]	; (80100b8 <APP_Init+0x60>)
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle
 8010078:	4810      	ldr	r0, [pc, #64]	; (80100bc <APP_Init+0x64>)
  MIDIMON_Init(0);

  // initialize status LED
  MIOS32_BOARD_LED_Init(0xffffffff);
  MIOS32_BOARD_LED_Set(1, 0);
  led_pwm_counter[0] = LED_PWM_PERIOD;
 801007a:	2332      	movs	r3, #50	; 0x32
 801007c:	7013      	strb	r3, [r2, #0]
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle
 801007e:	7003      	strb	r3, [r0, #0]

  // initialize additional LEDs connected to J5A/B
  for(i=0; i<6; ++i) {
 8010080:	2400      	movs	r4, #0
    led_pwm_counter[1+i] = LED_PWM_PERIOD;
 8010082:	3401      	adds	r4, #1
 8010084:	4d0c      	ldr	r5, [pc, #48]	; (80100b8 <APP_Init+0x60>)
    led_trigger[1+i] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle
 8010086:	4b0d      	ldr	r3, [pc, #52]	; (80100bc <APP_Init+0x64>)
  led_pwm_counter[0] = LED_PWM_PERIOD;
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle

  // initialize additional LEDs connected to J5A/B
  for(i=0; i<6; ++i) {
    led_pwm_counter[1+i] = LED_PWM_PERIOD;
 8010088:	2132      	movs	r1, #50	; 0x32


/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
 801008a:	1e62      	subs	r2, r4, #1
  led_pwm_counter[0] = LED_PWM_PERIOD;
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle

  // initialize additional LEDs connected to J5A/B
  for(i=0; i<6; ++i) {
    led_pwm_counter[1+i] = LED_PWM_PERIOD;
 801008c:	5561      	strb	r1, [r4, r5]


/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
 801008e:	b2d5      	uxtb	r5, r2
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle

  // initialize additional LEDs connected to J5A/B
  for(i=0; i<6; ++i) {
    led_pwm_counter[1+i] = LED_PWM_PERIOD;
    led_trigger[1+i] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle
 8010090:	54e1      	strb	r1, [r4, r3]
    MIOS32_BOARD_J5_PinInit(i, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8010092:	4628      	mov	r0, r5
 8010094:	2105      	movs	r1, #5
 8010096:	f003 fa19 	bl	80134cc <MIOS32_BOARD_J5_PinInit>
    MIOS32_BOARD_J5_PinSet(i, 0);
 801009a:	2100      	movs	r1, #0
 801009c:	4628      	mov	r0, r5
 801009e:	f003 fa39 	bl	8013514 <MIOS32_BOARD_J5_PinSet>
  MIOS32_BOARD_LED_Set(1, 0);
  led_pwm_counter[0] = LED_PWM_PERIOD;
  led_trigger[0] = LED_PWM_PERIOD; // trigger LED on startup for complete PWM cycle

  // initialize additional LEDs connected to J5A/B
  for(i=0; i<6; ++i) {
 80100a2:	2c06      	cmp	r4, #6
 80100a4:	d1ed      	bne.n	8010082 <APP_Init+0x2a>
    MIOS32_BOARD_J5_PinInit(i, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
    MIOS32_BOARD_J5_PinSet(i, 0);
  }

  // install timer function which is called each 100 uS
  MIOS32_TIMER_Init(0, 100, APP_Periodic_100uS, MIOS32_IRQ_PRIO_MID);
 80100a6:	4a06      	ldr	r2, [pc, #24]	; (80100c0 <APP_Init+0x68>)
 80100a8:	2000      	movs	r0, #0
 80100aa:	2164      	movs	r1, #100	; 0x64
 80100ac:	2308      	movs	r3, #8
}
 80100ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MIOS32_BOARD_J5_PinInit(i, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
    MIOS32_BOARD_J5_PinSet(i, 0);
  }

  // install timer function which is called each 100 uS
  MIOS32_TIMER_Init(0, 100, APP_Periodic_100uS, MIOS32_IRQ_PRIO_MID);
 80100b2:	f003 baf9 	b.w	80136a8 <MIOS32_TIMER_Init>
 80100b6:	bf00      	nop
 80100b8:	200000d0 	.word	0x200000d0
 80100bc:	200000d9 	.word	0x200000d9
 80100c0:	08010001 	.word	0x08010001

080100c4 <APP_Background>:

/////////////////////////////////////////////////////////////////////////////
// This task is running endless in background
/////////////////////////////////////////////////////////////////////////////
void APP_Background(void)
{
 80100c4:	b508      	push	{r3, lr}
  // init LCD
  MIOS32_LCD_Clear();
 80100c6:	f001 fb0f 	bl	80116e8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80100ca:	2000      	movs	r0, #0
 80100cc:	4601      	mov	r1, r0
 80100ce:	f001 fac1 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("see README.txt   ");
 80100d2:	4805      	ldr	r0, [pc, #20]	; (80100e8 <APP_Background+0x24>)
 80100d4:	f001 fb66 	bl	80117a4 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80100d8:	2000      	movs	r0, #0
 80100da:	2101      	movs	r1, #1
 80100dc:	f001 faba 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("for details     ");
 80100e0:	4802      	ldr	r0, [pc, #8]	; (80100ec <APP_Background+0x28>)
 80100e2:	f001 fb5f 	bl	80117a4 <MIOS32_LCD_PrintString>
 80100e6:	e7fe      	b.n	80100e6 <APP_Background+0x22>
 80100e8:	0801bed4 	.word	0x0801bed4
 80100ec:	0801bee6 	.word	0x0801bee6

080100f0 <APP_MIDI_NotifyPackage>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a MIDI package has been received
/////////////////////////////////////////////////////////////////////////////
void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 80100f0:	b538      	push	{r3, r4, r5, lr}
  // forward packages USBx->UARTx and UARTx->USBx
  switch( port ) {
 80100f2:	f1a0 0310 	sub.w	r3, r0, #16

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a MIDI package has been received
/////////////////////////////////////////////////////////////////////////////
void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 80100f6:	4605      	mov	r5, r0
 80100f8:	460c      	mov	r4, r1
  // forward packages USBx->UARTx and UARTx->USBx
  switch( port ) {
 80100fa:	2b13      	cmp	r3, #19
 80100fc:	d84b      	bhi.n	8010196 <APP_MIDI_NotifyPackage+0xa6>
 80100fe:	e8df f003 	tbb	[pc, r3]
 8010102:	120a      	.short	0x120a
 8010104:	4a4a221a 	.word	0x4a4a221a
 8010108:	4a4a4a4a 	.word	0x4a4a4a4a
 801010c:	4a4a4a4a 	.word	0x4a4a4a4a
 8010110:	322a4a4a 	.word	0x322a4a4a
 8010114:	423a      	.short	0x423a
    case USB0:
      MIOS32_MIDI_SendPackage(UART0, midi_package);
 8010116:	2020      	movs	r0, #32
 8010118:	f001 fbf0 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801011c:	4925      	ldr	r1, [pc, #148]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801011e:	2332      	movs	r3, #50	; 0x32
 8010120:	700b      	strb	r3, [r1, #0]
      led_trigger[1] = LED_PWM_PERIOD; // J5A.0
 8010122:	704b      	strb	r3, [r1, #1]
 8010124:	e03e      	b.n	80101a4 <APP_MIDI_NotifyPackage+0xb4>
      break;

    case USB1:
      MIOS32_MIDI_SendPackage(UART1, midi_package);
 8010126:	2021      	movs	r0, #33	; 0x21
 8010128:	f001 fbe8 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801012c:	4821      	ldr	r0, [pc, #132]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801012e:	2232      	movs	r2, #50	; 0x32
 8010130:	7002      	strb	r2, [r0, #0]
      led_trigger[2] = LED_PWM_PERIOD; // J5A.1
 8010132:	7082      	strb	r2, [r0, #2]
      break;
 8010134:	e031      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case USB2:
      MIOS32_MIDI_SendPackage(UART2, midi_package);
 8010136:	2022      	movs	r0, #34	; 0x22
 8010138:	f001 fbe0 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801013c:	491d      	ldr	r1, [pc, #116]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801013e:	2332      	movs	r3, #50	; 0x32
 8010140:	700b      	strb	r3, [r1, #0]
      led_trigger[3] = LED_PWM_PERIOD; // J5A.2
 8010142:	70cb      	strb	r3, [r1, #3]
      break;
 8010144:	e029      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case USB3:
      MIOS32_MIDI_SendPackage(UART3, midi_package);
 8010146:	2023      	movs	r0, #35	; 0x23
 8010148:	f001 fbd8 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801014c:	4819      	ldr	r0, [pc, #100]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801014e:	2232      	movs	r2, #50	; 0x32
 8010150:	7002      	strb	r2, [r0, #0]
      led_trigger[4] = LED_PWM_PERIOD; // J5A.3
 8010152:	7102      	strb	r2, [r0, #4]
      break;
 8010154:	e021      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case UART0:
      MIOS32_MIDI_SendPackage(USB0, midi_package);
 8010156:	2010      	movs	r0, #16
 8010158:	f001 fbd0 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801015c:	4915      	ldr	r1, [pc, #84]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801015e:	2332      	movs	r3, #50	; 0x32
 8010160:	700b      	strb	r3, [r1, #0]
      led_trigger[5] = LED_PWM_PERIOD; // J5A.4
 8010162:	714b      	strb	r3, [r1, #5]
      break;
 8010164:	e019      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case UART1:
      MIOS32_MIDI_SendPackage(USB1, midi_package);
 8010166:	2011      	movs	r0, #17
 8010168:	f001 fbc8 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801016c:	4811      	ldr	r0, [pc, #68]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801016e:	2232      	movs	r2, #50	; 0x32
 8010170:	7002      	strb	r2, [r0, #0]
      led_trigger[6] = LED_PWM_PERIOD; // J5A.5
 8010172:	7182      	strb	r2, [r0, #6]
      break;
 8010174:	e011      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case UART2:
      MIOS32_MIDI_SendPackage(USB2, midi_package);
 8010176:	2012      	movs	r0, #18
 8010178:	f001 fbc0 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801017c:	490d      	ldr	r1, [pc, #52]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801017e:	2332      	movs	r3, #50	; 0x32
 8010180:	700b      	strb	r3, [r1, #0]
      led_trigger[7] = LED_PWM_PERIOD; // J5A.6
 8010182:	71cb      	strb	r3, [r1, #7]
      break;
 8010184:	e009      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>

    case UART3:
      MIOS32_MIDI_SendPackage(USB3, midi_package);
 8010186:	2013      	movs	r0, #19
 8010188:	f001 fbb8 	bl	80118fc <MIOS32_MIDI_SendPackage>
      led_trigger[0] = LED_PWM_PERIOD; // Board LED
 801018c:	4809      	ldr	r0, [pc, #36]	; (80101b4 <APP_MIDI_NotifyPackage+0xc4>)
 801018e:	2232      	movs	r2, #50	; 0x32
 8010190:	7002      	strb	r2, [r0, #0]
      led_trigger[8] = LED_PWM_PERIOD; // J5A.7
 8010192:	7202      	strb	r2, [r0, #8]
      break;
 8010194:	e001      	b.n	801019a <APP_MIDI_NotifyPackage+0xaa>
  }

  // forward to MIDI Monitor
  // SysEx messages have to be filtered for USB0 and UART0 to avoid data corruption
  // (the SysEx stream would interfere with monitor messages)
  u8 filter_sysex_message = (port == USB0) || (port == UART0);
 8010196:	2810      	cmp	r0, #16
 8010198:	d004      	beq.n	80101a4 <APP_MIDI_NotifyPackage+0xb4>
 801019a:	f1b5 0020 	subs.w	r0, r5, #32
 801019e:	4242      	negs	r2, r0
 80101a0:	4142      	adcs	r2, r0
 80101a2:	e000      	b.n	80101a6 <APP_MIDI_NotifyPackage+0xb6>
 80101a4:	2201      	movs	r2, #1
  MIDIMON_Receive(port, midi_package, filter_sysex_message);
 80101a6:	4628      	mov	r0, r5
 80101a8:	4621      	mov	r1, r4
}
 80101aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  // forward to MIDI Monitor
  // SysEx messages have to be filtered for USB0 and UART0 to avoid data corruption
  // (the SysEx stream would interfere with monitor messages)
  u8 filter_sysex_message = (port == USB0) || (port == UART0);
  MIDIMON_Receive(port, midi_package, filter_sysex_message);
 80101ae:	f00a be5b 	b.w	801ae68 <MIDIMON_Receive>
 80101b2:	bf00      	nop
 80101b4:	200000d9 	.word	0x200000d9

080101b8 <APP_SRIO_ServicePrepare>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called before the shift register chain is scanned
/////////////////////////////////////////////////////////////////////////////
void APP_SRIO_ServicePrepare(void)
{
 80101b8:	4770      	bx	lr

080101ba <APP_SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after the shift register chain has been scanned
/////////////////////////////////////////////////////////////////////////////
void APP_SRIO_ServiceFinish(void)
{
 80101ba:	4770      	bx	lr

080101bc <APP_DIN_NotifyToggle>:
/////////////////////////////////////////////////////////////////////////////
// This hook is called when a button has been toggled
// pin_value is 1 when button released, and 0 when button pressed
/////////////////////////////////////////////////////////////////////////////
void APP_DIN_NotifyToggle(u32 pin, u32 pin_value)
{
 80101bc:	4770      	bx	lr

080101be <APP_ENC_NotifyChange>:
// This hook is called when an encoder has been moved
// incrementer is positive when encoder has been turned clockwise, else
// it is negative
/////////////////////////////////////////////////////////////////////////////
void APP_ENC_NotifyChange(u32 encoder, s32 incrementer)
{
 80101be:	4770      	bx	lr

080101c0 <APP_AIN_NotifyChange>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a pot has been moved
/////////////////////////////////////////////////////////////////////////////
void APP_AIN_NotifyChange(u32 pin, u32 pin_value)
{
 80101c0:	4770      	bx	lr
	...

080101c4 <TERMINAL_Init>:

/////////////////////////////////////////////////////////////////////////////
// Initialisation
/////////////////////////////////////////////////////////////////////////////
s32 TERMINAL_Init(u32 mode)
{
 80101c4:	b508      	push	{r3, lr}
  // install the callback function which is called on incoming characters from MIOS Terminal
  MIOS32_MIDI_DebugCommandCallback_Init(TERMINAL_Parse);
 80101c6:	4804      	ldr	r0, [pc, #16]	; (80101d8 <TERMINAL_Init+0x14>)
 80101c8:	f002 f8da 	bl	8012380 <MIOS32_MIDI_DebugCommandCallback_Init>

  // clear line buffer
  line_buffer[0] = 0;
 80101cc:	4b03      	ldr	r3, [pc, #12]	; (80101dc <TERMINAL_Init+0x18>)
  line_ix = 0;
 80101ce:	4904      	ldr	r1, [pc, #16]	; (80101e0 <TERMINAL_Init+0x1c>)
{
  // install the callback function which is called on incoming characters from MIOS Terminal
  MIOS32_MIDI_DebugCommandCallback_Init(TERMINAL_Parse);

  // clear line buffer
  line_buffer[0] = 0;
 80101d0:	2000      	movs	r0, #0
 80101d2:	7018      	strb	r0, [r3, #0]
  line_ix = 0;
 80101d4:	8008      	strh	r0, [r1, #0]

  return 0; // no error
}
 80101d6:	bd08      	pop	{r3, pc}
 80101d8:	0801027d 	.word	0x0801027d
 80101dc:	200000e2 	.word	0x200000e2
 80101e0:	20000146 	.word	0x20000146

080101e4 <TERMINAL_ParseLine>:

/////////////////////////////////////////////////////////////////////////////
// Parser for a complete line - also used by shell.c for telnet
/////////////////////////////////////////////////////////////////////////////
s32 TERMINAL_ParseLine(char *input, void *_output_function)
{
 80101e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101e6:	4605      	mov	r5, r0
 80101e8:	460c      	mov	r4, r1
  void (*out)(char *format, ...) = _output_function;
  char *separators = " \t";
  char *brkt;
  char *parameter;

  if( MIDIMON_TerminalParseLine(input, _output_function) > 0 )
 80101ea:	f00a fe63 	bl	801aeb4 <MIDIMON_TerminalParseLine>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	dc2c      	bgt.n	801024c <TERMINAL_ParseLine+0x68>
    return 0; // command parsed

  if( (parameter = strtok_r(input, separators, &brkt)) ) {
 80101f2:	4628      	mov	r0, r5
 80101f4:	4916      	ldr	r1, [pc, #88]	; (8010250 <TERMINAL_ParseLine+0x6c>)
 80101f6:	aa01      	add	r2, sp, #4
 80101f8:	f00b fe69 	bl	801bece <strtok_r>
 80101fc:	4605      	mov	r5, r0
 80101fe:	b328      	cbz	r0, 801024c <TERMINAL_ParseLine+0x68>
    if( strcmp(parameter, "help") == 0 ) {
 8010200:	4914      	ldr	r1, [pc, #80]	; (8010254 <TERMINAL_ParseLine+0x70>)
 8010202:	f00b fe22 	bl	801be4a <strcmp>
 8010206:	b960      	cbnz	r0, 8010222 <TERMINAL_ParseLine+0x3e>
      out("Welcome to " MIOS32_LCD_BOOT_MSG_LINE1 "!");
 8010208:	4813      	ldr	r0, [pc, #76]	; (8010258 <TERMINAL_ParseLine+0x74>)
 801020a:	47a0      	blx	r4
      out("Following commands are available:");
 801020c:	4813      	ldr	r0, [pc, #76]	; (801025c <TERMINAL_ParseLine+0x78>)
 801020e:	47a0      	blx	r4
      out("  system:                           print system info");
 8010210:	4813      	ldr	r0, [pc, #76]	; (8010260 <TERMINAL_ParseLine+0x7c>)
 8010212:	47a0      	blx	r4
      MIDIMON_TerminalHelp(_output_function);
 8010214:	4620      	mov	r0, r4
 8010216:	f00a fe3d 	bl	801ae94 <MIDIMON_TerminalHelp>
      out("  reset:                            resets the MIDIbox (!)\n");
 801021a:	4812      	ldr	r0, [pc, #72]	; (8010264 <TERMINAL_ParseLine+0x80>)
 801021c:	47a0      	blx	r4
      out("  help:                             this page");
 801021e:	4812      	ldr	r0, [pc, #72]	; (8010268 <TERMINAL_ParseLine+0x84>)
 8010220:	e013      	b.n	801024a <TERMINAL_ParseLine+0x66>
    } else if( strcmp(parameter, "system") == 0 ) {
 8010222:	4628      	mov	r0, r5
 8010224:	4911      	ldr	r1, [pc, #68]	; (801026c <TERMINAL_ParseLine+0x88>)
 8010226:	f00b fe10 	bl	801be4a <strcmp>
 801022a:	b928      	cbnz	r0, 8010238 <TERMINAL_ParseLine+0x54>
/////////////////////////////////////////////////////////////////////////////
static s32 TERMINAL_PrintSystem(void *_output_function)
{
  void (*out)(char *format, ...) = _output_function;

  out("Application: " MIOS32_LCD_BOOT_MSG_LINE1);
 801022c:	4810      	ldr	r0, [pc, #64]	; (8010270 <TERMINAL_ParseLine+0x8c>)
 801022e:	47a0      	blx	r4

  MIDIMON_TerminalPrintConfig(out);
 8010230:	4620      	mov	r0, r4
 8010232:	f00a fec7 	bl	801afc4 <MIDIMON_TerminalPrintConfig>
 8010236:	e009      	b.n	801024c <TERMINAL_ParseLine+0x68>
      MIDIMON_TerminalHelp(_output_function);
      out("  reset:                            resets the MIDIbox (!)\n");
      out("  help:                             this page");
    } else if( strcmp(parameter, "system") == 0 ) {
      TERMINAL_PrintSystem(_output_function);
    } else if( strcmp(parameter, "reset") == 0 ) {
 8010238:	4628      	mov	r0, r5
 801023a:	490e      	ldr	r1, [pc, #56]	; (8010274 <TERMINAL_ParseLine+0x90>)
 801023c:	f00b fe05 	bl	801be4a <strcmp>
 8010240:	b910      	cbnz	r0, 8010248 <TERMINAL_ParseLine+0x64>
      MIOS32_SYS_Reset();
 8010242:	f002 fb13 	bl	801286c <MIOS32_SYS_Reset>
 8010246:	e001      	b.n	801024c <TERMINAL_ParseLine+0x68>
    } else {
      out("Unknown command - type 'help' to list available commands!");
 8010248:	480b      	ldr	r0, [pc, #44]	; (8010278 <TERMINAL_ParseLine+0x94>)
 801024a:	47a0      	blx	r4
    }
  }

  return 0; // no error
}
 801024c:	2000      	movs	r0, #0
 801024e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010250:	0801bef7 	.word	0x0801bef7
 8010254:	0801befa 	.word	0x0801befa
 8010258:	0801beff 	.word	0x0801beff
 801025c:	0801bf1f 	.word	0x0801bf1f
 8010260:	0801bf41 	.word	0x0801bf41
 8010264:	0801bf77 	.word	0x0801bf77
 8010268:	0801bfb3 	.word	0x0801bfb3
 801026c:	0801bfe1 	.word	0x0801bfe1
 8010270:	0801bfe8 	.word	0x0801bfe8
 8010274:	0801c009 	.word	0x0801c009
 8010278:	0801c00f 	.word	0x0801c00f

0801027c <TERMINAL_Parse>:

/////////////////////////////////////////////////////////////////////////////
// Parser
/////////////////////////////////////////////////////////////////////////////
s32 TERMINAL_Parse(mios32_midi_port_t port, char byte)
{
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	460d      	mov	r5, r1
 8010280:	4604      	mov	r4, r0
  // temporary change debug port (will be restored at the end of this function)
  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
 8010282:	f002 f877 	bl	8012374 <MIOS32_MIDI_DebugPortGet>
 8010286:	4606      	mov	r6, r0
  MIOS32_MIDI_DebugPortSet(port);
 8010288:	4620      	mov	r0, r4
 801028a:	f001 fd5f 	bl	8011d4c <MIOS32_MIDI_DebugPortSet>

  if( byte == '\r' ) {
 801028e:	2d0d      	cmp	r5, #13
 8010290:	d015      	beq.n	80102be <TERMINAL_Parse+0x42>
    // ignore
  } else if( byte == '\n' ) {
 8010292:	2d0a      	cmp	r5, #10
 8010294:	4c0c      	ldr	r4, [pc, #48]	; (80102c8 <TERMINAL_Parse+0x4c>)
 8010296:	d108      	bne.n	80102aa <TERMINAL_Parse+0x2e>
    //MUTEX_MIDIOUT_TAKE;
    TERMINAL_ParseLine(line_buffer, MIOS32_MIDI_SendDebugMessage);
 8010298:	4d0c      	ldr	r5, [pc, #48]	; (80102cc <TERMINAL_Parse+0x50>)
 801029a:	490d      	ldr	r1, [pc, #52]	; (80102d0 <TERMINAL_Parse+0x54>)
 801029c:	4628      	mov	r0, r5
 801029e:	f7ff ffa1 	bl	80101e4 <TERMINAL_ParseLine>
    //MUTEX_MIDIOUT_GIVE;
    line_ix = 0;
 80102a2:	2000      	movs	r0, #0
 80102a4:	8020      	strh	r0, [r4, #0]
    line_buffer[line_ix] = 0;
 80102a6:	7028      	strb	r0, [r5, #0]
 80102a8:	e009      	b.n	80102be <TERMINAL_Parse+0x42>
  } else if( line_ix < (STRING_MAX-1) ) {
 80102aa:	8823      	ldrh	r3, [r4, #0]
 80102ac:	2b62      	cmp	r3, #98	; 0x62
 80102ae:	d806      	bhi.n	80102be <TERMINAL_Parse+0x42>
    line_buffer[line_ix++] = byte;
 80102b0:	4a06      	ldr	r2, [pc, #24]	; (80102cc <TERMINAL_Parse+0x50>)
 80102b2:	1c58      	adds	r0, r3, #1
 80102b4:	54d5      	strb	r5, [r2, r3]
 80102b6:	b283      	uxth	r3, r0
    line_buffer[line_ix] = 0;
 80102b8:	2100      	movs	r1, #0
 80102ba:	54d1      	strb	r1, [r2, r3]
    TERMINAL_ParseLine(line_buffer, MIOS32_MIDI_SendDebugMessage);
    //MUTEX_MIDIOUT_GIVE;
    line_ix = 0;
    line_buffer[line_ix] = 0;
  } else if( line_ix < (STRING_MAX-1) ) {
    line_buffer[line_ix++] = byte;
 80102bc:	8023      	strh	r3, [r4, #0]
    line_buffer[line_ix] = 0;
  }

  // restore debug port
  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 80102be:	4630      	mov	r0, r6
 80102c0:	f001 fd44 	bl	8011d4c <MIOS32_MIDI_DebugPortSet>

  return 0; // no error
}
 80102c4:	2000      	movs	r0, #0
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	20000146 	.word	0x20000146
 80102cc:	200000e2 	.word	0x200000e2
 80102d0:	08011c15 	.word	0x08011c15

080102d4 <SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// Application Tick Hook (called by FreeRTOS each mS)
/////////////////////////////////////////////////////////////////////////////
void SRIO_ServiceFinish(void)
{
 80102d4:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_SRIO

# ifndef MIOS32_DONT_USE_ENC
  // update encoder states
  MIOS32_ENC_UpdateStates();
 80102d6:	f001 f825 	bl	8011324 <MIOS32_ENC_UpdateStates>
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
#endif
}
 80102da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // update encoder states
  MIOS32_ENC_UpdateStates();
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
 80102de:	f7ff bf6c 	b.w	80101ba <APP_SRIO_ServiceFinish>

080102e2 <APP_Tick>:
/////////////////////////////////////////////////////////////////////////////
// Dummies for APP_Tick and APP_MIDI_Tick (if not used in app.c)
/////////////////////////////////////////////////////////////////////////////

__attribute__ ((weak)) void APP_Tick(void)
{
 80102e2:	4770      	bx	lr

080102e4 <TASK_Hooks>:

/////////////////////////////////////////////////////////////////////////////
// Remaining application hooks
/////////////////////////////////////////////////////////////////////////////
static void TASK_Hooks(void *pvParameters)
{
 80102e4:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 80102e6:	f000 fb0f 	bl	8010908 <xTaskGetTickCount>
 80102ea:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 80102ec:	2101      	movs	r1, #1
 80102ee:	a801      	add	r0, sp, #4
 80102f0:	f000 fc36 	bl	8010b60 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 80102f4:	f000 fb08 	bl	8010908 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	1f42      	subs	r2, r0, #5
 80102fc:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 80102fe:	bf38      	it	cc
 8010300:	9001      	strcc	r0, [sp, #4]

#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
    // check for DIN pin changes, call APP_DIN_NotifyToggle on each toggled pin
    MIOS32_DIN_Handler(APP_DIN_NotifyToggle);
 8010302:	4807      	ldr	r0, [pc, #28]	; (8010320 <TASK_Hooks+0x3c>)
 8010304:	f000 ff98 	bl	8011238 <MIOS32_DIN_Handler>

    // check for encoder changes, call APP_ENC_NotifyChanged on each change
# ifndef MIOS32_DONT_USE_ENC
    MIOS32_ENC_Handler(APP_ENC_NotifyChange);
 8010308:	4806      	ldr	r0, [pc, #24]	; (8010324 <TASK_Hooks+0x40>)
 801030a:	f001 f941 	bl	8011590 <MIOS32_ENC_Handler>
# endif
#endif

#if !defined(MIOS32_DONT_USE_AIN) && !defined(MIOS32_DONT_SERVICE_AIN)
    // check for AIN pin changes, call APP_AIN_NotifyChange on each pin change
    MIOS32_AIN_Handler(APP_AIN_NotifyChange);
 801030e:	4806      	ldr	r0, [pc, #24]	; (8010328 <TASK_Hooks+0x44>)
 8010310:	f003 fa89 	bl	8013826 <MIOS32_AIN_Handler>
#endif

#if !defined(MIOS32_DONT_USE_COM)
    // check for incoming COM messages
    MIOS32_COM_Receive_Handler();
 8010314:	f002 f872 	bl	80123fc <MIOS32_COM_Receive_Handler>
#endif

    // optional APP_Tick() hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_Tick();
 8010318:	f7ff ffe3 	bl	80102e2 <APP_Tick>
  }
 801031c:	e7e6      	b.n	80102ec <TASK_Hooks+0x8>
 801031e:	bf00      	nop
 8010320:	080101bd 	.word	0x080101bd
 8010324:	080101bf 	.word	0x080101bf
 8010328:	080101c1 	.word	0x080101c1

0801032c <APP_MIDI_Tick>:
__attribute__ ((weak)) void APP_Tick(void)
{
}

__attribute__ ((weak)) void APP_MIDI_Tick(void)
{
 801032c:	4770      	bx	lr
	...

08010330 <TASK_MIDI_Hooks>:
// MIDI task (separated from TASK_Hooks() to ensure parallel handling of
// MIDI events if a hook in TASK_Hooks() blocks)
/////////////////////////////////////////////////////////////////////////////
#if !defined(MIOS32_DONT_USE_MIDI)
static void TASK_MIDI_Hooks(void *pvParameters)
{
 8010330:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010332:	f000 fae9 	bl	8010908 <xTaskGetTickCount>
 8010336:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010338:	2101      	movs	r1, #1
 801033a:	a801      	add	r0, sp, #4
 801033c:	f000 fc10 	bl	8010b60 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 8010340:	f000 fae2 	bl	8010908 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	1f42      	subs	r2, r0, #5
 8010348:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 801034a:	bf38      	it	cc
 801034c:	9001      	strcc	r0, [sp, #4]

    // handle timeout/expire counters and USB packages
    MIOS32_MIDI_Periodic_mS();
 801034e:	f001 fcb1 	bl	8011cb4 <MIOS32_MIDI_Periodic_mS>

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 8010352:	4803      	ldr	r0, [pc, #12]	; (8010360 <TASK_MIDI_Hooks+0x30>)
 8010354:	f001 ff72 	bl	801223c <MIOS32_MIDI_Receive_Handler>

    // optional application specific hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_MIDI_Tick();
 8010358:	f7ff ffe8 	bl	801032c <APP_MIDI_Tick>
  }
 801035c:	e7ec      	b.n	8010338 <TASK_MIDI_Hooks+0x8>
 801035e:	bf00      	nop
 8010360:	080100f1 	.word	0x080100f1

08010364 <main>:

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8010364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 8010366:	2000      	movs	r0, #0
 8010368:	f002 fb40 	bl	80129ec <MIOS32_SYS_Init>
#endif
#ifndef MIOS32_DONT_USE_DELAY
  MIOS32_DELAY_Init(0);
 801036c:	2000      	movs	r0, #0
 801036e:	f003 fa29 	bl	80137c4 <MIOS32_DELAY_Init>
#endif
#ifndef MIOS32_DONT_USE_TIMESTAMP
  MIOS32_TIMESTAMP_Init(0);
 8010372:	2000      	movs	r0, #0
 8010374:	f002 fa62 	bl	801283c <MIOS32_TIMESTAMP_Init>
#endif
#ifndef MIOS32_DONT_USE_BOARD
  MIOS32_BOARD_Init(0);
 8010378:	2000      	movs	r0, #0
 801037a:	f003 f855 	bl	8013428 <MIOS32_BOARD_Init>
#endif
#ifndef MIOS32_DONT_USE_SPI
  MIOS32_SPI_Init(0);
 801037e:	2000      	movs	r0, #0
 8010380:	f002 fe26 	bl	8012fd0 <MIOS32_SPI_Init>
#endif
#ifndef MIOS32_DONT_USE_SRIO
  MIOS32_SRIO_Init(0);
 8010384:	2000      	movs	r0, #0
 8010386:	f000 fe97 	bl	80110b8 <MIOS32_SRIO_Init>
#endif
#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DIN_Init(0);
 801038a:	2000      	movs	r0, #0
 801038c:	f000 ff28 	bl	80111e0 <MIOS32_DIN_Init>
#endif
#if !defined(MIOS32_DONT_USE_DOUT) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DOUT_Init(0);
 8010390:	2000      	movs	r0, #0
 8010392:	f000 ff83 	bl	801129c <MIOS32_DOUT_Init>
#endif
#if !defined(MIOS32_DONT_USE_ENC) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_ENC_Init(0);
 8010396:	2000      	movs	r0, #0
 8010398:	f000 ff8e 	bl	80112b8 <MIOS32_ENC_Init>
#endif
#if !defined(MIOS32_DONT_USE_MF)
  MIOS32_MF_Init(0);
 801039c:	2000      	movs	r0, #0
 801039e:	f002 fa49 	bl	8012834 <MIOS32_MF_Init>
#endif
#if !defined(MIOS32_DONT_USE_AIN)
  MIOS32_AIN_Init(0);
 80103a2:	2000      	movs	r0, #0
 80103a4:	f003 fa3c 	bl	8013820 <MIOS32_AIN_Init>
#endif
#ifndef MIOS32_DONT_USE_IIC_BS
  MIOS32_IIC_BS_Init(0);
 80103a8:	2000      	movs	r0, #0
 80103aa:	f002 fa40 	bl	801282e <MIOS32_IIC_BS_Init>
#endif
#ifndef MIOS32_DONT_USE_MIDI
  MIOS32_MIDI_Init(0);
 80103ae:	2000      	movs	r0, #0
 80103b0:	f001 fa38 	bl	8011824 <MIOS32_MIDI_Init>
#endif
#ifndef MIOS32_DONT_USE_USB
  MIOS32_USB_Init(0);
 80103b4:	2000      	movs	r0, #0
 80103b6:	f003 fdc3 	bl	8013f40 <MIOS32_USB_Init>
#endif
#ifndef MIOS32_DONT_USE_OSC
  MIOS32_OSC_Init(0);
 80103ba:	2000      	movs	r0, #0
 80103bc:	f001 ffe6 	bl	801238c <MIOS32_OSC_Init>
#endif
#ifndef MIOS32_DONT_USE_COM
  MIOS32_COM_Init(0);
 80103c0:	2000      	movs	r0, #0
 80103c2:	f001 ffe9 	bl	8012398 <MIOS32_COM_Init>
#endif
#ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_Init(0);
 80103c6:	2000      	movs	r0, #0
 80103c8:	f001 f990 	bl	80116ec <MIOS32_LCD_Init>
#ifdef MIOS32_USE_I2S
  MIOS32_I2S_Init(0);
#endif

  // call C++ constructors
  __libc_init_array();
 80103cc:	f00b fd06 	bl	801bddc <__libc_init_array>

  // initialize application
  APP_Init();
 80103d0:	f7ff fe42 	bl	8010058 <APP_Init>

#if MIOS32_LCD_BOOT_MSG_DELAY
  // print boot message
# ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_PrintBootMessage();
 80103d4:	f001 f9f2 	bl	80117bc <MIOS32_LCD_PrintBootMessage>
 80103d8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
    MIOS32_DELAY_Wait_uS(1000);
 80103dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80103e0:	f003 fa12 	bl	8013808 <MIOS32_DELAY_Wait_uS>
# endif

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
 80103e4:	3c01      	subs	r4, #1
 80103e6:	d1f9      	bne.n	80103dc <main+0x78>
    MIOS32_DELAY_Wait_uS(1000);
# endif
#endif

  // start the task which calls the application hooks
  xTaskCreate(TASK_Hooks, "Hooks", (MIOS32_TASK_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 80103e8:	2503      	movs	r5, #3
 80103ea:	4623      	mov	r3, r4
 80103ec:	9500      	str	r5, [sp, #0]
 80103ee:	9401      	str	r4, [sp, #4]
 80103f0:	4909      	ldr	r1, [pc, #36]	; (8010418 <main+0xb4>)
 80103f2:	480a      	ldr	r0, [pc, #40]	; (801041c <main+0xb8>)
 80103f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103f8:	f000 f976 	bl	80106e8 <xTaskCreate>
#if !defined(MIOS32_DONT_USE_MIDI)
  xTaskCreate(TASK_MIDI_Hooks, "MIDI_Hooks", (MIOS32_TASK_MIDI_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 80103fc:	4908      	ldr	r1, [pc, #32]	; (8010420 <main+0xbc>)
 80103fe:	9500      	str	r5, [sp, #0]
 8010400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010404:	4623      	mov	r3, r4
 8010406:	9401      	str	r4, [sp, #4]
 8010408:	4806      	ldr	r0, [pc, #24]	; (8010424 <main+0xc0>)
 801040a:	f000 f96d 	bl	80106e8 <xTaskCreate>
#endif

  // start the scheduler
  vTaskStartScheduler();
 801040e:	f000 fa41 	bl	8010894 <vTaskStartScheduler>

  // Will only get here if there was not enough heap space to create the idle task
  return 0;
}
 8010412:	4620      	mov	r0, r4
 8010414:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010416:	bf00      	nop
 8010418:	0801c04e 	.word	0x0801c04e
 801041c:	080102e5 	.word	0x080102e5
 8010420:	0801c049 	.word	0x0801c049
 8010424:	08010331 	.word	0x08010331

08010428 <vApplicationTickHook>:
  APP_SRIO_ServiceFinish();
#endif
}

void vApplicationTickHook(void)
{
 8010428:	b508      	push	{r3, lr}
#if !defined(MIOS32_DONT_USE_TIMESTAMP)
  MIOS32_TIMESTAMP_Inc();
 801042a:	f002 fa11 	bl	8012850 <MIOS32_TIMESTAMP_Inc>
#endif

#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();
 801042e:	f7ff fec3 	bl	80101b8 <APP_SRIO_ServicePrepare>

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 8010432:	4802      	ldr	r0, [pc, #8]	; (801043c <vApplicationTickHook+0x14>)
#endif
}
 8010434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 8010438:	f000 be96 	b.w	8011168 <MIOS32_SRIO_ScanStart>
 801043c:	080102d5 	.word	0x080102d5

08010440 <vApplicationIdleHook>:
/////////////////////////////////////////////////////////////////////////////
// Idle Hook (called by FreeRTOS when nothing else to do)
/////////////////////////////////////////////////////////////////////////////
void vApplicationIdleHook(void)
{
  APP_Background();
 8010440:	f7ff be40 	b.w	80100c4 <APP_Background>

08010444 <_abort>:
// This function aborts any operations, but keeps MIDI alive (for uploading
// a new firmware)
// If MIDI isn't enabled, the status LED will be flashed
/////////////////////////////////////////////////////////////////////////////
void _abort(void)
{
 8010444:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_MIDI
  // keep MIDI alive, so that program code can be updated
  u32 delay_ctr = 0;
 8010446:	2400      	movs	r4, #0
  while( 1 ) {
    ++delay_ctr;
 8010448:	3401      	adds	r4, #1

    if( (delay_ctr % 100) == 0 ) {
 801044a:	2364      	movs	r3, #100	; 0x64
 801044c:	fbb4 f2f3 	udiv	r2, r4, r3
 8010450:	fb03 4012 	mls	r0, r3, r2, r4
 8010454:	b908      	cbnz	r0, 801045a <_abort+0x16>
      // handle timeout/expire counters and USB packages
      MIOS32_MIDI_Periodic_mS();
 8010456:	f001 fc2d 	bl	8011cb4 <MIOS32_MIDI_Periodic_mS>
    }

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 801045a:	4809      	ldr	r0, [pc, #36]	; (8010480 <_abort+0x3c>)
 801045c:	f001 feee 	bl	801223c <MIOS32_MIDI_Receive_Handler>

    if( (delay_ctr % 10000) == 0 ) {
 8010460:	f242 7110 	movw	r1, #10000	; 0x2710
 8010464:	fbb4 f3f1 	udiv	r3, r4, r1
 8010468:	fb01 4213 	mls	r2, r1, r3, r4
 801046c:	2a00      	cmp	r2, #0
 801046e:	d1eb      	bne.n	8010448 <_abort+0x4>
      // toggle board LED
      MIOS32_BOARD_LED_Set(1, ~MIOS32_BOARD_LED_Get());
 8010470:	f003 f820 	bl	80134b4 <MIOS32_BOARD_LED_Get>
 8010474:	43c1      	mvns	r1, r0
 8010476:	2001      	movs	r0, #1
 8010478:	f002 fffe 	bl	8013478 <MIOS32_BOARD_LED_Set>
 801047c:	e7e4      	b.n	8010448 <_abort+0x4>
 801047e:	bf00      	nop
 8010480:	080100f1 	.word	0x080100f1

08010484 <vApplicationMallocFailedHook>:

/////////////////////////////////////////////////////////////////////////////
// enabled in FreeRTOSConfig.h
/////////////////////////////////////////////////////////////////////////////
void vApplicationMallocFailedHook(void)
{
 8010484:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 8010486:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801048a:	f001 f9c7 	bl	801181c <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 801048e:	2000      	movs	r0, #0
 8010490:	f001 f9c6 	bl	8011820 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 8010494:	2000      	movs	r0, #0
 8010496:	f001 f8d7 	bl	8011648 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 801049a:	f001 f925 	bl	80116e8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 801049e:	2000      	movs	r0, #0
 80104a0:	4601      	mov	r1, r0
 80104a2:	f001 f8d7 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("FATAL: FreeRTOS "); // 16 chars
 80104a6:	4807      	ldr	r0, [pc, #28]	; (80104c4 <vApplicationMallocFailedHook+0x40>)
 80104a8:	f001 f97c 	bl	80117a4 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80104ac:	2101      	movs	r1, #1
 80104ae:	2000      	movs	r0, #0
 80104b0:	f001 f8d0 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Malloc Error!!! "); // 16 chars
 80104b4:	4804      	ldr	r0, [pc, #16]	; (80104c8 <vApplicationMallocFailedHook+0x44>)
 80104b6:	f001 f975 	bl	80117a4 <MIOS32_LCD_PrintString>
#endif

#ifndef MIOS32_DONT_USE_MIDI
  // Note: message won't be sent if MIDI task cannot be created!
  MIOS32_MIDI_SendDebugMessage("FATAL: FreeRTOS Malloc Error!!!\n");
 80104ba:	4804      	ldr	r0, [pc, #16]	; (80104cc <vApplicationMallocFailedHook+0x48>)
 80104bc:	f001 fbaa 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
#endif

  _abort();
 80104c0:	f7ff ffc0 	bl	8010444 <_abort>
 80104c4:	0801c054 	.word	0x0801c054
 80104c8:	0801c065 	.word	0x0801c065
 80104cc:	0801c076 	.word	0x0801c076

080104d0 <HardFault_Handler_c>:

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 80104d0:	b510      	push	{r4, lr}
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80104d2:	6803      	ldr	r3, [r0, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80104d4:	6841      	ldr	r1, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80104d6:	6882      	ldr	r2, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80104d8:	68c4      	ldr	r4, [r0, #12]

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 80104da:	b088      	sub	sp, #32
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80104dc:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80104de:	6903      	ldr	r3, [r0, #16]
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80104e0:	9101      	str	r1, [sp, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80104e2:	9202      	str	r2, [sp, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80104e4:	6941      	ldr	r1, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80104e6:	6982      	ldr	r2, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80104e8:	69c0      	ldr	r0, [r0, #28]
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80104ea:	9403      	str	r4, [sp, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80104ec:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
 80104ee:	4c33      	ldr	r4, [pc, #204]	; (80105bc <HardFault_Handler_c+0xec>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80104f0:	9105      	str	r1, [sp, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80104f2:	9206      	str	r2, [sp, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80104f4:	9007      	str	r0, [sp, #28]
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
 80104f6:	9906      	ldr	r1, [sp, #24]
 80104f8:	4831      	ldr	r0, [pc, #196]	; (80105c0 <HardFault_Handler_c+0xf0>)
 80104fa:	f001 fb8b 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 80104fe:	4620      	mov	r0, r4
 8010500:	f001 fb88 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
 8010504:	482f      	ldr	r0, [pc, #188]	; (80105c4 <HardFault_Handler_c+0xf4>)
 8010506:	f001 fb85 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801050a:	4620      	mov	r0, r4
 801050c:	f001 fb82 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010510:	9900      	ldr	r1, [sp, #0]
 8010512:	482d      	ldr	r0, [pc, #180]	; (80105c8 <HardFault_Handler_c+0xf8>)
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 8010514:	4c2d      	ldr	r4, [pc, #180]	; (80105cc <HardFault_Handler_c+0xfc>)
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010516:	f001 fb7d 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R1 = %08x\n", stacked_r1);
 801051a:	9901      	ldr	r1, [sp, #4]
 801051c:	482c      	ldr	r0, [pc, #176]	; (80105d0 <HardFault_Handler_c+0x100>)
 801051e:	f001 fb79 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R2 = %08x\n", stacked_r2);
 8010522:	9902      	ldr	r1, [sp, #8]
 8010524:	482b      	ldr	r0, [pc, #172]	; (80105d4 <HardFault_Handler_c+0x104>)
 8010526:	f001 fb75 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R3 = %08x\n", stacked_r3);
 801052a:	9903      	ldr	r1, [sp, #12]
 801052c:	482a      	ldr	r0, [pc, #168]	; (80105d8 <HardFault_Handler_c+0x108>)
 801052e:	f001 fb71 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R12 = %08x\n", stacked_r12);
 8010532:	9904      	ldr	r1, [sp, #16]
 8010534:	4829      	ldr	r0, [pc, #164]	; (80105dc <HardFault_Handler_c+0x10c>)
 8010536:	f001 fb6d 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("LR = %08x\n", stacked_lr);
 801053a:	9905      	ldr	r1, [sp, #20]
 801053c:	4828      	ldr	r0, [pc, #160]	; (80105e0 <HardFault_Handler_c+0x110>)
 801053e:	f001 fb69 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PC = %08x\n", stacked_pc);
 8010542:	9906      	ldr	r1, [sp, #24]
 8010544:	4827      	ldr	r0, [pc, #156]	; (80105e4 <HardFault_Handler_c+0x114>)
 8010546:	f001 fb65 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
 801054a:	9907      	ldr	r1, [sp, #28]
 801054c:	4826      	ldr	r0, [pc, #152]	; (80105e8 <HardFault_Handler_c+0x118>)
 801054e:	f001 fb61 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
 8010552:	4b26      	ldr	r3, [pc, #152]	; (80105ec <HardFault_Handler_c+0x11c>)
 8010554:	4826      	ldr	r0, [pc, #152]	; (80105f0 <HardFault_Handler_c+0x120>)
 8010556:	6819      	ldr	r1, [r3, #0]
 8010558:	f001 fb5c 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
 801055c:	4925      	ldr	r1, [pc, #148]	; (80105f4 <HardFault_Handler_c+0x124>)
 801055e:	4826      	ldr	r0, [pc, #152]	; (80105f8 <HardFault_Handler_c+0x128>)
 8010560:	6809      	ldr	r1, [r1, #0]
 8010562:	f001 fb57 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
 8010566:	4a25      	ldr	r2, [pc, #148]	; (80105fc <HardFault_Handler_c+0x12c>)
 8010568:	4825      	ldr	r0, [pc, #148]	; (8010600 <HardFault_Handler_c+0x130>)
 801056a:	6811      	ldr	r1, [r2, #0]
 801056c:	f001 fb52 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
 8010570:	4824      	ldr	r0, [pc, #144]	; (8010604 <HardFault_Handler_c+0x134>)
 8010572:	6801      	ldr	r1, [r0, #0]
 8010574:	4824      	ldr	r0, [pc, #144]	; (8010608 <HardFault_Handler_c+0x138>)
 8010576:	f001 fb4d 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 801057a:	6821      	ldr	r1, [r4, #0]
 801057c:	4823      	ldr	r0, [pc, #140]	; (801060c <HardFault_Handler_c+0x13c>)
 801057e:	f001 fb49 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>

#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 8010582:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010586:	f001 f949 	bl	801181c <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 801058a:	2000      	movs	r0, #0
 801058c:	f001 f948 	bl	8011820 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 8010590:	2000      	movs	r0, #0
 8010592:	f001 f859 	bl	8011648 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 8010596:	f001 f8a7 	bl	80116e8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 801059a:	2000      	movs	r0, #0
 801059c:	4601      	mov	r1, r0
 801059e:	f001 f859 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("!! HARD FAULT !!");
 80105a2:	481b      	ldr	r0, [pc, #108]	; (8010610 <HardFault_Handler_c+0x140>)
 80105a4:	f001 f8fe 	bl	80117a4 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80105a8:	2101      	movs	r1, #1
 80105aa:	2000      	movs	r0, #0
 80105ac:	f001 f852 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintFormattedString("at PC=0x%08x", stacked_pc);
 80105b0:	9906      	ldr	r1, [sp, #24]
 80105b2:	4818      	ldr	r0, [pc, #96]	; (8010614 <HardFault_Handler_c+0x144>)
 80105b4:	f001 f920 	bl	80117f8 <MIOS32_LCD_PrintFormattedString>
#endif

  _abort();
 80105b8:	f7ff ff44 	bl	8010444 <_abort>
 80105bc:	0801c0c0 	.word	0x0801c0c0
 80105c0:	0801c0aa 	.word	0x0801c0aa
 80105c4:	0801c0d4 	.word	0x0801c0d4
 80105c8:	0801c0e8 	.word	0x0801c0e8
 80105cc:	e000ed3c 	.word	0xe000ed3c
 80105d0:	0801c0f3 	.word	0x0801c0f3
 80105d4:	0801c0fe 	.word	0x0801c0fe
 80105d8:	0801c109 	.word	0x0801c109
 80105dc:	0801c114 	.word	0x0801c114
 80105e0:	0801c120 	.word	0x0801c120
 80105e4:	0801c0b5 	.word	0x0801c0b5
 80105e8:	0801c12b 	.word	0x0801c12b
 80105ec:	e000ed38 	.word	0xe000ed38
 80105f0:	0801c137 	.word	0x0801c137
 80105f4:	e000ed28 	.word	0xe000ed28
 80105f8:	0801c144 	.word	0x0801c144
 80105fc:	e000ed2c 	.word	0xe000ed2c
 8010600:	0801c151 	.word	0x0801c151
 8010604:	e000ed30 	.word	0xe000ed30
 8010608:	0801c15e 	.word	0x0801c15e
 801060c:	0801c16b 	.word	0x0801c16b
 8010610:	0801c178 	.word	0x0801c178
 8010614:	0801c189 	.word	0x0801c189

08010618 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
  __asm("TST LR, #4");
 8010618:	f01e 0f04 	tst.w	lr, #4
  __asm("ITE EQ");
 801061c:	bf0c      	ite	eq
  __asm("MRSEQ R0, MSP");
 801061e:	f3ef 8008 	mrseq	r0, MSP
  __asm("MRSNE R0, PSP");
 8010622:	f3ef 8009 	mrsne	r0, PSP
  __asm("B HardFault_Handler_c");
 8010626:	f7ff bf53 	b.w	80104d0 <HardFault_Handler_c>
 801062a:	4770      	bx	lr

0801062c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801062e:	4d1e      	ldr	r5, [pc, #120]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x7c>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010630:	4b1e      	ldr	r3, [pc, #120]	; (80106ac <prvAddCurrentTaskToDelayedList+0x80>)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010632:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010634:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010636:	6828      	ldr	r0, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010638:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801063a:	6829      	ldr	r1, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801063c:	2200      	movs	r2, #0
 801063e:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010642:	1d08      	adds	r0, r1, #4
 8010644:	f000 fb18 	bl	8010c78 <uxListRemove>
 8010648:	b948      	cbnz	r0, 801065e <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801064a:	4b19      	ldr	r3, [pc, #100]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x84>)
 801064c:	6819      	ldr	r1, [r3, #0]
 801064e:	6828      	ldr	r0, [r5, #0]
 8010650:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010652:	2001      	movs	r0, #1
 8010654:	fa00 f202 	lsl.w	r2, r0, r2
 8010658:	ea21 0102 	bic.w	r1, r1, r2
 801065c:	6019      	str	r1, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801065e:	1c63      	adds	r3, r4, #1
 8010660:	4811      	ldr	r0, [pc, #68]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8010662:	d107      	bne.n	8010674 <prvAddCurrentTaskToDelayedList+0x48>
 8010664:	b137      	cbz	r7, 8010674 <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010666:	6802      	ldr	r2, [r0, #0]
 8010668:	4812      	ldr	r0, [pc, #72]	; (80106b4 <prvAddCurrentTaskToDelayedList+0x88>)
 801066a:	1d11      	adds	r1, r2, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801066c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010670:	f000 bade 	b.w	8010c30 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010674:	19a4      	adds	r4, r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010676:	6802      	ldr	r2, [r0, #0]
 8010678:	4b0b      	ldr	r3, [pc, #44]	; (80106a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 801067a:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 801067c:	42b4      	cmp	r4, r6
 801067e:	d207      	bcs.n	8010690 <prvAddCurrentTaskToDelayedList+0x64>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010680:	490d      	ldr	r1, [pc, #52]	; (80106b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8010682:	6808      	ldr	r0, [r1, #0]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	1d19      	adds	r1, r3, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801068c:	f000 badc 	b.w	8010c48 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010690:	490a      	ldr	r1, [pc, #40]	; (80106bc <prvAddCurrentTaskToDelayedList+0x90>)
 8010692:	6808      	ldr	r0, [r1, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	1d19      	adds	r1, r3, #4
 8010698:	f000 fad6 	bl	8010c48 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 801069c:	4808      	ldr	r0, [pc, #32]	; (80106c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801069e:	6802      	ldr	r2, [r0, #0]
 80106a0:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80106a2:	bf38      	it	cc
 80106a4:	6004      	strcc	r4, [r0, #0]
 80106a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106a8:	200001ec 	.word	0x200001ec
 80106ac:	200001f4 	.word	0x200001f4
 80106b0:	20000244 	.word	0x20000244
 80106b4:	20000230 	.word	0x20000230
 80106b8:	200001f8 	.word	0x200001f8
 80106bc:	2000014c 	.word	0x2000014c
 80106c0:	200001f0 	.word	0x200001f0

080106c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106c4:	4a06      	ldr	r2, [pc, #24]	; (80106e0 <prvResetNextTaskUnblockTime+0x1c>)
 80106c6:	4807      	ldr	r0, [pc, #28]	; (80106e4 <prvResetNextTaskUnblockTime+0x20>)
 80106c8:	6813      	ldr	r3, [r2, #0]
 80106ca:	6819      	ldr	r1, [r3, #0]
 80106cc:	b911      	cbnz	r1, 80106d4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80106ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106d2:	e003      	b.n	80106dc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80106d4:	6812      	ldr	r2, [r2, #0]
 80106d6:	68d3      	ldr	r3, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80106d8:	68d9      	ldr	r1, [r3, #12]
 80106da:	684a      	ldr	r2, [r1, #4]
 80106dc:	6002      	str	r2, [r0, #0]
 80106de:	4770      	bx	lr
 80106e0:	2000014c 	.word	0x2000014c
 80106e4:	200001f0 	.word	0x200001f0

080106e8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106ec:	ea4f 0b82 	mov.w	fp, r2, lsl #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106f0:	4681      	mov	r9, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106f2:	4658      	mov	r0, fp
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106f4:	460e      	mov	r6, r1
 80106f6:	4692      	mov	sl, r2
 80106f8:	4698      	mov	r8, r3
 80106fa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106fc:	f000 fbb6 	bl	8010e6c <pvPortMalloc>

			if( pxStack != NULL )
 8010700:	4605      	mov	r5, r0
 8010702:	2800      	cmp	r0, #0
 8010704:	f000 80a5 	beq.w	8010852 <xTaskCreate+0x16a>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010708:	2050      	movs	r0, #80	; 0x50
 801070a:	f000 fbaf 	bl	8010e6c <pvPortMalloc>

				if( pxNewTCB != NULL )
 801070e:	4604      	mov	r4, r0
 8010710:	b170      	cbz	r0, 8010730 <xTaskCreate+0x48>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010712:	6305      	str	r5, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010714:	465a      	mov	r2, fp
 8010716:	4628      	mov	r0, r5
 8010718:	21a5      	movs	r1, #165	; 0xa5
 801071a:	f00b fb8e 	bl	801be3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801071e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010720:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010724:	eb03 008a 	add.w	r0, r3, sl, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010728:	f020 0b07 	bic.w	fp, r0, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801072c:	2500      	movs	r5, #0
 801072e:	e006      	b.n	801073e <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010730:	4628      	mov	r0, r5
 8010732:	f000 fc1b 	bl	8010f6c <vPortFree>
 8010736:	e08c      	b.n	8010852 <xTaskCreate+0x16a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010738:	3501      	adds	r5, #1
 801073a:	2d10      	cmp	r5, #16
 801073c:	d006      	beq.n	801074c <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801073e:	5d72      	ldrb	r2, [r6, r5]
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 8010740:	1961      	adds	r1, r4, r5
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010742:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010746:	5d73      	ldrb	r3, [r6, r5]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1f5      	bne.n	8010738 <xTaskCreate+0x50>
 801074c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801074e:	2500      	movs	r5, #0
 8010750:	2e04      	cmp	r6, #4
 8010752:	bf34      	ite	cc
 8010754:	46b2      	movcc	sl, r6
 8010756:	f04f 0a04 	movcs.w	sl, #4
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801075a:	1d26      	adds	r6, r4, #4
 801075c:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801075e:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010762:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010766:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801076a:	64a5      	str	r5, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801076c:	f000 fa5d 	bl	8010c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010770:	f104 0018 	add.w	r0, r4, #24
 8010774:	f000 fa59 	bl	8010c2a <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010778:	f1ca 0005 	rsb	r0, sl, #5
 801077c:	61a0      	str	r0, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801077e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010780:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8010782:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010786:	4658      	mov	r0, fp
 8010788:	4649      	mov	r1, r9
 801078a:	4642      	mov	r2, r8
 801078c:	f000 fa9e 	bl	8010ccc <pxPortInitialiseStack>
 8010790:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010792:	b107      	cbz	r7, 8010796 <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010794:	603c      	str	r4, [r7, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010796:	f000 fac3 	bl	8010d20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801079a:	4a30      	ldr	r2, [pc, #192]	; (801085c <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 801079c:	4830      	ldr	r0, [pc, #192]	; (8010860 <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 801079e:	6811      	ldr	r1, [r2, #0]
 80107a0:	1c4b      	adds	r3, r1, #1
 80107a2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80107a4:	6805      	ldr	r5, [r0, #0]
 80107a6:	bb15      	cbnz	r5, 80107ee <xTaskCreate+0x106>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80107a8:	6004      	str	r4, [r0, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80107aa:	6810      	ldr	r0, [r2, #0]
 80107ac:	2801      	cmp	r0, #1
 80107ae:	d127      	bne.n	8010800 <xTaskCreate+0x118>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80107b0:	4a2c      	ldr	r2, [pc, #176]	; (8010864 <xTaskCreate+0x17c>)
 80107b2:	2714      	movs	r7, #20
 80107b4:	fb07 2005 	mla	r0, r7, r5, r2

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107b8:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80107ba:	f000 fa2b 	bl	8010c14 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107be:	2d05      	cmp	r5, #5
 80107c0:	d1f6      	bne.n	80107b0 <xTaskCreate+0xc8>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80107c2:	4f29      	ldr	r7, [pc, #164]	; (8010868 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList2 );
 80107c4:	4d29      	ldr	r5, [pc, #164]	; (801086c <xTaskCreate+0x184>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80107c6:	4638      	mov	r0, r7
 80107c8:	f000 fa24 	bl	8010c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80107cc:	4628      	mov	r0, r5
 80107ce:	f000 fa21 	bl	8010c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80107d2:	4827      	ldr	r0, [pc, #156]	; (8010870 <xTaskCreate+0x188>)
 80107d4:	f000 fa1e 	bl	8010c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80107d8:	4826      	ldr	r0, [pc, #152]	; (8010874 <xTaskCreate+0x18c>)
 80107da:	f000 fa1b 	bl	8010c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80107de:	4826      	ldr	r0, [pc, #152]	; (8010878 <xTaskCreate+0x190>)
 80107e0:	f000 fa18 	bl	8010c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107e4:	4925      	ldr	r1, [pc, #148]	; (801087c <xTaskCreate+0x194>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107e6:	4b26      	ldr	r3, [pc, #152]	; (8010880 <xTaskCreate+0x198>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107e8:	600f      	str	r7, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107ea:	601d      	str	r5, [r3, #0]
 80107ec:	e008      	b.n	8010800 <xTaskCreate+0x118>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80107ee:	4d25      	ldr	r5, [pc, #148]	; (8010884 <xTaskCreate+0x19c>)
 80107f0:	682a      	ldr	r2, [r5, #0]
 80107f2:	b92a      	cbnz	r2, 8010800 <xTaskCreate+0x118>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80107f4:	6801      	ldr	r1, [r0, #0]
 80107f6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80107f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80107fa:	42ab      	cmp	r3, r5
				{
					pxCurrentTCB = pxNewTCB;
 80107fc:	bf98      	it	ls
 80107fe:	6004      	strls	r4, [r0, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010800:	4821      	ldr	r0, [pc, #132]	; (8010888 <xTaskCreate+0x1a0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010804:	6802      	ldr	r2, [r0, #0]
 8010806:	1c55      	adds	r5, r2, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010808:	4a20      	ldr	r2, [pc, #128]	; (801088c <xTaskCreate+0x1a4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801080a:	6005      	str	r5, [r0, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801080c:	6811      	ldr	r1, [r2, #0]
 801080e:	2501      	movs	r5, #1
 8010810:	fa05 f003 	lsl.w	r0, r5, r3
 8010814:	4301      	orrs	r1, r0
 8010816:	6011      	str	r1, [r2, #0]
 8010818:	4a12      	ldr	r2, [pc, #72]	; (8010864 <xTaskCreate+0x17c>)
 801081a:	2014      	movs	r0, #20
 801081c:	fb00 2003 	mla	r0, r0, r3, r2
 8010820:	4631      	mov	r1, r6
 8010822:	f000 fa05 	bl	8010c30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010826:	f000 fa8b 	bl	8010d40 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801082a:	4b16      	ldr	r3, [pc, #88]	; (8010884 <xTaskCreate+0x19c>)
 801082c:	6819      	ldr	r1, [r3, #0]
 801082e:	b169      	cbz	r1, 801084c <xTaskCreate+0x164>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010830:	480b      	ldr	r0, [pc, #44]	; (8010860 <xTaskCreate+0x178>)
 8010832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010834:	6802      	ldr	r2, [r0, #0]
 8010836:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010838:	4299      	cmp	r1, r3
 801083a:	d207      	bcs.n	801084c <xTaskCreate+0x164>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801083c:	4a14      	ldr	r2, [pc, #80]	; (8010890 <xTaskCreate+0x1a8>)
 801083e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010842:	6010      	str	r0, [r2, #0]
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 801084c:	4628      	mov	r0, r5
 801084e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}

		return xReturn;
	}
 8010856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085a:	bf00      	nop
 801085c:	20000214 	.word	0x20000214
 8010860:	200001ec 	.word	0x200001ec
 8010864:	20000170 	.word	0x20000170
 8010868:	20000158 	.word	0x20000158
 801086c:	20000218 	.word	0x20000218
 8010870:	200001fc 	.word	0x200001fc
 8010874:	200001d4 	.word	0x200001d4
 8010878:	20000230 	.word	0x20000230
 801087c:	2000014c 	.word	0x2000014c
 8010880:	200001f8 	.word	0x200001f8
 8010884:	20000150 	.word	0x20000150
 8010888:	20000210 	.word	0x20000210
 801088c:	20000244 	.word	0x20000244
 8010890:	e000ed04 	.word	0xe000ed04

08010894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010894:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010896:	4b12      	ldr	r3, [pc, #72]	; (80108e0 <vTaskStartScheduler+0x4c>)
 8010898:	4812      	ldr	r0, [pc, #72]	; (80108e4 <vTaskStartScheduler+0x50>)
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	2400      	movs	r4, #0
 801089e:	9400      	str	r4, [sp, #0]
 80108a0:	4911      	ldr	r1, [pc, #68]	; (80108e8 <vTaskStartScheduler+0x54>)
 80108a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108a6:	4623      	mov	r3, r4
 80108a8:	f7ff ff1e 	bl	80106e8 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80108ac:	2801      	cmp	r0, #1
 80108ae:	d114      	bne.n	80108da <vTaskStartScheduler+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108b0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108c0:	490a      	ldr	r1, [pc, #40]	; (80108ec <vTaskStartScheduler+0x58>)
		xSchedulerRunning = pdTRUE;
 80108c2:	4b0b      	ldr	r3, [pc, #44]	; (80108f0 <vTaskStartScheduler+0x5c>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108c8:	600a      	str	r2, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80108ca:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80108cc:	4809      	ldr	r0, [pc, #36]	; (80108f4 <vTaskStartScheduler+0x60>)
 80108ce:	6004      	str	r4, [r0, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80108d0:	b002      	add	sp, #8
 80108d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80108d6:	f000 ba8d 	b.w	8010df4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80108da:	b002      	add	sp, #8
 80108dc:	bd10      	pop	{r4, pc}
 80108de:	bf00      	nop
 80108e0:	2000022c 	.word	0x2000022c
 80108e4:	08010ae9 	.word	0x08010ae9
 80108e8:	0801c196 	.word	0x0801c196
 80108ec:	200001f0 	.word	0x200001f0
 80108f0:	20000150 	.word	0x20000150
 80108f4:	200001f4 	.word	0x200001f4

080108f8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80108f8:	4b02      	ldr	r3, [pc, #8]	; (8010904 <vTaskSuspendAll+0xc>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	1c50      	adds	r0, r2, #1
 80108fe:	6018      	str	r0, [r3, #0]
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	20000154 	.word	0x20000154

08010908 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010908:	4b01      	ldr	r3, [pc, #4]	; (8010910 <xTaskGetTickCount+0x8>)
 801090a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop
 8010910:	200001f4 	.word	0x200001f4

08010914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010916:	4b35      	ldr	r3, [pc, #212]	; (80109ec <xTaskIncrementTick+0xd8>)
 8010918:	6818      	ldr	r0, [r3, #0]
 801091a:	2800      	cmp	r0, #0
 801091c:	d136      	bne.n	801098c <xTaskIncrementTick+0x78>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 801091e:	4b34      	ldr	r3, [pc, #208]	; (80109f0 <xTaskIncrementTick+0xdc>)
 8010920:	681e      	ldr	r6, [r3, #0]
 8010922:	3601      	adds	r6, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010924:	601e      	str	r6, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8010926:	b95e      	cbnz	r6, 8010940 <xTaskIncrementTick+0x2c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010928:	4a32      	ldr	r2, [pc, #200]	; (80109f4 <xTaskIncrementTick+0xe0>)
 801092a:	4d33      	ldr	r5, [pc, #204]	; (80109f8 <xTaskIncrementTick+0xe4>)
 801092c:	6811      	ldr	r1, [r2, #0]
 801092e:	6828      	ldr	r0, [r5, #0]
 8010930:	4b32      	ldr	r3, [pc, #200]	; (80109fc <xTaskIncrementTick+0xe8>)
 8010932:	6010      	str	r0, [r2, #0]
 8010934:	6029      	str	r1, [r5, #0]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	1c51      	adds	r1, r2, #1
 801093a:	6019      	str	r1, [r3, #0]
 801093c:	f7ff fec2 	bl	80106c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010940:	4d2f      	ldr	r5, [pc, #188]	; (8010a00 <xTaskIncrementTick+0xec>)
 8010942:	6828      	ldr	r0, [r5, #0]
 8010944:	2500      	movs	r5, #0
 8010946:	4286      	cmp	r6, r0
 8010948:	d310      	bcc.n	801096c <xTaskIncrementTick+0x58>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801094a:	4b2a      	ldr	r3, [pc, #168]	; (80109f4 <xTaskIncrementTick+0xe0>)
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	6811      	ldr	r1, [r2, #0]
 8010950:	b921      	cbnz	r1, 801095c <xTaskIncrementTick+0x48>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010952:	4b2b      	ldr	r3, [pc, #172]	; (8010a00 <xTaskIncrementTick+0xec>)
 8010954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010958:	6018      	str	r0, [r3, #0]
					break;
 801095a:	e007      	b.n	801096c <xTaskIncrementTick+0x58>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801095c:	681c      	ldr	r4, [r3, #0]
 801095e:	68e0      	ldr	r0, [r4, #12]
 8010960:	68c4      	ldr	r4, [r0, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010962:	6863      	ldr	r3, [r4, #4]

					if( xConstTickCount < xItemValue )
 8010964:	429e      	cmp	r6, r3
 8010966:	d21f      	bcs.n	80109a8 <xTaskIncrementTick+0x94>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010968:	4925      	ldr	r1, [pc, #148]	; (8010a00 <xTaskIncrementTick+0xec>)
 801096a:	600b      	str	r3, [r1, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801096c:	4a25      	ldr	r2, [pc, #148]	; (8010a04 <xTaskIncrementTick+0xf0>)
 801096e:	6811      	ldr	r1, [r2, #0]
 8010970:	4a25      	ldr	r2, [pc, #148]	; (8010a08 <xTaskIncrementTick+0xf4>)
 8010972:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8010974:	2314      	movs	r3, #20
 8010976:	4358      	muls	r0, r3
 8010978:	5811      	ldr	r1, [r2, r0]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801097a:	4824      	ldr	r0, [pc, #144]	; (8010a0c <xTaskIncrementTick+0xf8>)
 801097c:	6803      	ldr	r3, [r0, #0]
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 801097e:	2901      	cmp	r1, #1
 8010980:	bf88      	it	hi
 8010982:	2501      	movhi	r5, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8010984:	b94b      	cbnz	r3, 801099a <xTaskIncrementTick+0x86>
			{
				vApplicationTickHook();
 8010986:	f7ff fd4f 	bl	8010428 <vApplicationTickHook>
 801098a:	e006      	b.n	801099a <xTaskIncrementTick+0x86>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801098c:	491f      	ldr	r1, [pc, #124]	; (8010a0c <xTaskIncrementTick+0xf8>)
 801098e:	680a      	ldr	r2, [r1, #0]
 8010990:	1c55      	adds	r5, r2, #1
 8010992:	600d      	str	r5, [r1, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010994:	f7ff fd48 	bl	8010428 <vApplicationTickHook>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010998:	2500      	movs	r5, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801099a:	4a1d      	ldr	r2, [pc, #116]	; (8010a10 <xTaskIncrementTick+0xfc>)
 801099c:	6811      	ldr	r1, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 801099e:	2900      	cmp	r1, #0
 80109a0:	bf0c      	ite	eq
 80109a2:	4628      	moveq	r0, r5
 80109a4:	2001      	movne	r0, #1
 80109a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109a8:	1d27      	adds	r7, r4, #4
 80109aa:	4638      	mov	r0, r7
 80109ac:	f000 f964 	bl	8010c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80109b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80109b2:	b11a      	cbz	r2, 80109bc <xTaskIncrementTick+0xa8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109b4:	f104 0018 	add.w	r0, r4, #24
 80109b8:	f000 f95e 	bl	8010c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80109bc:	4a15      	ldr	r2, [pc, #84]	; (8010a14 <xTaskIncrementTick+0x100>)
 80109be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109c0:	6810      	ldr	r0, [r2, #0]
 80109c2:	2101      	movs	r1, #1
 80109c4:	fa01 f103 	lsl.w	r1, r1, r3
 80109c8:	4301      	orrs	r1, r0
 80109ca:	6011      	str	r1, [r2, #0]
 80109cc:	4a0e      	ldr	r2, [pc, #56]	; (8010a08 <xTaskIncrementTick+0xf4>)
 80109ce:	2014      	movs	r0, #20
 80109d0:	fb00 2003 	mla	r0, r0, r3, r2
 80109d4:	4639      	mov	r1, r7
 80109d6:	f000 f92b 	bl	8010c30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109da:	4b0a      	ldr	r3, [pc, #40]	; (8010a04 <xTaskIncrementTick+0xf0>)
 80109dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80109de:	6819      	ldr	r1, [r3, #0]
 80109e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 80109e2:	4290      	cmp	r0, r2
 80109e4:	bf28      	it	cs
 80109e6:	2501      	movcs	r5, #1
 80109e8:	e7af      	b.n	801094a <xTaskIncrementTick+0x36>
 80109ea:	bf00      	nop
 80109ec:	20000154 	.word	0x20000154
 80109f0:	200001f4 	.word	0x200001f4
 80109f4:	2000014c 	.word	0x2000014c
 80109f8:	200001f8 	.word	0x200001f8
 80109fc:	20000148 	.word	0x20000148
 8010a00:	200001f0 	.word	0x200001f0
 8010a04:	200001ec 	.word	0x200001ec
 8010a08:	20000170 	.word	0x20000170
 8010a0c:	2000016c 	.word	0x2000016c
 8010a10:	20000248 	.word	0x20000248
 8010a14:	20000244 	.word	0x20000244

08010a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a18:	b570      	push	{r4, r5, r6, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a1a:	f000 f981 	bl	8010d20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a1e:	4b29      	ldr	r3, [pc, #164]	; (8010ac4 <xTaskResumeAll+0xac>)
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	1e50      	subs	r0, r2, #1
 8010a24:	6018      	str	r0, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a26:	681c      	ldr	r4, [r3, #0]
 8010a28:	b10c      	cbz	r4, 8010a2e <xTaskResumeAll+0x16>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8010a2a:	2400      	movs	r4, #0
 8010a2c:	e045      	b.n	8010aba <xTaskResumeAll+0xa2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a2e:	4926      	ldr	r1, [pc, #152]	; (8010ac8 <xTaskResumeAll+0xb0>)
 8010a30:	680b      	ldr	r3, [r1, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0f9      	beq.n	8010a2a <xTaskResumeAll+0x12>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a36:	4d25      	ldr	r5, [pc, #148]	; (8010acc <xTaskResumeAll+0xb4>)
 8010a38:	682a      	ldr	r2, [r5, #0]
 8010a3a:	b30a      	cbz	r2, 8010a80 <xTaskResumeAll+0x68>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010a3c:	68ee      	ldr	r6, [r5, #12]
 8010a3e:	68f4      	ldr	r4, [r6, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a40:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a42:	f104 0018 	add.w	r0, r4, #24
 8010a46:	f000 f917 	bl	8010c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f000 f914 	bl	8010c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a50:	4a1f      	ldr	r2, [pc, #124]	; (8010ad0 <xTaskResumeAll+0xb8>)
 8010a52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010a54:	6811      	ldr	r1, [r2, #0]
 8010a56:	2501      	movs	r5, #1
 8010a58:	fa05 f003 	lsl.w	r0, r5, r3
 8010a5c:	4301      	orrs	r1, r0
 8010a5e:	6011      	str	r1, [r2, #0]
 8010a60:	4a1c      	ldr	r2, [pc, #112]	; (8010ad4 <xTaskResumeAll+0xbc>)
 8010a62:	2014      	movs	r0, #20
 8010a64:	fb00 2003 	mla	r0, r0, r3, r2
 8010a68:	4631      	mov	r1, r6
 8010a6a:	f000 f8e1 	bl	8010c30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a6e:	4b1a      	ldr	r3, [pc, #104]	; (8010ad8 <xTaskResumeAll+0xc0>)
 8010a70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010a72:	6819      	ldr	r1, [r3, #0]
 8010a74:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010a76:	4290      	cmp	r0, r2
					{
						xYieldPending = pdTRUE;
 8010a78:	bf24      	itt	cs
 8010a7a:	4818      	ldrcs	r0, [pc, #96]	; (8010adc <xTaskResumeAll+0xc4>)
 8010a7c:	6005      	strcs	r5, [r0, #0]
 8010a7e:	e7da      	b.n	8010a36 <xTaskResumeAll+0x1e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010a80:	b10c      	cbz	r4, 8010a86 <xTaskResumeAll+0x6e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010a82:	f7ff fe1f 	bl	80106c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010a86:	4816      	ldr	r0, [pc, #88]	; (8010ae0 <xTaskResumeAll+0xc8>)
 8010a88:	6804      	ldr	r4, [r0, #0]
 8010a8a:	4605      	mov	r5, r0

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010a8c:	b144      	cbz	r4, 8010aa0 <xTaskResumeAll+0x88>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010a8e:	f7ff ff41 	bl	8010914 <xTaskIncrementTick>
 8010a92:	b110      	cbz	r0, 8010a9a <xTaskResumeAll+0x82>
							{
								xYieldPending = pdTRUE;
 8010a94:	4b11      	ldr	r3, [pc, #68]	; (8010adc <xTaskResumeAll+0xc4>)
 8010a96:	2101      	movs	r1, #1
 8010a98:	6019      	str	r1, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010a9a:	3c01      	subs	r4, #1
 8010a9c:	d1f7      	bne.n	8010a8e <xTaskResumeAll+0x76>

						uxPendedTicks = 0;
 8010a9e:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010aa0:	4a0e      	ldr	r2, [pc, #56]	; (8010adc <xTaskResumeAll+0xc4>)
 8010aa2:	6810      	ldr	r0, [r2, #0]
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d0c0      	beq.n	8010a2a <xTaskResumeAll+0x12>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010aa8:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <xTaskResumeAll+0xcc>)
 8010aaa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8010aae:	6019      	str	r1, [r3, #0]
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010ab8:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010aba:	f000 f941 	bl	8010d40 <vPortExitCritical>

	return xAlreadyYielded;
}
 8010abe:	4620      	mov	r0, r4
 8010ac0:	bd70      	pop	{r4, r5, r6, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20000154 	.word	0x20000154
 8010ac8:	20000214 	.word	0x20000214
 8010acc:	200001fc 	.word	0x200001fc
 8010ad0:	20000244 	.word	0x20000244
 8010ad4:	20000170 	.word	0x20000170
 8010ad8:	200001ec 	.word	0x200001ec
 8010adc:	20000248 	.word	0x20000248
 8010ae0:	2000016c 	.word	0x2000016c
 8010ae4:	e000ed04 	.word	0xe000ed04

08010ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ae8:	b570      	push	{r4, r5, r6, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010aea:	4c18      	ldr	r4, [pc, #96]	; (8010b4c <prvIdleTask+0x64>)
 8010aec:	6823      	ldr	r3, [r4, #0]
 8010aee:	b1f3      	cbz	r3, 8010b2e <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010af0:	4d17      	ldr	r5, [pc, #92]	; (8010b50 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
 8010af2:	f7ff ff01 	bl	80108f8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010af6:	682e      	ldr	r6, [r5, #0]
			}
			( void ) xTaskResumeAll();
 8010af8:	f7ff ff8e 	bl	8010a18 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8010afc:	2e00      	cmp	r6, #0
 8010afe:	d0f4      	beq.n	8010aea <prvIdleTask+0x2>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8010b00:	f000 f90e 	bl	8010d20 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010b04:	68eb      	ldr	r3, [r5, #12]
 8010b06:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b08:	1d28      	adds	r0, r5, #4
 8010b0a:	f000 f8b5 	bl	8010c78 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010b0e:	4811      	ldr	r0, [pc, #68]	; (8010b54 <prvIdleTask+0x6c>)
 8010b10:	6801      	ldr	r1, [r0, #0]
 8010b12:	1e4a      	subs	r2, r1, #1
 8010b14:	6002      	str	r2, [r0, #0]
					--uxDeletedTasksWaitingCleanUp;
 8010b16:	6826      	ldr	r6, [r4, #0]
 8010b18:	1e73      	subs	r3, r6, #1
 8010b1a:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8010b1c:	f000 f910 	bl	8010d40 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010b20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010b22:	f000 fa23 	bl	8010f6c <vPortFree>
			vPortFree( pxTCB );
 8010b26:	4628      	mov	r0, r5
 8010b28:	f000 fa20 	bl	8010f6c <vPortFree>
 8010b2c:	e7dd      	b.n	8010aea <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b2e:	480a      	ldr	r0, [pc, #40]	; (8010b58 <prvIdleTask+0x70>)
 8010b30:	6801      	ldr	r1, [r0, #0]
 8010b32:	2901      	cmp	r1, #1
 8010b34:	d907      	bls.n	8010b46 <prvIdleTask+0x5e>
			{
				taskYIELD();
 8010b36:	4d09      	ldr	r5, [pc, #36]	; (8010b5c <prvIdleTask+0x74>)
 8010b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b3c:	602a      	str	r2, [r5, #0]
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010b46:	f7ff fc7b 	bl	8010440 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8010b4a:	e7ce      	b.n	8010aea <prvIdleTask+0x2>
 8010b4c:	200001e8 	.word	0x200001e8
 8010b50:	200001d4 	.word	0x200001d4
 8010b54:	20000214 	.word	0x20000214
 8010b58:	20000170 	.word	0x20000170
 8010b5c:	e000ed04 	.word	0xe000ed04

08010b60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010b60:	b538      	push	{r3, r4, r5, lr}
 8010b62:	4604      	mov	r4, r0
 8010b64:	460d      	mov	r5, r1

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8010b66:	f7ff fec7 	bl	80108f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010b6a:	4b13      	ldr	r3, [pc, #76]	; (8010bb8 <vTaskDelayUntil+0x58>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010b6c:	6822      	ldr	r2, [r4, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010b6e:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 8010b70:	4290      	cmp	r0, r2
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010b72:	eb05 0102 	add.w	r1, r5, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 8010b76:	d202      	bcs.n	8010b7e <vTaskDelayUntil+0x1e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010b78:	4291      	cmp	r1, r2
 8010b7a:	d207      	bcs.n	8010b8c <vTaskDelayUntil+0x2c>
 8010b7c:	e001      	b.n	8010b82 <vTaskDelayUntil+0x22>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010b7e:	4291      	cmp	r1, r2
 8010b80:	d306      	bcc.n	8010b90 <vTaskDelayUntil+0x30>
 8010b82:	4281      	cmp	r1, r0
 8010b84:	bf94      	ite	ls
 8010b86:	2200      	movls	r2, #0
 8010b88:	2201      	movhi	r2, #1
 8010b8a:	e002      	b.n	8010b92 <vTaskDelayUntil+0x32>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	e000      	b.n	8010b92 <vTaskDelayUntil+0x32>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 8010b90:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010b92:	6021      	str	r1, [r4, #0]

			if( xShouldDelay != pdFALSE )
 8010b94:	b11a      	cbz	r2, 8010b9e <vTaskDelayUntil+0x3e>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010b96:	1a08      	subs	r0, r1, r0
 8010b98:	2100      	movs	r1, #0
 8010b9a:	f7ff fd47 	bl	801062c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010b9e:	f7ff ff3b 	bl	8010a18 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ba2:	b938      	cbnz	r0, 8010bb4 <vTaskDelayUntil+0x54>
		{
			portYIELD_WITHIN_API();
 8010ba4:	4b05      	ldr	r3, [pc, #20]	; (8010bbc <vTaskDelayUntil+0x5c>)
 8010ba6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010baa:	6018      	str	r0, [r3, #0]
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	bd38      	pop	{r3, r4, r5, pc}
 8010bb6:	bf00      	nop
 8010bb8:	200001f4 	.word	0x200001f4
 8010bbc:	e000ed04 	.word	0xe000ed04

08010bc0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010bc0:	4b0f      	ldr	r3, [pc, #60]	; (8010c00 <vTaskSwitchContext+0x40>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	4b0f      	ldr	r3, [pc, #60]	; (8010c04 <vTaskSwitchContext+0x44>)
 8010bc6:	b10a      	cbz	r2, 8010bcc <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010bc8:	2201      	movs	r2, #1
 8010bca:	e017      	b.n	8010bfc <vTaskSwitchContext+0x3c>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010bcc:	480e      	ldr	r0, [pc, #56]	; (8010c08 <vTaskSwitchContext+0x48>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8010bce:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010bd0:	6801      	ldr	r1, [r0, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8010bd2:	fab1 f381 	clz	r3, r1
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	4b0c      	ldr	r3, [pc, #48]	; (8010c0c <vTaskSwitchContext+0x4c>)
 8010bda:	2114      	movs	r1, #20
 8010bdc:	f1c2 001f 	rsb	r0, r2, #31
 8010be0:	fb01 3000 	mla	r0, r1, r0, r3
 8010be4:	f100 0108 	add.w	r1, r0, #8
 8010be8:	6842      	ldr	r2, [r0, #4]
 8010bea:	6853      	ldr	r3, [r2, #4]
 8010bec:	428b      	cmp	r3, r1
 8010bee:	6043      	str	r3, [r0, #4]
 8010bf0:	bf04      	itt	eq
 8010bf2:	685b      	ldreq	r3, [r3, #4]
 8010bf4:	6043      	streq	r3, [r0, #4]
 8010bf6:	6840      	ldr	r0, [r0, #4]
 8010bf8:	4b05      	ldr	r3, [pc, #20]	; (8010c10 <vTaskSwitchContext+0x50>)
 8010bfa:	68c2      	ldr	r2, [r0, #12]
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	4770      	bx	lr
 8010c00:	20000154 	.word	0x20000154
 8010c04:	20000248 	.word	0x20000248
 8010c08:	20000244 	.word	0x20000244
 8010c0c:	20000170 	.word	0x20000170
 8010c10:	200001ec 	.word	0x200001ec

08010c14 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c14:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010c1c:	2100      	movs	r1, #0
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c1e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010c20:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c22:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c24:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010c26:	6001      	str	r1, [r0, #0]
 8010c28:	4770      	bx	lr

08010c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	6103      	str	r3, [r0, #16]
 8010c2e:	4770      	bx	lr

08010c30 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c30:	6843      	ldr	r3, [r0, #4]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010c32:	6108      	str	r0, [r1, #16]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c34:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c38:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c3a:	689a      	ldr	r2, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;
 8010c3c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c3e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8010c40:	6801      	ldr	r1, [r0, #0]
 8010c42:	1c4b      	adds	r3, r1, #1
 8010c44:	6003      	str	r3, [r0, #0]
 8010c46:	4770      	bx	lr

08010c48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c48:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c4a:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c4c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c4e:	d101      	bne.n	8010c54 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c50:	6903      	ldr	r3, [r0, #16]
 8010c52:	e007      	b.n	8010c64 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c54:	f100 0308 	add.w	r3, r0, #8
 8010c58:	685c      	ldr	r4, [r3, #4]
 8010c5a:	6825      	ldr	r5, [r4, #0]
 8010c5c:	4295      	cmp	r5, r2
 8010c5e:	d801      	bhi.n	8010c64 <vListInsert+0x1c>
 8010c60:	4623      	mov	r3, r4
 8010c62:	e7f9      	b.n	8010c58 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c64:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010c66:	6108      	str	r0, [r1, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c68:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c6a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;
 8010c6c:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 8010c6e:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8010c70:	6801      	ldr	r1, [r0, #0]
 8010c72:	1c4b      	adds	r3, r1, #1
 8010c74:	6003      	str	r3, [r0, #0]
 8010c76:	bd30      	pop	{r4, r5, pc}

08010c78 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c78:	6841      	ldr	r1, [r0, #4]
 8010c7a:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010c7c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c7e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c80:	6882      	ldr	r2, [r0, #8]
 8010c82:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c84:	6859      	ldr	r1, [r3, #4]
 8010c86:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c88:	bf08      	it	eq
 8010c8a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	3801      	subs	r0, #1
 8010c94:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8010c96:	4770      	bx	lr

08010c98 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c98:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8010c9c:	f383 8811 	msr	BASEPRI, r3
 8010ca0:	f3bf 8f6f 	isb	sy
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	e7fe      	b.n	8010ca8 <prvTaskExitError+0x10>
	...

08010cac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010cac:	4806      	ldr	r0, [pc, #24]	; (8010cc8 <prvPortStartFirstTask+0x1c>)
 8010cae:	6800      	ldr	r0, [r0, #0]
 8010cb0:	6800      	ldr	r0, [r0, #0]
 8010cb2:	f380 8808 	msr	MSP, r0
 8010cb6:	b662      	cpsie	i
 8010cb8:	b661      	cpsie	f
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	f3bf 8f6f 	isb	sy
 8010cc2:	df00      	svc	0
 8010cc4:	bf00      	nop
 8010cc6:	0000      	.short	0x0000
 8010cc8:	e000ed08 	.word	0xe000ed08

08010ccc <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010cd0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010cd4:	4b05      	ldr	r3, [pc, #20]	; (8010cec <pxPortInitialiseStack+0x20>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010cd6:	f840 2c20 	str.w	r2, [r0, #-32]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010cda:	f021 0101 	bic.w	r1, r1, #1
 8010cde:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ce2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8010ce6:	3840      	subs	r0, #64	; 0x40
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop
 8010cec:	08010c99 	.word	0x08010c99

08010cf0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010cf0:	4b07      	ldr	r3, [pc, #28]	; (8010d10 <pxCurrentTCBConst2>)
 8010cf2:	6819      	ldr	r1, [r3, #0]
 8010cf4:	6808      	ldr	r0, [r1, #0]
 8010cf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010cfa:	f380 8809 	msr	PSP, r0
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f04f 0000 	mov.w	r0, #0
 8010d06:	f380 8811 	msr	BASEPRI, r0
 8010d0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8010d0e:	4770      	bx	lr

08010d10 <pxCurrentTCBConst2>:
 8010d10:	200001ec 	.word	0x200001ec
 8010d14:	f3af 8000 	nop.w
 8010d18:	f3af 8000 	nop.w
 8010d1c:	f3af 8000 	nop.w

08010d20 <vPortEnterCritical>:
 8010d20:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d30:	4b02      	ldr	r3, [pc, #8]	; (8010d3c <vPortEnterCritical+0x1c>)
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	1c50      	adds	r0, r2, #1
 8010d36:	6018      	str	r0, [r3, #0]
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	20000000 	.word	0x20000000

08010d40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8010d40:	4a03      	ldr	r2, [pc, #12]	; (8010d50 <vPortExitCritical+0x10>)
 8010d42:	6813      	ldr	r3, [r2, #0]
 8010d44:	1e58      	subs	r0, r3, #1
 8010d46:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d48:	b908      	cbnz	r0, 8010d4e <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d4a:	f380 8811 	msr	BASEPRI, r0
 8010d4e:	4770      	bx	lr
 8010d50:	20000000 	.word	0x20000000
	...

08010d60 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d60:	f3ef 8009 	mrs	r0, PSP
 8010d64:	f3bf 8f6f 	isb	sy
 8010d68:	4b0d      	ldr	r3, [pc, #52]	; (8010da0 <pxCurrentTCBConst>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010d70:	6010      	str	r0, [r2, #0]
 8010d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010d76:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8010d7a:	f380 8811 	msr	BASEPRI, r0
 8010d7e:	f7ff ff1f 	bl	8010bc0 <vTaskSwitchContext>
 8010d82:	f04f 0000 	mov.w	r0, #0
 8010d86:	f380 8811 	msr	BASEPRI, r0
 8010d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d8e:	6819      	ldr	r1, [r3, #0]
 8010d90:	6808      	ldr	r0, [r1, #0]
 8010d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010d96:	f380 8809 	msr	PSP, r0
 8010d9a:	f3bf 8f6f 	isb	sy
 8010d9e:	4770      	bx	lr

08010da0 <pxCurrentTCBConst>:
 8010da0:	200001ec 	.word	0x200001ec
 8010da4:	f3af 8000 	nop.w
 8010da8:	f3af 8000 	nop.w
 8010dac:	f3af 8000 	nop.w

08010db0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010db0:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010db2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8010db6:	f383 8811 	msr	BASEPRI, r3
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010dc2:	f7ff fda7 	bl	8010914 <xTaskIncrementTick>
 8010dc6:	b118      	cbz	r0, 8010dd0 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010dc8:	4b03      	ldr	r3, [pc, #12]	; (8010dd8 <xPortSysTickHandler+0x28>)
 8010dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dce:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	f380 8811 	msr	BASEPRI, r0
 8010dd6:	bd08      	pop	{r3, pc}
 8010dd8:	e000ed04 	.word	0xe000ed04

08010ddc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010ddc:	4b03      	ldr	r3, [pc, #12]	; (8010dec <vPortSetupTimerInterrupt+0x10>)
 8010dde:	4a04      	ldr	r2, [pc, #16]	; (8010df0 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010de0:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010de2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010de4:	f843 0c04 	str.w	r0, [r3, #-4]
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	e000e014 	.word	0xe000e014
 8010df0:	0002903f 	.word	0x0002903f

08010df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010df4:	b508      	push	{r3, lr}
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010df6:	4b09      	ldr	r3, [pc, #36]	; (8010e1c <xPortStartScheduler+0x28>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	f442 007f 	orr.w	r0, r2, #16711680	; 0xff0000
 8010dfe:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010e00:	6819      	ldr	r1, [r3, #0]
 8010e02:	f041 427f 	orr.w	r2, r1, #4278190080	; 0xff000000
 8010e06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010e08:	f7ff ffe8 	bl	8010ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010e0c:	4b04      	ldr	r3, [pc, #16]	; (8010e20 <xPortStartScheduler+0x2c>)
 8010e0e:	2000      	movs	r0, #0
 8010e10:	6018      	str	r0, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010e12:	f7ff ff4b 	bl	8010cac <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8010e16:	f7ff ff3f 	bl	8010c98 <prvTaskExitError>
 8010e1a:	bf00      	nop
 8010e1c:	e000ed20 	.word	0xe000ed20
 8010e20:	20000000 	.word	0x20000000

08010e24 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e24:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e26:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <prvInsertBlockIntoFreeList+0x40>)
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	4282      	cmp	r2, r0
 8010e2c:	d201      	bcs.n	8010e32 <prvInsertBlockIntoFreeList+0xe>
 8010e2e:	4613      	mov	r3, r2
 8010e30:	e7fa      	b.n	8010e28 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e32:	6859      	ldr	r1, [r3, #4]
 8010e34:	185c      	adds	r4, r3, r1
 8010e36:	4284      	cmp	r4, r0
 8010e38:	d103      	bne.n	8010e42 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e3a:	6840      	ldr	r0, [r0, #4]
 8010e3c:	1841      	adds	r1, r0, r1
 8010e3e:	6059      	str	r1, [r3, #4]
 8010e40:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e42:	6841      	ldr	r1, [r0, #4]
 8010e44:	1844      	adds	r4, r0, r1
 8010e46:	4294      	cmp	r4, r2
 8010e48:	d107      	bne.n	8010e5a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e4a:	4c07      	ldr	r4, [pc, #28]	; (8010e68 <prvInsertBlockIntoFreeList+0x44>)
 8010e4c:	6824      	ldr	r4, [r4, #0]
 8010e4e:	42a2      	cmp	r2, r4
 8010e50:	d003      	beq.n	8010e5a <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e52:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e54:	6812      	ldr	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e56:	1861      	adds	r1, r4, r1
 8010e58:	6041      	str	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e5a:	4283      	cmp	r3, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e5c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e5e:	bf18      	it	ne
 8010e60:	6018      	strne	r0, [r3, #0]
 8010e62:	bd10      	pop	{r4, pc}
 8010e64:	20000254 	.word	0x20000254
 8010e68:	20000250 	.word	0x20000250

08010e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6e:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8010e70:	f7ff fd42 	bl	80108f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e74:	4b37      	ldr	r3, [pc, #220]	; (8010f54 <pvPortMalloc+0xe8>)
 8010e76:	6818      	ldr	r0, [r3, #0]
 8010e78:	bb18      	cbnz	r0, 8010ec2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e7a:	4a37      	ldr	r2, [pc, #220]	; (8010f58 <pvPortMalloc+0xec>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e7c:	0751      	lsls	r1, r2, #29
 8010e7e:	d007      	beq.n	8010e90 <pvPortMalloc+0x24>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e80:	1dd6      	adds	r6, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e82:	f026 0307 	bic.w	r3, r6, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e86:	f502 5020 	add.w	r0, r2, #10240	; 0x2800
 8010e8a:	1ac1      	subs	r1, r0, r3
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	e001      	b.n	8010e94 <pvPortMalloc+0x28>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e90:	f44f 5120 	mov.w	r1, #10240	; 0x2800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e94:	1851      	adds	r1, r2, r1
	uxAddress -= xHeapStructSize;
 8010e96:	3908      	subs	r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e98:	f021 0107 	bic.w	r1, r1, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e9c:	4e2f      	ldr	r6, [pc, #188]	; (8010f5c <pvPortMalloc+0xf0>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8010e9e:	482d      	ldr	r0, [pc, #180]	; (8010f54 <pvPortMalloc+0xe8>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ea0:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	6073      	str	r3, [r6, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 8010ea6:	600b      	str	r3, [r1, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8010ea8:	604b      	str	r3, [r1, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010eaa:	1a8b      	subs	r3, r1, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010eac:	e882 000a 	stmia.w	r2, {r1, r3}

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eb0:	4e2b      	ldr	r6, [pc, #172]	; (8010f60 <pvPortMalloc+0xf4>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eb2:	4a2c      	ldr	r2, [pc, #176]	; (8010f64 <pvPortMalloc+0xf8>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eb4:	6033      	str	r3, [r6, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010eb8:	4b2b      	ldr	r3, [pc, #172]	; (8010f68 <pvPortMalloc+0xfc>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8010eba:	6001      	str	r1, [r0, #0]
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ebc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010ec0:	6019      	str	r1, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ec2:	4829      	ldr	r0, [pc, #164]	; (8010f68 <pvPortMalloc+0xfc>)
 8010ec4:	6806      	ldr	r6, [r0, #0]
 8010ec6:	4235      	tst	r5, r6
 8010ec8:	d13b      	bne.n	8010f42 <pvPortMalloc+0xd6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010eca:	2d00      	cmp	r5, #0
 8010ecc:	d03a      	beq.n	8010f44 <pvPortMalloc+0xd8>
			{
				xWantedSize += xHeapStructSize;
 8010ece:	f105 0308 	add.w	r3, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ed2:	075a      	lsls	r2, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ed4:	bf1c      	itt	ne
 8010ed6:	f023 0307 	bicne.w	r3, r3, #7
 8010eda:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d02e      	beq.n	8010f3e <pvPortMalloc+0xd2>
 8010ee0:	4d1f      	ldr	r5, [pc, #124]	; (8010f60 <pvPortMalloc+0xf4>)
 8010ee2:	682f      	ldr	r7, [r5, #0]
 8010ee4:	42bb      	cmp	r3, r7
 8010ee6:	d82c      	bhi.n	8010f42 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8010ee8:	4a1c      	ldr	r2, [pc, #112]	; (8010f5c <pvPortMalloc+0xf0>)
 8010eea:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010eec:	6861      	ldr	r1, [r4, #4]
 8010eee:	4299      	cmp	r1, r3
 8010ef0:	d304      	bcc.n	8010efc <pvPortMalloc+0x90>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ef2:	4d18      	ldr	r5, [pc, #96]	; (8010f54 <pvPortMalloc+0xe8>)
 8010ef4:	6828      	ldr	r0, [r5, #0]
 8010ef6:	4284      	cmp	r4, r0
 8010ef8:	d106      	bne.n	8010f08 <pvPortMalloc+0x9c>
 8010efa:	e022      	b.n	8010f42 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010efc:	6820      	ldr	r0, [r4, #0]
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d0f7      	beq.n	8010ef2 <pvPortMalloc+0x86>
 8010f02:	4622      	mov	r2, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
 8010f04:	4604      	mov	r4, r0
 8010f06:	e7f1      	b.n	8010eec <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010f08:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010f0a:	6815      	ldr	r5, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010f0c:	6010      	str	r0, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010f0e:	1aca      	subs	r2, r1, r3
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010f10:	3508      	adds	r5, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010f12:	2a10      	cmp	r2, #16
 8010f14:	d904      	bls.n	8010f20 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f16:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f18:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f1a:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f1c:	f7ff ff82 	bl	8010e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f20:	6862      	ldr	r2, [r4, #4]
 8010f22:	490f      	ldr	r1, [pc, #60]	; (8010f60 <pvPortMalloc+0xf4>)
 8010f24:	1abb      	subs	r3, r7, r2
 8010f26:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f28:	490e      	ldr	r1, [pc, #56]	; (8010f64 <pvPortMalloc+0xf8>)
 8010f2a:	6808      	ldr	r0, [r1, #0]
 8010f2c:	4283      	cmp	r3, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f2e:	ea42 0606 	orr.w	r6, r2, r6

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f32:	bf38      	it	cc
 8010f34:	600b      	strcc	r3, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8010f36:	2200      	movs	r2, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f38:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f3a:	6022      	str	r2, [r4, #0]
 8010f3c:	e002      	b.n	8010f44 <pvPortMalloc+0xd8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f3e:	461d      	mov	r5, r3
 8010f40:	e000      	b.n	8010f44 <pvPortMalloc+0xd8>
 8010f42:	2500      	movs	r5, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f44:	f7ff fd68 	bl	8010a18 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010f48:	b90d      	cbnz	r5, 8010f4e <pvPortMalloc+0xe2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010f4a:	f7ff fa9b 	bl	8010484 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8010f4e:	4628      	mov	r0, r5
 8010f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f52:	bf00      	nop
 8010f54:	20000250 	.word	0x20000250
 8010f58:	20000a81 	.word	0x20000a81
 8010f5c:	20000254 	.word	0x20000254
 8010f60:	2000024c 	.word	0x2000024c
 8010f64:	2000025c 	.word	0x2000025c
 8010f68:	20000260 	.word	0x20000260

08010f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f6c:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f6e:	4604      	mov	r4, r0
 8010f70:	b1e0      	cbz	r0, 8010fac <vPortFree+0x40>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f72:	4a0f      	ldr	r2, [pc, #60]	; (8010fb0 <vPortFree+0x44>)
 8010f74:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010f78:	6810      	ldr	r0, [r2, #0]
 8010f7a:	4218      	tst	r0, r3
 8010f7c:	d016      	beq.n	8010fac <vPortFree+0x40>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f7e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8010f82:	b999      	cbnz	r1, 8010fac <vPortFree+0x40>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f84:	ea23 0300 	bic.w	r3, r3, r0
 8010f88:	f844 3c04 	str.w	r3, [r4, #-4]

				vTaskSuspendAll();
 8010f8c:	f7ff fcb4 	bl	80108f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f90:	4b08      	ldr	r3, [pc, #32]	; (8010fb4 <vPortFree+0x48>)
 8010f92:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	1881      	adds	r1, r0, r2
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f9a:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f9e:	6019      	str	r1, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010fa0:	f7ff ff40 	bl	8010e24 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8010fa8:	f7ff bd36 	b.w	8010a18 <xTaskResumeAll>
 8010fac:	bd10      	pop	{r4, pc}
 8010fae:	bf00      	nop
 8010fb0:	20000260 	.word	0x20000260
 8010fb4:	2000024c 	.word	0x2000024c

08010fb8 <Default_Handler>:
 * @param  None     
 * @retval : None       
*/

void Default_Handler(void) 
{
 8010fb8:	e7fe      	b.n	8010fb8 <Default_Handler>
	...

08010fbc <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8010fbc:	4668      	mov	r0, sp
 8010fbe:	f020 0107 	bic.w	r1, r0, #7
 8010fc2:	468d      	mov	sp, r1
 8010fc4:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010fc6:	2300      	movs	r3, #0
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8010fc8:	4a0a      	ldr	r2, [pc, #40]	; (8010ff4 <Reset_Handler+0x38>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010fca:	490b      	ldr	r1, [pc, #44]	; (8010ff8 <Reset_Handler+0x3c>)
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8010fcc:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010fce:	4288      	cmp	r0, r1
 8010fd0:	d204      	bcs.n	8010fdc <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
 8010fd2:	490a      	ldr	r1, [pc, #40]	; (8010ffc <Reset_Handler+0x40>)
 8010fd4:	5858      	ldr	r0, [r3, r1]
 8010fd6:	5098      	str	r0, [r3, r2]
 8010fd8:	3304      	adds	r3, #4
 8010fda:	e7f5      	b.n	8010fc8 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010fdc:	4b08      	ldr	r3, [pc, #32]	; (8011000 <Reset_Handler+0x44>)
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8010fde:	4a09      	ldr	r2, [pc, #36]	; (8011004 <Reset_Handler+0x48>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d203      	bcs.n	8010fec <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	f843 0b04 	str.w	r0, [r3], #4
 8010fea:	e7f8      	b.n	8010fde <Reset_Handler+0x22>
  }

  /* Call the application's entry point.*/
  main();
 8010fec:	f7ff f9ba 	bl	8010364 <main>
 8010ff0:	e7fe      	b.n	8010ff0 <Reset_Handler+0x34>
 8010ff2:	bf00      	nop
 8010ff4:	20000000 	.word	0x20000000
 8010ff8:	200000d0 	.word	0x200000d0
 8010ffc:	0801d5f0 	.word	0x0801d5f0
 8011000:	200000d0 	.word	0x200000d0
 8011004:	20005060 	.word	0x20005060

08011008 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
 8011008:	4770      	bx	lr
	...

0801100c <MIOS32_SRIO_DMA_Callback>:
/////////////////////////////////////////////////////////////////////////////
// DMA callback function is called by MIOS32_SPI driver once the complete SRIO chain
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // notify that new values have been transfered
  srio_values_transfered = 1;

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 801100e:	2100      	movs	r1, #0
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 8011010:	2401      	movs	r4, #1
 8011012:	4b21      	ldr	r3, [pc, #132]	; (8011098 <MIOS32_SRIO_DMA_Callback+0x8c>)

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8011014:	460a      	mov	r2, r1
 8011016:	4620      	mov	r0, r4
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 8011018:	701c      	strb	r4, [r3, #0]

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 801101a:	f001 feef 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 801101e:	4621      	mov	r1, r4
 8011020:	4620      	mov	r0, r4
 8011022:	2200      	movs	r2, #0
 8011024:	f001 feea 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8011028:	4622      	mov	r2, r4
 801102a:	4620      	mov	r0, r4
 801102c:	2100      	movs	r1, #0
 801102e:	f001 fee5 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 8011032:	4620      	mov	r0, r4
 8011034:	4621      	mov	r1, r4
 8011036:	4622      	mov	r2, r4
 8011038:	f001 fee0 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 801103c:	4817      	ldr	r0, [pc, #92]	; (801109c <MIOS32_SRIO_DMA_Callback+0x90>)
 801103e:	7804      	ldrb	r4, [r0, #0]
 8011040:	2300      	movs	r3, #0
 8011042:	42a3      	cmp	r3, r4
 8011044:	da0c      	bge.n	8011060 <MIOS32_SRIO_DMA_Callback+0x54>
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 8011046:	4a16      	ldr	r2, [pc, #88]	; (80110a0 <MIOS32_SRIO_DMA_Callback+0x94>)
 8011048:	4916      	ldr	r1, [pc, #88]	; (80110a4 <MIOS32_SRIO_DMA_Callback+0x98>)
    mios32_srio_din_changed[i] |= change_mask;
 801104a:	4817      	ldr	r0, [pc, #92]	; (80110a8 <MIOS32_SRIO_DMA_Callback+0x9c>)
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 801104c:	5cd5      	ldrb	r5, [r2, r3]
 801104e:	5ccf      	ldrb	r7, [r1, r3]
    mios32_srio_din_changed[i] |= change_mask;
 8011050:	5cc6      	ldrb	r6, [r0, r3]
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 8011052:	407d      	eors	r5, r7
    mios32_srio_din_changed[i] |= change_mask;
 8011054:	4335      	orrs	r5, r6
 8011056:	54c5      	strb	r5, [r0, r3]
    mios32_srio_din[i] = mios32_srio_din_buffer[i];
 8011058:	5cc9      	ldrb	r1, [r1, r3]
 801105a:	54d1      	strb	r1, [r2, r3]
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 801105c:	3301      	adds	r3, #1
 801105e:	e7f0      	b.n	8011042 <MIOS32_SRIO_DMA_Callback+0x36>

  // call user specific hook if requested
  // it has to be called before button debouncing is handled
  // to ensure that the encoder driver, but also other drivers (e.g. BLM) are working properly
  // regardless if debouncing is enabled or not
  if( srio_scan_finished_hook != NULL )
 8011060:	4912      	ldr	r1, [pc, #72]	; (80110ac <MIOS32_SRIO_DMA_Callback+0xa0>)
 8011062:	680a      	ldr	r2, [r1, #0]
 8011064:	b102      	cbz	r2, 8011068 <MIOS32_SRIO_DMA_Callback+0x5c>
    srio_scan_finished_hook();
 8011066:	4790      	blx	r2
  // at this time. In order to ensure, that a new final state of a button won't get lost, 
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
 8011068:	4b11      	ldr	r3, [pc, #68]	; (80110b0 <MIOS32_SRIO_DMA_Callback+0xa4>)
 801106a:	8818      	ldrh	r0, [r3, #0]
 801106c:	b198      	cbz	r0, 8011096 <MIOS32_SRIO_DMA_Callback+0x8a>
 801106e:	4911      	ldr	r1, [pc, #68]	; (80110b4 <MIOS32_SRIO_DMA_Callback+0xa8>)
 8011070:	880a      	ldrh	r2, [r1, #0]
 8011072:	b182      	cbz	r2, 8011096 <MIOS32_SRIO_DMA_Callback+0x8a>
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8011074:	4809      	ldr	r0, [pc, #36]	; (801109c <MIOS32_SRIO_DMA_Callback+0x90>)
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 8011076:	1e53      	subs	r3, r2, #1

    for(i=0; i<num_sr; ++i) {
 8011078:	7800      	ldrb	r0, [r0, #0]
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 801107a:	800b      	strh	r3, [r1, #0]

    for(i=0; i<num_sr; ++i) {
 801107c:	2300      	movs	r3, #0
 801107e:	4283      	cmp	r3, r0
 8011080:	da09      	bge.n	8011096 <MIOS32_SRIO_DMA_Callback+0x8a>
      mios32_srio_din[i] ^= mios32_srio_din_changed[i];
 8011082:	4907      	ldr	r1, [pc, #28]	; (80110a0 <MIOS32_SRIO_DMA_Callback+0x94>)
 8011084:	4a08      	ldr	r2, [pc, #32]	; (80110a8 <MIOS32_SRIO_DMA_Callback+0x9c>)
 8011086:	5ccc      	ldrb	r4, [r1, r3]
 8011088:	5cd5      	ldrb	r5, [r2, r3]
 801108a:	406c      	eors	r4, r5
 801108c:	54cc      	strb	r4, [r1, r3]
      mios32_srio_din_changed[i] = 0;
 801108e:	2100      	movs	r1, #0
 8011090:	54d1      	strb	r1, [r2, r3]
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8011092:	3301      	adds	r3, #1
 8011094:	e7f3      	b.n	801107e <MIOS32_SRIO_DMA_Callback+0x72>
 8011096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011098:	2000026b 	.word	0x2000026b
 801109c:	2000026a 	.word	0x2000026a
 80110a0:	200032b1 	.word	0x200032b1
 80110a4:	200032a1 	.word	0x200032a1
 80110a8:	20003281 	.word	0x20003281
 80110ac:	20000264 	.word	0x20000264
 80110b0:	20000268 	.word	0x20000268
 80110b4:	2000026c 	.word	0x2000026c

080110b8 <MIOS32_SRIO_Init>:
//! Initializes SPI pins and peripheral
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
 80110b8:	b510      	push	{r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d12e      	bne.n	801111c <MIOS32_SRIO_Init+0x64>
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 80110be:	4b19      	ldr	r3, [pc, #100]	; (8011124 <MIOS32_SRIO_Init+0x6c>)

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 80110c0:	4919      	ldr	r1, [pc, #100]	; (8011128 <MIOS32_SRIO_Init+0x70>)
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 80110c2:	6018      	str	r0, [r3, #0]

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 80110c4:	2210      	movs	r2, #16
 80110c6:	700a      	strb	r2, [r1, #0]

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80110c8:	4603      	mov	r3, r0
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 80110ca:	4818      	ldr	r0, [pc, #96]	; (801112c <MIOS32_SRIO_Init+0x74>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 80110cc:	4918      	ldr	r1, [pc, #96]	; (8011130 <MIOS32_SRIO_Init+0x78>)
  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 80110ce:	2400      	movs	r4, #0
 80110d0:	54c4      	strb	r4, [r0, r3]
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 80110d2:	4818      	ldr	r0, [pc, #96]	; (8011134 <MIOS32_SRIO_Init+0x7c>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 80110d4:	22ff      	movs	r2, #255	; 0xff
 80110d6:	54ca      	strb	r2, [r1, r3]
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 80110d8:	54c2      	strb	r2, [r0, r3]
    mios32_srio_din_changed[i] = 0;   // no change
 80110da:	4a17      	ldr	r2, [pc, #92]	; (8011138 <MIOS32_SRIO_Init+0x80>)
 80110dc:	54d4      	strb	r4, [r2, r3]
  num_sr = MIOS32_SRIO_NUM_SR;

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80110de:	3301      	adds	r3, #1
 80110e0:	2b10      	cmp	r3, #16
 80110e2:	d1f2      	bne.n	80110ca <MIOS32_SRIO_Init+0x12>
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
  debounce_ctr = 0;
 80110e4:	4815      	ldr	r0, [pc, #84]	; (801113c <MIOS32_SRIO_Init+0x84>)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 80110e6:	4916      	ldr	r1, [pc, #88]	; (8011140 <MIOS32_SRIO_Init+0x88>)
  debounce_ctr = 0;
 80110e8:	8004      	strh	r4, [r0, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80110ea:	2001      	movs	r0, #1
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 80110ec:	800c      	strh	r4, [r1, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80110ee:	4602      	mov	r2, r0
 80110f0:	4621      	mov	r1, r4
 80110f2:	f001 fe83 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 80110f6:	2001      	movs	r0, #1
 80110f8:	4602      	mov	r2, r0
 80110fa:	4601      	mov	r1, r0
 80110fc:	f001 fe7e 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
  // using 2 MHz instead of 50 MHz to avoid fast transients which can cause flickering!
  // optionally using open drain mode for cheap and sufficient levelshifting from 3.3V to 5V
#if MIOS32_SRIO_OUTPUTS_OD
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK_OD);
#else
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK);
 8011100:	2102      	movs	r1, #2
 8011102:	2001      	movs	r0, #1
 8011104:	f001 fd58 	bl	8012bb8 <MIOS32_SPI_IO_Init>
#endif

  // init SPI port for baudrate of ca. 2 uS period @ 72 MHz
  MIOS32_SPI_TransferModeInit(MIOS32_SRIO_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8011108:	2206      	movs	r2, #6
 801110a:	2001      	movs	r0, #1
 801110c:	2103      	movs	r1, #3
 801110e:	f001 fed3 	bl	8012eb8 <MIOS32_SPI_TransferModeInit>

  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;
 8011112:	4b0c      	ldr	r3, [pc, #48]	; (8011144 <MIOS32_SRIO_Init+0x8c>)
 8011114:	2201      	movs	r2, #1
 8011116:	701a      	strb	r2, [r3, #0]

  return 0;
 8011118:	4620      	mov	r0, r4
 801111a:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 801111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;

  return 0;
}
 8011120:	bd10      	pop	{r4, pc}
 8011122:	bf00      	nop
 8011124:	20000264 	.word	0x20000264
 8011128:	2000026a 	.word	0x2000026a
 801112c:	20003291 	.word	0x20003291
 8011130:	200032b1 	.word	0x200032b1
 8011134:	200032a1 	.word	0x200032a1
 8011138:	20003281 	.word	0x20003281
 801113c:	2000026c 	.word	0x2000026c
 8011140:	20000268 	.word	0x20000268
 8011144:	2000026b 	.word	0x2000026b

08011148 <MIOS32_SRIO_ScanNumGet>:
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_SRIO_ScanNumGet(void)
{
  return num_sr;
}
 8011148:	4b01      	ldr	r3, [pc, #4]	; (8011150 <MIOS32_SRIO_ScanNumGet+0x8>)
 801114a:	7818      	ldrb	r0, [r3, #0]
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	2000026a 	.word	0x2000026a

08011154 <MIOS32_SRIO_DebounceStart>:
//! it in a common application.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_DebounceStart(void)
{
  debounce_ctr = debounce_time;
 8011154:	4b02      	ldr	r3, [pc, #8]	; (8011160 <MIOS32_SRIO_DebounceStart+0xc>)
 8011156:	4803      	ldr	r0, [pc, #12]	; (8011164 <MIOS32_SRIO_DebounceStart+0x10>)
 8011158:	881a      	ldrh	r2, [r3, #0]
 801115a:	8002      	strh	r2, [r0, #0]
  return 0; // no error
}
 801115c:	2000      	movs	r0, #0
 801115e:	4770      	bx	lr
 8011160:	20000268 	.word	0x20000268
 8011164:	2000026c 	.word	0x2000026c

08011168 <MIOS32_SRIO_ScanStart>:
//!     (all DOUT registers written, all DIN registers read)
//!     use NULL if no function should be called
//! \return < 0 if operation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_ScanStart(void *_notify_hook)
{
 8011168:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
 801116a:	4d17      	ldr	r5, [pc, #92]	; (80111c8 <MIOS32_SRIO_ScanStart+0x60>)
 801116c:	782b      	ldrb	r3, [r5, #0]
 801116e:	b323      	cbz	r3, 80111ba <MIOS32_SRIO_ScanStart+0x52>

  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
 8011170:	4916      	ldr	r1, [pc, #88]	; (80111cc <MIOS32_SRIO_ScanStart+0x64>)
 8011172:	780a      	ldrb	r2, [r1, #0]
 8011174:	b322      	cbz	r2, 80111c0 <MIOS32_SRIO_ScanStart+0x58>

  // notify that new values have to be transfered
  srio_values_transfered = 0;

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 8011176:	4b16      	ldr	r3, [pc, #88]	; (80111d0 <MIOS32_SRIO_ScanStart+0x68>)
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 8011178:	2400      	movs	r4, #0

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 801117a:	6018      	str	r0, [r3, #0]
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 801117c:	700c      	strb	r4, [r1, #0]
  srio_scan_finished_hook = _notify_hook;

  // before first byte will be sent:
  // latch DIN registers by pulsing RCLK: 1->0->1
  // TODO: maybe we should disable all IRQs here for higher accuracy
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 801117e:	4622      	mov	r2, r4
 8011180:	4621      	mov	r1, r4
 8011182:	2001      	movs	r0, #1
 8011184:	f001 fe3a 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 8011188:	2001      	movs	r0, #1
 801118a:	4601      	mov	r1, r0
 801118c:	4622      	mov	r2, r4
 801118e:	f001 fe35 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8011192:	2001      	movs	r0, #1
 8011194:	4621      	mov	r1, r4
 8011196:	4602      	mov	r2, r0
 8011198:	f001 fe30 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 801119c:	2001      	movs	r0, #1
 801119e:	4601      	mov	r1, r0
 80111a0:	4602      	mov	r2, r0
 80111a2:	f001 fe2b 	bl	8012dfc <MIOS32_SPI_RC_PinSet>
  if( ++mios32_srio_dout_page_ctr >= MIOS32_SRIO_NUM_DOUT_PAGES )
    mios32_srio_dout_page_ctr = 0;
#endif

   //start DMA transfer
	MIOS32_SPI_TransferBlock(MIOS32_SRIO_SPI,
 80111a6:	480b      	ldr	r0, [pc, #44]	; (80111d4 <MIOS32_SRIO_ScanStart+0x6c>)
 80111a8:	782b      	ldrb	r3, [r5, #0]
 80111aa:	9000      	str	r0, [sp, #0]
 80111ac:	490a      	ldr	r1, [pc, #40]	; (80111d8 <MIOS32_SRIO_ScanStart+0x70>)
 80111ae:	4a0b      	ldr	r2, [pc, #44]	; (80111dc <MIOS32_SRIO_ScanStart+0x74>)
 80111b0:	2001      	movs	r0, #1
 80111b2:	f002 f83b 	bl	801322c <MIOS32_SPI_TransferBlock>
			   (u8 *)&mios32_srio_dout[mios32_srio_dout_page_ctr][0], (u8 *)&mios32_srio_din_buffer[0],
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
 80111b6:	4620      	mov	r0, r4
 80111b8:	e004      	b.n	80111c4 <MIOS32_SRIO_ScanStart+0x5c>
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
    return -1; // SRIO disabled during runtime
 80111ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111be:	e001      	b.n	80111c4 <MIOS32_SRIO_ScanStart+0x5c>
  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here
 80111c0:	f06f 0001 	mvn.w	r0, #1
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
}
 80111c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80111c6:	bf00      	nop
 80111c8:	2000026a 	.word	0x2000026a
 80111cc:	2000026b 	.word	0x2000026b
 80111d0:	20000264 	.word	0x20000264
 80111d4:	0801100d 	.word	0x0801100d
 80111d8:	20003291 	.word	0x20003291
 80111dc:	200032a1 	.word	0x200032a1

080111e0 <MIOS32_DIN_Init>:
s32 MIOS32_DIN_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 80111e0:	b950      	cbnz	r0, 80111f8 <MIOS32_DIN_Init+0x18>
 80111e2:	4603      	mov	r3, r0
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
    mios32_srio_din[i] = 0xff; // passive state
 80111e4:	4a06      	ldr	r2, [pc, #24]	; (8011200 <MIOS32_DIN_Init+0x20>)
 80111e6:	21ff      	movs	r1, #255	; 0xff
 80111e8:	54d1      	strb	r1, [r2, r3]
    mios32_srio_din_changed[i] = 0;
 80111ea:	4906      	ldr	r1, [pc, #24]	; (8011204 <MIOS32_DIN_Init+0x24>)
 80111ec:	2000      	movs	r0, #0
 80111ee:	54c8      	strb	r0, [r1, r3]
 80111f0:	3301      	adds	r3, #1
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80111f2:	2b10      	cmp	r3, #16
 80111f4:	d1f6      	bne.n	80111e4 <MIOS32_DIN_Init+0x4>
 80111f6:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80111f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    mios32_srio_din[i] = 0xff; // passive state
    mios32_srio_din_changed[i] = 0;
  }

  return 0;
}
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	200032b1 	.word	0x200032b1
 8011204:	20003281 	.word	0x20003281

08011208 <MIOS32_DIN_SRChangedGetAndClear>:
//! \param[in] mask pin mask (8bit value)
//! \return 8bit value which contains the selected (masked) change flags
//! \return no error status (-1)! - if unavailable SR selected, 0x00 will be returned
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_DIN_SRChangedGetAndClear(u32 sr, u8 mask)
{
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	4604      	mov	r4, r0
 801120c:	460d      	mov	r5, r1
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 801120e:	f7ff ff9b 	bl	8011148 <MIOS32_SRIO_ScanNumGet>
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
 8011212:	4284      	cmp	r4, r0
 8011214:	d20b      	bcs.n	801122e <MIOS32_DIN_SRChangedGetAndClear+0x26>
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
 8011216:	f001 fc81 	bl	8012b1c <MIOS32_IRQ_Disable>
  changed = mios32_srio_din_changed[sr] & mask;
 801121a:	4b06      	ldr	r3, [pc, #24]	; (8011234 <MIOS32_DIN_SRChangedGetAndClear+0x2c>)
 801121c:	5d1e      	ldrb	r6, [r3, r4]
  mios32_srio_din_changed[sr] &= ~mask;
 801121e:	5d1a      	ldrb	r2, [r3, r4]
  if( sr >= num_sr )
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
  changed = mios32_srio_din_changed[sr] & mask;
 8011220:	402e      	ands	r6, r5
  mios32_srio_din_changed[sr] &= ~mask;
 8011222:	ea22 0505 	bic.w	r5, r2, r5
 8011226:	551d      	strb	r5, [r3, r4]
  MIOS32_IRQ_Enable();
 8011228:	f001 fc8c 	bl	8012b44 <MIOS32_IRQ_Enable>

  return changed;
 801122c:	e000      	b.n	8011230 <MIOS32_DIN_SRChangedGetAndClear+0x28>
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
    return 0x00;
 801122e:	2600      	movs	r6, #0
  changed = mios32_srio_din_changed[sr] & mask;
  mios32_srio_din_changed[sr] &= ~mask;
  MIOS32_IRQ_Enable();

  return changed;
}
 8011230:	4630      	mov	r0, r6
 8011232:	bd70      	pop	{r4, r5, r6, pc}
 8011234:	20003281 	.word	0x20003281

08011238 <MIOS32_DIN_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
{
 8011238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801123c:	4607      	mov	r7, r0
  s32 sr;
  s32 sr_pin;
  u8 changed;
  void (*callback)(u32 pin, u32 value) = _callback;
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 801123e:	f7ff ff83 	bl	8011148 <MIOS32_SRIO_ScanNumGet>
  // no SRIOs?
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
 8011242:	4606      	mov	r6, r0
 8011244:	b320      	cbz	r0, 8011290 <MIOS32_DIN_Handler+0x58>
    return -1;

  // no callback function?
  if( _callback == NULL )
 8011246:	b31f      	cbz	r7, 8011290 <MIOS32_DIN_Handler+0x58>
 8011248:	2400      	movs	r4, #0
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 801124a:	42b4      	cmp	r4, r6
 801124c:	da1d      	bge.n	801128a <MIOS32_DIN_Handler+0x52>
    
    // check if there are pin changes (mask all pins)
    changed = MIOS32_DIN_SRChangedGetAndClear(sr, 0xff);
 801124e:	4620      	mov	r0, r4
 8011250:	21ff      	movs	r1, #255	; 0xff
 8011252:	f7ff ffd9 	bl	8011208 <MIOS32_DIN_SRChangedGetAndClear>

    // any pin change at this SR?
    if( !changed )
 8011256:	4680      	mov	r8, r0
 8011258:	b908      	cbnz	r0, 801125e <MIOS32_DIN_Handler+0x26>
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 801125a:	3401      	adds	r4, #1
 801125c:	e7f5      	b.n	801124a <MIOS32_DIN_Handler+0x12>
//!   void DIN_NotifyToggle(u32 pin, u32 value)
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
 801125e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8011262:	2500      	movs	r5, #0
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
      if( changed & (1 << sr_pin) ) {
 8011264:	fa48 f305 	asr.w	r3, r8, r5
 8011268:	07db      	lsls	r3, r3, #31
 801126a:	d50a      	bpl.n	8011282 <MIOS32_DIN_Handler+0x4a>
	// call the notification function
	callback(8*sr+sr_pin, (mios32_srio_din[sr] & (1 << sr_pin)) ? 1 : 0);
 801126c:	480a      	ldr	r0, [pc, #40]	; (8011298 <MIOS32_DIN_Handler+0x60>)
 801126e:	5d01      	ldrb	r1, [r0, r4]
 8011270:	fa41 f105 	asr.w	r1, r1, r5
 8011274:	eb05 0009 	add.w	r0, r5, r9
 8011278:	f001 0101 	and.w	r1, r1, #1
 801127c:	47b8      	blx	r7

	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
 801127e:	f7ff ff69 	bl	8011154 <MIOS32_SRIO_DebounceStart>
    // any pin change at this SR?
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
 8011282:	3501      	adds	r5, #1
 8011284:	2d08      	cmp	r5, #8
 8011286:	d1ed      	bne.n	8011264 <MIOS32_DIN_Handler+0x2c>
 8011288:	e7e7      	b.n	801125a <MIOS32_DIN_Handler+0x22>
	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
 801128a:	2000      	movs	r0, #0
 801128c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
    return -1;
 8011290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
}
 8011294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011298:	200032b1 	.word	0x200032b1

0801129c <MIOS32_DOUT_Init>:
s32 MIOS32_DOUT_Init(u32 mode)
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
 801129c:	b938      	cbnz	r0, 80112ae <MIOS32_DOUT_Init+0x12>
 801129e:	4603      	mov	r3, r0

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES < 2
    mios32_srio_dout[0][i] = 0;
 80112a0:	4a04      	ldr	r2, [pc, #16]	; (80112b4 <MIOS32_DOUT_Init+0x18>)
 80112a2:	2000      	movs	r0, #0
 80112a4:	54d0      	strb	r0, [r2, r3]
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80112a6:	3301      	adds	r3, #1
 80112a8:	2b10      	cmp	r3, #16
 80112aa:	d1f9      	bne.n	80112a0 <MIOS32_DOUT_Init+0x4>
 80112ac:	4770      	bx	lr
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80112ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      mios32_srio_dout[j][i] = 0;
#endif
  }

  return 0;
}
 80112b2:	4770      	bx	lr
 80112b4:	20003291 	.word	0x20003291

080112b8 <MIOS32_ENC_Init>:
s32 MIOS32_ENC_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 80112b8:	bb60      	cbnz	r0, 8011314 <MIOS32_ENC_Init+0x5c>
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 80112ba:	4b18      	ldr	r3, [pc, #96]	; (801131c <MIOS32_ENC_Init+0x64>)

    enc_state[i].state = 0xf; // all pins released
 80112bc:	4918      	ldr	r1, [pc, #96]	; (8011320 <MIOS32_ENC_Init+0x68>)
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 80112be:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 80112c2:	f36f 0207 	bfc	r2, #0, #8
 80112c6:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]

    enc_state[i].state = 0xf; // all pins released
 80112ca:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
    enc_state[i].decinc = 0;
 80112ce:	f043 020f 	orr.w	r2, r3, #15
 80112d2:	f36f 1204 	bfc	r2, #4, #1
 80112d6:	f801 2030 	strb.w	r2, [r1, r0, lsl #3]
    enc_state[i].incrementer = 0;
 80112da:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80112de:	3001      	adds	r0, #1
 80112e0:	784b      	ldrb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
 80112e2:	788a      	ldrb	r2, [r1, #2]
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
 80112e4:	f36f 0307 	bfc	r3, #0, #8
 80112e8:	704b      	strb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
 80112ea:	78cb      	ldrb	r3, [r1, #3]
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
 80112ec:	f36f 0207 	bfc	r2, #0, #8
 80112f0:	708a      	strb	r2, [r1, #2]
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80112f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80112f6:	f36f 1207 	bfc	r2, #4, #4
    enc_state[i].prev_acc = 0;
 80112fa:	790b      	ldrb	r3, [r1, #4]
    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80112fc:	70ca      	strb	r2, [r1, #3]
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
 80112fe:	794a      	ldrb	r2, [r1, #5]
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 8011300:	f36f 0307 	bfc	r3, #0, #8
    enc_state[i].predivider = 0;
 8011304:	f36f 0203 	bfc	r2, #0, #4
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 8011308:	2840      	cmp	r0, #64	; 0x40
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 801130a:	710b      	strb	r3, [r1, #4]
    enc_state[i].predivider = 0;
 801130c:	714a      	strb	r2, [r1, #5]
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 801130e:	d1d4      	bne.n	80112ba <MIOS32_ENC_Init+0x2>
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
 8011310:	2000      	movs	r0, #0
 8011312:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8011314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
}
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	200032c8 	.word	0x200032c8
 8011320:	200033c8 	.word	0x200033c8

08011324 <MIOS32_ENC_UpdateStates>:
/////////////////////////////////////////////////////////////////////////////
//! This function has to be called after a SRIO scan to update encoder states
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_UpdateStates(void)
{
 8011324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	2700      	movs	r7, #0
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 801132a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 801158c <MIOS32_ENC_UpdateStates+0x268>

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 801132e:	f819 3027 	ldrb.w	r3, [r9, r7, lsl #2]
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 8011332:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8011336:	eb0b 0809 	add.w	r8, fp, r9

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 801133a:	2b00      	cmp	r3, #0
 801133c:	f000 8118 	beq.w	8011570 <MIOS32_ENC_UpdateStates+0x24c>
      continue;

    enc_state_t *enc_state_ptr = &enc_state[enc];
 8011340:	4d8f      	ldr	r5, [pc, #572]	; (8011580 <MIOS32_ENC_UpdateStates+0x25c>)
 8011342:	00fe      	lsls	r6, r7, #3
 8011344:	1974      	adds	r4, r6, r5

    // decrement accelerator until it is zero (used to determine rotation speed)
    if( enc_state_ptr->accelerator )
 8011346:	78a0      	ldrb	r0, [r4, #2]
 8011348:	b108      	cbz	r0, 801134e <MIOS32_ENC_UpdateStates+0x2a>
      --enc_state_ptr->accelerator;
 801134a:	1e41      	subs	r1, r0, #1
 801134c:	70a1      	strb	r1, [r4, #2]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
 801134e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011352:	b392      	cbz	r2, 80113ba <MIOS32_ENC_UpdateStates+0x96>
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
      u8 pos = enc_config_ptr->cfg.pos;
 8011354:	f898 3001 	ldrb.w	r3, [r8, #1]
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
 8011358:	f816 c005 	ldrb.w	ip, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 801135c:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
      u8 pos = enc_config_ptr->cfg.pos;
 8011360:	095a      	lsrs	r2, r3, #5
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
 8011362:	2003      	movs	r0, #3
 8011364:	f002 0306 	and.w	r3, r2, #6
 8011368:	fa00 f003 	lsl.w	r0, r0, r3
 801136c:	b2c1      	uxtb	r1, r0
      enc_state_ptr->last12 = enc_state_ptr->act12;
 801136e:	4660      	mov	r0, ip
 8011370:	f36c 0083 	bfi	r0, ip, #2, #2
 8011374:	5570      	strb	r0, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 8011376:	fa5f fa8a 	uxtb.w	sl, sl
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
 801137a:	4882      	ldr	r0, [pc, #520]	; (8011584 <MIOS32_ENC_UpdateStates+0x260>)
 801137c:	f810 000a 	ldrb.w	r0, [r0, sl]
 8011380:	4201      	tst	r1, r0
 8011382:	d01a      	beq.n	80113ba <MIOS32_ENC_UpdateStates+0x96>
 8011384:	4650      	mov	r0, sl
 8011386:	9201      	str	r2, [sp, #4]
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	f7ff ff3d 	bl	8011208 <MIOS32_DIN_SRChangedGetAndClear>
 801138e:	9a01      	ldr	r2, [sp, #4]
 8011390:	9b00      	ldr	r3, [sp, #0]
 8011392:	b190      	cbz	r0, 80113ba <MIOS32_ENC_UpdateStates+0x96>
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 8011394:	497c      	ldr	r1, [pc, #496]	; (8011588 <MIOS32_ENC_UpdateStates+0x264>)
 8011396:	f811 000a 	ldrb.w	r0, [r1, sl]
 801139a:	fa40 f303 	asr.w	r3, r0, r3
 801139e:	f003 0103 	and.w	r1, r3, #3
	if( pos & 1 ) { // swap pins?
 80113a2:	07d2      	lsls	r2, r2, #31
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 80113a4:	b2cb      	uxtb	r3, r1
	if( pos & 1 ) { // swap pins?
 80113a6:	d504      	bpl.n	80113b2 <MIOS32_ENC_UpdateStates+0x8e>
	  state = ((state << 1) & 2) | (state >> 1);
 80113a8:	004a      	lsls	r2, r1, #1
 80113aa:	f002 0002 	and.w	r0, r2, #2
 80113ae:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
	}
	enc_state_ptr->act12 = state;
 80113b2:	5da9      	ldrb	r1, [r5, r6]
 80113b4:	f363 0101 	bfi	r1, r3, #0, #2
 80113b8:	5571      	strb	r1, [r6, r5]
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
 80113ba:	5d70      	ldrb	r0, [r6, r5]
 80113bc:	f3c0 0281 	ubfx	r2, r0, #2, #2
 80113c0:	f000 0303 	and.w	r3, r0, #3
 80113c4:	429a      	cmp	r2, r3
 80113c6:	f000 80d3 	beq.w	8011570 <MIOS32_ENC_UpdateStates+0x24c>
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 80113ca:	f000 010f 	and.w	r1, r0, #15
 80113ce:	2901      	cmp	r1, #1
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
      mios32_enc_type_t enc_type = enc_config_ptr->cfg.type;
 80113d0:	f81b 3009 	ldrb.w	r3, [fp, r9]
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 80113d4:	d102      	bne.n	80113dc <MIOS32_ENC_UpdateStates+0xb8>
 80113d6:	f013 0f10 	tst.w	r3, #16
 80113da:	e00d      	b.n	80113f8 <MIOS32_ENC_UpdateStates+0xd4>
 80113dc:	2907      	cmp	r1, #7
 80113de:	d102      	bne.n	80113e6 <MIOS32_ENC_UpdateStates+0xc2>
	  (enc_state_ptr->state == 0x07 && (enc_type & (1 << 5))) ||
 80113e0:	f013 0f20 	tst.w	r3, #32
 80113e4:	e008      	b.n	80113f8 <MIOS32_ENC_UpdateStates+0xd4>
 80113e6:	290e      	cmp	r1, #14
 80113e8:	d102      	bne.n	80113f0 <MIOS32_ENC_UpdateStates+0xcc>
	  (enc_state_ptr->state == 0x0e && (enc_type & (1 << 6))) ||
 80113ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80113ee:	e003      	b.n	80113f8 <MIOS32_ENC_UpdateStates+0xd4>
 80113f0:	2908      	cmp	r1, #8
 80113f2:	d158      	bne.n	80114a6 <MIOS32_ENC_UpdateStates+0x182>
	  (enc_state_ptr->state == 0x08 && (enc_type & (1 << 7))) ) {
 80113f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113f8:	f000 80ba 	beq.w	8011570 <MIOS32_ENC_UpdateStates+0x24c>
	// DEC
	// plausibility check: when accelerator > 0xe0, exit if last event was a INC.
	// if non-detented encoder: only do anything if the state has actually changed
	if( (enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) && 
 80113fc:	f000 0010 	and.w	r0, r0, #16
 8011400:	b2c2      	uxtb	r2, r0
 8011402:	b91a      	cbnz	r2, 801140c <MIOS32_ENC_UpdateStates+0xe8>
 8011404:	78a1      	ldrb	r1, [r4, #2]
 8011406:	29e0      	cmp	r1, #224	; 0xe0
 8011408:	f200 80b2 	bhi.w	8011570 <MIOS32_ENC_UpdateStates+0x24c>
 801140c:	2bff      	cmp	r3, #255	; 0xff
 801140e:	d108      	bne.n	8011422 <MIOS32_ENC_UpdateStates+0xfe>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_dec) ) {
 8011410:	5d70      	ldrb	r0, [r6, r5]
 8011412:	78e3      	ldrb	r3, [r4, #3]
 8011414:	f000 020f 	and.w	r2, r0, #15
 8011418:	f003 010f 	and.w	r1, r3, #15
 801141c:	428a      	cmp	r2, r1
 801141e:	f000 80a7 	beq.w	8011570 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize DEC
	  enc_state_ptr->decinc = 1;
 8011422:	5d70      	ldrb	r0, [r6, r5]
 8011424:	f040 0310 	orr.w	r3, r0, #16
 8011428:	5573      	strb	r3, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 801142a:	7921      	ldrb	r1, [r4, #4]
 801142c:	78a2      	ldrb	r2, [r4, #2]
 801142e:	1a50      	subs	r0, r2, r1
 8011430:	2814      	cmp	r0, #20
 8011432:	dd01      	ble.n	8011438 <MIOS32_ENC_UpdateStates+0x114>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 8011434:	3114      	adds	r1, #20
 8011436:	70a1      	strb	r1, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 8011438:	f898 3001 	ldrb.w	r3, [r8, #1]
 801143c:	f013 0103 	ands.w	r1, r3, #3
 8011440:	d015      	beq.n	801146e <MIOS32_ENC_UpdateStates+0x14a>
 8011442:	2902      	cmp	r1, #2
 8011444:	d123      	bne.n	801148e <MIOS32_ENC_UpdateStates+0x16a>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8011446:	78a1      	ldrb	r1, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 8011448:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801144c:	f1c3 0007 	rsb	r0, r3, #7
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8011450:	f001 02c0 	and.w	r2, r1, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 8011454:	fa32 f100 	lsrs.w	r1, r2, r0
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8011458:	f994 2001 	ldrsb.w	r2, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 801145c:	bf08      	it	eq
 801145e:	2101      	moveq	r1, #1
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8011460:	1a50      	subs	r0, r2, r1
	    if( new_incrementer < -70 ) // avoid overrun
	      new_incrementer = -70;
	    enc_state_ptr->incrementer = new_incrementer;
 8011462:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8011466:	4298      	cmp	r0, r3
 8011468:	bfb8      	it	lt
 801146a:	4618      	movlt	r0, r3
 801146c:	e011      	b.n	8011492 <MIOS32_ENC_UpdateStates+0x16e>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider - (enc_config_ptr->cfg.speed_par+1);
 801146e:	7960      	ldrb	r0, [r4, #5]
 8011470:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8011474:	f000 010f 	and.w	r1, r0, #15
 8011478:	43d3      	mvns	r3, r2
	    // increment on 4bit underrun
	    if( predivider < 0 )
 801147a:	18c8      	adds	r0, r1, r3
 801147c:	d502      	bpl.n	8011484 <MIOS32_ENC_UpdateStates+0x160>
	      --enc_state_ptr->incrementer;
 801147e:	7861      	ldrb	r1, [r4, #1]
 8011480:	1e4a      	subs	r2, r1, #1
 8011482:	7062      	strb	r2, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 8011484:	7963      	ldrb	r3, [r4, #5]
 8011486:	f360 0303 	bfi	r3, r0, #0, #4
 801148a:	7163      	strb	r3, [r4, #5]
	    break;
 801148c:	e002      	b.n	8011494 <MIOS32_ENC_UpdateStates+0x170>

	  default: // NORMAL
	    --enc_state_ptr->incrementer;
 801148e:	7862      	ldrb	r2, [r4, #1]
 8011490:	1e50      	subs	r0, r2, #1
 8011492:	7060      	strb	r0, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011494:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 8011496:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    --enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011498:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 801149a:	21ff      	movs	r1, #255	; 0xff
 801149c:	70a1      	strb	r1, [r4, #2]

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 801149e:	5d72      	ldrb	r2, [r6, r5]
 80114a0:	f362 0303 	bfi	r3, r2, #0, #4
 80114a4:	e063      	b.n	801156e <MIOS32_ENC_UpdateStates+0x24a>
	}
      } else if( (enc_state_ptr->state == 0x02 && (enc_type & (1 << 0))) ||
 80114a6:	2902      	cmp	r1, #2
 80114a8:	d102      	bne.n	80114b0 <MIOS32_ENC_UpdateStates+0x18c>
 80114aa:	f013 0f01 	tst.w	r3, #1
 80114ae:	e00d      	b.n	80114cc <MIOS32_ENC_UpdateStates+0x1a8>
 80114b0:	290b      	cmp	r1, #11
 80114b2:	d102      	bne.n	80114ba <MIOS32_ENC_UpdateStates+0x196>
		 (enc_state_ptr->state == 0x0b && (enc_type & (1 << 1))) ||
 80114b4:	f013 0f02 	tst.w	r3, #2
 80114b8:	e008      	b.n	80114cc <MIOS32_ENC_UpdateStates+0x1a8>
 80114ba:	290d      	cmp	r1, #13
 80114bc:	d102      	bne.n	80114c4 <MIOS32_ENC_UpdateStates+0x1a0>
		 (enc_state_ptr->state == 0x0d && (enc_type & (1 << 2))) ||
 80114be:	f013 0f04 	tst.w	r3, #4
 80114c2:	e003      	b.n	80114cc <MIOS32_ENC_UpdateStates+0x1a8>
 80114c4:	2904      	cmp	r1, #4
 80114c6:	d153      	bne.n	8011570 <MIOS32_ENC_UpdateStates+0x24c>
		 (enc_state_ptr->state == 0x04 && (enc_type & (1 << 3))) ) {
 80114c8:	f013 0f08 	tst.w	r3, #8
 80114cc:	d050      	beq.n	8011570 <MIOS32_ENC_UpdateStates+0x24c>
	// INC
	// plausibility check: when accelerator > 0xe0, exit if last event was a DEC
	// if non-detented encoder: only do anything if the state has actually changed
	if( (!enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) &&
 80114ce:	f000 0010 	and.w	r0, r0, #16
 80114d2:	b2c2      	uxtb	r2, r0
 80114d4:	b112      	cbz	r2, 80114dc <MIOS32_ENC_UpdateStates+0x1b8>
 80114d6:	78a1      	ldrb	r1, [r4, #2]
 80114d8:	29e0      	cmp	r1, #224	; 0xe0
 80114da:	d849      	bhi.n	8011570 <MIOS32_ENC_UpdateStates+0x24c>
 80114dc:	2bff      	cmp	r3, #255	; 0xff
 80114de:	d106      	bne.n	80114ee <MIOS32_ENC_UpdateStates+0x1ca>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_inc) ) {
 80114e0:	5d73      	ldrb	r3, [r6, r5]
 80114e2:	78e0      	ldrb	r0, [r4, #3]
 80114e4:	f003 020f 	and.w	r2, r3, #15
 80114e8:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 80114ec:	d040      	beq.n	8011570 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize INC
	  enc_state_ptr->decinc = 0;
 80114ee:	5da9      	ldrb	r1, [r5, r6]
 80114f0:	f36f 1104 	bfc	r1, #4, #1
 80114f4:	5571      	strb	r1, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 80114f6:	7923      	ldrb	r3, [r4, #4]
 80114f8:	78a0      	ldrb	r0, [r4, #2]
 80114fa:	1ac2      	subs	r2, r0, r3
 80114fc:	2a14      	cmp	r2, #20
 80114fe:	dd01      	ble.n	8011504 <MIOS32_ENC_UpdateStates+0x1e0>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 8011500:	3314      	adds	r3, #20
 8011502:	70a3      	strb	r3, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 8011504:	f898 1001 	ldrb.w	r1, [r8, #1]
 8011508:	f011 0303 	ands.w	r3, r1, #3
 801150c:	d013      	beq.n	8011536 <MIOS32_ENC_UpdateStates+0x212>
 801150e:	2b02      	cmp	r3, #2
 8011510:	d122      	bne.n	8011558 <MIOS32_ENC_UpdateStates+0x234>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8011512:	78a3      	ldrb	r3, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 8011514:	f3c1 0182 	ubfx	r1, r1, #2, #3
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8011518:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 801151c:	f1c1 0207 	rsb	r2, r1, #7
	      acc = 1;
 8011520:	fa30 f302 	lsrs.w	r3, r0, r2
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 8011524:	f994 0001 	ldrsb.w	r0, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 8011528:	bf08      	it	eq
 801152a:	2301      	moveq	r3, #1
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 801152c:	18c2      	adds	r2, r0, r3
	    if( new_incrementer > 70 ) // avoid overrun
	      new_incrementer = 70;
	    enc_state_ptr->incrementer = new_incrementer;
 801152e:	2a46      	cmp	r2, #70	; 0x46
 8011530:	bfa8      	it	ge
 8011532:	2246      	movge	r2, #70	; 0x46
 8011534:	e012      	b.n	801155c <MIOS32_ENC_UpdateStates+0x238>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider + (enc_config_ptr->cfg.speed_par+1);
 8011536:	7962      	ldrb	r2, [r4, #5]
 8011538:	f3c1 0182 	ubfx	r1, r1, #2, #3
 801153c:	1c4b      	adds	r3, r1, #1
 801153e:	f002 000f 	and.w	r0, r2, #15
 8011542:	18c0      	adds	r0, r0, r3
	    // increment on 4bit overrun
	    if( predivider >= 16 )
 8011544:	280f      	cmp	r0, #15
 8011546:	dd02      	ble.n	801154e <MIOS32_ENC_UpdateStates+0x22a>
	      ++enc_state_ptr->incrementer;
 8011548:	7862      	ldrb	r2, [r4, #1]
 801154a:	1c51      	adds	r1, r2, #1
 801154c:	7061      	strb	r1, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 801154e:	7963      	ldrb	r3, [r4, #5]
 8011550:	f360 0303 	bfi	r3, r0, #0, #4
 8011554:	7163      	strb	r3, [r4, #5]
	    break;
 8011556:	e002      	b.n	801155e <MIOS32_ENC_UpdateStates+0x23a>

	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
 8011558:	7860      	ldrb	r0, [r4, #1]
 801155a:	1c42      	adds	r2, r0, #1
 801155c:	7062      	strb	r2, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 801155e:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8011560:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011562:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 8011564:	22ff      	movs	r2, #255	; 0xff
 8011566:	70a2      	strb	r2, [r4, #2]

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8011568:	5d71      	ldrb	r1, [r6, r5]
 801156a:	f361 1307 	bfi	r3, r1, #4, #4
 801156e:	70e3      	strb	r3, [r4, #3]
 8011570:	3701      	adds	r7, #1
{
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 8011572:	2f40      	cmp	r7, #64	; 0x40
 8011574:	f47f aed9 	bne.w	801132a <MIOS32_ENC_UpdateStates+0x6>
	}
      }
    }
  }
  return 0; // no error
}
 8011578:	2000      	movs	r0, #0
 801157a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157e:	bf00      	nop
 8011580:	200033c8 	.word	0x200033c8
 8011584:	20003281 	.word	0x20003281
 8011588:	200032b1 	.word	0x200032b1
 801158c:	200032c8 	.word	0x200032c8

08011590 <MIOS32_ENC_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_Handler(void *_callback)
{
 8011590:	b570      	push	{r4, r5, r6, lr}
  u8 enc;
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
 8011592:	4606      	mov	r6, r0
 8011594:	b1c0      	cbz	r0, 80115c8 <MIOS32_ENC_Handler+0x38>
 8011596:	2400      	movs	r4, #0

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {

    // following check/modify operation must be atomic
    MIOS32_IRQ_Disable();
 8011598:	f001 fac0 	bl	8012b1c <MIOS32_IRQ_Disable>
    if( (incrementer = enc_state[enc].incrementer) ) {
 801159c:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <MIOS32_ENC_Handler+0x40>)
 801159e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 80115a2:	7845      	ldrb	r5, [r0, #1]
 80115a4:	b14d      	cbz	r5, 80115ba <MIOS32_ENC_Handler+0x2a>
      enc_state[enc].incrementer = 0;
 80115a6:	462a      	mov	r2, r5
 80115a8:	f36f 0207 	bfc	r2, #0, #8
 80115ac:	7042      	strb	r2, [r0, #1]
      MIOS32_IRQ_Enable();
 80115ae:	f001 fac9 	bl	8012b44 <MIOS32_IRQ_Enable>

      // call the hook
      callback(enc, incrementer);
 80115b2:	4620      	mov	r0, r4
 80115b4:	b269      	sxtb	r1, r5
 80115b6:	47b0      	blx	r6
 80115b8:	e001      	b.n	80115be <MIOS32_ENC_Handler+0x2e>
    } else {
      MIOS32_IRQ_Enable();
 80115ba:	f001 fac3 	bl	8012b44 <MIOS32_IRQ_Enable>
 80115be:	3401      	adds	r4, #1
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 80115c0:	2c40      	cmp	r4, #64	; 0x40
 80115c2:	d1e9      	bne.n	8011598 <MIOS32_ENC_Handler+0x8>
    } else {
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
 80115c4:	2000      	movs	r0, #0
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
    return -1;
 80115c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
}
 80115cc:	bd70      	pop	{r4, r5, r6, pc}
 80115ce:	bf00      	nop
 80115d0:	200033c8 	.word	0x200033c8

080115d4 <MIOS32_LCD_ParametersFetchFromBslInfoRange>:
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 80115d4:	4a10      	ldr	r2, [pc, #64]	; (8011618 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x44>)
 80115d6:	4b11      	ldr	r3, [pc, #68]	; (801161c <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
 80115d8:	6811      	ldr	r1, [r2, #0]
 80115da:	6850      	ldr	r0, [r2, #4]
 80115dc:	8912      	ldrh	r2, [r2, #8]
 80115de:	6019      	str	r1, [r3, #0]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 80115e0:	490f      	ldr	r1, [pc, #60]	; (8011620 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x4c>)
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 80115e2:	6058      	str	r0, [r3, #4]
 80115e4:	811a      	strh	r2, [r3, #8]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 80115e6:	7808      	ldrb	r0, [r1, #0]
 80115e8:	2842      	cmp	r0, #66	; 0x42
 80115ea:	d113      	bne.n	8011614 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x40>
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 80115ec:	4a0d      	ldr	r2, [pc, #52]	; (8011624 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x50>)
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80115ee:	480e      	ldr	r0, [pc, #56]	; (8011628 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x54>)
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 80115f0:	7811      	ldrb	r1, [r2, #0]
 80115f2:	7019      	strb	r1, [r3, #0]
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80115f4:	7802      	ldrb	r2, [r0, #0]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80115f6:	490d      	ldr	r1, [pc, #52]	; (801162c <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x58>)
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80115f8:	705a      	strb	r2, [r3, #1]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80115fa:	7808      	ldrb	r0, [r1, #0]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 80115fc:	4a0c      	ldr	r2, [pc, #48]	; (8011630 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x5c>)
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80115fe:	7098      	strb	r0, [r3, #2]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 8011600:	7811      	ldrb	r1, [r2, #0]
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 8011602:	4a06      	ldr	r2, [pc, #24]	; (801161c <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
 8011604:	29ff      	cmp	r1, #255	; 0xff
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
 8011606:	bf08      	it	eq
 8011608:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801160c:	8099      	strh	r1, [r3, #4]
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 801160e:	4b09      	ldr	r3, [pc, #36]	; (8011634 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x60>)
 8011610:	7818      	ldrb	r0, [r3, #0]
 8011612:	80d0      	strh	r0, [r2, #6]
  }
#endif

  return 0; // no error
}
 8011614:	2000      	movs	r0, #0
 8011616:	4770      	bx	lr
 8011618:	0801c1a0 	.word	0x0801c1a0
 801161c:	200035ca 	.word	0x200035ca
 8011620:	08003fc0 	.word	0x08003fc0
 8011624:	08003fc1 	.word	0x08003fc1
 8011628:	08003fc2 	.word	0x08003fc2
 801162c:	08003fc3 	.word	0x08003fc3
 8011630:	08003fc4 	.word	0x08003fc4
 8011634:	08003fc5 	.word	0x08003fc5

08011638 <MIOS32_LCD_TypeIsGLCD>:
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 8011638:	4b02      	ldr	r3, [pc, #8]	; (8011644 <MIOS32_LCD_TypeIsGLCD+0xc>)
 801163a:	f993 0000 	ldrsb.w	r0, [r3]
}
 801163e:	0fc0      	lsrs	r0, r0, #31
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	200035ca 	.word	0x200035ca

08011648 <MIOS32_LCD_DeviceSet>:
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8011648:	4b01      	ldr	r3, [pc, #4]	; (8011650 <MIOS32_LCD_DeviceSet+0x8>)
 801164a:	7018      	strb	r0, [r3, #0]

  return 0; // no error
}
 801164c:	2000      	movs	r0, #0
 801164e:	4770      	bx	lr
 8011650:	2000027c 	.word	0x2000027c

08011654 <MIOS32_LCD_CursorSet>:
//! \param[in] column number
//! \param[in] line number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
 8011654:	b510      	push	{r4, lr}
  // set character position
  mios32_lcd_column = column;
 8011656:	4b0b      	ldr	r3, [pc, #44]	; (8011684 <MIOS32_LCD_CursorSet+0x30>)
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8011658:	4c0b      	ldr	r4, [pc, #44]	; (8011688 <MIOS32_LCD_CursorSet+0x34>)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
 801165a:	8018      	strh	r0, [r3, #0]
  mios32_lcd_line = line;
 801165c:	4a0b      	ldr	r2, [pc, #44]	; (801168c <MIOS32_LCD_CursorSet+0x38>)

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 801165e:	88a3      	ldrh	r3, [r4, #4]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;
 8011660:	8011      	strh	r1, [r2, #0]

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8011662:	b113      	cbz	r3, 801166a <MIOS32_LCD_CursorSet+0x16>
    font_width = font_bitmap.width;
 8011664:	b2da      	uxtb	r2, r3
    font_height = font_bitmap.height;
 8011666:	79a3      	ldrb	r3, [r4, #6]
 8011668:	e001      	b.n	801166e <MIOS32_LCD_CursorSet+0x1a>
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
 801166a:	2308      	movs	r3, #8
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
 801166c:	2206      	movs	r2, #6
  if( font_bitmap.width ) {
    font_width = font_bitmap.width;
    font_height = font_bitmap.height;
  }

  mios32_lcd_x = column * font_width;
 801166e:	4c08      	ldr	r4, [pc, #32]	; (8011690 <MIOS32_LCD_CursorSet+0x3c>)
 8011670:	4342      	muls	r2, r0
 8011672:	8022      	strh	r2, [r4, #0]
  mios32_lcd_y = line * font_height;
 8011674:	4a07      	ldr	r2, [pc, #28]	; (8011694 <MIOS32_LCD_CursorSet+0x40>)
 8011676:	434b      	muls	r3, r1
 8011678:	8013      	strh	r3, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
}
 801167a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  mios32_lcd_x = column * font_width;
  mios32_lcd_y = line * font_height;

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
 801167e:	f009 b87f 	b.w	801a780 <APP_LCD_CursorSet>
 8011682:	bf00      	nop
 8011684:	200035d4 	.word	0x200035d4
 8011688:	20000270 	.word	0x20000270
 801168c:	200035da 	.word	0x200035da
 8011690:	200035dc 	.word	0x200035dc
 8011694:	200035c8 	.word	0x200035c8

08011698 <MIOS32_LCD_GCursorSet>:
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 8011698:	4b02      	ldr	r3, [pc, #8]	; (80116a4 <MIOS32_LCD_GCursorSet+0xc>)
  mios32_lcd_y = y;
 801169a:	4a03      	ldr	r2, [pc, #12]	; (80116a8 <MIOS32_LCD_GCursorSet+0x10>)
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 801169c:	8018      	strh	r0, [r3, #0]
  mios32_lcd_y = y;
 801169e:	8011      	strh	r1, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_GCursorSet(x, y);
 80116a0:	f009 b804 	b.w	801a6ac <APP_LCD_GCursorSet>
 80116a4:	200035dc 	.word	0x200035dc
 80116a8:	200035c8 	.word	0x200035c8

080116ac <MIOS32_LCD_CursorMapSet>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 80116ac:	2300      	movs	r3, #0
    mios32_lcd_cursor_map[i] = map_table[i];
 80116ae:	5cc1      	ldrb	r1, [r0, r3]
 80116b0:	4a03      	ldr	r2, [pc, #12]	; (80116c0 <MIOS32_LCD_CursorMapSet+0x14>)
 80116b2:	5499      	strb	r1, [r3, r2]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 80116b4:	3301      	adds	r3, #1
 80116b6:	2b04      	cmp	r3, #4
 80116b8:	d1f9      	bne.n	80116ae <MIOS32_LCD_CursorMapSet+0x2>
    mios32_lcd_cursor_map[i] = map_table[i];

  return 0; // no error
}
 80116ba:	2000      	movs	r0, #0
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	200035d6 	.word	0x200035d6

080116c4 <MIOS32_LCD_FontInit>:
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 80116c4:	7882      	ldrb	r2, [r0, #2]
 80116c6:	4b07      	ldr	r3, [pc, #28]	; (80116e4 <MIOS32_LCD_FontInit+0x20>)
 80116c8:	1d11      	adds	r1, r2, #4
 80116ca:	1842      	adds	r2, r0, r1
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 80116cc:	7801      	ldrb	r1, [r0, #0]
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 80116ce:	601a      	str	r2, [r3, #0]
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 80116d0:	7842      	ldrb	r2, [r0, #1]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 80116d2:	78c0      	ldrb	r0, [r0, #3]
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 80116d4:	8099      	strh	r1, [r3, #4]
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 80116d6:	2101      	movs	r1, #1
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 80116d8:	8118      	strh	r0, [r3, #8]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 80116da:	80da      	strh	r2, [r3, #6]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 80116dc:	7299      	strb	r1, [r3, #10]

  return 0; // no error
}
 80116de:	2000      	movs	r0, #0
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	20000270 	.word	0x20000270

080116e8 <MIOS32_LCD_Clear>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Clear(void)
{
  // -> forward to app_lcd
  return APP_LCD_Clear();
 80116e8:	f008 bf3c 	b.w	801a564 <APP_LCD_Clear>

080116ec <MIOS32_LCD_Init>:
//! Initializes LCD driver
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Init(u32 mode)
{
 80116ec:	b513      	push	{r0, r1, r4, lr}
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
 80116ee:	4604      	mov	r4, r0
 80116f0:	b9f0      	cbnz	r0, 8011730 <MIOS32_LCD_Init+0x44>
    return -1; // unsupported mode

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();
 80116f2:	f7ff ff6f 	bl	80115d4 <MIOS32_LCD_ParametersFetchFromBslInfoRange>

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 80116f6:	4810      	ldr	r0, [pc, #64]	; (8011738 <MIOS32_LCD_Init+0x4c>)

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <MIOS32_LCD_Init+0x50>)

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 80116fa:	6801      	ldr	r1, [r0, #0]

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 80116fc:	809c      	strh	r4, [r3, #4]

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
  MIOS32_LCD_CursorMapSet(cursor_map);
 80116fe:	a801      	add	r0, sp, #4

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8011700:	9101      	str	r1, [sp, #4]
  MIOS32_LCD_CursorMapSet(cursor_map);
 8011702:	f7ff ffd3 	bl	80116ac <MIOS32_LCD_CursorMapSet>
  // the driver is able to modify the default cursor mapping
  // usage example: "dog" LCDs

#if !defined(MIOS32_FAMILY_EMULATION)
  // initial delay - some LCDs need this!
  MIOS32_DELAY_Wait_uS(50000);
 8011706:	f24c 3050 	movw	r0, #50000	; 0xc350
 801170a:	f002 f87d 	bl	8013808 <MIOS32_DELAY_Wait_uS>
#endif

  // call application specific init function
  if( (ret=APP_LCD_Init(mode)) < 0 )
 801170e:	4620      	mov	r0, r4
 8011710:	f008 fd7c 	bl	801a20c <APP_LCD_Init>
 8011714:	2800      	cmp	r0, #0
 8011716:	db0d      	blt.n	8011734 <MIOS32_LCD_Init+0x48>
    return ret;

  // clear screen
  MIOS32_LCD_Clear();
 8011718:	f7ff ffe6 	bl	80116e8 <MIOS32_LCD_Clear>

  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
 801171c:	4621      	mov	r1, r4
 801171e:	4620      	mov	r0, r4
 8011720:	f7ff ff98 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_GCursorSet(0, 0);
 8011724:	4620      	mov	r0, r4
 8011726:	4621      	mov	r1, r4
 8011728:	f7ff ffb6 	bl	8011698 <MIOS32_LCD_GCursorSet>

  return 0; // no error
 801172c:	4620      	mov	r0, r4
 801172e:	e001      	b.n	8011734 <MIOS32_LCD_Init+0x48>
{
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8011730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
  MIOS32_LCD_GCursorSet(0, 0);

  return 0; // no error
}
 8011734:	bd1c      	pop	{r2, r3, r4, pc}
 8011736:	bf00      	nop
 8011738:	0801c19b 	.word	0x0801c19b
 801173c:	20000270 	.word	0x20000270

08011740 <MIOS32_LCD_PrintChar>:
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 8011740:	b530      	push	{r4, r5, lr}
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 8011742:	4b15      	ldr	r3, [pc, #84]	; (8011798 <MIOS32_LCD_PrintChar+0x58>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 8011744:	f993 1000 	ldrsb.w	r1, [r3]
 8011748:	2900      	cmp	r1, #0
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 801174a:	b085      	sub	sp, #20
 801174c:	4605      	mov	r5, r0
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 801174e:	da19      	bge.n	8011784 <MIOS32_LCD_PrintChar+0x44>
    if( !font_bitmap.width )
 8011750:	4b12      	ldr	r3, [pc, #72]	; (801179c <MIOS32_LCD_PrintChar+0x5c>)
 8011752:	889a      	ldrh	r2, [r3, #4]
      return -1;    // font not initialized yet!
 8011754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
 8011758:	b1e2      	cbz	r2, 8011794 <MIOS32_LCD_PrintChar+0x54>
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
 801175a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801175e:	ac01      	add	r4, sp, #4
 8011760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011764:	88da      	ldrh	r2, [r3, #6]
 8011766:	891b      	ldrh	r3, [r3, #8]
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
    status = APP_LCD_BitmapPrint(bitmap);
 8011768:	f8ad 200a 	strh.w	r2, [sp, #10]
  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
 801176c:	08d1      	lsrs	r1, r2, #3
 801176e:	4359      	muls	r1, r3
 8011770:	fb05 0001 	mla	r0, r5, r1, r0
    status = APP_LCD_BitmapPrint(bitmap);
 8011774:	9001      	str	r0, [sp, #4]
 8011776:	f8ad 300c 	strh.w	r3, [sp, #12]
 801177a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801177e:	f009 f82b 	bl	801a7d8 <APP_LCD_BitmapPrint>
 8011782:	e001      	b.n	8011788 <MIOS32_LCD_PrintChar+0x48>
  } else {
    status = APP_LCD_Data(c);
 8011784:	f008 fc48 	bl	801a018 <APP_LCD_Data>
  }

  if( status >= 0 ) {
 8011788:	2800      	cmp	r0, #0
 801178a:	db03      	blt.n	8011794 <MIOS32_LCD_PrintChar+0x54>
    // increment cursor
    ++mios32_lcd_column;
 801178c:	4b04      	ldr	r3, [pc, #16]	; (80117a0 <MIOS32_LCD_PrintChar+0x60>)
 801178e:	881a      	ldrh	r2, [r3, #0]
 8011790:	1c51      	adds	r1, r2, #1
 8011792:	8019      	strh	r1, [r3, #0]
  }

  return status;
}
 8011794:	b005      	add	sp, #20
 8011796:	bd30      	pop	{r4, r5, pc}
 8011798:	200035ca 	.word	0x200035ca
 801179c:	20000270 	.word	0x20000270
 80117a0:	200035d4 	.word	0x200035d4

080117a4 <MIOS32_LCD_PrintString>:
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
{
 80117a4:	b538      	push	{r3, r4, r5, lr}
/////////////////////////////////////////////////////////////////////////////
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
 80117a6:	1e45      	subs	r5, r0, #1
{
  s32 status = 0;
 80117a8:	2400      	movs	r4, #0

  while( *str != '\0' )
 80117aa:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80117ae:	b118      	cbz	r0, 80117b8 <MIOS32_LCD_PrintString+0x14>
    status |= MIOS32_LCD_PrintChar(*str++);
 80117b0:	f7ff ffc6 	bl	8011740 <MIOS32_LCD_PrintChar>
 80117b4:	4304      	orrs	r4, r0
 80117b6:	e7f8      	b.n	80117aa <MIOS32_LCD_PrintString+0x6>

  return status;
}
 80117b8:	4620      	mov	r0, r4
 80117ba:	bd38      	pop	{r3, r4, r5, pc}

080117bc <MIOS32_LCD_PrintBootMessage>:
//! The message is automatically print by the programming model after each reset.<BR>
//! It will also be returned on a SysEx query.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintBootMessage(void)
{
 80117bc:	b538      	push	{r3, r4, r5, lr}
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 80117be:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <MIOS32_LCD_PrintBootMessage+0x30>)
 80117c0:	2400      	movs	r4, #0
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 80117c2:	4621      	mov	r1, r4
 80117c4:	4620      	mov	r0, r4
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 80117c6:	701c      	strb	r4, [r3, #0]
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 80117c8:	f7ff ff44 	bl	8011654 <MIOS32_LCD_CursorSet>
 80117cc:	4605      	mov	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 80117ce:	4808      	ldr	r0, [pc, #32]	; (80117f0 <MIOS32_LCD_PrintBootMessage+0x34>)
 80117d0:	f7ff ffe8 	bl	80117a4 <MIOS32_LCD_PrintString>
  status |= MIOS32_LCD_CursorSet(0, 1);
 80117d4:	2101      	movs	r1, #1
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 80117d6:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_CursorSet(0, 1);
 80117d8:	4620      	mov	r0, r4
 80117da:	f7ff ff3b 	bl	8011654 <MIOS32_LCD_CursorSet>
 80117de:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE2);
 80117e0:	4804      	ldr	r0, [pc, #16]	; (80117f4 <MIOS32_LCD_PrintBootMessage+0x38>)
 80117e2:	f7ff ffdf 	bl	80117a4 <MIOS32_LCD_PrintString>

  return status;
}
 80117e6:	4328      	orrs	r0, r5
 80117e8:	bd38      	pop	{r3, r4, r5, pc}
 80117ea:	bf00      	nop
 80117ec:	2000027c 	.word	0x2000027c
 80117f0:	0801bff5 	.word	0x0801bff5
 80117f4:	0801c222 	.word	0x0801c222

080117f8 <MIOS32_LCD_PrintFormattedString>:
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 80117f8:	b40f      	push	{r0, r1, r2, r3}
 80117fa:	b500      	push	{lr}
 80117fc:	b093      	sub	sp, #76	; 0x4c
 80117fe:	aa14      	add	r2, sp, #80	; 0x50
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
  vsprintf((char *)buffer, format, args);
 8011800:	a802      	add	r0, sp, #8
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 8011802:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
 8011806:	9201      	str	r2, [sp, #4]
  vsprintf((char *)buffer, format, args);
 8011808:	f003 ff39 	bl	801567e <vsprintf>
  return MIOS32_LCD_PrintString(buffer);
 801180c:	a802      	add	r0, sp, #8
 801180e:	f7ff ffc9 	bl	80117a4 <MIOS32_LCD_PrintString>
}
 8011812:	b013      	add	sp, #76	; 0x4c
 8011814:	f85d eb04 	ldr.w	lr, [sp], #4
 8011818:	b004      	add	sp, #16
 801181a:	4770      	bx	lr

0801181c <MIOS32_LCD_BColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_BColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_BColourSet(rgb);
 801181c:	f008 bfd6 	b.w	801a7cc <APP_LCD_BColourSet>

08011820 <MIOS32_LCD_FColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_FColourSet(rgb);
 8011820:	f008 bfd7 	b.w	801a7d2 <APP_LCD_FColourSet>

08011824 <MIOS32_MIDI_Init>:
//! Initializes MIDI layer
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Init(u32 mode)
{
 8011824:	b538      	push	{r3, r4, r5, lr}
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 8011826:	4605      	mov	r5, r0
 8011828:	2800      	cmp	r0, #0
 801182a:	d145      	bne.n	80118b8 <MIOS32_MIDI_Init+0x94>
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 801182c:	4a24      	ldr	r2, [pc, #144]	; (80118c0 <MIOS32_MIDI_Init+0x9c>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 801182e:	4925      	ldr	r1, [pc, #148]	; (80118c4 <MIOS32_MIDI_Init+0xa0>)

  // disable callback functions
  direct_rx_callback_func = NULL;
 8011830:	4c25      	ldr	r4, [pc, #148]	; (80118c8 <MIOS32_MIDI_Init+0xa4>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 8011832:	2310      	movs	r3, #16
 8011834:	7013      	strb	r3, [r2, #0]
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 8011836:	700b      	strb	r3, [r1, #0]

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
 8011838:	4b24      	ldr	r3, [pc, #144]	; (80118cc <MIOS32_MIDI_Init+0xa8>)
  sysex_callback_func = NULL;
 801183a:	4a25      	ldr	r2, [pc, #148]	; (80118d0 <MIOS32_MIDI_Init+0xac>)
  timeout_callback_func = NULL;
 801183c:	4925      	ldr	r1, [pc, #148]	; (80118d4 <MIOS32_MIDI_Init+0xb0>)
  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
 801183e:	6020      	str	r0, [r4, #0]
  direct_tx_callback_func = NULL;
 8011840:	6018      	str	r0, [r3, #0]
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 8011842:	4c25      	ldr	r4, [pc, #148]	; (80118d8 <MIOS32_MIDI_Init+0xb4>)
  filebrowser_command_callback_func = NULL;
 8011844:	4b25      	ldr	r3, [pc, #148]	; (80118dc <MIOS32_MIDI_Init+0xb8>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
 8011846:	6010      	str	r0, [r2, #0]
  timeout_callback_func = NULL;
 8011848:	6008      	str	r0, [r1, #0]
  debug_command_callback_func = NULL;
  filebrowser_command_callback_func = NULL;
 801184a:	6018      	str	r0, [r3, #0]
  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 801184c:	6020      	str	r0, [r4, #0]
  filebrowser_command_callback_func = NULL;

  // initialize interfaces
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  if( MIOS32_USB_MIDI_Init(0) < 0 )
 801184e:	f002 fdbd 	bl	80143cc <MIOS32_USB_MIDI_Init>
 8011852:	0fc4      	lsrs	r4, r0, #31
    ret |= (1 << 0);
#endif

#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
 8011854:	4628      	mov	r0, r5
 8011856:	f000 fe45 	bl	80124e4 <MIOS32_UART_MIDI_Init>
 801185a:	2800      	cmp	r0, #0
    ret |= (1 << 1);
 801185c:	bfb8      	it	lt
 801185e:	f044 0402 	orrlt.w	r4, r4, #2
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 8011862:	2000      	movs	r0, #0
 8011864:	f000 ffdb 	bl	801281e <MIOS32_IIC_MIDI_Init>
 8011868:	2800      	cmp	r0, #0
    ret |= (1 << 2);
 801186a:	bfb8      	it	lt
 801186c:	f044 0404 	orrlt.w	r4, r4, #4
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 8011870:	2000      	movs	r0, #0
 8011872:	f000 ffc9 	bl	8012808 <MIOS32_SPI_MIDI_Init>
#if defined(MIOS32_USE_CAN) && defined(MIOS32_USE_CAN_MIDI)
  if( MIOS32_CAN_MIDI_Init(0) < 0 )
    ret |= (1 << 4);
#endif
  
  last_sysex_port = DEFAULT;
 8011876:	4a1a      	ldr	r2, [pc, #104]	; (80118e0 <MIOS32_MIDI_Init+0xbc>)
  sysex_state.ALL = 0;
 8011878:	4b1a      	ldr	r3, [pc, #104]	; (80118e4 <MIOS32_MIDI_Init+0xc0>)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
    ret |= (1 << 2);
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 801187a:	2800      	cmp	r0, #0
    ret |= (1 << 3);
 801187c:	bfb8      	it	lt
 801187e:	f044 0408 	orrlt.w	r4, r4, #8
#if defined(MIOS32_USE_CAN) && defined(MIOS32_USE_CAN_MIDI)
  if( MIOS32_CAN_MIDI_Init(0) < 0 )
    ret |= (1 << 4);
#endif
  
  last_sysex_port = DEFAULT;
 8011882:	2000      	movs	r0, #0
 8011884:	7010      	strb	r0, [r2, #0]
  sysex_state.ALL = 0;
 8011886:	7819      	ldrb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011888:	4a17      	ldr	r2, [pc, #92]	; (80118e8 <MIOS32_MIDI_Init+0xc4>)
  if( MIOS32_CAN_MIDI_Init(0) < 0 )
    ret |= (1 << 4);
#endif
  
  last_sysex_port = DEFAULT;
  sysex_state.ALL = 0;
 801188a:	f360 0107 	bfi	r1, r0, #0, #8
 801188e:	7019      	strb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011890:	7010      	strb	r0, [r2, #0]
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *device_id_confirm = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID_CONFIRM;
  u8 *device_id = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID;
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
 8011892:	4816      	ldr	r0, [pc, #88]	; (80118ec <MIOS32_MIDI_Init+0xc8>)
 8011894:	7803      	ldrb	r3, [r0, #0]
 8011896:	2b42      	cmp	r3, #66	; 0x42
 8011898:	d104      	bne.n	80118a4 <MIOS32_MIDI_Init+0x80>
 801189a:	4915      	ldr	r1, [pc, #84]	; (80118f0 <MIOS32_MIDI_Init+0xcc>)
 801189c:	7808      	ldrb	r0, [r1, #0]
 801189e:	0601      	lsls	r1, r0, #24
    sysex_device_id = *device_id;
 80118a0:	bf58      	it	pl
 80118a2:	7010      	strbpl	r0, [r2, #0]
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 80118a4:	4b13      	ldr	r3, [pc, #76]	; (80118f4 <MIOS32_MIDI_Init+0xd0>)
  sysex_timeout_ctr_flags.ALL = 0;
 80118a6:	4914      	ldr	r1, [pc, #80]	; (80118f8 <MIOS32_MIDI_Init+0xd4>)
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
    sysex_device_id = *device_id;
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 80118a8:	2200      	movs	r2, #0
 80118aa:	801a      	strh	r2, [r3, #0]
  sysex_timeout_ctr_flags.ALL = 0;
 80118ac:	2200      	movs	r2, #0
 80118ae:	2300      	movs	r3, #0
 80118b0:	e9c1 2300 	strd	r2, r3, [r1]

  return -ret;
 80118b4:	4260      	negs	r0, r4
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
  sysex_timeout_ctr_flags.ALL = 0;

  return -ret;
}
 80118bc:	bd38      	pop	{r3, r4, r5, pc}
 80118be:	bf00      	nop
 80118c0:	20000004 	.word	0x20000004
 80118c4:	20000005 	.word	0x20000005
 80118c8:	20000288 	.word	0x20000288
 80118cc:	20000280 	.word	0x20000280
 80118d0:	200002a8 	.word	0x200002a8
 80118d4:	200002b0 	.word	0x200002b0
 80118d8:	2000029c 	.word	0x2000029c
 80118dc:	2000028c 	.word	0x2000028c
 80118e0:	20000290 	.word	0x20000290
 80118e4:	20000294 	.word	0x20000294
 80118e8:	20000291 	.word	0x20000291
 80118ec:	08003fd0 	.word	0x08003fd0
 80118f0:	08003fd1 	.word	0x08003fd1
 80118f4:	20000292 	.word	0x20000292
 80118f8:	200002a0 	.word	0x200002a0

080118fc <MIOS32_MIDI_SendPackage>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 80118fc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
//! \param[in] package MIDI package
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	4605      	mov	r5, r0
 8011904:	460c      	mov	r4, r1
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8011906:	d104      	bne.n	8011912 <MIOS32_MIDI_SendPackage+0x16>
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
 8011908:	2801      	cmp	r0, #1
 801190a:	bf0c      	ite	eq
 801190c:	4b1f      	ldreq	r3, [pc, #124]	; (801198c <MIOS32_MIDI_SendPackage+0x90>)
 801190e:	4b20      	ldrne	r3, [pc, #128]	; (8011990 <MIOS32_MIDI_SendPackage+0x94>)
 8011910:	781d      	ldrb	r5, [r3, #0]

  // insert subport number into package
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 8011912:	4b20      	ldr	r3, [pc, #128]	; (8011994 <MIOS32_MIDI_SendPackage+0x98>)
 8011914:	681a      	ldr	r2, [r3, #0]
  if( !(port & 0xf0) ) {
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
  }

  // insert subport number into package
  package.cable = port & 0xf;
 8011916:	f005 060f 	and.w	r6, r5, #15

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 801191a:	2a00      	cmp	r2, #0
 801191c:	d118      	bne.n	8011950 <MIOS32_MIDI_SendPackage+0x54>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 801191e:	f005 00f0 	and.w	r0, r5, #240	; 0xf0
 8011922:	2820      	cmp	r0, #32
 8011924:	d01c      	beq.n	8011960 <MIOS32_MIDI_SendPackage+0x64>
 8011926:	d808      	bhi.n	801193a <MIOS32_MIDI_SendPackage+0x3e>
 8011928:	2810      	cmp	r0, #16
 801192a:	d12b      	bne.n	8011984 <MIOS32_MIDI_SendPackage+0x88>
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 801192c:	f366 1407 	bfi	r4, r6, #4, #4
 8011930:	4620      	mov	r0, r4

    default:
      // invalid port
      return -1;
  }
}
 8011932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  // branch depending on selected port
  switch( port & 0xf0 ) {
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 8011936:	f002 be8d 	b.w	8014654 <MIOS32_USB_MIDI_PackageSend>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 801193a:	2830      	cmp	r0, #48	; 0x30
 801193c:	d019      	beq.n	8011972 <MIOS32_MIDI_SendPackage+0x76>
 801193e:	2850      	cmp	r0, #80	; 0x50
 8011940:	d120      	bne.n	8011984 <MIOS32_MIDI_SendPackage+0x88>
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 8011942:	f366 1407 	bfi	r4, r6, #4, #4
 8011946:	4620      	mov	r0, r4

    default:
      // invalid port
      return -1;
  }
}
 8011948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 801194c:	f000 bf61 	b.w	8012812 <MIOS32_SPI_MIDI_PackageSend>
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
    s32 status;
    if( (status=direct_tx_callback_func(port, package)) )
 8011950:	f366 1407 	bfi	r4, r6, #4, #4
 8011954:	4628      	mov	r0, r5
 8011956:	4621      	mov	r1, r4
 8011958:	4790      	blx	r2
 801195a:	2800      	cmp	r0, #0
 801195c:	d0df      	beq.n	801191e <MIOS32_MIDI_SendPackage+0x22>
 801195e:	bd70      	pop	{r4, r5, r6, pc}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 8011960:	f366 1407 	bfi	r4, r6, #4, #4
 8011964:	f005 000f 	and.w	r0, r5, #15
 8011968:	4621      	mov	r1, r4

    default:
      // invalid port
      return -1;
  }
}
 801196a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 801196e:	f000 be67 	b.w	8012640 <MIOS32_UART_MIDI_PackageSend>
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011972:	f366 1407 	bfi	r4, r6, #4, #4
 8011976:	f005 000f 	and.w	r0, r5, #15
 801197a:	4621      	mov	r1, r4

    default:
      // invalid port
      return -1;
  }
}
 801197c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011980:	f000 bf52 	b.w	8012828 <MIOS32_IIC_MIDI_PackageSend>

    case MCAN0://..15
#if defined(MIOS32_USE_CAN) && defined(MIOS32_USE_CAN_MIDI)
      return MIOS32_CAN_MIDI_PackageSend(package);
#else
      return -1; // CAN_MIDI has been disabled
 8011984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    default:
      // invalid port
      return -1;
  }
}
 8011988:	bd70      	pop	{r4, r5, r6, pc}
 801198a:	bf00      	nop
 801198c:	20000005 	.word	0x20000005
 8011990:	20000004 	.word	0x20000004
 8011994:	20000280 	.word	0x20000280

08011998 <MIOS32_MIDI_SendSpecialEvent>:
//! \param[in] evnt2 third MIDI byte
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSpecialEvent(mios32_midi_port_t port, u8 type, u8 evnt0, u8 evnt1, u8 evnt2)
{
 8011998:	b510      	push	{r4, lr}
  mios32_midi_package_t package;

  package.type  = type;
 801199a:	2400      	movs	r4, #0
 801199c:	f361 0403 	bfi	r4, r1, #0, #4
  package.evnt0 = evnt0;
 80119a0:	f362 240f 	bfi	r4, r2, #8, #8
  package.evnt1 = evnt1;
 80119a4:	f363 4417 	bfi	r4, r3, #16, #8
  package.evnt2 = evnt2;
 80119a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80119ac:	f363 641f 	bfi	r4, r3, #24, #8
  return MIOS32_MIDI_SendPackage(port, package);
 80119b0:	4621      	mov	r1, r4
 80119b2:	f7ff ffa3 	bl	80118fc <MIOS32_MIDI_SendPackage>
}
 80119b6:	bd10      	pop	{r4, pc}

080119b8 <MIOS32_MIDI_SendActiveSense>:

s32 MIOS32_MIDI_SendStop(mios32_midi_port_t port)
{ return MIOS32_MIDI_SendSpecialEvent(port, 0x5, 0xfc, 0x00, 0x00); }

s32 MIOS32_MIDI_SendActiveSense(mios32_midi_port_t port)
{ return MIOS32_MIDI_SendSpecialEvent(port, 0x5, 0xfe, 0x00, 0x00); }
 80119b8:	b507      	push	{r0, r1, r2, lr}
 80119ba:	2300      	movs	r3, #0
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	2105      	movs	r1, #5
 80119c0:	22fe      	movs	r2, #254	; 0xfe
 80119c2:	f7ff ffe9 	bl	8011998 <MIOS32_MIDI_SendSpecialEvent>
 80119c6:	bd0e      	pop	{r1, r2, r3, pc}

080119c8 <MIOS32_MIDI_SendSysEx>:
//! \param[in] count number of bytes
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSysEx(mios32_midi_port_t port, u8 *stream, u32 count)
{
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	4680      	mov	r8, r0
 80119ce:	460e      	mov	r6, r1
 80119d0:	4617      	mov	r7, r2
  u32 offset;
  mios32_midi_package_t package;

  // MEMO: have a look into the project.lss file - gcc optimizes this code pretty well :)

  for(offset=0; offset<count;) {
 80119d2:	2400      	movs	r4, #0
 80119d4:	42bc      	cmp	r4, r7
 80119d6:	d235      	bcs.n	8011a44 <MIOS32_MIDI_SendSysEx+0x7c>
    // package type depends on number of remaining bytes
    switch( count-offset ) {
 80119d8:	1b3b      	subs	r3, r7, r4
 80119da:	2b02      	cmp	r3, #2
 80119dc:	d00d      	beq.n	80119fa <MIOS32_MIDI_SendSysEx+0x32>
 80119de:	2b03      	cmp	r3, #3
 80119e0:	d019      	beq.n	8011a16 <MIOS32_MIDI_SendSysEx+0x4e>
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d119      	bne.n	8011a1a <MIOS32_MIDI_SendSysEx+0x52>
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
	package.evnt0 = stream[offset++];
 80119e6:	5d32      	ldrb	r2, [r6, r4]

  for(offset=0; offset<count;) {
    // package type depends on number of remaining bytes
    switch( count-offset ) {
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
 80119e8:	2105      	movs	r1, #5
 80119ea:	f361 0503 	bfi	r5, r1, #0, #4
	package.evnt0 = stream[offset++];
 80119ee:	f362 250f 	bfi	r5, r2, #8, #8
 80119f2:	3401      	adds	r4, #1
	package.evnt1 = 0x00;
 80119f4:	f36f 4517 	bfc	r5, #16, #8
 80119f8:	e00a      	b.n	8011a10 <MIOS32_MIDI_SendSysEx+0x48>
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 80119fa:	1931      	adds	r1, r6, r4
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
 80119fc:	5d30      	ldrb	r0, [r6, r4]
	package.evnt1 = stream[offset++];
 80119fe:	784a      	ldrb	r2, [r1, #1]
	package.evnt0 = stream[offset++];
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
 8011a00:	2306      	movs	r3, #6
 8011a02:	f363 0503 	bfi	r5, r3, #0, #4
	package.evnt0 = stream[offset++];
 8011a06:	f360 250f 	bfi	r5, r0, #8, #8
	package.evnt1 = stream[offset++];
 8011a0a:	f362 4517 	bfi	r5, r2, #16, #8
 8011a0e:	3402      	adds	r4, #2
	package.evnt2 = 0x00;
 8011a10:	f36f 651f 	bfc	r5, #24, #8
	break;
 8011a14:	e00f      	b.n	8011a36 <MIOS32_MIDI_SendSysEx+0x6e>
      case 3:
	package.type = 0x7; // SysEx ends with following three bytes. 
 8011a16:	2007      	movs	r0, #7
 8011a18:	e000      	b.n	8011a1c <MIOS32_MIDI_SendSysEx+0x54>
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
 8011a1a:	2004      	movs	r0, #4
 8011a1c:	f360 0503 	bfi	r5, r0, #0, #4
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8011a20:	1930      	adds	r0, r6, r4
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8011a22:	5d33      	ldrb	r3, [r6, r4]
	package.evnt1 = stream[offset++];
 8011a24:	7841      	ldrb	r1, [r0, #1]
	package.evnt2 = stream[offset++];
 8011a26:	7882      	ldrb	r2, [r0, #2]
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8011a28:	f363 250f 	bfi	r5, r3, #8, #8
	package.evnt1 = stream[offset++];
 8011a2c:	f361 4517 	bfi	r5, r1, #16, #8
	package.evnt2 = stream[offset++];
 8011a30:	f362 651f 	bfi	r5, r2, #24, #8
 8011a34:	3403      	adds	r4, #3
    }

    res=MIOS32_MIDI_SendPackage(port, package);
 8011a36:	4640      	mov	r0, r8
 8011a38:	4629      	mov	r1, r5
 8011a3a:	f7ff ff5f 	bl	80118fc <MIOS32_MIDI_SendPackage>

    // expection? (e.g., port not available)
    if( res < 0 )
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	dac8      	bge.n	80119d4 <MIOS32_MIDI_SendSysEx+0xc>
 8011a42:	e000      	b.n	8011a46 <MIOS32_MIDI_SendSysEx+0x7e>
      return res;
  }

  return 0;
 8011a44:	2000      	movs	r0, #0
}
 8011a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011a4c <MIOS32_MIDI_SYSEX_SendAckStr>:

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
{
 8011a4c:	b530      	push	{r4, r5, lr}
 8011a4e:	b0a1      	sub	sp, #132	; 0x84
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011a50:	23f0      	movs	r3, #240	; 0xf0
 8011a52:	f88d 3000 	strb.w	r3, [sp]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011a56:	4b13      	ldr	r3, [pc, #76]	; (8011aa4 <MIOS32_MIDI_SYSEX_SendAckStr+0x58>)
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011a58:	227e      	movs	r2, #126	; 0x7e
 8011a5a:	2532      	movs	r5, #50	; 0x32
 8011a5c:	f88d 2003 	strb.w	r2, [sp, #3]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011a60:	781a      	ldrb	r2, [r3, #0]
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011a62:	f88d 5004 	strb.w	r5, [sp, #4]
 8011a66:	2400      	movs	r4, #0

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 8011a68:	250f      	movs	r5, #15
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011a6a:	f88d 4001 	strb.w	r4, [sp, #1]
 8011a6e:	f88d 4002 	strb.w	r4, [sp, #2]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011a72:	f88d 2005 	strb.w	r2, [sp, #5]

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 8011a76:	f88d 5006 	strb.w	r5, [sp, #6]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011a7a:	ab02      	add	r3, sp, #8

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011a7c:	5d0d      	ldrb	r5, [r1, r4]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011a7e:	1e5a      	subs	r2, r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011a80:	b135      	cbz	r5, 8011a90 <MIOS32_MIDI_SYSEX_SendAckStr+0x44>
 8011a82:	3401      	adds	r4, #1
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011a84:	461a      	mov	r2, r3
  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
    *sysex_buffer_ptr++ = str[i];
 8011a86:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a8a:	3301      	adds	r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011a8c:	2c64      	cmp	r4, #100	; 0x64
 8011a8e:	d1f5      	bne.n	8011a7c <MIOS32_MIDI_SYSEX_SendAckStr+0x30>
    *sysex_buffer_ptr++ = str[i];

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011a90:	21f7      	movs	r1, #247	; 0xf7
 8011a92:	f802 1b01 	strb.w	r1, [r2], #1

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011a96:	4669      	mov	r1, sp
 8011a98:	1a52      	subs	r2, r2, r1
 8011a9a:	f7ff ff95 	bl	80119c8 <MIOS32_MIDI_SendSysEx>
}
 8011a9e:	b021      	add	sp, #132	; 0x84
 8011aa0:	bd30      	pop	{r4, r5, pc}
 8011aa2:	bf00      	nop
 8011aa4:	20000291 	.word	0x20000291

08011aa8 <MIOS32_MIDI_SYSEX_SendAck>:
/////////////////////////////////////////////////////////////////////////////
// This function sends a SysEx acknowledge to notify the user about the received command
// expects acknowledge code (e.g. 0x0f for good, 0x0e for error) and additional argument
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAck(mios32_midi_port_t port, u8 ack_code, u8 ack_arg)
{
 8011aa8:	b500      	push	{lr}
 8011aaa:	b089      	sub	sp, #36	; 0x24
  u8 sysex_buffer[32]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011aac:	23f0      	movs	r3, #240	; 0xf0
 8011aae:	f88d 3000 	strb.w	r3, [sp]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f88d 3001 	strb.w	r3, [sp, #1]
 8011ab8:	f88d 3002 	strb.w	r3, [sp, #2]
 8011abc:	237e      	movs	r3, #126	; 0x7e
 8011abe:	f88d 3003 	strb.w	r3, [sp, #3]
 8011ac2:	2332      	movs	r3, #50	; 0x32
 8011ac4:	f88d 3004 	strb.w	r3, [sp, #4]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011ac8:	4b08      	ldr	r3, [pc, #32]	; (8011aec <MIOS32_MIDI_SYSEX_SendAck+0x44>)

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
 8011aca:	f88d 1006 	strb.w	r1, [sp, #6]

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011ace:	781b      	ldrb	r3, [r3, #0]

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
  *sysex_buffer_ptr++ = ack_arg;
 8011ad0:	f88d 2007 	strb.w	r2, [sp, #7]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011ad4:	21f7      	movs	r1, #247	; 0xf7
 8011ad6:	f88d 1008 	strb.w	r1, [sp, #8]

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011ada:	2209      	movs	r2, #9
 8011adc:	4669      	mov	r1, sp

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011ade:	f88d 3005 	strb.w	r3, [sp, #5]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011ae2:	f7ff ff71 	bl	80119c8 <MIOS32_MIDI_SendSysEx>
}
 8011ae6:	b009      	add	sp, #36	; 0x24
 8011ae8:	bd00      	pop	{pc}
 8011aea:	bf00      	nop
 8011aec:	20000291 	.word	0x20000291

08011af0 <MIOS32_MIDI_SendDebugStringHeader>:
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8011af4:	2304      	movs	r3, #4
 8011af6:	2400      	movs	r4, #0
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011af8:	460e      	mov	r6, r1
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8011afa:	f363 0403 	bfi	r4, r3, #0, #4
  package.evnt0 = mios32_midi_sysex_header[0];
 8011afe:	f06f 010f 	mvn.w	r1, #15
 8011b02:	f361 240f 	bfi	r4, r1, #8, #8
  package.evnt1 = mios32_midi_sysex_header[1];
 8011b06:	f36f 4417 	bfc	r4, #16, #8
  package.evnt2 = mios32_midi_sysex_header[2];
 8011b0a:	f36f 641f 	bfc	r4, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011b0e:	4621      	mov	r1, r4
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011b10:	4605      	mov	r5, r0
 8011b12:	4690      	mov	r8, r2

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011b14:	f7ff fef2 	bl	80118fc <MIOS32_MIDI_SendPackage>

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011b18:	4b0e      	ldr	r3, [pc, #56]	; (8011b54 <MIOS32_MIDI_SendDebugStringHeader+0x64>)

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011b1a:	4607      	mov	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8011b1c:	207e      	movs	r0, #126	; 0x7e
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011b1e:	7819      	ldrb	r1, [r3, #0]
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
 8011b20:	2232      	movs	r2, #50	; 0x32
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8011b22:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = mios32_midi_sysex_header[4];
 8011b26:	f362 4417 	bfi	r4, r2, #16, #8
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011b2a:	f361 641f 	bfi	r4, r1, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011b2e:	4621      	mov	r1, r4
 8011b30:	4628      	mov	r0, r5
 8011b32:	f7ff fee3 	bl	80118fc <MIOS32_MIDI_SendPackage>
 8011b36:	4307      	orrs	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = MIOS32_MIDI_SYSEX_DEBUG;
 8011b38:	200d      	movs	r0, #13
 8011b3a:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = command; // output string, usually 0x40
 8011b3e:	f366 4417 	bfi	r4, r6, #16, #8
  package.evnt2 = first_byte; // will be 0x00 if string already ends (""), thats ok, MIOS Studio can handle this
 8011b42:	f368 641f 	bfi	r4, r8, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011b46:	4628      	mov	r0, r5
 8011b48:	4621      	mov	r1, r4
 8011b4a:	f7ff fed7 	bl	80118fc <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8011b4e:	4338      	orrs	r0, r7
 8011b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b54:	20000291 	.word	0x20000291

08011b58 <MIOS32_MIDI_SendDebugStringBody>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringBody(mios32_midi_port_t port, char *str, u32 len)
{
 8011b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	4681      	mov	r9, r0
 8011b5e:	4688      	mov	r8, r1
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  if( len > 0 ) {
 8011b60:	4617      	mov	r7, r2
 8011b62:	b352      	cbz	r2, 8011bba <MIOS32_MIDI_SendDebugStringBody+0x62>
 8011b64:	460d      	mov	r5, r1
 8011b66:	2600      	movs	r6, #0
    int i = 0;
    for(i=0; i<len; i+=3) {
 8011b68:	ebc8 0305 	rsb	r3, r8, r5
 8011b6c:	42bb      	cmp	r3, r7
 8011b6e:	d225      	bcs.n	8011bbc <MIOS32_MIDI_SendDebugStringBody+0x64>
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
 8011b70:	7829      	ldrb	r1, [r5, #0]
    int i = 0;
    for(i=0; i<len; i+=3) {
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
 8011b72:	2004      	movs	r0, #4
 8011b74:	f360 0403 	bfi	r4, r0, #0, #4
      if( (b=str[i+0]) ) {
 8011b78:	b131      	cbz	r1, 8011b88 <MIOS32_MIDI_SendDebugStringBody+0x30>
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8011b7a:	786b      	ldrb	r3, [r5, #1]
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
 8011b7c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8011b80:	f362 240f 	bfi	r4, r2, #8, #8
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8011b84:	b91b      	cbnz	r3, 8011b8e <MIOS32_MIDI_SendDebugStringBody+0x36>
 8011b86:	e00d      	b.n	8011ba4 <MIOS32_MIDI_SendDebugStringBody+0x4c>

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
      } else {
	package.evnt0 = 0x00;
 8011b88:	f361 240f 	bfi	r4, r1, #8, #8
 8011b8c:	e00a      	b.n	8011ba4 <MIOS32_MIDI_SendDebugStringBody+0x4c>
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8011b8e:	78a9      	ldrb	r1, [r5, #2]
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
 8011b90:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8011b94:	f360 4417 	bfi	r4, r0, #16, #8
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8011b98:	b131      	cbz	r1, 8011ba8 <MIOS32_MIDI_SendDebugStringBody+0x50>
	package.evnt2 = b & 0x7f;
 8011b9a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8011b9e:	f362 641f 	bfi	r4, r2, #24, #8
 8011ba2:	e003      	b.n	8011bac <MIOS32_MIDI_SendDebugStringBody+0x54>
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
      } else {
	package.evnt1 = 0x00;
 8011ba4:	f36f 4417 	bfc	r4, #16, #8
      }

      if( !terminated && (b=str[i+2]) ) {
	package.evnt2 = b & 0x7f;
      } else {
	package.evnt2 = 0x00;
 8011ba8:	f36f 641f 	bfc	r4, #24, #8
	terminated = 1;
      }

      status |= MIOS32_MIDI_SendPackage(port, package);
 8011bac:	4648      	mov	r0, r9
 8011bae:	4621      	mov	r1, r4
 8011bb0:	f7ff fea4 	bl	80118fc <MIOS32_MIDI_SendPackage>
 8011bb4:	3503      	adds	r5, #3
 8011bb6:	4306      	orrs	r6, r0
 8011bb8:	e7d6      	b.n	8011b68 <MIOS32_MIDI_SendDebugStringBody+0x10>
{
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
 8011bba:	4616      	mov	r6, r2
    }
  }

  return status;
#endif
}
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011bc2 <MIOS32_MIDI_SendDebugStringFooter>:
//! Example: see MIOS32_MIDI_SendDebugStringHeader
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringFooter(mios32_midi_port_t port)
{
 8011bc2:	b508      	push	{r3, lr}
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  package.type = 0x5; // SysEx ends with following single byte. 
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	2305      	movs	r3, #5
 8011bc8:	f363 0103 	bfi	r1, r3, #0, #4
  package.evnt0 = 0xf7;
 8011bcc:	f06f 0208 	mvn.w	r2, #8
 8011bd0:	f362 210f 	bfi	r1, r2, #8, #8
  package.evnt1 = 0x00;
  package.evnt2 = 0x00;
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011bd4:	b289      	uxth	r1, r1
 8011bd6:	f7ff fe91 	bl	80118fc <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8011bda:	bd08      	pop	{r3, pc}

08011bdc <MIOS32_MIDI_SendDebugString>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugString(const char *str)
{
 8011bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bde:	4605      	mov	r5, r0
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011be0:	f00a f93e 	bl	801be60 <strlen>

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011be4:	4f0a      	ldr	r7, [pc, #40]	; (8011c10 <MIOS32_MIDI_SendDebugString+0x34>)
 8011be6:	782a      	ldrb	r2, [r5, #0]
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011be8:	4606      	mov	r6, r0

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011bea:	2140      	movs	r1, #64	; 0x40
 8011bec:	7838      	ldrb	r0, [r7, #0]
 8011bee:	f7ff ff7f 	bl	8011af0 <MIOS32_MIDI_SendDebugStringHeader>
  if( len >= 2 )
 8011bf2:	2e01      	cmp	r6, #1
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011bf4:	4604      	mov	r4, r0
  if( len >= 2 )
 8011bf6:	d905      	bls.n	8011c04 <MIOS32_MIDI_SendDebugString+0x28>
    status |= MIOS32_MIDI_SendDebugStringBody(debug_port, (char *)&str[1], len-1);
 8011bf8:	7838      	ldrb	r0, [r7, #0]
 8011bfa:	1c69      	adds	r1, r5, #1
 8011bfc:	1e72      	subs	r2, r6, #1
 8011bfe:	f7ff ffab 	bl	8011b58 <MIOS32_MIDI_SendDebugStringBody>
 8011c02:	4304      	orrs	r4, r0
  status |= MIOS32_MIDI_SendDebugStringFooter(debug_port);
 8011c04:	4b02      	ldr	r3, [pc, #8]	; (8011c10 <MIOS32_MIDI_SendDebugString+0x34>)
 8011c06:	7818      	ldrb	r0, [r3, #0]
 8011c08:	f7ff ffdb 	bl	8011bc2 <MIOS32_MIDI_SendDebugStringFooter>

  return status;
#endif
}
 8011c0c:	4320      	orrs	r0, r4
 8011c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c10:	20000005 	.word	0x20000005

08011c14 <MIOS32_MIDI_SendDebugMessage>:
//! \param[in] *format zero-terminated format string - 128 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugMessage(const char *format, ...)
{
 8011c14:	b40f      	push	{r0, r1, r2, r3}
 8011c16:	b530      	push	{r4, r5, lr}
 8011c18:	b0a3      	sub	sp, #140	; 0x8c
 8011c1a:	9d26      	ldr	r5, [sp, #152]	; 0x98

  // failsave: if format string is longer than 100 chars, break here
  // note that this is a weak protection: if %s is used, or a lot of other format tokens,
  // the resulting string could still lead to a buffer overflow
  // other the other hand we don't want to allocate too many byte for buffer[] to save stack
  if( strlen(format) > 100 ) {
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	f00a f91f 	bl	801be60 <strlen>
 8011c22:	2864      	cmp	r0, #100	; 0x64
 8011c24:	d901      	bls.n	8011c2a <MIOS32_MIDI_SendDebugMessage+0x16>
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
 8011c26:	480e      	ldr	r0, [pc, #56]	; (8011c60 <MIOS32_MIDI_SendDebugMessage+0x4c>)
 8011c28:	e013      	b.n	8011c52 <MIOS32_MIDI_SendDebugMessage+0x3e>
  } else {
    // transform formatted string into string
    va_start(args, format);
    vsprintf(str, format, args);
 8011c2a:	ac02      	add	r4, sp, #8
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011c2c:	aa27      	add	r2, sp, #156	; 0x9c
    vsprintf(str, format, args);
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4620      	mov	r0, r4
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011c32:	9201      	str	r2, [sp, #4]
    vsprintf(str, format, args);
 8011c34:	f003 fd23 	bl	801567e <vsprintf>
  }

  u32 len = strlen(str);
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f00a f911 	bl	801be60 <strlen>
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4283      	cmp	r3, r0
 8011c42:	d005      	beq.n	8011c50 <MIOS32_MIDI_SendDebugMessage+0x3c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
 8011c44:	5ce2      	ldrb	r2, [r4, r3]
 8011c46:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8011c4a:	54e1      	strb	r1, [r4, r3]
  }

  u32 len = strlen(str);
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	e7f7      	b.n	8011c40 <MIOS32_MIDI_SendDebugMessage+0x2c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
  }

  return MIOS32_MIDI_SendDebugString(str);
 8011c50:	4620      	mov	r0, r4
 8011c52:	f7ff ffc3 	bl	8011bdc <MIOS32_MIDI_SendDebugString>
#endif
}
 8011c56:	b023      	add	sp, #140	; 0x8c
 8011c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c5c:	b004      	add	sp, #16
 8011c5e:	4770      	bx	lr
 8011c60:	0801c27c 	.word	0x0801c27c

08011c64 <MIOS32_MIDI_TimeOut>:

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011c64:	b510      	push	{r4, lr}
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8011c66:	4b0e      	ldr	r3, [pc, #56]	; (8011ca0 <MIOS32_MIDI_TimeOut+0x3c>)
 8011c68:	781a      	ldrb	r2, [r3, #0]
 8011c6a:	f002 0108 	and.w	r1, r2, #8

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011c6e:	4604      	mov	r4, r0
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8011c70:	b2c8      	uxtb	r0, r1
 8011c72:	b148      	cbz	r0, 8011c88 <MIOS32_MIDI_TimeOut+0x24>
 8011c74:	490b      	ldr	r1, [pc, #44]	; (8011ca4 <MIOS32_MIDI_TimeOut+0x40>)
 8011c76:	7808      	ldrb	r0, [r1, #0]
 8011c78:	42a0      	cmp	r0, r4
 8011c7a:	d105      	bne.n	8011c88 <MIOS32_MIDI_TimeOut+0x24>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011c7c:	f36f 0207 	bfc	r2, #0, #8
 8011c80:	701a      	strb	r2, [r3, #0]
  sysex_cmd = 0;
 8011c82:	4b09      	ldr	r3, [pc, #36]	; (8011ca8 <MIOS32_MIDI_TimeOut+0x44>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	701a      	strb	r2, [r3, #0]
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
    MIOS32_MIDI_SYSEX_CmdFinished();

  // optional hook to application
  if( timeout_callback_func != NULL )
 8011c88:	4908      	ldr	r1, [pc, #32]	; (8011cac <MIOS32_MIDI_TimeOut+0x48>)
 8011c8a:	680a      	ldr	r2, [r1, #0]
 8011c8c:	b10a      	cbz	r2, 8011c92 <MIOS32_MIDI_TimeOut+0x2e>
    timeout_callback_func(port);
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4790      	blx	r2

#ifndef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // this debug message should always be active, so that common users are informed about the exception
  MIOS32_MIDI_SendDebugMessage("[MIOS32_MIDI_Receive_Handler] Timeout on port 0x%02x\n", port);
 8011c92:	4621      	mov	r1, r4
 8011c94:	4806      	ldr	r0, [pc, #24]	; (8011cb0 <MIOS32_MIDI_TimeOut+0x4c>)
 8011c96:	f7ff ffbd 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
#endif

  return 0; // no error
}
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	bd10      	pop	{r4, pc}
 8011c9e:	bf00      	nop
 8011ca0:	20000294 	.word	0x20000294
 8011ca4:	20000290 	.word	0x20000290
 8011ca8:	20000284 	.word	0x20000284
 8011cac:	200002b0 	.word	0x200002b0
 8011cb0:	0801c2cf 	.word	0x0801c2cf

08011cb4 <MIOS32_MIDI_Periodic_mS>:
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Periodic_mS(void)
{
 8011cb4:	b510      	push	{r4, lr}
  s32 status = 0;

#ifndef MIOS32_DONT_USE_USB_MIDI
  status |= MIOS32_USB_MIDI_Periodic_mS();
 8011cb6:	f002 fd2f 	bl	8014718 <MIOS32_USB_MIDI_Periodic_mS>
 8011cba:	4604      	mov	r4, r0
#endif

#ifndef MIOS32_DONT_USE_UART_MIDI
  status |= MIOS32_UART_MIDI_Periodic_mS();
 8011cbc:	f000 fc40 	bl	8012540 <MIOS32_UART_MIDI_Periodic_mS>
 8011cc0:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
 8011cc2:	f000 fdaf 	bl	8012824 <MIOS32_IIC_MIDI_Periodic_mS>
 8011cc6:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011cc8:	f000 fda1 	bl	801280e <MIOS32_SPI_MIDI_Periodic_mS>
#endif
  ///////////////////////////////////////////////////////////////////////////// End of CAN modification
  
  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011ccc:	4b05      	ldr	r3, [pc, #20]	; (8011ce4 <MIOS32_MIDI_Periodic_mS+0x30>)
 8011cce:	881a      	ldrh	r2, [r3, #0]
 8011cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cd4:	428a      	cmp	r2, r1
#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011cd6:	ea44 0000 	orr.w	r0, r4, r0
#endif
  ///////////////////////////////////////////////////////////////////////////// End of CAN modification
  
  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011cda:	d001      	beq.n	8011ce0 <MIOS32_MIDI_Periodic_mS+0x2c>
    ++sysex_timeout_ctr;
 8011cdc:	3201      	adds	r2, #1
 8011cde:	801a      	strh	r2, [r3, #0]

  return status;
}
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20000292 	.word	0x20000292

08011ce8 <MIOS32_MIDI_SendByteToRxCallback>:
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_byte received MIDI byte
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendByteToRxCallback(mios32_midi_port_t port, u8 midi_byte)
{
 8011ce8:	b508      	push	{r3, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL )
 8011cea:	4b03      	ldr	r3, [pc, #12]	; (8011cf8 <MIOS32_MIDI_SendByteToRxCallback+0x10>)
 8011cec:	681a      	ldr	r2, [r3, #0]
 8011cee:	b10a      	cbz	r2, 8011cf4 <MIOS32_MIDI_SendByteToRxCallback+0xc>
    return direct_rx_callback_func(port, midi_byte);
 8011cf0:	4790      	blx	r2
 8011cf2:	bd08      	pop	{r3, pc}
  return 0; // no error
 8011cf4:	4610      	mov	r0, r2
}
 8011cf6:	bd08      	pop	{r3, pc}
 8011cf8:	20000288 	.word	0x20000288

08011cfc <MIOS32_MIDI_SendPackageToRxCallback>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011cfc:	4b11      	ldr	r3, [pc, #68]	; (8011d44 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011d00:	681c      	ldr	r4, [r3, #0]
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011d02:	4607      	mov	r7, r0
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011d04:	b1e4      	cbz	r4, 8011d40 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011d06:	f3c1 6407 	ubfx	r4, r1, #24, #8
 8011d0a:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8011d0e:	f3c1 4207 	ubfx	r2, r1, #16, #8
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011d12:	4d0d      	ldr	r5, [pc, #52]	; (8011d48 <MIOS32_MIDI_SendPackageToRxCallback+0x4c>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011d14:	f88d 4006 	strb.w	r4, [sp, #6]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011d18:	f001 010f 	and.w	r1, r1, #15
    int i;
    s32 status = 0;
 8011d1c:	2400      	movs	r4, #0
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011d1e:	5c6e      	ldrb	r6, [r5, r1]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011d20:	f88d 0004 	strb.w	r0, [sp, #4]
 8011d24:	f88d 2005 	strb.w	r2, [sp, #5]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011d28:	4625      	mov	r5, r4
 8011d2a:	42b5      	cmp	r5, r6
 8011d2c:	da08      	bge.n	8011d40 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
      status |= direct_rx_callback_func(port, buffer[i]);
 8011d2e:	aa01      	add	r2, sp, #4
 8011d30:	4b04      	ldr	r3, [pc, #16]	; (8011d44 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
 8011d32:	5d51      	ldrb	r1, [r2, r5]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4638      	mov	r0, r7
 8011d38:	4798      	blx	r3
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011d3a:	3501      	adds	r5, #1
      status |= direct_rx_callback_func(port, buffer[i]);
 8011d3c:	4304      	orrs	r4, r0
 8011d3e:	e7f4      	b.n	8011d2a <MIOS32_MIDI_SendPackageToRxCallback+0x2e>
    return status;
  }
  return 0; // no error
}
 8011d40:	4620      	mov	r0, r4
 8011d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d44:	20000288 	.word	0x20000288
 8011d48:	0801c26c 	.word	0x0801c26c

08011d4c <MIOS32_MIDI_DebugPortSet>:
//! \param[in] port MIDI port (USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
 8011d4c:	2801      	cmp	r0, #1
 8011d4e:	d003      	beq.n	8011d58 <MIOS32_MIDI_DebugPortSet+0xc>
    return -1;

  debug_port = port;
 8011d50:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <MIOS32_MIDI_DebugPortSet+0x14>)
 8011d52:	7018      	strb	r0, [r3, #0]
 
  return 0; // no error
 8011d54:	2000      	movs	r0, #0
 8011d56:	4770      	bx	lr
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
    return -1;
 8011d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  debug_port = port;
 
  return 0; // no error
}
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	20000005 	.word	0x20000005

08011d64 <MIOS32_MIDI_SYSEX_Cmd>:

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011d64:	b530      	push	{r4, r5, lr}
 8011d66:	460b      	mov	r3, r1
 8011d68:	4611      	mov	r1, r2
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011d6a:	4a63      	ldr	r2, [pc, #396]	; (8011ef8 <MIOS32_MIDI_SYSEX_Cmd+0x194>)
 8011d6c:	7815      	ldrb	r5, [r2, #0]
 8011d6e:	2d0d      	cmp	r5, #13

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011d70:	b08b      	sub	sp, #44	; 0x2c
 8011d72:	4604      	mov	r4, r0
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011d74:	d069      	beq.n	8011e4a <MIOS32_MIDI_SYSEX_Cmd+0xe6>
 8011d76:	d801      	bhi.n	8011d7c <MIOS32_MIDI_SYSEX_Cmd+0x18>
 8011d78:	b13d      	cbz	r5, 8011d8a <MIOS32_MIDI_SYSEX_Cmd+0x26>
 8011d7a:	e0ac      	b.n	8011ed6 <MIOS32_MIDI_SYSEX_Cmd+0x172>
 8011d7c:	2d0e      	cmp	r5, #14
 8011d7e:	f000 80b7 	beq.w	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
 8011d82:	2d0f      	cmp	r5, #15
 8011d84:	f040 80a7 	bne.w	8011ed6 <MIOS32_MIDI_SYSEX_Cmd+0x172>
 8011d88:	e099      	b.n	8011ebe <MIOS32_MIDI_SYSEX_Cmd+0x15a>
 8011d8a:	4a5c      	ldr	r2, [pc, #368]	; (8011efc <MIOS32_MIDI_SYSEX_Cmd+0x198>)
static s32 MIOS32_MIDI_SYSEX_Cmd_Query(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  static u8 query_req = 0;
  char str_buffer[40];

  switch( cmd_state ) {
 8011d8c:	b11b      	cbz	r3, 8011d96 <MIOS32_MIDI_SYSEX_Cmd+0x32>
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d103      	bne.n	8011d9a <MIOS32_MIDI_SYSEX_Cmd+0x36>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
 8011d92:	7011      	strb	r1, [r2, #0]
 8011d94:	e0ac      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
  char str_buffer[40];

  switch( cmd_state ) {

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
 8011d96:	7013      	strb	r3, [r2, #0]
 8011d98:	e0aa      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011d9a:	7811      	ldrb	r1, [r2, #0]
 8011d9c:	2905      	cmp	r1, #5
 8011d9e:	d03a      	beq.n	8011e16 <MIOS32_MIDI_SYSEX_Cmd+0xb2>
 8011da0:	d80f      	bhi.n	8011dc2 <MIOS32_MIDI_SYSEX_Cmd+0x5e>
 8011da2:	2902      	cmp	r1, #2
 8011da4:	d031      	beq.n	8011e0a <MIOS32_MIDI_SYSEX_Cmd+0xa6>
 8011da6:	d802      	bhi.n	8011dae <MIOS32_MIDI_SYSEX_Cmd+0x4a>
 8011da8:	2901      	cmp	r1, #1
 8011daa:	d14a      	bne.n	8011e42 <MIOS32_MIDI_SYSEX_Cmd+0xde>
 8011dac:	e01a      	b.n	8011de4 <MIOS32_MIDI_SYSEX_Cmd+0x80>
 8011dae:	2903      	cmp	r1, #3
 8011db0:	d02f      	beq.n	8011e12 <MIOS32_MIDI_SYSEX_Cmd+0xae>
 8011db2:	2904      	cmp	r1, #4
 8011db4:	d145      	bne.n	8011e42 <MIOS32_MIDI_SYSEX_Cmd+0xde>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
	  break;
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
 8011db6:	f000 fdaf 	bl	8012918 <MIOS32_SYS_ChipIDGet>
 8011dba:	4951      	ldr	r1, [pc, #324]	; (8011f00 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	4668      	mov	r0, sp
 8011dc0:	e036      	b.n	8011e30 <MIOS32_MIDI_SYSEX_Cmd+0xcc>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011dc2:	2908      	cmp	r1, #8
 8011dc4:	d039      	beq.n	8011e3a <MIOS32_MIDI_SYSEX_Cmd+0xd6>
 8011dc6:	d806      	bhi.n	8011dd6 <MIOS32_MIDI_SYSEX_Cmd+0x72>
 8011dc8:	2906      	cmp	r1, #6
 8011dca:	d02c      	beq.n	8011e26 <MIOS32_MIDI_SYSEX_Cmd+0xc2>
 8011dcc:	2907      	cmp	r1, #7
 8011dce:	d138      	bne.n	8011e42 <MIOS32_MIDI_SYSEX_Cmd+0xde>
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011dd0:	f000 fdb0 	bl	8012934 <MIOS32_SYS_RAMSizeGet>
 8011dd4:	e029      	b.n	8011e2a <MIOS32_MIDI_SYSEX_Cmd+0xc6>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011dd6:	2909      	cmp	r1, #9
 8011dd8:	d031      	beq.n	8011e3e <MIOS32_MIDI_SYSEX_Cmd+0xda>
 8011dda:	297f      	cmp	r1, #127	; 0x7f
 8011ddc:	d131      	bne.n	8011e42 <MIOS32_MIDI_SYSEX_Cmd+0xde>
#if MIOS32_MIDI_BSL_ENHANCEMENTS
	  // release halt state (or sending upload request) instead of reseting the core
	  BSL_SYSEX_ReleaseHaltState();
#else
	  // reset core (this will send an upload request)
	  MIOS32_SYS_Reset();
 8011dde:	f000 fd45 	bl	801286c <MIOS32_SYS_Reset>
 8011de2:	e085      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
      switch( query_req ) {
        case 0x01: // operating system
#if MIOS32_USB_MIDI_NUM_PORTS > 1
	  // workaround for strange Windows USB MIDI bug:
	  // after power-on we've to flood the IN pipe with messages to get reliable transfers
	  if( port == USB0 && !MIOS32_USB_ForceSingleUSB() ) {
 8011de4:	2810      	cmp	r0, #16
 8011de6:	d002      	beq.n	8011dee <MIOS32_MIDI_SYSEX_Cmd+0x8a>
	      MIOS32_MIDI_SendActiveSense(port);
	      MIOS32_USB_MIDI_Periodic_mS();
	    }
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
 8011de8:	4620      	mov	r0, r4
 8011dea:	4946      	ldr	r1, [pc, #280]	; (8011f04 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
 8011dec:	e00e      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
      switch( query_req ) {
        case 0x01: // operating system
#if MIOS32_USB_MIDI_NUM_PORTS > 1
	  // workaround for strange Windows USB MIDI bug:
	  // after power-on we've to flood the IN pipe with messages to get reliable transfers
	  if( port == USB0 && !MIOS32_USB_ForceSingleUSB() ) {
 8011dee:	f002 f873 	bl	8013ed8 <MIOS32_USB_ForceSingleUSB>
 8011df2:	2800      	cmp	r0, #0
 8011df4:	d1f8      	bne.n	8011de8 <MIOS32_MIDI_SYSEX_Cmd+0x84>
 8011df6:	f44f 7580 	mov.w	r5, #256	; 0x100
	    int i;
	    for(i=0; i<256; ++i) {
	      MIOS32_MIDI_SendActiveSense(port);
 8011dfa:	2010      	movs	r0, #16
 8011dfc:	f7ff fddc 	bl	80119b8 <MIOS32_MIDI_SendActiveSense>
	      MIOS32_USB_MIDI_Periodic_mS();
 8011e00:	f002 fc8a 	bl	8014718 <MIOS32_USB_MIDI_Periodic_mS>
#if MIOS32_USB_MIDI_NUM_PORTS > 1
	  // workaround for strange Windows USB MIDI bug:
	  // after power-on we've to flood the IN pipe with messages to get reliable transfers
	  if( port == USB0 && !MIOS32_USB_ForceSingleUSB() ) {
	    int i;
	    for(i=0; i<256; ++i) {
 8011e04:	3d01      	subs	r5, #1
 8011e06:	d1f8      	bne.n	8011dfa <MIOS32_MIDI_SYSEX_Cmd+0x96>
 8011e08:	e7ee      	b.n	8011de8 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
	  break;
        case 0x02: // Board
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_BOARD_STR);
 8011e0a:	493f      	ldr	r1, [pc, #252]	; (8011f08 <MIOS32_MIDI_SYSEX_Cmd+0x1a4>)
 8011e0c:	f7ff fe1e 	bl	8011a4c <MIOS32_MIDI_SYSEX_SendAckStr>
 8011e10:	e06e      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
 8011e12:	493e      	ldr	r1, [pc, #248]	; (8011f0c <MIOS32_MIDI_SYSEX_Cmd+0x1a8>)
 8011e14:	e7fa      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011e16:	4668      	mov	r0, sp
 8011e18:	f000 fd90 	bl	801293c <MIOS32_SYS_SerialNumberGet>
 8011e1c:	2800      	cmp	r0, #0
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011e1e:	4620      	mov	r0, r4
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011e20:	da09      	bge.n	8011e36 <MIOS32_MIDI_SYSEX_Cmd+0xd2>
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  else
	    MIOS32_MIDI_SYSEX_SendAckStr(port, "?");
 8011e22:	493b      	ldr	r1, [pc, #236]	; (8011f10 <MIOS32_MIDI_SYSEX_Cmd+0x1ac>)
 8011e24:	e7f2      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
	  break;
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
 8011e26:	f000 fd7d 	bl	8012924 <MIOS32_SYS_FlashSizeGet>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011e2a:	493a      	ldr	r1, [pc, #232]	; (8011f14 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	4668      	mov	r0, sp
 8011e30:	f003 fc16 	bl	8015660 <sprintf>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011e34:	4620      	mov	r0, r4
 8011e36:	4669      	mov	r1, sp
 8011e38:	e7e8      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
	  break;
        case 0x08: // Application Name Line #1
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE1);
 8011e3a:	4937      	ldr	r1, [pc, #220]	; (8011f18 <MIOS32_MIDI_SYSEX_Cmd+0x1b4>)
 8011e3c:	e7e6      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
	  break;
        case 0x09: // Application Name Line #2
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE2);
 8011e3e:	4937      	ldr	r1, [pc, #220]	; (8011f1c <MIOS32_MIDI_SYSEX_Cmd+0x1b8>)
 8011e40:	e7e4      	b.n	8011e0c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
	  // but other core families could contain an empty stumb!
#endif
	  break;
        default: 
	  // unknown query
	  MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNKNOWN_QUERY);
 8011e42:	4620      	mov	r0, r4
 8011e44:	210e      	movs	r1, #14
 8011e46:	220d      	movs	r2, #13
 8011e48:	e042      	b.n	8011ed0 <MIOS32_MIDI_SYSEX_Cmd+0x16c>
 8011e4a:	4d35      	ldr	r5, [pc, #212]	; (8011f20 <MIOS32_MIDI_SYSEX_Cmd+0x1bc>)
  if( cmd_state == MIOS32_MIDI_SYSEX_CMD_STATE_END )
    MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
#else
  static u8 debug_req = 0xff;

  switch( cmd_state ) {
 8011e4c:	b113      	cbz	r3, 8011e54 <MIOS32_MIDI_SYSEX_Cmd+0xf0>
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d115      	bne.n	8011e7e <MIOS32_MIDI_SYSEX_Cmd+0x11a>
 8011e52:	e002      	b.n	8011e5a <MIOS32_MIDI_SYSEX_Cmd+0xf6>

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      debug_req = 0xff;
 8011e54:	21ff      	movs	r1, #255	; 0xff
 8011e56:	7029      	strb	r1, [r5, #0]
 8011e58:	e04a      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      if( debug_req == 0xff ) {
 8011e5a:	782b      	ldrb	r3, [r5, #0]
 8011e5c:	2bff      	cmp	r3, #255	; 0xff
 8011e5e:	d101      	bne.n	8011e64 <MIOS32_MIDI_SYSEX_Cmd+0x100>
	debug_req = midi_in;
 8011e60:	7029      	strb	r1, [r5, #0]
 8011e62:	e045      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
      } else {
	switch( debug_req ) {
 8011e64:	b11b      	cbz	r3, 8011e6e <MIOS32_MIDI_SYSEX_Cmd+0x10a>
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d142      	bne.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	    if( debug_command_callback_func != NULL )
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011e6a:	4a2e      	ldr	r2, [pc, #184]	; (8011f24 <MIOS32_MIDI_SYSEX_Cmd+0x1c0>)
 8011e6c:	e000      	b.n	8011e70 <MIOS32_MIDI_SYSEX_Cmd+0x10c>
      if( debug_req == 0xff ) {
	debug_req = midi_in;
      } else {
	switch( debug_req ) {
	  case 0x00: // input string
	    if( debug_command_callback_func != NULL )
 8011e6e:	4a2e      	ldr	r2, [pc, #184]	; (8011f28 <MIOS32_MIDI_SYSEX_Cmd+0x1c4>)
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011e70:	6813      	ldr	r3, [r2, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d03c      	beq.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	      filebrowser_command_callback_func(last_sysex_port, (char)midi_in);
 8011e76:	482d      	ldr	r0, [pc, #180]	; (8011f2c <MIOS32_MIDI_SYSEX_Cmd+0x1c8>)
 8011e78:	7800      	ldrb	r0, [r0, #0]
 8011e7a:	4798      	blx	r3
 8011e7c:	e038      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	}
      }
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      if( debug_req == 0x00 ) {
 8011e7e:	782a      	ldrb	r2, [r5, #0]
 8011e80:	b9a2      	cbnz	r2, 8011eac <MIOS32_MIDI_SYSEX_Cmd+0x148>
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011e82:	210f      	movs	r1, #15
 8011e84:	f7ff fe10 	bl	8011aa8 <MIOS32_MIDI_SYSEX_SendAck>

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
 8011e88:	7829      	ldrb	r1, [r5, #0]
 8011e8a:	2900      	cmp	r1, #0
 8011e8c:	d130      	bne.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
 8011e8e:	4a26      	ldr	r2, [pc, #152]	; (8011f28 <MIOS32_MIDI_SYSEX_Cmd+0x1c4>)
 8011e90:	6810      	ldr	r0, [r2, #0]
 8011e92:	bb68      	cbnz	r0, 8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011e94:	4d26      	ldr	r5, [pc, #152]	; (8011f30 <MIOS32_MIDI_SYSEX_Cmd+0x1cc>)
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011e96:	4620      	mov	r0, r4
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011e98:	782d      	ldrb	r5, [r5, #0]
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011e9a:	f7ff ff57 	bl	8011d4c <MIOS32_MIDI_DebugPortSet>
	  MIOS32_MIDI_SendDebugString("[MIOS32_MIDI_SYSEX_Cmd_Debug] command handler not implemented by application\n");
 8011e9e:	4825      	ldr	r0, [pc, #148]	; (8011f34 <MIOS32_MIDI_SYSEX_Cmd+0x1d0>)
 8011ea0:	f7ff fe9c 	bl	8011bdc <MIOS32_MIDI_SendDebugString>
	  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	f7ff ff51 	bl	8011d4c <MIOS32_MIDI_DebugPortSet>
 8011eaa:	e021      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	}

      } else if( debug_req == 0x01 && filebrowser_command_callback_func != NULL ) {
 8011eac:	2a01      	cmp	r2, #1
 8011eae:	d102      	bne.n	8011eb6 <MIOS32_MIDI_SYSEX_Cmd+0x152>
 8011eb0:	481c      	ldr	r0, [pc, #112]	; (8011f24 <MIOS32_MIDI_SYSEX_Cmd+0x1c0>)
 8011eb2:	6803      	ldr	r3, [r0, #0]
 8011eb4:	b9e3      	cbnz	r3, 8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	// we expect that the filebrowser handler sends back a string
      } else {
	// send disacknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	210e      	movs	r1, #14
 8011eba:	2210      	movs	r2, #16
 8011ebc:	e008      	b.n	8011ed0 <MIOS32_MIDI_SYSEX_Cmd+0x16c>
 8011ebe:	4a1e      	ldr	r2, [pc, #120]	; (8011f38 <MIOS32_MIDI_SYSEX_Cmd+0x1d4>)
/////////////////////////////////////////////////////////////////////////////
// Command 0F: Ping (just send back acknowledge if no additional byte has been received)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd_Ping(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  switch( cmd_state ) {
 8011ec0:	b10b      	cbz	r3, 8011ec6 <MIOS32_MIDI_SYSEX_Cmd+0x162>
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d101      	bne.n	8011eca <MIOS32_MIDI_SYSEX_Cmd+0x166>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      sysex_state.ping.PING_BYTE_RECEIVED = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      sysex_state.ping.PING_BYTE_RECEIVED = 1;
 8011ec6:	6053      	str	r3, [r2, #4]
 8011ec8:	e012      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      // TODO: send 0xf7 if merger enabled

      // send acknowledge if no additional byte has been received
      // to avoid feedback loop if two cores are directly connected
      if( !sysex_state.ping.PING_BYTE_RECEIVED )
 8011eca:	6852      	ldr	r2, [r2, #4]
 8011ecc:	b982      	cbnz	r2, 8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011ece:	4629      	mov	r1, r5
 8011ed0:	f7ff fdea 	bl	8011aa8 <MIOS32_MIDI_SYSEX_SendAck>
 8011ed4:	e00c      	b.n	8011ef0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>
      MIOS32_MIDI_SYSEX_Cmd_Ping(port, cmd_state, midi_in);
      break;
    default:
      // unknown command
      // TODO: send 0xf7 if merger enabled
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
 8011ed6:	210e      	movs	r1, #14
 8011ed8:	460a      	mov	r2, r1
 8011eda:	4620      	mov	r0, r4
 8011edc:	f7ff fde4 	bl	8011aa8 <MIOS32_MIDI_SYSEX_SendAck>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011ee0:	4815      	ldr	r0, [pc, #84]	; (8011f38 <MIOS32_MIDI_SYSEX_Cmd+0x1d4>)
  sysex_cmd = 0;
 8011ee2:	4905      	ldr	r1, [pc, #20]	; (8011ef8 <MIOS32_MIDI_SYSEX_Cmd+0x194>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011ee4:	7803      	ldrb	r3, [r0, #0]
  sysex_cmd = 0;
 8011ee6:	2200      	movs	r2, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011ee8:	f36f 0307 	bfc	r3, #0, #8
 8011eec:	7003      	strb	r3, [r0, #0]
  sysex_cmd = 0;
 8011eee:	700a      	strb	r2, [r1, #0]
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
      MIOS32_MIDI_SYSEX_CmdFinished();      
  }

  return 0; // no error
}
 8011ef0:	2000      	movs	r0, #0
 8011ef2:	b00b      	add	sp, #44	; 0x2c
 8011ef4:	bd30      	pop	{r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20000284 	.word	0x20000284
 8011efc:	200002ac 	.word	0x200002ac
 8011f00:	0801c191 	.word	0x0801c191
 8011f04:	0801c311 	.word	0x0801c311
 8011f08:	0801c318 	.word	0x0801c318
 8011f0c:	0801c327 	.word	0x0801c327
 8011f10:	0801c331 	.word	0x0801c331
 8011f14:	0801c633 	.word	0x0801c633
 8011f18:	0801bff5 	.word	0x0801bff5
 8011f1c:	0801c222 	.word	0x0801c222
 8011f20:	20000006 	.word	0x20000006
 8011f24:	2000028c 	.word	0x2000028c
 8011f28:	2000029c 	.word	0x2000029c
 8011f2c:	20000290 	.word	0x20000290
 8011f30:	20000005 	.word	0x20000005
 8011f34:	0801c333 	.word	0x0801c333
 8011f38:	20000294 	.word	0x20000294

08011f3c <MIOS32_MIDI_SYSEX_Parser>:
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011f3c:	29f7      	cmp	r1, #247	; 0xf7

/////////////////////////////////////////////////////////////////////////////
// This function parses an incoming sysex stream for MIOS32 commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
 8011f3e:	b510      	push	{r4, lr}
 8011f40:	460a      	mov	r2, r1
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011f42:	d85a      	bhi.n	8011ffa <MIOS32_MIDI_SYSEX_Parser+0xbe>
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
 8011f44:	4b2e      	ldr	r3, [pc, #184]	; (8012000 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011f46:	7819      	ldrb	r1, [r3, #0]
 8011f48:	f001 0308 	and.w	r3, r1, #8
 8011f4c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8011f50:	b11b      	cbz	r3, 8011f5a <MIOS32_MIDI_SYSEX_Parser+0x1e>
 8011f52:	4b2c      	ldr	r3, [pc, #176]	; (8012004 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	4283      	cmp	r3, r0
 8011f58:	d14c      	bne.n	8011ff4 <MIOS32_MIDI_SYSEX_Parser+0xb8>
  // USB upload is only allowed via USB0
  // this covers the scenario where other USB1..7 ports are used for MIDI Port forwarding, and a MIOS8 core
  // is connected to one of these ports
  // MIOS Studio reports "Detected MIOS8 and MIOS32 response - selection not supported yet!" in this case
  // By ignoring >= USB1 <= USB7 we have at least a workaround which works (for example) for MIDIbox LC
  if( port >= USB1 && port <= USB15 )
 8011f5a:	f1a0 0311 	sub.w	r3, r0, #17
 8011f5e:	2b06      	cmp	r3, #6
 8011f60:	d948      	bls.n	8011ff4 <MIOS32_MIDI_SYSEX_Parser+0xb8>
    return -1;

  last_sysex_port = port;
 8011f62:	4b28      	ldr	r3, [pc, #160]	; (8012004 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011f64:	7018      	strb	r0, [r3, #0]

  // branch depending on state
  if( !sysex_state.general.MY_SYSEX ) {
 8011f66:	bb04      	cbnz	r4, 8011faa <MIOS32_MIDI_SYSEX_Parser+0x6e>
    if( (sysex_state.general.CTR < sizeof(mios32_midi_sysex_header) && midi_in != mios32_midi_sysex_header[sysex_state.general.CTR]) ||
 8011f68:	4825      	ldr	r0, [pc, #148]	; (8012000 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011f6a:	7803      	ldrb	r3, [r0, #0]
 8011f6c:	f003 0307 	and.w	r3, r3, #7
 8011f70:	2b04      	cmp	r3, #4
 8011f72:	d803      	bhi.n	8011f7c <MIOS32_MIDI_SYSEX_Parser+0x40>
 8011f74:	4824      	ldr	r0, [pc, #144]	; (8012008 <MIOS32_MIDI_SYSEX_Parser+0xcc>)
 8011f76:	5cc0      	ldrb	r0, [r0, r3]
 8011f78:	4290      	cmp	r0, r2
 8011f7a:	d121      	bne.n	8011fc0 <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011f7c:	f001 0107 	and.w	r1, r1, #7
 8011f80:	2905      	cmp	r1, #5
 8011f82:	d103      	bne.n	8011f8c <MIOS32_MIDI_SYSEX_Parser+0x50>
	(sysex_state.general.CTR == sizeof(mios32_midi_sysex_header) && midi_in != sysex_device_id) ) {
 8011f84:	4821      	ldr	r0, [pc, #132]	; (801200c <MIOS32_MIDI_SYSEX_Parser+0xd0>)
 8011f86:	7801      	ldrb	r1, [r0, #0]
 8011f88:	4291      	cmp	r1, r2
 8011f8a:	d119      	bne.n	8011fc0 <MIOS32_MIDI_SYSEX_Parser+0x84>
      // incoming byte doesn't match
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      if( ++sysex_state.general.CTR > sizeof(mios32_midi_sysex_header) ) {
 8011f8c:	1c5a      	adds	r2, r3, #1
 8011f8e:	4b1c      	ldr	r3, [pc, #112]	; (8012000 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011f90:	7819      	ldrb	r1, [r3, #0]
 8011f92:	f002 0007 	and.w	r0, r2, #7
 8011f96:	f360 0102 	bfi	r1, r0, #0, #3
 8011f9a:	2805      	cmp	r0, #5
 8011f9c:	7019      	strb	r1, [r3, #0]
 8011f9e:	d92c      	bls.n	8011ffa <MIOS32_MIDI_SYSEX_Parser+0xbe>
	// complete header received, waiting for data
	sysex_state.general.MY_SYSEX = 1;
 8011fa0:	b2ca      	uxtb	r2, r1
 8011fa2:	f042 0008 	orr.w	r0, r2, #8
 8011fa6:	7018      	strb	r0, [r3, #0]
 8011fa8:	e027      	b.n	8011ffa <MIOS32_MIDI_SYSEX_Parser+0xbe>
      }
    }
  } else {
    // check for end of SysEx message or invalid status byte
    if( midi_in >= 0x80 ) {
 8011faa:	0613      	lsls	r3, r2, #24
 8011fac:	d511      	bpl.n	8011fd2 <MIOS32_MIDI_SYSEX_Parser+0x96>
      if( midi_in == 0xf7 && sysex_state.general.CMD ) {
 8011fae:	2af7      	cmp	r2, #247	; 0xf7
 8011fb0:	d106      	bne.n	8011fc0 <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011fb2:	f001 0110 	and.w	r1, r1, #16
 8011fb6:	b2cb      	uxtb	r3, r1
 8011fb8:	b113      	cbz	r3, 8011fc0 <MIOS32_MIDI_SYSEX_Parser+0x84>
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
 8011fba:	2102      	movs	r1, #2
 8011fbc:	f7ff fed2 	bl	8011d64 <MIOS32_MIDI_SYSEX_Cmd>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011fc0:	4b0f      	ldr	r3, [pc, #60]	; (8012000 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
  sysex_cmd = 0;
 8011fc2:	4a13      	ldr	r2, [pc, #76]	; (8012010 <MIOS32_MIDI_SYSEX_Parser+0xd4>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011fc4:	7819      	ldrb	r1, [r3, #0]
  sysex_cmd = 0;
 8011fc6:	2000      	movs	r0, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011fc8:	f36f 0107 	bfc	r1, #0, #8
 8011fcc:	7019      	strb	r1, [r3, #0]
  sysex_cmd = 0;
 8011fce:	7010      	strb	r0, [r2, #0]
 8011fd0:	bd10      	pop	{r4, pc}
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
      }
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
 8011fd2:	f001 0410 	and.w	r4, r1, #16
 8011fd6:	b2e4      	uxtb	r4, r4
 8011fd8:	b944      	cbnz	r4, 8011fec <MIOS32_MIDI_SYSEX_Parser+0xb0>
	sysex_state.general.CMD = 1;
 8011fda:	4b09      	ldr	r3, [pc, #36]	; (8012000 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011fdc:	7819      	ldrb	r1, [r3, #0]
 8011fde:	f041 0110 	orr.w	r1, r1, #16
 8011fe2:	7019      	strb	r1, [r3, #0]
	sysex_cmd = midi_in;
 8011fe4:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <MIOS32_MIDI_SYSEX_Parser+0xd4>)
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
 8011fe6:	4621      	mov	r1, r4
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
	sysex_state.general.CMD = 1;
	sysex_cmd = midi_in;
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	e000      	b.n	8011fee <MIOS32_MIDI_SYSEX_Parser+0xb2>
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
      }
      else
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
 8011fec:	2101      	movs	r1, #1
 8011fee:	f7ff feb9 	bl	8011d64 <MIOS32_MIDI_SYSEX_Cmd>
 8011ff2:	e002      	b.n	8011ffa <MIOS32_MIDI_SYSEX_Parser+0xbe>
  if( midi_in >= 0xf8 )
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
    return -1;
 8011ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ff8:	bd10      	pop	{r4, pc}
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
    return 0;
 8011ffa:	2000      	movs	r0, #0
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
    }
  }

  return 0; // no error
}
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	bf00      	nop
 8012000:	20000294 	.word	0x20000294
 8012004:	20000290 	.word	0x20000290
 8012008:	0801c381 	.word	0x0801c381
 801200c:	20000291 	.word	0x20000291
 8012010:	20000284 	.word	0x20000284

08012014 <MIOS32_MIDI_ReceivePackage>:
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8012014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	f001 030f 	and.w	r3, r1, #15
 801201c:	4617      	mov	r7, r2
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 801201e:	f103 0208 	add.w	r2, r3, #8
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8012022:	4688      	mov	r8, r1
 8012024:	f3c1 2907 	ubfx	r9, r1, #8, #8
 8012028:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 801202c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8012030:	f002 010f 	and.w	r1, r2, #15
 8012034:	2906      	cmp	r1, #6
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8012036:	4606      	mov	r6, r0
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8012038:	d803      	bhi.n	8012042 <MIOS32_MIDI_ReceivePackage+0x2e>
    if( callback_package != NULL )
 801203a:	2f00      	cmp	r7, #0
 801203c:	f040 8091 	bne.w	8012162 <MIOS32_MIDI_ReceivePackage+0x14e>
 8012040:	e0f1      	b.n	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8012042:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8012046:	d008      	beq.n	801205a <MIOS32_MIDI_ReceivePackage+0x46>
       ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 8012048:	f103 000c 	add.w	r0, r3, #12
  if( package.type >= 0x8 && package.type < 0xf ) {
    if( callback_package != NULL )
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 801204c:	f000 020f 	and.w	r2, r0, #15
 8012050:	2a03      	cmp	r2, #3
 8012052:	d82c      	bhi.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
       ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 8012054:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 8012058:	d029      	beq.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
 801205a:	4a74      	ldr	r2, [pc, #464]	; (801222c <MIOS32_MIDI_ReceivePackage+0x218>)
 801205c:	e9d2 4500 	ldrd	r4, r5, [r2]
 8012060:	ea54 0105 	orrs.w	r1, r4, r5
 8012064:	d123      	bne.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
        switch( port & 0xf0 ) {
 8012066:	f006 00f0 	and.w	r0, r6, #240	; 0xf0
 801206a:	2830      	cmp	r0, #48	; 0x30
 801206c:	f04f 0100 	mov.w	r1, #0
 8012070:	d00c      	beq.n	801208c <MIOS32_MIDI_ReceivePackage+0x78>
 8012072:	2850      	cmp	r0, #80	; 0x50
 8012074:	d013      	beq.n	801209e <MIOS32_MIDI_ReceivePackage+0x8a>
 8012076:	2810      	cmp	r0, #16
 8012078:	d119      	bne.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
          case USB0://..15
            sysex_timeout_ctr = 0;
 801207a:	486d      	ldr	r0, [pc, #436]	; (8012230 <MIOS32_MIDI_ReceivePackage+0x21c>)
 801207c:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 801207e:	f006 010f 	and.w	r1, r6, #15
 8012082:	2001      	movs	r0, #1
 8012084:	fa00 f101 	lsl.w	r1, r0, r1
 8012088:	8011      	strh	r1, [r2, #0]
            break;
 801208a:	e010      	b.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
          case UART0://..15
            // already done in MIOS32_UART_MIDI_PackageReceive()
            break;
          case IIC0://..15
            sysex_timeout_ctr = 0;
 801208c:	4868      	ldr	r0, [pc, #416]	; (8012230 <MIOS32_MIDI_ReceivePackage+0x21c>)
 801208e:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8012090:	f006 010f 	and.w	r1, r6, #15
 8012094:	2001      	movs	r0, #1
 8012096:	fa00 f101 	lsl.w	r1, r0, r1
 801209a:	8051      	strh	r1, [r2, #2]
            break;
 801209c:	e007      	b.n	80120ae <MIOS32_MIDI_ReceivePackage+0x9a>
          case SPIM0://..15
            sysex_timeout_ctr = 0;
 801209e:	4864      	ldr	r0, [pc, #400]	; (8012230 <MIOS32_MIDI_ReceivePackage+0x21c>)
 80120a0:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.spi_receives = (1 << (port & 0xf));
 80120a2:	f006 010f 	and.w	r1, r6, #15
 80120a6:	2001      	movs	r0, #1
 80120a8:	fa00 f101 	lsl.w	r1, r0, r1
 80120ac:	8091      	strh	r1, [r2, #4]
        }
      }
    }
    
    u8 filter_sysex = 0;
    switch( package.type ) {
 80120ae:	2b0f      	cmp	r3, #15
 80120b0:	f200 80b9 	bhi.w	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
 80120b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80120b8:	00520052 	.word	0x00520052
 80120bc:	00520052 	.word	0x00520052
 80120c0:	004c0010 	.word	0x004c0010
 80120c4:	00580058 	.word	0x00580058
 80120c8:	00b700b7 	.word	0x00b700b7
 80120cc:	00b700b7 	.word	0x00b700b7
 80120d0:	00b700b7 	.word	0x00b700b7
 80120d4:	001000b7 	.word	0x001000b7
        break;
        
      case 0x4: // SysEx starts or continues (3 bytes)
      case 0xf: // Single byte is interpreted as SysEx as well (I noticed that portmidi sometimes sends single bytes!)
        
        if( package.evnt0 >= 0xf8 ) { // relevant for package type 0xf
 80120d8:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 80120dc:	d83e      	bhi.n	801215c <MIOS32_MIDI_ReceivePackage+0x148>
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
        if( package.type != 0x0f ) {
 80120de:	f36f 1807 	bfc	r8, #4, #4
          if( callback_package != NULL )
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 80120e2:	4630      	mov	r0, r6
 80120e4:	4649      	mov	r1, r9
        if( package.type != 0x0f ) {
 80120e6:	f008 050f 	and.w	r5, r8, #15
          if( callback_package != NULL )
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 80120ea:	f7ff ff27 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
        if( package.type != 0x0f ) {
 80120ee:	2d0f      	cmp	r5, #15
 80120f0:	d007      	beq.n	8012102 <MIOS32_MIDI_ReceivePackage+0xee>
          MIOS32_MIDI_SYSEX_Parser(port, package.evnt1); // -> forward to MIOS32 SysEx Parser
 80120f2:	4659      	mov	r1, fp
 80120f4:	4630      	mov	r0, r6
 80120f6:	f7ff ff21 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
          MIOS32_MIDI_SYSEX_Parser(port, package.evnt2); // -> forward to MIOS32 SysEx Parser
 80120fa:	4630      	mov	r0, r6
 80120fc:	4651      	mov	r1, sl
 80120fe:	f7ff ff1d 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
        }
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8012102:	4b4c      	ldr	r3, [pc, #304]	; (8012234 <MIOS32_MIDI_ReceivePackage+0x220>)
 8012104:	781a      	ldrb	r2, [r3, #0]
 8012106:	f002 0008 	and.w	r0, r2, #8
 801210a:	b2c1      	uxtb	r1, r0
 801210c:	2900      	cmp	r1, #0
 801210e:	f040 808a 	bne.w	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
          if( sysex_callback_func != NULL ) {
 8012112:	4c49      	ldr	r4, [pc, #292]	; (8012238 <MIOS32_MIDI_ReceivePackage+0x224>)
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	f000 8083 	beq.w	8012222 <MIOS32_MIDI_ReceivePackage+0x20e>
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 801211c:	4649      	mov	r1, r9
 801211e:	4630      	mov	r0, r6
 8012120:	4798      	blx	r3
            if( package.type != 0x0f ) {
 8012122:	2d0f      	cmp	r5, #15
        }
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 8012124:	4681      	mov	r9, r0
 8012126:	b2c1      	uxtb	r1, r0
            if( package.type != 0x0f ) {
 8012128:	d00d      	beq.n	8012146 <MIOS32_MIDI_ReceivePackage+0x132>
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 801212a:	6825      	ldr	r5, [r4, #0]
 801212c:	4659      	mov	r1, fp
 801212e:	4630      	mov	r0, r6
 8012130:	47a8      	blx	r5
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8012132:	4651      	mov	r1, sl
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
            if( package.type != 0x0f ) {
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8012134:	4605      	mov	r5, r0
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8012136:	6822      	ldr	r2, [r4, #0]
 8012138:	4630      	mov	r0, r6
 801213a:	4790      	blx	r2
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
            if( package.type != 0x0f ) {
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 801213c:	4328      	orrs	r0, r5
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 801213e:	ea40 0909 	orr.w	r9, r0, r9
 8012142:	fa5f f189 	uxtb.w	r1, r9
            }
          }
          
          if( callback_package != NULL && !filter_sysex )
 8012146:	2f00      	cmp	r7, #0
 8012148:	d06d      	beq.n	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
 801214a:	2900      	cmp	r1, #0
 801214c:	d16b      	bne.n	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
 801214e:	e060      	b.n	8012212 <MIOS32_MIDI_ReceivePackage+0x1fe>
        }
#endif
        break;
        
      case 0x5:   // Single-byte System Common Message or SysEx ends with following single byte.
        if( (package.evnt0 >= 0xf8) || (package.evnt0 == 0xf6) ) {
 8012150:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 8012154:	d802      	bhi.n	801215c <MIOS32_MIDI_ReceivePackage+0x148>
 8012156:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 801215a:	d105      	bne.n	8012168 <MIOS32_MIDI_ReceivePackage+0x154>
          if( callback_package != NULL )
 801215c:	2f00      	cmp	r7, #0
 801215e:	d062      	beq.n	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
            callback_package(port, package); // -> forwarded as event
 8012160:	4630      	mov	r0, r6
 8012162:	f028 01f0 	bic.w	r1, r8, #240	; 0xf0
 8012166:	e056      	b.n	8012216 <MIOS32_MIDI_ReceivePackage+0x202>
        }
        // no >= 0xf8 or == 0xf6 event: continue!
        
      case 0x6:   // SysEx ends with following two bytes.
      case 0x7: { // SysEx ends with following three bytes.
        u8 num_bytes = package.type - 0x5 + 1;
 8012168:	1f1c      	subs	r4, r3, #4
        u8 current_byte = 0;
        
        if( num_bytes >= 1 ) {
 801216a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801216e:	d054      	beq.n	801221a <MIOS32_MIDI_ReceivePackage+0x206>
          current_byte = package.evnt0;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8012170:	4630      	mov	r0, r6
 8012172:	4649      	mov	r1, r9
 8012174:	f7ff fee2 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8012178:	4b2e      	ldr	r3, [pc, #184]	; (8012234 <MIOS32_MIDI_ReceivePackage+0x220>)
 801217a:	781d      	ldrb	r5, [r3, #0]
 801217c:	f005 0208 	and.w	r2, r5, #8
 8012180:	b2d0      	uxtb	r0, r2
 8012182:	b938      	cbnz	r0, 8012194 <MIOS32_MIDI_ReceivePackage+0x180>
            if( sysex_callback_func != NULL )
 8012184:	492c      	ldr	r1, [pc, #176]	; (8012238 <MIOS32_MIDI_ReceivePackage+0x224>)
 8012186:	680b      	ldr	r3, [r1, #0]
 8012188:	b133      	cbz	r3, 8012198 <MIOS32_MIDI_ReceivePackage+0x184>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 801218a:	4630      	mov	r0, r6
 801218c:	4649      	mov	r1, r9
 801218e:	4798      	blx	r3
 8012190:	b2c5      	uxtb	r5, r0
 8012192:	e002      	b.n	801219a <MIOS32_MIDI_ReceivePackage+0x186>
            // no timeout protection for remaining interfaces (yet)
        }
      }
    }
    
    u8 filter_sysex = 0;
 8012194:	2500      	movs	r5, #0
 8012196:	e000      	b.n	801219a <MIOS32_MIDI_ReceivePackage+0x186>
 8012198:	461d      	mov	r5, r3
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 2 ) {
 801219a:	2c01      	cmp	r4, #1
 801219c:	d03f      	beq.n	801221e <MIOS32_MIDI_ReceivePackage+0x20a>
          current_byte = package.evnt1;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 801219e:	4659      	mov	r1, fp
 80121a0:	4630      	mov	r0, r6
 80121a2:	f7ff fecb 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 80121a6:	4a23      	ldr	r2, [pc, #140]	; (8012234 <MIOS32_MIDI_ReceivePackage+0x220>)
 80121a8:	7810      	ldrb	r0, [r2, #0]
 80121aa:	f000 0108 	and.w	r1, r0, #8
 80121ae:	b2cb      	uxtb	r3, r1
 80121b0:	b93b      	cbnz	r3, 80121c2 <MIOS32_MIDI_ReceivePackage+0x1ae>
            if( sysex_callback_func != NULL )
 80121b2:	4a21      	ldr	r2, [pc, #132]	; (8012238 <MIOS32_MIDI_ReceivePackage+0x224>)
 80121b4:	6813      	ldr	r3, [r2, #0]
 80121b6:	b123      	cbz	r3, 80121c2 <MIOS32_MIDI_ReceivePackage+0x1ae>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 80121b8:	4630      	mov	r0, r6
 80121ba:	4659      	mov	r1, fp
 80121bc:	4798      	blx	r3
 80121be:	4328      	orrs	r0, r5
 80121c0:	b2c5      	uxtb	r5, r0
          }
#endif
        }
        
        if( num_bytes >= 3 ) {
 80121c2:	2c02      	cmp	r4, #2
 80121c4:	d012      	beq.n	80121ec <MIOS32_MIDI_ReceivePackage+0x1d8>
          current_byte = package.evnt2;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 80121c6:	4651      	mov	r1, sl
 80121c8:	4630      	mov	r0, r6
 80121ca:	f7ff feb7 	bl	8011f3c <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 80121ce:	4819      	ldr	r0, [pc, #100]	; (8012234 <MIOS32_MIDI_ReceivePackage+0x220>)
 80121d0:	7801      	ldrb	r1, [r0, #0]
 80121d2:	f001 0208 	and.w	r2, r1, #8
 80121d6:	b2d3      	uxtb	r3, r2
 80121d8:	b94b      	cbnz	r3, 80121ee <MIOS32_MIDI_ReceivePackage+0x1da>
            if( sysex_callback_func != NULL )
 80121da:	4817      	ldr	r0, [pc, #92]	; (8012238 <MIOS32_MIDI_ReceivePackage+0x224>)
 80121dc:	6802      	ldr	r2, [r0, #0]
 80121de:	b132      	cbz	r2, 80121ee <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 80121e0:	4630      	mov	r0, r6
 80121e2:	4651      	mov	r1, sl
 80121e4:	4790      	blx	r2
 80121e6:	4328      	orrs	r0, r5
 80121e8:	b2c5      	uxtb	r5, r0
 80121ea:	e000      	b.n	80121ee <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 3 ) {
 80121ec:	46da      	mov	sl, fp
          }
#endif
        }
        
        // reset timeout protection if required
        if( current_byte == 0xf7 )
 80121ee:	f1ba 0ff7 	cmp.w	sl, #247	; 0xf7
 80121f2:	d104      	bne.n	80121fe <MIOS32_MIDI_ReceivePackage+0x1ea>
          sysex_timeout_ctr_flags.ALL = 0;
 80121f4:	4b0d      	ldr	r3, [pc, #52]	; (801222c <MIOS32_MIDI_ReceivePackage+0x218>)
 80121f6:	2000      	movs	r0, #0
 80121f8:	2100      	movs	r1, #0
 80121fa:	e9c3 0100 	strd	r0, r1, [r3]
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 80121fe:	490d      	ldr	r1, [pc, #52]	; (8012234 <MIOS32_MIDI_ReceivePackage+0x220>)
 8012200:	7808      	ldrb	r0, [r1, #0]
 8012202:	f000 0208 	and.w	r2, r0, #8
 8012206:	b2d3      	uxtb	r3, r2
 8012208:	b96b      	cbnz	r3, 8012226 <MIOS32_MIDI_ReceivePackage+0x212>
          // forward as package if not filtered
          if( callback_package != NULL && !filter_sysex )
 801220a:	b167      	cbz	r7, 8012226 <MIOS32_MIDI_ReceivePackage+0x212>
 801220c:	b95d      	cbnz	r5, 8012226 <MIOS32_MIDI_ReceivePackage+0x212>
            callback_package(port, package);
 801220e:	f365 1807 	bfi	r8, r5, #4, #4
 8012212:	4630      	mov	r0, r6
 8012214:	4641      	mov	r1, r8
 8012216:	47b8      	blx	r7
 8012218:	e005      	b.n	8012226 <MIOS32_MIDI_ReceivePackage+0x212>
            // no timeout protection for remaining interfaces (yet)
        }
      }
    }
    
    u8 filter_sysex = 0;
 801221a:	4625      	mov	r5, r4
 801221c:	e7ef      	b.n	80121fe <MIOS32_MIDI_ReceivePackage+0x1ea>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 2 ) {
 801221e:	46ca      	mov	sl, r9
 8012220:	e7e5      	b.n	80121ee <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
            }
          }
          
          if( callback_package != NULL && !filter_sysex )
 8012222:	2f00      	cmp	r7, #0
 8012224:	d1f5      	bne.n	8012212 <MIOS32_MIDI_ReceivePackage+0x1fe>
      } break;
    }
  }
  
  return 0; // no error
}
 8012226:	2000      	movs	r0, #0
 8012228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222c:	200002a0 	.word	0x200002a0
 8012230:	20000292 	.word	0x20000292
 8012234:	20000294 	.word	0x20000294
 8012238:	200002a8 	.word	0x200002a8

0801223c <MIOS32_MIDI_Receive_Handler>:
//! which can be installed via MIOS32_MIDI_SysExCallback_Init()
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Receive_Handler(void *_callback_package)
{
 801223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012240:	4606      	mov	r6, r0
 8012242:	b08e      	sub	sp, #56	; 0x38
  // handle all USB MIDI packages
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_USB_MIDI_PackageReceive(&package)) >= 0 ) {
 8012244:	a801      	add	r0, sp, #4
 8012246:	f002 fa1d 	bl	8014684 <MIOS32_USB_MIDI_PackageReceive>
 801224a:	2800      	cmp	r0, #0
 801224c:	db07      	blt.n	801225e <MIOS32_MIDI_Receive_Handler+0x22>
      MIOS32_MIDI_ReceivePackage(USB0 + package.cable, package, _callback_package);
 801224e:	9901      	ldr	r1, [sp, #4]
 8012250:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8012254:	3010      	adds	r0, #16
 8012256:	4632      	mov	r2, r6
 8012258:	f7ff fedc 	bl	8012014 <MIOS32_MIDI_ReceivePackage>
 801225c:	e7f2      	b.n	8012244 <MIOS32_MIDI_Receive_Handler+0x8>
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 801225e:	4d42      	ldr	r5, [pc, #264]	; (8012368 <MIOS32_MIDI_Receive_Handler+0x12c>)
 8012260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012262:	ac04      	add	r4, sp, #16
 8012264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801226a:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 801226e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 8012272:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8012276:	b34b      	cbz	r3, 80122cc <MIOS32_MIDI_Receive_Handler+0x90>
 8012278:	2400      	movs	r4, #0
 801227a:	4625      	mov	r5, r4
 801227c:	4627      	mov	r7, r4
      int intf = 0;
      do {
	mios32_midi_package_t package;

	// last table entry?
	if( !midi_intf_table[intf].port ) {
 801227e:	a80e      	add	r0, sp, #56	; 0x38
 8012280:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 8012284:	f811 2c28 	ldrb.w	r2, [r1, #-40]
 8012288:	b912      	cbnz	r2, 8012290 <MIOS32_MIDI_Receive_Handler+0x54>
	  if( !packages_forwarded_this_round )
 801228a:	b1fd      	cbz	r5, 80122cc <MIOS32_MIDI_Receive_Handler+0x90>
	    break; // no new package

	  intf = 0; // at least one package: restart
 801228c:	4614      	mov	r4, r2
	  packages_forwarded_this_round = 0;
 801228e:	4615      	mov	r5, r2
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8012290:	ab0e      	add	r3, sp, #56	; 0x38
 8012292:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8012296:	a902      	add	r1, sp, #8
	  intf = 0; // at least one package: restart
	  packages_forwarded_this_round = 0;
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8012298:	f810 8c28 	ldrb.w	r8, [r0, #-40]
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 801229c:	f850 2c24 	ldr.w	r2, [r0, #-36]
 80122a0:	f008 000f 	and.w	r0, r8, #15
 80122a4:	4790      	blx	r2

	if( status == -10 ) { // receive timeout?
 80122a6:	f110 0f0a 	cmn.w	r0, #10
 80122aa:	d103      	bne.n	80122b4 <MIOS32_MIDI_Receive_Handler+0x78>
	  MIOS32_MIDI_TimeOut(port);
 80122ac:	4640      	mov	r0, r8
 80122ae:	f7ff fcd9 	bl	8011c64 <MIOS32_MIDI_TimeOut>
 80122b2:	e008      	b.n	80122c6 <MIOS32_MIDI_Receive_Handler+0x8a>
	} else if( status >= 0 ) { // message received?
 80122b4:	2800      	cmp	r0, #0
 80122b6:	db06      	blt.n	80122c6 <MIOS32_MIDI_Receive_Handler+0x8a>
	  ++packages_forwarded;
	  ++packages_forwarded_this_round;
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 80122b8:	4640      	mov	r0, r8
 80122ba:	9902      	ldr	r1, [sp, #8]
 80122bc:	4632      	mov	r2, r6
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);

	if( status == -10 ) { // receive timeout?
	  MIOS32_MIDI_TimeOut(port);
	} else if( status >= 0 ) { // message received?
	  ++packages_forwarded;
 80122be:	3701      	adds	r7, #1
	  ++packages_forwarded_this_round;
 80122c0:	3501      	adds	r5, #1
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 80122c2:	f7ff fea7 	bl	8012014 <MIOS32_MIDI_ReceivePackage>
	}

	++intf;
 80122c6:	3401      	adds	r4, #1
      } while( packages_forwarded < 10 );
 80122c8:	2f09      	cmp	r7, #9
 80122ca:	ddd8      	ble.n	801227e <MIOS32_MIDI_Receive_Handler+0x42>
  // handle all SPI MIDI packages
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_SPI_MIDI_PackageReceive(&package)) >= 0 ) {
 80122cc:	a803      	add	r0, sp, #12
 80122ce:	f000 faa3 	bl	8012818 <MIOS32_SPI_MIDI_PackageReceive>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	db07      	blt.n	80122e6 <MIOS32_MIDI_Receive_Handler+0xaa>
      MIOS32_MIDI_ReceivePackage(SPIM0 + package.cable, package, _callback_package);
 80122d6:	9903      	ldr	r1, [sp, #12]
 80122d8:	f3c1 1003 	ubfx	r0, r1, #4, #4
 80122dc:	3050      	adds	r0, #80	; 0x50
 80122de:	4632      	mov	r2, r6
 80122e0:	f7ff fe98 	bl	8012014 <MIOS32_MIDI_ReceivePackage>
 80122e4:	e7f2      	b.n	80122cc <MIOS32_MIDI_Receive_Handler+0x90>
  }
#endif
  

  // SysEx timeout detected by this handler?
  if( sysex_timeout_ctr_flags.ALL && sysex_timeout_ctr > 1000 ) {
 80122e6:	4921      	ldr	r1, [pc, #132]	; (801236c <MIOS32_MIDI_Receive_Handler+0x130>)
 80122e8:	e9d1 2300 	ldrd	r2, r3, [r1]
 80122ec:	ea52 0003 	orrs.w	r0, r2, r3
 80122f0:	d035      	beq.n	801235e <MIOS32_MIDI_Receive_Handler+0x122>
 80122f2:	4b1f      	ldr	r3, [pc, #124]	; (8012370 <MIOS32_MIDI_Receive_Handler+0x134>)
 80122f4:	8818      	ldrh	r0, [r3, #0]
 80122f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80122fa:	d930      	bls.n	801235e <MIOS32_MIDI_Receive_Handler+0x122>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
 80122fc:	880a      	ldrh	r2, [r1, #0]
 80122fe:	b162      	cbz	r2, 801231a <MIOS32_MIDI_Receive_Handler+0xde>
 8012300:	2100      	movs	r1, #0
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
 8012302:	fa42 f301 	asr.w	r3, r2, r1
 8012306:	f013 0001 	ands.w	r0, r3, #1
 801230a:	d103      	bne.n	8012314 <MIOS32_MIDI_Receive_Handler+0xd8>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 801230c:	3101      	adds	r1, #1
 801230e:	2910      	cmp	r1, #16
 8012310:	d1f7      	bne.n	8012302 <MIOS32_MIDI_Receive_Handler+0xc6>
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8012312:	4601      	mov	r1, r0
      timeout_port = USB0 + i;
 8012314:	3110      	adds	r1, #16
 8012316:	b2c8      	uxtb	r0, r1
 8012318:	e01a      	b.n	8012350 <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
 801231a:	884b      	ldrh	r3, [r1, #2]
 801231c:	b15b      	cbz	r3, 8012336 <MIOS32_MIDI_Receive_Handler+0xfa>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
 801231e:	fa43 f002 	asr.w	r0, r3, r2
 8012322:	f010 0101 	ands.w	r1, r0, #1
 8012326:	d103      	bne.n	8012330 <MIOS32_MIDI_Receive_Handler+0xf4>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = USB0 + i;
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8012328:	3201      	adds	r2, #1
 801232a:	2a10      	cmp	r2, #16
 801232c:	d1f7      	bne.n	801231e <MIOS32_MIDI_Receive_Handler+0xe2>
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 801232e:	460a      	mov	r2, r1
      timeout_port = IIC0 + i;
 8012330:	3230      	adds	r2, #48	; 0x30
 8012332:	b2d0      	uxtb	r0, r2
 8012334:	e00c      	b.n	8012350 <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
 8012336:	8888      	ldrh	r0, [r1, #4]
 8012338:	b150      	cbz	r0, 8012350 <MIOS32_MIDI_Receive_Handler+0x114>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
 801233a:	fa40 f103 	asr.w	r1, r0, r3
 801233e:	f011 0201 	ands.w	r2, r1, #1
 8012342:	d103      	bne.n	801234c <MIOS32_MIDI_Receive_Handler+0x110>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = IIC0 + i;
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8012344:	3301      	adds	r3, #1
 8012346:	2b10      	cmp	r3, #16
 8012348:	d1f7      	bne.n	801233a <MIOS32_MIDI_Receive_Handler+0xfe>
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 801234a:	4613      	mov	r3, r2
      timeout_port = SPIM0 + i;
 801234c:	3350      	adds	r3, #80	; 0x50
 801234e:	b2d8      	uxtb	r0, r3
    }

    MIOS32_MIDI_TimeOut(timeout_port);
 8012350:	f7ff fc88 	bl	8011c64 <MIOS32_MIDI_TimeOut>
    sysex_timeout_ctr_flags.ALL = 0;
 8012354:	4805      	ldr	r0, [pc, #20]	; (801236c <MIOS32_MIDI_Receive_Handler+0x130>)
 8012356:	2200      	movs	r2, #0
 8012358:	2300      	movs	r3, #0
 801235a:	e9c0 2300 	strd	r2, r3, [r0]
  }

  return 0;
}
 801235e:	2000      	movs	r0, #0
 8012360:	b00e      	add	sp, #56	; 0x38
 8012362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012366:	bf00      	nop
 8012368:	0801c234 	.word	0x0801c234
 801236c:	200002a0 	.word	0x200002a0
 8012370:	20000292 	.word	0x20000292

08012374 <MIOS32_MIDI_DebugPortGet>:
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
}
 8012374:	4b01      	ldr	r3, [pc, #4]	; (801237c <MIOS32_MIDI_DebugPortGet+0x8>)
 8012376:	7818      	ldrb	r0, [r3, #0]
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	20000005 	.word	0x20000005

08012380 <MIOS32_MIDI_DebugCommandCallback_Init>:
//! \param[in] callback_debug_command the callback function (NULL disables the callback)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugCommandCallback_Init(s32 (*callback_debug_command)(mios32_midi_port_t port, char c))
{
  debug_command_callback_func = callback_debug_command;
 8012380:	4b01      	ldr	r3, [pc, #4]	; (8012388 <MIOS32_MIDI_DebugCommandCallback_Init+0x8>)
 8012382:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 8012384:	2000      	movs	r0, #0
 8012386:	4770      	bx	lr
 8012388:	2000029c 	.word	0x2000029c

0801238c <MIOS32_OSC_Init>:
{
  if( mode > 0 )
    return -1; // only mode 0 supported yet

  return 0; // no error
}
 801238c:	2800      	cmp	r0, #0
 801238e:	bf14      	ite	ne
 8012390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8012394:	2000      	moveq	r0, #0
 8012396:	4770      	bx	lr

08012398 <MIOS32_COM_Init>:
s32 MIOS32_COM_Init(u32 mode)
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 8012398:	b938      	cbnz	r0, 80123aa <MIOS32_COM_Init+0x12>
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 801239a:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <MIOS32_COM_Init+0x18>)

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 801239c:	4a05      	ldr	r2, [pc, #20]	; (80123b4 <MIOS32_COM_Init+0x1c>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 801239e:	6018      	str	r0, [r3, #0]

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
  debug_port = MIOS32_COM_DEBUG_PORT;
 80123a0:	4b05      	ldr	r3, [pc, #20]	; (80123b8 <MIOS32_COM_Init+0x20>)

  // disable callback by default
  receive_callback_func = NULL;

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 80123a2:	2110      	movs	r1, #16
 80123a4:	7011      	strb	r1, [r2, #0]
  debug_port = MIOS32_COM_DEBUG_PORT;
 80123a6:	7019      	strb	r1, [r3, #0]
#if MIOS32_UART0_ASSIGNMENT == 2 || MIOS32_UART1_ASSIGNMENT == 2 || MIOS32_UART2_ASSIGNMENT == 2 || MIOS32_UART3_ASSIGNMENT == 2
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
 80123a8:	4770      	bx	lr
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80123aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
}
 80123ae:	4770      	bx	lr
 80123b0:	200002b4 	.word	0x200002b4
 80123b4:	20000007 	.word	0x20000007
 80123b8:	20000008 	.word	0x20000008

080123bc <MIOS32_COM_SendBuffer>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendBuffer(mios32_com_port_t port, u8 *buffer, u16 len)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 80123bc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 80123c0:	d104      	bne.n	80123cc <MIOS32_COM_SendBuffer+0x10>
    port = (port == COM_DEBUG) ? debug_port : default_port;
 80123c2:	2801      	cmp	r0, #1
 80123c4:	bf0c      	ite	eq
 80123c6:	4b06      	ldreq	r3, [pc, #24]	; (80123e0 <MIOS32_COM_SendBuffer+0x24>)
 80123c8:	4b06      	ldrne	r3, [pc, #24]	; (80123e4 <MIOS32_COM_SendBuffer+0x28>)
 80123ca:	7818      	ldrb	r0, [r3, #0]
  }

  // branch depending on selected port
  switch( port >> 4 ) {
 80123cc:	0903      	lsrs	r3, r0, #4
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	d103      	bne.n	80123da <MIOS32_COM_SendBuffer+0x1e>
      return -1; // USB has been disabled
#endif

    case 2:
#if !defined(MIOS32_DONT_USE_UART)
      return MIOS32_UART_TxBufferPutMore(port & 0xf, buffer, len);
 80123d2:	f000 000f 	and.w	r0, r0, #15
 80123d6:	f002 be97 	b.w	8015108 <MIOS32_UART_TxBufferPutMore>
      
    default:
      // invalid port
      return -1;
  }
}
 80123da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123de:	4770      	bx	lr
 80123e0:	20000008 	.word	0x20000008
 80123e4:	20000007 	.word	0x20000007

080123e8 <MIOS32_COM_SendChar>:
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 80123e8:	b507      	push	{r0, r1, r2, lr}
 80123ea:	ab02      	add	r3, sp, #8
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 80123ec:	2201      	movs	r2, #1
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 80123ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 80123f2:	4619      	mov	r1, r3
 80123f4:	f7ff ffe2 	bl	80123bc <MIOS32_COM_SendBuffer>
}
 80123f8:	bd0e      	pop	{r1, r2, r3, pc}
	...

080123fc <MIOS32_COM_Receive_Handler>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
 80123fc:	4b28      	ldr	r3, [pc, #160]	; (80124a0 <MIOS32_COM_Receive_Handler+0xa4>)
 80123fe:	6818      	ldr	r0, [r3, #0]
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
 8012400:	b570      	push	{r4, r5, r6, lr}
  // no callback -> no polling
  if( receive_callback_func == NULL )
 8012402:	2800      	cmp	r0, #0
 8012404:	d045      	beq.n	8012492 <MIOS32_COM_Receive_Handler+0x96>
 8012406:	2400      	movs	r4, #0
 8012408:	4625      	mov	r5, r4
 801240a:	4620      	mov	r0, r4
    // TODO: maybe a list based approach would be better
    // it would allow to add/remove interfaces dynamically
    // this would also allow to give certain ports a higher priority (to add them multiple times to the list)
    // it would also improve this spagetthi code ;)
    s32 status = -1;
    switch( intf++ ) {
 801240c:	1c46      	adds	r6, r0, #1
 801240e:	b2f6      	uxtb	r6, r6
 8012410:	2804      	cmp	r0, #4
 8012412:	d82b      	bhi.n	801246c <MIOS32_COM_Receive_Handler+0x70>
 8012414:	e8df f000 	tbb	[pc, r0]
 8012418:	160c0339 	.word	0x160c0339
 801241c:	20          	.byte	0x20
 801241d:	00          	.byte	0x00
      case 0: status = MIOS32_USB_COM_RxBufferGet(0); port = USB0; break;
#else
      case 0: status = -1; break;
#endif
#if !defined(MIOS32_DONT_USE_UART)
      case 1: if( MIOS32_UART_IsAssignedToMIDI(0) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(0); port = UART0; } break;
 801241e:	2000      	movs	r0, #0
 8012420:	f002 fc80 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 8012424:	bb88      	cbnz	r0, 801248a <MIOS32_COM_Receive_Handler+0x8e>
 8012426:	f002 fda1 	bl	8014f6c <MIOS32_UART_RxBufferGet>
 801242a:	4601      	mov	r1, r0
 801242c:	2020      	movs	r0, #32
 801242e:	e021      	b.n	8012474 <MIOS32_COM_Receive_Handler+0x78>
      case 2: if( MIOS32_UART_IsAssignedToMIDI(1) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(1); port = UART1; } break;
 8012430:	2001      	movs	r0, #1
 8012432:	f002 fc77 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 8012436:	bb40      	cbnz	r0, 801248a <MIOS32_COM_Receive_Handler+0x8e>
 8012438:	2001      	movs	r0, #1
 801243a:	f002 fd97 	bl	8014f6c <MIOS32_UART_RxBufferGet>
 801243e:	4601      	mov	r1, r0
 8012440:	2021      	movs	r0, #33	; 0x21
 8012442:	e017      	b.n	8012474 <MIOS32_COM_Receive_Handler+0x78>
      case 3: if( MIOS32_UART_IsAssignedToMIDI(2) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(2); port = UART2; } break;
 8012444:	2002      	movs	r0, #2
 8012446:	f002 fc6d 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 801244a:	b9f0      	cbnz	r0, 801248a <MIOS32_COM_Receive_Handler+0x8e>
 801244c:	2002      	movs	r0, #2
 801244e:	f002 fd8d 	bl	8014f6c <MIOS32_UART_RxBufferGet>
 8012452:	4601      	mov	r1, r0
 8012454:	2022      	movs	r0, #34	; 0x22
 8012456:	e00d      	b.n	8012474 <MIOS32_COM_Receive_Handler+0x78>
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
 8012458:	2003      	movs	r0, #3
 801245a:	f002 fc63 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 801245e:	b9a0      	cbnz	r0, 801248a <MIOS32_COM_Receive_Handler+0x8e>
 8012460:	2003      	movs	r0, #3
 8012462:	f002 fd83 	bl	8014f6c <MIOS32_UART_RxBufferGet>
 8012466:	4601      	mov	r1, r0
 8012468:	2023      	movs	r0, #35	; 0x23
 801246a:	e003      	b.n	8012474 <MIOS32_COM_Receive_Handler+0x78>
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
 801246c:	b17c      	cbz	r4, 801248e <MIOS32_COM_Receive_Handler+0x92>
 801246e:	2d3f      	cmp	r5, #63	; 0x3f
 8012470:	d912      	bls.n	8012498 <MIOS32_COM_Receive_Handler+0x9c>
 8012472:	e00c      	b.n	801248e <MIOS32_COM_Receive_Handler+0x92>
	}
	status = -1; // empty round - no message
    }

    // message received?
    if( status >= 0 ) {
 8012474:	2900      	cmp	r1, #0
 8012476:	db08      	blt.n	801248a <MIOS32_COM_Receive_Handler+0x8e>
      // notify that a package has been forwarded
      ++bytes_forwarded;
      ++total_bytes_forwarded;

      // call function
      if( receive_callback_func != NULL )
 8012478:	4a09      	ldr	r2, [pc, #36]	; (80124a0 <MIOS32_COM_Receive_Handler+0xa4>)
 801247a:	6813      	ldr	r3, [r2, #0]
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 801247c:	3401      	adds	r4, #1
      ++total_bytes_forwarded;
 801247e:	3501      	adds	r5, #1
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 8012480:	b2e4      	uxtb	r4, r4
      ++total_bytes_forwarded;
 8012482:	b2ed      	uxtb	r5, r5

      // call function
      if( receive_callback_func != NULL )
 8012484:	b10b      	cbz	r3, 801248a <MIOS32_COM_Receive_Handler+0x8e>
	receive_callback_func(port, (u8)status);
 8012486:	b2c9      	uxtb	r1, r1
 8012488:	4798      	blx	r3
    }
  } while( again );
 801248a:	4630      	mov	r0, r6
 801248c:	e7be      	b.n	801240c <MIOS32_COM_Receive_Handler+0x10>

  return 0;
 801248e:	2000      	movs	r0, #0
 8012490:	bd70      	pop	{r4, r5, r6, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
    return -1;
 8012492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012496:	bd70      	pop	{r4, r5, r6, pc}
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
	  bytes_forwarded = 0; // for checking, if bytes still have been forwarded in next round
 8012498:	2400      	movs	r4, #0
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
 801249a:	4626      	mov	r6, r4
 801249c:	e7f5      	b.n	801248a <MIOS32_COM_Receive_Handler+0x8e>
 801249e:	bf00      	nop
 80124a0:	200002b4 	.word	0x200002b4

080124a4 <MIOS32_UART_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_CheckAvailable(u8 uart_port)
{
 80124a4:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  return MIOS32_UART_IsAssignedToMIDI(uart_port) >= 1; // UART assigned to MIDI?
 80124a6:	f002 fc3d 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
#endif
}
 80124aa:	2800      	cmp	r0, #0
 80124ac:	bfd4      	ite	le
 80124ae:	2000      	movle	r0, #0
 80124b0:	2001      	movgt	r0, #1
 80124b2:	bd08      	pop	{r3, pc}

080124b4 <MIOS32_UART_MIDI_RS_Reset>:
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 80124b4:	2803      	cmp	r0, #3
//! \return -1 if port not available
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
 80124b6:	b538      	push	{r3, r4, r5, lr}
 80124b8:	4604      	mov	r4, r0
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 80124ba:	d80c      	bhi.n	80124d6 <MIOS32_UART_MIDI_RS_Reset+0x22>
    return -1; // port not available

  MIOS32_IRQ_Disable();
 80124bc:	f000 fb2e 	bl	8012b1c <MIOS32_IRQ_Disable>
  rs_last[uart_port] = 0xff;
 80124c0:	4b06      	ldr	r3, [pc, #24]	; (80124dc <MIOS32_UART_MIDI_RS_Reset+0x28>)
  rs_expire_ctr[uart_port] = 0;
 80124c2:	4807      	ldr	r0, [pc, #28]	; (80124e0 <MIOS32_UART_MIDI_RS_Reset+0x2c>)
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 80124c4:	22ff      	movs	r2, #255	; 0xff
  rs_expire_ctr[uart_port] = 0;
 80124c6:	2500      	movs	r5, #0
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 80124c8:	551a      	strb	r2, [r3, r4]
  rs_expire_ctr[uart_port] = 0;
 80124ca:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
  MIOS32_IRQ_Enable();
 80124ce:	f000 fb39 	bl	8012b44 <MIOS32_IRQ_Enable>

  return 0;
 80124d2:	4628      	mov	r0, r5
 80124d4:	bd38      	pop	{r3, r4, r5, pc}
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available
 80124d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  rs_expire_ctr[uart_port] = 0;
  MIOS32_IRQ_Enable();

  return 0;
#endif
}
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	200002b8 	.word	0x200002b8
 80124e0:	200002ee 	.word	0x200002ee

080124e4 <MIOS32_UART_MIDI_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Init(u32 mode)
{
 80124e4:	b510      	push	{r4, lr}
#else
  int i;


  // currently only mode 0 supported
  if( mode != 0 )
 80124e6:	b110      	cbz	r0, 80124ee <MIOS32_UART_MIDI_Init+0xa>
    return -1; // unsupported mode
 80124e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124ec:	bd10      	pop	{r4, pc}

// internal function to reset the record structure
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 80124ee:	4912      	ldr	r1, [pc, #72]	; (8012538 <MIOS32_UART_MIDI_Init+0x54>)
 80124f0:	220c      	movs	r2, #12
 80124f2:	4342      	muls	r2, r0
 80124f4:	188b      	adds	r3, r1, r2
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 80124f6:	3001      	adds	r0, #1
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 80124f8:	2400      	movs	r4, #0
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 80124fa:	2804      	cmp	r0, #4
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 80124fc:	508c      	str	r4, [r1, r2]
  midix->running_status = 0x00;
 80124fe:	711c      	strb	r4, [r3, #4]
  midix->expected_bytes = 0x00;
 8012500:	715c      	strb	r4, [r3, #5]
  midix->wait_bytes = 0x00;
 8012502:	719c      	strb	r4, [r3, #6]
  midix->sysex_ctr = 0x00;
 8012504:	71dc      	strb	r4, [r3, #7]
  midix->timeout_ctr = 0;
 8012506:	811c      	strh	r4, [r3, #8]
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 8012508:	d1f1      	bne.n	80124ee <MIOS32_UART_MIDI_Init+0xa>
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 801250a:	490c      	ldr	r1, [pc, #48]	; (801253c <MIOS32_UART_MIDI_Init+0x58>)
 801250c:	20ff      	movs	r0, #255	; 0xff
 801250e:	7008      	strb	r0, [r1, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RS_Reset(i);
 8012510:	4620      	mov	r0, r4
 8012512:	f7ff ffcf 	bl	80124b4 <MIOS32_UART_MIDI_RS_Reset>
 8012516:	2001      	movs	r0, #1
 8012518:	f7ff ffcc 	bl	80124b4 <MIOS32_UART_MIDI_RS_Reset>
 801251c:	2002      	movs	r0, #2
 801251e:	f7ff ffc9 	bl	80124b4 <MIOS32_UART_MIDI_RS_Reset>
 8012522:	2003      	movs	r0, #3
 8012524:	f7ff ffc6 	bl	80124b4 <MIOS32_UART_MIDI_RS_Reset>

  // if any MIDI assignment:
#if MIOS32_UART0_ASSIGNMENT == 1 || MIOS32_UART1_ASSIGNMENT == 1 || MIOS32_UART2_ASSIGNMENT == 1 || MIOS32_UART3_ASSIGNMENT == 1
  // initialize U(S)ART interface
  if( MIOS32_UART_Init(0) < 0 )
 8012528:	4620      	mov	r0, r4
 801252a:	f002 fca5 	bl	8014e78 <MIOS32_UART_Init>
 801252e:	42a0      	cmp	r0, r4
 8012530:	dbda      	blt.n	80124e8 <MIOS32_UART_MIDI_Init+0x4>
    return -1; // initialisation of U(S)ART Interface failed
#endif

  return 0; // no error
 8012532:	4620      	mov	r0, r4
#endif
}
 8012534:	bd10      	pop	{r4, pc}
 8012536:	bf00      	nop
 8012538:	200002bc 	.word	0x200002bc
 801253c:	200002ec 	.word	0x200002ec

08012540 <MIOS32_UART_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Periodic_mS(void)
{
 8012540:	b510      	push	{r4, lr}
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
 8012542:	f000 faeb 	bl	8012b1c <MIOS32_IRQ_Disable>
 8012546:	4a0b      	ldr	r2, [pc, #44]	; (8012574 <MIOS32_UART_MIDI_Periodic_mS+0x34>)
 8012548:	2300      	movs	r3, #0
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 801254a:	490b      	ldr	r1, [pc, #44]	; (8012578 <MIOS32_UART_MIDI_Periodic_mS+0x38>)
 801254c:	5a58      	ldrh	r0, [r3, r1]
 801254e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8012552:	42a0      	cmp	r0, r4
 8012554:	d001      	beq.n	801255a <MIOS32_UART_MIDI_Periodic_mS+0x1a>
      ++rs_expire_ctr[uart_port];
 8012556:	3001      	adds	r0, #1
 8012558:	5258      	strh	r0, [r3, r1]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 801255a:	8911      	ldrh	r1, [r2, #8]
 801255c:	42a1      	cmp	r1, r4
 801255e:	d001      	beq.n	8012564 <MIOS32_UART_MIDI_Periodic_mS+0x24>
      ++midi_rec[uart_port].timeout_ctr;
 8012560:	1c48      	adds	r0, r1, #1
 8012562:	8110      	strh	r0, [r2, #8]
 8012564:	3302      	adds	r3, #2
 8012566:	320c      	adds	r2, #12
{
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
  for(uart_port=0; uart_port<MIOS32_UART_NUM; ++uart_port) {
 8012568:	2b08      	cmp	r3, #8
 801256a:	d1ee      	bne.n	801254a <MIOS32_UART_MIDI_Periodic_mS+0xa>
    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
      ++midi_rec[uart_port].timeout_ctr;
  }
  MIOS32_IRQ_Enable();
 801256c:	f000 faea 	bl	8012b44 <MIOS32_IRQ_Enable>
  // (atomic operation not required in MIOS32_UART_MIDI_PackageSend_NonBlocking() due to single-byte accesses)
#endif

  return 0; // no error
}
 8012570:	2000      	movs	r0, #0
 8012572:	bd10      	pop	{r4, pc}
 8012574:	200002bc 	.word	0x200002bc
 8012578:	200002ee 	.word	0x200002ee

0801257c <MIOS32_UART_MIDI_PackageSend_NonBlocking>:
//! \return -2: UART_MIDI buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend_NonBlocking(u8 uart_port, mios32_midi_package_t package)
{
 801257c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012580:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8012584:	4605      	mov	r5, r0
 8012586:	f001 070f 	and.w	r7, r1, #15
 801258a:	fa5f f886 	uxtb.w	r8, r6
 801258e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8012592:	f3c1 6907 	ubfx	r9, r1, #24, #8
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 8012596:	f7ff ff85 	bl	80124a4 <MIOS32_UART_MIDI_CheckAvailable>
 801259a:	2800      	cmp	r0, #0
 801259c:	d040      	beq.n	8012620 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
 801259e:	4b23      	ldr	r3, [pc, #140]	; (801262c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb0>)
 80125a0:	5ddc      	ldrb	r4, [r3, r7]
  if( len ) {
 80125a2:	2c00      	cmp	r4, #0
 80125a4:	d03f      	beq.n	8012626 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xaa>
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80125a6:	4822      	ldr	r0, [pc, #136]	; (8012630 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb4>)
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80125a8:	f88d 6004 	strb.w	r6, [sp, #4]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80125ac:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80125b0:	f88d a005 	strb.w	sl, [sp, #5]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80125b4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80125b8:	f88d 9006 	strb.w	r9, [sp, #6]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80125bc:	d903      	bls.n	80125c6 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x4a>
      // the current RS is expired each second to ensure that a status byte will be sent
      // if the MIDI cable is (re)connected during runtime
      MIOS32_UART_MIDI_RS_Reset(uart_port);
 80125be:	4628      	mov	r0, r5
 80125c0:	f7ff ff78 	bl	80124b4 <MIOS32_UART_MIDI_RS_Reset>
 80125c4:	e01b      	b.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
#if 0
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
 80125c6:	491b      	ldr	r1, [pc, #108]	; (8012634 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb8>)
 80125c8:	780b      	ldrb	r3, [r1, #0]
 80125ca:	fa43 f305 	asr.w	r3, r3, r5
 80125ce:	07da      	lsls	r2, r3, #31
 80125d0:	d515      	bpl.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 80125d2:	2f07      	cmp	r7, #7
 80125d4:	dd13      	ble.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 80125d6:	2f0f      	cmp	r7, #15
 80125d8:	d011      	beq.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 80125da:	2c01      	cmp	r4, #1
 80125dc:	d90e      	bls.n	80125fc <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
 80125de:	4a16      	ldr	r2, [pc, #88]	; (8012638 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)
 80125e0:	5d51      	ldrb	r1, [r2, r5]
 80125e2:	4541      	cmp	r1, r8
 80125e4:	d106      	bne.n	80125f4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x78>
	  buffer[0] = package.evnt1;
	  buffer[1] = package.evnt2;
	  --len;
 80125e6:	3c01      	subs	r4, #1
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
	  buffer[0] = package.evnt1;
 80125e8:	f88d a004 	strb.w	sl, [sp, #4]
	  buffer[1] = package.evnt2;
 80125ec:	f88d 9005 	strb.w	r9, [sp, #5]
	  --len;
 80125f0:	b2e4      	uxtb	r4, r4
 80125f2:	e004      	b.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  // for optional monitoring of the optimisation
	  MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS optimized (%02x) %02x %02x\n", uart_port, package.evnt0, package.evnt1, package.evnt2);
#endif
	} else {
	  // new running status
	  rs_expire_ctr[uart_port] = 0;
 80125f4:	2300      	movs	r3, #0
 80125f6:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 80125fa:	e000      	b.n	80125fe <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 80125fc:	2401      	movs	r4, #1
      }
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
 80125fe:	f1b8 0ff7 	cmp.w	r8, #247	; 0xf7
      rs_last[uart_port] = package.evnt0;
 8012602:	bf98      	it	ls
 8012604:	480c      	ldrls	r0, [pc, #48]	; (8012638 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8012606:	a901      	add	r1, sp, #4
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;
 8012608:	bf98      	it	ls
 801260a:	5546      	strbls	r6, [r0, r5]


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 801260c:	4622      	mov	r2, r4
 801260e:	4628      	mov	r0, r5
 8012610:	f002 fd7a 	bl	8015108 <MIOS32_UART_TxBufferPutMore>
 8012614:	3002      	adds	r0, #2
 8012616:	2802      	cmp	r0, #2
 8012618:	d802      	bhi.n	8012620 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
#endif
}
 801261a:	4a08      	ldr	r2, [pc, #32]	; (801263c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xc0>)
 801261c:	5610      	ldrsb	r0, [r2, r0]
 801261e:	e003      	b.n	8012628 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 8012620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012624:	e000      	b.n	8012628 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
      case -2: return -2; // buffer full, request retry
      default: return -1; // UART error
    }

  } else {
    return 0; // no bytes to send -> no error
 8012626:	4620      	mov	r0, r4
  }
#endif
}
 8012628:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 801262c:	0801c26c 	.word	0x0801c26c
 8012630:	200002ee 	.word	0x200002ee
 8012634:	200002ec 	.word	0x200002ec
 8012638:	200002b8 	.word	0x200002b8
 801263c:	0801c38e 	.word	0x0801c38e

08012640 <MIOS32_UART_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: UART_MIDI device not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend(u8 uart_port, mios32_midi_package_t package)
{
 8012640:	b538      	push	{r3, r4, r5, lr}
 8012642:	4605      	mov	r5, r0
 8012644:	460c      	mov	r4, r1
  s32 error;

  while( (error=MIOS32_UART_MIDI_PackageSend_NonBlocking(uart_port, package)) == -2);
 8012646:	4621      	mov	r1, r4
 8012648:	4628      	mov	r0, r5
 801264a:	f7ff ff97 	bl	801257c <MIOS32_UART_MIDI_PackageSend_NonBlocking>
 801264e:	1c81      	adds	r1, r0, #2
 8012650:	d0f9      	beq.n	8012646 <MIOS32_UART_MIDI_PackageSend+0x6>

  return error;
}
 8012652:	bd38      	pop	{r3, r4, r5, pc}

08012654 <MIOS32_UART_MIDI_PackageReceive>:
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8012654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012658:	4680      	mov	r8, r0
 801265a:	460f      	mov	r7, r1
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 801265c:	f7ff ff22 	bl	80124a4 <MIOS32_UART_MIDI_CheckAvailable>
 8012660:	2800      	cmp	r0, #0
 8012662:	f000 80c5 	beq.w	80127f0 <MIOS32_UART_MIDI_PackageReceive+0x19c>
    return -1;

  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 8012666:	4d65      	ldr	r5, [pc, #404]	; (80127fc <MIOS32_UART_MIDI_PackageReceive+0x1a8>)
 8012668:	260c      	movs	r6, #12
 801266a:	fb06 f608 	mul.w	r6, r6, r8
 801266e:	19ac      	adds	r4, r5, r6
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8012670:	4640      	mov	r0, r8
 8012672:	f002 fc7b 	bl	8014f6c <MIOS32_UART_RxBufferGet>
 8012676:	2800      	cmp	r0, #0
 8012678:	f2c0 80a1 	blt.w	80127be <MIOS32_UART_MIDI_PackageReceive+0x16a>
    u8 byte = (u8)status;

    if( byte & 0x80 ) { // new MIDI status
 801267c:	0602      	lsls	r2, r0, #24
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
    u8 byte = (u8)status;
 801267e:	b2c3      	uxtb	r3, r0

    if( byte & 0x80 ) { // new MIDI status
 8012680:	d552      	bpl.n	8012728 <MIOS32_UART_MIDI_PackageReceive+0xd4>
      if( byte >= 0xf8 ) { // events >= 0xf8 don't change the running status and can just be forwarded
 8012682:	2bf7      	cmp	r3, #247	; 0xf7
 8012684:	d908      	bls.n	8012698 <MIOS32_UART_MIDI_PackageReceive+0x44>
	// Realtime messages don't change the running status and can be sent immediately
	// They also don't touch the timeout counter!
	package->cin = 0xf; // F: single byte
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	f041 020f 	orr.w	r2, r1, #15
 801268c:	603a      	str	r2, [r7, #0]
	package->evnt0 = byte;
 801268e:	707b      	strb	r3, [r7, #1]
	package->evnt1 = 0x00;
 8012690:	2300      	movs	r3, #0
 8012692:	70bb      	strb	r3, [r7, #2]
	package->evnt2 = 0x00;
 8012694:	70fb      	strb	r3, [r7, #3]
 8012696:	e0af      	b.n	80127f8 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	package_complete = 1;
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8012698:	f3c3 1202 	ubfx	r2, r3, #4, #3
 801269c:	4958      	ldr	r1, [pc, #352]	; (8012800 <MIOS32_UART_MIDI_PackageReceive+0x1ac>)
	package->evnt0 = byte;
	package->evnt1 = 0x00;
	package->evnt2 = 0x00;
	package_complete = 1;
      } else {
	midix->running_status = byte;
 801269e:	7123      	strb	r3, [r4, #4]
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 80126a0:	5c89      	ldrb	r1, [r1, r2]
 80126a2:	7161      	strb	r1, [r4, #5]

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
 80126a4:	b109      	cbz	r1, 80126aa <MIOS32_UART_MIDI_PackageReceive+0x56>
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 80126a6:	2100      	movs	r1, #0
 80126a8:	e037      	b.n	801271a <MIOS32_UART_MIDI_PackageReceive+0xc6>
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 80126aa:	f000 000f 	and.w	r0, r0, #15
 80126ae:	4a55      	ldr	r2, [pc, #340]	; (8012804 <MIOS32_UART_MIDI_PackageReceive+0x1b0>)
 80126b0:	5c12      	ldrb	r2, [r2, r0]

	  if( byte == 0xf0 ) {
 80126b2:	2bf0      	cmp	r3, #240	; 0xf0
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 80126b4:	7162      	strb	r2, [r4, #5]

	  if( byte == 0xf0 ) {
 80126b6:	d103      	bne.n	80126c0 <MIOS32_UART_MIDI_PackageReceive+0x6c>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
 80126b8:	2201      	movs	r2, #1

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];

	  if( byte == 0xf0 ) {
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
 80126ba:	7063      	strb	r3, [r4, #1]
	    midix->sysex_ctr = 0x01;
 80126bc:	71e2      	strb	r2, [r4, #7]
 80126be:	e7f2      	b.n	80126a6 <MIOS32_UART_MIDI_PackageReceive+0x52>
	  } else if( byte == 0xf7 ) {
 80126c0:	2bf7      	cmp	r3, #247	; 0xf7
 80126c2:	d11d      	bne.n	8012700 <MIOS32_UART_MIDI_PackageReceive+0xac>
	    switch( midix->sysex_ctr ) {
 80126c4:	79e2      	ldrb	r2, [r4, #7]
 80126c6:	7820      	ldrb	r0, [r4, #0]
 80126c8:	b142      	cbz	r2, 80126dc <MIOS32_UART_MIDI_PackageReceive+0x88>
 80126ca:	2a01      	cmp	r2, #1
 80126cc:	d10e      	bne.n	80126ec <MIOS32_UART_MIDI_PackageReceive+0x98>
		midix->package.evnt0 = 0xf7;
		midix->package.evnt1 = 0x00;
		midix->package.evnt2 = 0x00;
		break;
	      case 1:
		midix->package.cin = 6; // 6: SysEx ends with two bytes
 80126ce:	2206      	movs	r2, #6
 80126d0:	f362 0003 	bfi	r0, r2, #0, #4
 80126d4:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
 80126d6:	70a3      	strb	r3, [r4, #2]
		midix->package.evnt2 = 0x00;
 80126d8:	70e1      	strb	r1, [r4, #3]
		break;
 80126da:	e00c      	b.n	80126f6 <MIOS32_UART_MIDI_PackageReceive+0xa2>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
	  } else if( byte == 0xf7 ) {
	    switch( midix->sysex_ctr ) {
 	      case 0:
		midix->package.cin = 5; // 5: SysEx ends with single byte
 80126dc:	2105      	movs	r1, #5
 80126de:	f361 0003 	bfi	r0, r1, #0, #4
 80126e2:	7020      	strb	r0, [r4, #0]
		midix->package.evnt0 = 0xf7;
 80126e4:	7063      	strb	r3, [r4, #1]
		midix->package.evnt1 = 0x00;
 80126e6:	70a2      	strb	r2, [r4, #2]
		midix->package.evnt2 = 0x00;
 80126e8:	70e2      	strb	r2, [r4, #3]
		break;
 80126ea:	e004      	b.n	80126f6 <MIOS32_UART_MIDI_PackageReceive+0xa2>
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
		midix->package.evnt2 = 0x00;
		break;
	      default:
		midix->package.cin = 7; // 7: SysEx ends with three bytes
 80126ec:	2107      	movs	r1, #7
 80126ee:	f361 0003 	bfi	r0, r1, #0, #4
 80126f2:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
 80126f4:	70e3      	strb	r3, [r4, #3]
		break;
	    }
	    *package = midix->package;
 80126f6:	6823      	ldr	r3, [r4, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 80126f8:	2000      	movs	r0, #0
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
		break;
	    }
	    *package = midix->package;
 80126fa:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 80126fc:	71e0      	strb	r0, [r4, #7]
 80126fe:	e00b      	b.n	8012718 <MIOS32_UART_MIDI_PackageReceive+0xc4>
	  } else if( !midix->expected_bytes ) {
 8012700:	2a00      	cmp	r2, #0
 8012702:	d1d0      	bne.n	80126a6 <MIOS32_UART_MIDI_PackageReceive+0x52>
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8012704:	7821      	ldrb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
 8012706:	7063      	strb	r3, [r4, #1]
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
	  } else if( !midix->expected_bytes ) {
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8012708:	2005      	movs	r0, #5
 801270a:	f360 0103 	bfi	r1, r0, #0, #4
 801270e:	7021      	strb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
	    midix->package.evnt1 = 0x00;
 8012710:	70a2      	strb	r2, [r4, #2]
	    midix->package.evnt2 = 0x00;
 8012712:	70e2      	strb	r2, [r4, #3]
	    *package = midix->package;
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
 8012718:	2101      	movs	r1, #1
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 801271a:	7963      	ldrb	r3, [r4, #5]
	midix->timeout_ctr = 0; // reset timeout counter
 801271c:	2000      	movs	r0, #0
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 801271e:	71a3      	strb	r3, [r4, #6]
	midix->timeout_ctr = 0; // reset timeout counter
 8012720:	8120      	strh	r0, [r4, #8]
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8012722:	2900      	cmp	r1, #0
 8012724:	d0a4      	beq.n	8012670 <MIOS32_UART_MIDI_PackageReceive+0x1c>
 8012726:	e067      	b.n	80127f8 <MIOS32_UART_MIDI_PackageReceive+0x1a4>

	midix->wait_bytes = midix->expected_bytes;
	midix->timeout_ctr = 0; // reset timeout counter
      }
    } else {
      if( midix->running_status == 0xf0 ) {
 8012728:	7922      	ldrb	r2, [r4, #4]
 801272a:	2af0      	cmp	r2, #240	; 0xf0
 801272c:	d117      	bne.n	801275e <MIOS32_UART_MIDI_PackageReceive+0x10a>
	switch( ++midix->sysex_ctr ) {
 801272e:	79e2      	ldrb	r2, [r4, #7]
 8012730:	1c51      	adds	r1, r2, #1
 8012732:	b2c8      	uxtb	r0, r1
 8012734:	2801      	cmp	r0, #1
 8012736:	71e0      	strb	r0, [r4, #7]
 8012738:	d003      	beq.n	8012742 <MIOS32_UART_MIDI_PackageReceive+0xee>
 801273a:	2802      	cmp	r0, #2
 801273c:	d103      	bne.n	8012746 <MIOS32_UART_MIDI_PackageReceive+0xf2>
  	  case 1:
	    midix->package.evnt0 = byte; 
	    break;
	  case 2: 
	    midix->package.evnt1 = byte; 
 801273e:	70a3      	strb	r3, [r4, #2]
	    break;
 8012740:	e796      	b.n	8012670 <MIOS32_UART_MIDI_PackageReceive+0x1c>
      }
    } else {
      if( midix->running_status == 0xf0 ) {
	switch( ++midix->sysex_ctr ) {
  	  case 1:
	    midix->package.evnt0 = byte; 
 8012742:	7063      	strb	r3, [r4, #1]
	    break;
 8012744:	e794      	b.n	8012670 <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  case 2: 
	    midix->package.evnt1 = byte; 
	    break;
	  default: // 3
	    midix->package.evnt2 = byte;
 8012746:	70e3      	strb	r3, [r4, #3]

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
 8012748:	5dab      	ldrb	r3, [r5, r6]
 801274a:	2204      	movs	r2, #4
 801274c:	f362 0303 	bfi	r3, r2, #0, #4
 8012750:	55ab      	strb	r3, [r5, r6]
	    *package = midix->package;
 8012752:	59a9      	ldr	r1, [r5, r6]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8012754:	2000      	movs	r0, #0
	  default: // 3
	    midix->package.evnt2 = byte;

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
	    *package = midix->package;
 8012756:	6039      	str	r1, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8012758:	71e0      	strb	r0, [r4, #7]
	    midix->timeout_ctr = 0; // reset timeout counter
 801275a:	8120      	strh	r0, [r4, #8]
 801275c:	e04c      	b.n	80127f8 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
 801275e:	79a0      	ldrb	r0, [r4, #6]
 8012760:	b920      	cbnz	r0, 801276c <MIOS32_UART_MIDI_PackageReceive+0x118>
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8012762:	7962      	ldrb	r2, [r4, #5]
	  midix->timeout_ctr = 0; // reset timeout counter
 8012764:	8120      	strh	r0, [r4, #8]
	    midix->timeout_ctr = 0; // reset timeout counter
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8012766:	1e51      	subs	r1, r2, #1
 8012768:	71a1      	strb	r1, [r4, #6]
 801276a:	e001      	b.n	8012770 <MIOS32_UART_MIDI_PackageReceive+0x11c>
	  midix->timeout_ctr = 0; // reset timeout counter
	} else {
	  --midix->wait_bytes;
 801276c:	1e41      	subs	r1, r0, #1
 801276e:	71a1      	strb	r1, [r4, #6]
	}

	if( midix->expected_bytes == 1 ) {
 8012770:	7960      	ldrb	r0, [r4, #5]
 8012772:	2801      	cmp	r0, #1
 8012774:	d102      	bne.n	801277c <MIOS32_UART_MIDI_PackageReceive+0x128>
	  midix->package.evnt1 = byte;
 8012776:	70a3      	strb	r3, [r4, #2]
	  midix->package.evnt2 = 0x00;
 8012778:	2300      	movs	r3, #0
 801277a:	e003      	b.n	8012784 <MIOS32_UART_MIDI_PackageReceive+0x130>
	} else {
	  if( midix->wait_bytes )
 801277c:	79a2      	ldrb	r2, [r4, #6]
 801277e:	b10a      	cbz	r2, 8012784 <MIOS32_UART_MIDI_PackageReceive+0x130>
	    midix->package.evnt1 = byte;
 8012780:	70a3      	strb	r3, [r4, #2]
 8012782:	e000      	b.n	8012786 <MIOS32_UART_MIDI_PackageReceive+0x132>
	  else
	    midix->package.evnt2 = byte;
 8012784:	70e3      	strb	r3, [r4, #3]
	}
	
	if( !midix->wait_bytes ) {
 8012786:	79a3      	ldrb	r3, [r4, #6]
 8012788:	2b00      	cmp	r3, #0
 801278a:	f47f af71 	bne.w	8012670 <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
 801278e:	7920      	ldrb	r0, [r4, #4]
 8012790:	5daa      	ldrb	r2, [r5, r6]
 8012792:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 8012796:	29f0      	cmp	r1, #240	; 0xf0
 8012798:	d001      	beq.n	801279e <MIOS32_UART_MIDI_PackageReceive+0x14a>
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
 801279a:	0901      	lsrs	r1, r0, #4
 801279c:	e008      	b.n	80127b0 <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
 801279e:	7963      	ldrb	r3, [r4, #5]
 80127a0:	b11b      	cbz	r3, 80127aa <MIOS32_UART_MIDI_PackageReceive+0x156>
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d103      	bne.n	80127ae <MIOS32_UART_MIDI_PackageReceive+0x15a>
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
 80127a6:	2102      	movs	r1, #2
 80127a8:	e002      	b.n	80127b0 <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
 80127aa:	2105      	movs	r1, #5
 80127ac:	e000      	b.n	80127b0 <MIOS32_UART_MIDI_PackageReceive+0x15c>
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
		break;
  	      default: 
		midix->package.cin = 3; // 3: SysEx common with three bytes
 80127ae:	2103      	movs	r1, #3
 80127b0:	f361 0203 	bfi	r2, r1, #0, #4
 80127b4:	55aa      	strb	r2, [r5, r6]
		break;
	    }
	  }

	  midix->package.evnt0 = midix->running_status;
 80127b6:	7060      	strb	r0, [r4, #1]
	  // midix->package.evnt1 = // already stored
	  // midix->package.evnt2 = // already stored
	  *package = midix->package;
 80127b8:	59a8      	ldr	r0, [r5, r6]
 80127ba:	6038      	str	r0, [r7, #0]
 80127bc:	e01c      	b.n	80127f8 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 80127be:	2000      	movs	r0, #0
      }
    }
  }

  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
 80127c0:	79a1      	ldrb	r1, [r4, #6]
 80127c2:	b171      	cbz	r1, 80127e2 <MIOS32_UART_MIDI_PackageReceive+0x18e>
 80127c4:	8922      	ldrh	r2, [r4, #8]
 80127c6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80127ca:	d90a      	bls.n	80127e2 <MIOS32_UART_MIDI_PackageReceive+0x18e>
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	51ab      	str	r3, [r5, r6]
  midix->running_status = 0x00;
 80127d0:	7123      	strb	r3, [r4, #4]
  midix->expected_bytes = 0x00;
 80127d2:	7163      	strb	r3, [r4, #5]
  midix->wait_bytes = 0x00;
 80127d4:	71a3      	strb	r3, [r4, #6]
  midix->sysex_ctr = 0x00;
 80127d6:	71e3      	strb	r3, [r4, #7]
  midix->timeout_ctr = 0;
 80127d8:	8123      	strh	r3, [r4, #8]
  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
    // stop waiting
    MIOS32_UART_MIDI_RecordReset(uart_port);
    // notify that incomplete package has been received
    return -10;
 80127da:	f06f 0009 	mvn.w	r0, #9
 80127de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
 80127e2:	2800      	cmp	r0, #0
 80127e4:	bf0c      	ite	eq
 80127e6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 80127ea:	2000      	movne	r0, #0
 80127ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 80127f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 80127f8:	2001      	movs	r0, #1
 80127fa:	e7e1      	b.n	80127c0 <MIOS32_UART_MIDI_PackageReceive+0x16c>
 80127fc:	200002bc 	.word	0x200002bc
 8012800:	0801c386 	.word	0x0801c386
 8012804:	0801c25c 	.word	0x0801c25c

08012808 <MIOS32_SPI_MIDI_Init>:
  MIOS32_SPIM_M16_SofEnable(0);
#endif

  return status;
#endif
}
 8012808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801280c:	4770      	bx	lr

0801280e <MIOS32_SPI_MIDI_Periodic_mS>:
  MIOS32_SPI_MIDI_MUTEX_GIVE;
#endif

  return 0; // no error
#endif
}
 801280e:	2000      	movs	r0, #0
 8012810:	4770      	bx	lr

08012812 <MIOS32_SPI_MIDI_PackageSend>:
  if( error >= 0 ) // no error: reset timeout counter
    timeout_ctr = 0;

  return error;
#endif
}
 8012812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012816:	4770      	bx	lr

08012818 <MIOS32_SPI_MIDI_PackageReceive>:
  --rx_ringbuffer_size;
  MIOS32_IRQ_Enable();

  return rx_ringbuffer_size;
#endif
}
 8012818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801281c:	4770      	bx	lr

0801281e <MIOS32_IIC_MIDI_Init>:
  // TODO: send optimisation flag to IIC_MIDI device once it has been scanned!
#endif

  return 0; // no error
#endif
}
 801281e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012822:	4770      	bx	lr

08012824 <MIOS32_IIC_MIDI_Periodic_mS>:
s32 MIOS32_IIC_MIDI_Periodic_mS(void)
{
  // currently only a dummy - RS optimisation handled by IIC_MIDI device

  return 0;
}
 8012824:	2000      	movs	r0, #0
 8012826:	4770      	bx	lr

08012828 <MIOS32_IIC_MIDI_PackageSend>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IIC_MIDI_PackageSend(u8 iic_port, mios32_midi_package_t package)
{
  return _MIOS32_IIC_MIDI_PackageSend(iic_port, package, 0); // blocking mode
}
 8012828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801282c:	4770      	bx	lr

0801282e <MIOS32_IIC_BS_Init>:
  if( MIOS32_IIC_BS_ScanBankSticks() < 0 )
    return -2; // we don't expect that any other task accesses the IIC port yet!

  return 0; // no error
#endif
}
 801282e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012832:	4770      	bx	lr

08012834 <MIOS32_MF_Init>:
    mf_state[i].config.cfg.pwm_duty_cycle_up = 1;
  }

  return 0;
#endif
}
 8012834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012838:	4770      	bx	lr
	...

0801283c <MIOS32_TIMESTAMP_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 801283c:	b910      	cbnz	r0, 8012844 <MIOS32_TIMESTAMP_Init+0x8>
    return -1; // unsupported mode

  timestamp = 0;
 801283e:	4b03      	ldr	r3, [pc, #12]	; (801284c <MIOS32_TIMESTAMP_Init+0x10>)
 8012840:	6018      	str	r0, [r3, #0]

  return 0;
 8012842:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  timestamp = 0;

  return 0;
}
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	200002f8 	.word	0x200002f8

08012850 <MIOS32_TIMESTAMP_Inc>:
//!
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Inc(void)
{
  ++timestamp;
 8012850:	4b02      	ldr	r3, [pc, #8]	; (801285c <MIOS32_TIMESTAMP_Inc+0xc>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	1c50      	adds	r0, r2, #1
 8012856:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 8012858:	2000      	movs	r0, #0
 801285a:	4770      	bx	lr
 801285c:	200002f8 	.word	0x200002f8

08012860 <MIOS32_TIMESTAMP_Get>:
//! \return the current timestamp
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Get(void)
{
  return timestamp;
}
 8012860:	4b01      	ldr	r3, [pc, #4]	; (8012868 <MIOS32_TIMESTAMP_Get+0x8>)
 8012862:	6818      	ldr	r0, [r3, #0]
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop
 8012868:	200002f8 	.word	0x200002f8

0801286c <MIOS32_SYS_Reset>:
//!   <LI>reset STM32
//! </UL>
//! \return < 0 if reset failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Reset(void)
{
 801286c:	b510      	push	{r4, lr}
  // disable all RTOS tasks
#ifndef MIOS32_DONT_USE_FREERTOS
  portENTER_CRITICAL(); // port specific FreeRTOS function to disable tasks (nested)
 801286e:	f7fe fa57 	bl	8010d20 <vPortEnterCritical>

  // print reboot message if LCD enabled
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 8012872:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012876:	f7fe ffd1 	bl	801181c <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 801287a:	2000      	movs	r0, #0
 801287c:	f7fe ffd0 	bl	8011820 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 8012880:	2000      	movs	r0, #0
 8012882:	f7fe fee1 	bl	8011648 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 8012886:	f7fe ff2f 	bl	80116e8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 801288a:	2000      	movs	r0, #0
 801288c:	4601      	mov	r1, r0
 801288e:	f7fe fee1 	bl	8011654 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Bootloader Mode "); // 16 chars
 8012892:	481e      	ldr	r0, [pc, #120]	; (801290c <MIOS32_SYS_Reset+0xa0>)
 8012894:	f7fe ff86 	bl	80117a4 <MIOS32_LCD_PrintString>
#endif

  // disable all interrupts
  MIOS32_IRQ_Disable();
 8012898:	f000 f940 	bl	8012b1c <MIOS32_IRQ_Disable>

  // turn off all board LEDs
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);
 801289c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128a0:	2100      	movs	r1, #0
 80128a2:	f000 fde9 	bl	8013478 <MIOS32_BOARD_LED_Set>
 80128a6:	2432      	movs	r4, #50	; 0x32

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
      MIOS32_DELAY_Wait_uS(1000);
 80128a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80128ac:	f000 ffac 	bl	8013808 <MIOS32_DELAY_Wait_uS>
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
 80128b0:	3c01      	subs	r4, #1
 80128b2:	d1f9      	bne.n	80128a8 <MIOS32_SYS_Reset+0x3c>
      MIOS32_DELAY_Wait_uS(1000);
  }

  // reset peripherals
  RCC_AHB1PeriphResetCmd(0xfffffffe, ENABLE); // don't reset GPIOA due to USB pins
 80128b4:	f06f 0001 	mvn.w	r0, #1
 80128b8:	2101      	movs	r1, #1
 80128ba:	f003 f88b 	bl	80159d4 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffff7f, ENABLE); // don't reset OTG_FS, so that the connectuion can survive
 80128be:	f06f 0080 	mvn.w	r0, #128	; 0x80
 80128c2:	2101      	movs	r1, #1
 80128c4:	f003 f892 	bl	80159ec <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, ENABLE);
 80128c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128cc:	2101      	movs	r1, #1
 80128ce:	f003 f899 	bl	8015a04 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, ENABLE);
 80128d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128d6:	2101      	movs	r1, #1
 80128d8:	f003 f8a0 	bl	8015a1c <RCC_APB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(0xffffffff, DISABLE);
 80128dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128e0:	4621      	mov	r1, r4
 80128e2:	f003 f877 	bl	80159d4 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffffff, DISABLE);
 80128e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128ea:	4621      	mov	r1, r4
 80128ec:	f003 f87e 	bl	80159ec <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, DISABLE);
 80128f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128f4:	4621      	mov	r1, r4
 80128f6:	f003 f885 	bl	8015a04 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, DISABLE);
 80128fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128fe:	4621      	mov	r1, r4
 8012900:	f003 f88c 	bl	8015a1c <RCC_APB2PeriphResetCmd>
  // not available in v3.0.0 library anymore? - copy from v2.0.1
  SCB->AIRCR = NVIC_AIRCR_VECTKEY | (1 << NVIC_VECTRESET);
#endif
#if 1
  // and this is the code for v3.3.0
  SCB->AIRCR = (0x5fa << SCB_AIRCR_VECTKEY_Pos) | (1 << SCB_AIRCR_VECTRESET_Pos);
 8012904:	4a02      	ldr	r2, [pc, #8]	; (8012910 <MIOS32_SYS_Reset+0xa4>)
 8012906:	4b03      	ldr	r3, [pc, #12]	; (8012914 <MIOS32_SYS_Reset+0xa8>)
 8012908:	60da      	str	r2, [r3, #12]
 801290a:	e7fe      	b.n	801290a <MIOS32_SYS_Reset+0x9e>
 801290c:	0801c391 	.word	0x0801c391
 8012910:	05fa0001 	.word	0x05fa0001
 8012914:	e000ed00 	.word	0xe000ed00

08012918 <MIOS32_SYS_ChipIDGet>:
//! \return the chip ID
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_ChipIDGet(void)
{
  // stored in DBGMCU_IDCODE register
  return MEM32(0xe0042000);
 8012918:	4b01      	ldr	r3, [pc, #4]	; (8012920 <MIOS32_SYS_ChipIDGet+0x8>)
 801291a:	6818      	ldr	r0, [r3, #0]
}
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	e0042000 	.word	0xe0042000

08012924 <MIOS32_SYS_FlashSizeGet>:
//! \return the Flash size in bytes
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_FlashSizeGet(void)
{
  // stored in the so called "electronic signature"
  return (u32)MEM16(0x1fff7a22) * 0x400;
 8012924:	4b02      	ldr	r3, [pc, #8]	; (8012930 <MIOS32_SYS_FlashSizeGet+0xc>)
 8012926:	8818      	ldrh	r0, [r3, #0]
 8012928:	b281      	uxth	r1, r0
}
 801292a:	0288      	lsls	r0, r1, #10
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop
 8012930:	1fff7a22 	.word	0x1fff7a22

08012934 <MIOS32_SYS_RAMSizeGet>:
#elif defined(MIOS32_PROCESSOR_STM32F405RG)
  return 192*1024; // unfortunately not stored in signature...
#else
# error "Please define RAM size here"
#endif
}
 8012934:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8012938:	4770      	bx	lr
	...

0801293c <MIOS32_SYS_SerialNumberGet>:
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 801293c:	2300      	movs	r3, #0
    u8 b = MEM8(0x1fff7a10 + (i/2));
 801293e:	4a0b      	ldr	r2, [pc, #44]	; (801296c <MIOS32_SYS_SerialNumberGet+0x30>)
 8012940:	1059      	asrs	r1, r3, #1
 8012942:	1889      	adds	r1, r1, r2
 8012944:	780a      	ldrb	r2, [r1, #0]
    if( !(i & 1) )
 8012946:	07d9      	lsls	r1, r3, #31
      b >>= 4;
 8012948:	bf58      	it	pl
 801294a:	0912      	lsrpl	r2, r2, #4
    b &= 0x0f;
 801294c:	f002 020f 	and.w	r2, r2, #15

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
 8012950:	2a09      	cmp	r2, #9
 8012952:	bf94      	ite	ls
 8012954:	2130      	movls	r1, #48	; 0x30
 8012956:	2137      	movhi	r1, #55	; 0x37
 8012958:	188a      	adds	r2, r1, r2
 801295a:	54c2      	strb	r2, [r0, r3]
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 801295c:	3301      	adds	r3, #1
 801295e:	2b18      	cmp	r3, #24
 8012960:	d1ed      	bne.n	801293e <MIOS32_SYS_SerialNumberGet+0x2>
      b >>= 4;
    b &= 0x0f;

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
  }
  str[i] = 0;
 8012962:	2100      	movs	r1, #0
 8012964:	7601      	strb	r1, [r0, #24]

  return 0; // no error
}
 8012966:	4608      	mov	r0, r1
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	1fff7a10 	.word	0x1fff7a10

08012970 <MIOS32_SYS_TimeSet>:
//! Note that this format isn't completely compatible to the NTP timestamp format,
//! as the fraction has only mS accuracy
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_TimeSet(mios32_sys_time_t t)
{
 8012970:	b510      	push	{r4, lr}
 8012972:	b086      	sub	sp, #24
 8012974:	4604      	mov	r4, r0
 8012976:	e88d 0003 	stmia.w	sp, {r0, r1}
  // taken from STM32 example "RTC/Calendar"
  // adapted to clock RTC via HSE  oscillator

  // Enable PWR and BKP clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 801297a:	2101      	movs	r1, #1
 801297c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012980:	f003 f810 	bl	80159a4 <RCC_APB1PeriphClockCmd>

  // Allow access to BKP Domain
  PWR_BackupAccessCmd(ENABLE);
 8012984:	2001      	movs	r0, #1
 8012986:	f002 ff8b 	bl	80158a0 <PWR_BackupAccessCmd>

  // Select HSE (divided by 16) as RTC Clock Source
#if EXT_CRYSTAL_FRQ == 16000000
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(16 MHz / 16) = 1 uS
#elif EXT_CRYSTAL_FRQ == 8000000
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(8 MHz / 16) = 2 uS
 801298a:	4817      	ldr	r0, [pc, #92]	; (80129e8 <MIOS32_SYS_TimeSet+0x78>)
 801298c:	f002 ffd4 	bl	8015938 <RCC_RTCCLKConfig>
#else
# error "Please configure alternative clock divider here"
#endif

  // Enable RTC Clock
  RCC_RTCCLKCmd(ENABLE);
 8012990:	2001      	movs	r0, #1
 8012992:	f002 ffe9 	bl	8015968 <RCC_RTCCLKCmd>

  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);
 8012996:	a803      	add	r0, sp, #12
 8012998:	f003 f858 	bl	8015a4c <RTC_StructInit>

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 801299c:	2063      	movs	r0, #99	; 0x63
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 801299e:	f241 3187 	movw	r1, #4999	; 0x1387
  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 80129a2:	9004      	str	r0, [sp, #16]
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
  RTC_Init(&RTC_InitStruct);
 80129a4:	a803      	add	r0, sp, #12
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 80129a6:	9105      	str	r1, [sp, #20]
  RTC_Init(&RTC_InitStruct);
 80129a8:	f003 f87e 	bl	8015aa8 <RTC_Init>

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
 80129ac:	a802      	add	r0, sp, #8
 80129ae:	f003 f907 	bl	8015bc0 <RTC_TimeStructInit>
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80129b2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80129b6:	fbb4 f3f2 	udiv	r3, r4, r2
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80129ba:	213c      	movs	r1, #60	; 0x3c
 80129bc:	fb02 4013 	mls	r0, r2, r3, r4
  RTC_Init(&RTC_InitStruct);

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80129c0:	f88d 3008 	strb.w	r3, [sp, #8]
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80129c4:	fbb4 f3f1 	udiv	r3, r4, r1

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80129c8:	fbb0 f2f1 	udiv	r2, r0, r1
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80129cc:	fb01 4413 	mls	r4, r1, r3, r4
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 80129d0:	2000      	movs	r0, #0
 80129d2:	a902      	add	r1, sp, #8

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80129d4:	f88d 2009 	strb.w	r2, [sp, #9]
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80129d8:	f88d 400a 	strb.w	r4, [sp, #10]
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 80129dc:	f003 f8aa 	bl	8015b34 <RTC_SetTime>
  // (fraction not taken into account here)

  return 0; // no error
}
 80129e0:	2000      	movs	r0, #0
 80129e2:	b006      	add	sp, #24
 80129e4:	bd10      	pop	{r4, pc}
 80129e6:	bf00      	nop
 80129e8:	00100300 	.word	0x00100300

080129ec <MIOS32_SYS_Init>:
//! </UL>
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
 80129ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 80129ee:	4604      	mov	r4, r0
 80129f0:	2800      	cmp	r0, #0
 80129f2:	f040 8083 	bne.w	8012afc <MIOS32_SYS_Init+0x110>
    return -1; // unsupported mode

  // Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOE and AFIO clocks
  RCC_AHB1PeriphClockCmd(
 80129f6:	201f      	movs	r0, #31
 80129f8:	2101      	movs	r1, #1
 80129fa:	f002 ffbb 	bl	8015974 <RCC_AHB1PeriphClockCmd>
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 80129fe:	4b41      	ldr	r3, [pc, #260]	; (8012b04 <MIOS32_SYS_Init+0x118>)
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
 8012a00:	9400      	str	r4, [sp, #0]
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012a02:	689a      	ldr	r2, [r3, #8]
 8012a04:	f002 000c 	and.w	r0, r2, #12
 8012a08:	2808      	cmp	r0, #8
 8012a0a:	d102      	bne.n	8012a12 <MIOS32_SYS_Init+0x26>
    HSEStatus = SUCCESS;
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	9000      	str	r0, [sp, #0]
 8012a10:	e05d      	b.n	8012ace <MIOS32_SYS_Init+0xe2>
  } else {
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8012a12:	6819      	ldr	r1, [r3, #0]
 8012a14:	f041 0201 	orr.w	r2, r1, #1
 8012a18:	601a      	str	r2, [r3, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8012a1a:	609c      	str	r4, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012a22:	4839      	ldr	r0, [pc, #228]	; (8012b08 <MIOS32_SYS_Init+0x11c>)

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012a24:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8012a28:	601a      	str	r2, [r3, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012a2a:	6058      	str	r0, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012a2c:	6819      	ldr	r1, [r3, #0]
 8012a2e:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8012a32:	601a      	str	r2, [r3, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8012a34:	60dc      	str	r4, [r3, #12]
       AHB/APBx prescalers and Flash settings ----------------------------------*/

    /******************************************************************************/
    /*            PLL (clocked by HSE) used as System clock source                */
    /******************************************************************************/
    __IO uint32_t StartUpCounter = 0;
 8012a36:	9401      	str	r4, [sp, #4]
  
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8012a38:	6818      	ldr	r0, [r3, #0]
 8012a3a:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8012a3e:	6019      	str	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8012a40:	4b30      	ldr	r3, [pc, #192]	; (8012b04 <MIOS32_SYS_Init+0x118>)
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 8012a48:	9000      	str	r0, [sp, #0]
      StartUpCounter++;
 8012a4a:	9901      	ldr	r1, [sp, #4]
 8012a4c:	1c4a      	adds	r2, r1, #1
 8012a4e:	9201      	str	r2, [sp, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8012a50:	9800      	ldr	r0, [sp, #0]
 8012a52:	b918      	cbnz	r0, 8012a5c <MIOS32_SYS_Init+0x70>
 8012a54:	9901      	ldr	r1, [sp, #4]
 8012a56:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8012a5a:	d1f1      	bne.n	8012a40 <MIOS32_SYS_Init+0x54>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
      HSEStatus = (uint32_t)0x01;
 8012a62:	bf18      	it	ne
 8012a64:	2201      	movne	r2, #1
    } else {
      HSEStatus = (uint32_t)0x00;
 8012a66:	9200      	str	r2, [sp, #0]
    }

    if (HSEStatus == (uint32_t)0x01) {
 8012a68:	9800      	ldr	r0, [sp, #0]
 8012a6a:	2801      	cmp	r0, #1
 8012a6c:	d12f      	bne.n	8012ace <MIOS32_SYS_Init+0xe2>
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012a6e:	4b25      	ldr	r3, [pc, #148]	; (8012b04 <MIOS32_SYS_Init+0x118>)
      PWR->CR |= PWR_CR_VOS;
 8012a70:	4826      	ldr	r0, [pc, #152]	; (8012b0c <MIOS32_SYS_Init+0x120>)
      HSEStatus = (uint32_t)0x00;
    }

    if (HSEStatus == (uint32_t)0x01) {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012a72:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012a74:	f041 5280 	orr.w	r2, r1, #268435456	; 0x10000000
 8012a78:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 8012a7a:	6801      	ldr	r1, [r0, #0]
 8012a7c:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 8012a80:	6002      	str	r2, [r0, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8012a82:	6898      	ldr	r0, [r3, #8]
 8012a84:	6098      	str	r0, [r3, #8]
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8012a86:	6899      	ldr	r1, [r3, #8]
 8012a88:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8012a8c:	609a      	str	r2, [r3, #8]
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8012a8e:	6898      	ldr	r0, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8012a90:	4a1f      	ldr	r2, [pc, #124]	; (8012b10 <MIOS32_SYS_Init+0x124>)
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8012a92:	f440 51a0 	orr.w	r1, r0, #5120	; 0x1400
 8012a96:	6099      	str	r1, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8012a98:	605a      	str	r2, [r3, #4]
	             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 8012a9a:	6818      	ldr	r0, [r3, #0]
 8012a9c:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 8012aa0:	6019      	str	r1, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8012aa2:	6818      	ldr	r0, [r3, #0]
 8012aa4:	4a17      	ldr	r2, [pc, #92]	; (8012b04 <MIOS32_SYS_Init+0x118>)
 8012aa6:	0180      	lsls	r0, r0, #6
 8012aa8:	d5fb      	bpl.n	8012aa2 <MIOS32_SYS_Init+0xb6>
   
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8012aaa:	4b1a      	ldr	r3, [pc, #104]	; (8012b14 <MIOS32_SYS_Init+0x128>)
 8012aac:	f240 6105 	movw	r1, #1541	; 0x605
 8012ab0:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8012ab2:	6890      	ldr	r0, [r2, #8]
 8012ab4:	f020 0103 	bic.w	r1, r0, #3
 8012ab8:	6091      	str	r1, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 8012aba:	6893      	ldr	r3, [r2, #8]
 8012abc:	f043 0002 	orr.w	r0, r3, #2
 8012ac0:	6090      	str	r0, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8012ac2:	4a10      	ldr	r2, [pc, #64]	; (8012b04 <MIOS32_SYS_Init+0x118>)
 8012ac4:	6891      	ldr	r1, [r2, #8]
 8012ac6:	f001 030c 	and.w	r3, r1, #12
 8012aca:	2b08      	cmp	r3, #8
 8012acc:	d1f9      	bne.n	8012ac2 <MIOS32_SYS_Init+0xd6>
         configuration. User can add here some code to deal with this error */
    }
  }

  // Set the Vector Table base address as specified in .ld file (-> mios32_sys_isr_vector)
  NVIC_SetVectorTable((u32)&mios32_sys_isr_vector, 0x0);
 8012ace:	2100      	movs	r1, #0
 8012ad0:	4811      	ldr	r0, [pc, #68]	; (8012b18 <MIOS32_SYS_Init+0x12c>)
 8012ad2:	f002 fde7 	bl	80156a4 <NVIC_SetVectorTable>
  NVIC_PriorityGroupConfig(MIOS32_IRQ_PRIGROUP);
 8012ad6:	f44f 7040 	mov.w	r0, #768	; 0x300
 8012ada:	f002 fdd9 	bl	8015690 <NVIC_PriorityGroupConfig>

#ifndef MIOS32_SYS_DONT_INIT_RTC
  // initialize system clock
  mios32_sys_time_t t = { .seconds=0, .fraction_ms=0 };
 8012ade:	2200      	movs	r2, #0
 8012ae0:	9202      	str	r2, [sp, #8]
 8012ae2:	9203      	str	r2, [sp, #12]
  MIOS32_SYS_TimeSet(t);
 8012ae4:	a904      	add	r1, sp, #16
 8012ae6:	e911 0003 	ldmdb	r1, {r0, r1}
 8012aea:	f7ff ff41 	bl	8012970 <MIOS32_SYS_TimeSet>
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
 8012aee:	9b00      	ldr	r3, [sp, #0]
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	bf14      	ite	ne
 8012af4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8012af8:	2000      	moveq	r0, #0
 8012afa:	e001      	b.n	8012b00 <MIOS32_SYS_Init+0x114>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_SYS_TimeSet(t);
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
}
 8012b00:	b004      	add	sp, #16
 8012b02:	bd10      	pop	{r4, pc}
 8012b04:	40023800 	.word	0x40023800
 8012b08:	24003010 	.word	0x24003010
 8012b0c:	40007000 	.word	0x40007000
 8012b10:	07405408 	.word	0x07405408
 8012b14:	40023c00 	.word	0x40023c00
 8012b18:	08004000 	.word	0x08004000

08012b1c <MIOS32_IRQ_Disable>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Disable(void)
{
  // get current priority if nested level == 0
  if( !nested_ctr ) {
 8012b1c:	4b07      	ldr	r3, [pc, #28]	; (8012b3c <MIOS32_IRQ_Disable+0x20>)
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	b91a      	cbnz	r2, 8012b2a <MIOS32_IRQ_Disable+0xe>
    __asm volatile (			   \
 8012b22:	f3ef 8110 	mrs	r1, PRIMASK
 8012b26:	4806      	ldr	r0, [pc, #24]	; (8012b40 <MIOS32_IRQ_Disable+0x24>)
 8012b28:	6001      	str	r1, [r0, #0]
		    : "=r" (prev_primask)  \
		    );
  }

  // disable interrupts
  __asm volatile ( \
 8012b2a:	f04f 0001 	mov.w	r0, #1
 8012b2e:	f380 8810 	msr	PRIMASK, r0
		  "	mov r0, #1     \n" \
		  "	msr primask, r0\n" \
		  :::"r0"	 \
		  );

  ++nested_ctr;
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	1c51      	adds	r1, r2, #1
 8012b36:	6019      	str	r1, [r3, #0]

  return 0; // no error
}
 8012b38:	2000      	movs	r0, #0
 8012b3a:	4770      	bx	lr
 8012b3c:	20000300 	.word	0x20000300
 8012b40:	200002fc 	.word	0x200002fc

08012b44 <MIOS32_IRQ_Enable>:
//! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
 8012b44:	4a07      	ldr	r2, [pc, #28]	; (8012b64 <MIOS32_IRQ_Enable+0x20>)
 8012b46:	6813      	ldr	r3, [r2, #0]
 8012b48:	b13b      	cbz	r3, 8012b5a <MIOS32_IRQ_Enable+0x16>
    return -1; // nesting error

  // decrease nesting level
  --nested_ctr;
 8012b4a:	1e58      	subs	r0, r3, #1
 8012b4c:	6010      	str	r0, [r2, #0]

  // set back previous priority once nested level reached 0 again
  if( nested_ctr == 0 ) {
 8012b4e:	b938      	cbnz	r0, 8012b60 <MIOS32_IRQ_Enable+0x1c>
    __asm volatile ( \
 8012b50:	4905      	ldr	r1, [pc, #20]	; (8012b68 <MIOS32_IRQ_Enable+0x24>)
 8012b52:	680a      	ldr	r2, [r1, #0]
 8012b54:	f382 8810 	msr	PRIMASK, r2
 8012b58:	e002      	b.n	8012b60 <MIOS32_IRQ_Enable+0x1c>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
    return -1; // nesting error
 8012b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b5e:	4770      	bx	lr
		    "	msr primask, %0\n" \
		    :: "r" (prev_primask)  \
		    );
  }

  return 0; // no error
 8012b60:	2000      	movs	r0, #0
}
 8012b62:	4770      	bx	lr
 8012b64:	20000300 	.word	0x20000300
 8012b68:	200002fc 	.word	0x200002fc

08012b6c <MIOS32_IRQ_Install>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
 8012b6c:	290f      	cmp	r1, #15
 8012b6e:	d81c      	bhi.n	8012baa <MIOS32_IRQ_Install+0x3e>
    return -1; // invalid priority

  u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 8012b70:	4b0f      	ldr	r3, [pc, #60]	; (8012bb0 <MIOS32_IRQ_Install+0x44>)
 8012b72:	68da      	ldr	r2, [r3, #12]
 8012b74:	43d3      	mvns	r3, r2
 8012b76:	f3c3 2202 	ubfx	r2, r3, #8, #3
  u32 tmppre = (4 - tmppriority);
 8012b7a:	f1c2 0304 	rsb	r3, r2, #4
  tmppriority = priority << tmppre;
 8012b7e:	fa01 f103 	lsl.w	r1, r1, r3
  tmppriority = tmppriority << 4;
 8012b82:	0109      	lsls	r1, r1, #4
  NVIC->IP[IRQn] = tmppriority;
 8012b84:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8012b88:	b2ca      	uxtb	r2, r1
 8012b8a:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8012b8e:	2301      	movs	r3, #1
 8012b90:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 8012b94:	b242      	sxtb	r2, r0
 8012b96:	f000 001f 	and.w	r0, r0, #31
 8012b9a:	0951      	lsrs	r1, r2, #5
 8012b9c:	fa03 f200 	lsl.w	r2, r3, r0
 8012ba0:	4804      	ldr	r0, [pc, #16]	; (8012bb4 <MIOS32_IRQ_Install+0x48>)
 8012ba2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	4770      	bx	lr
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
    return -1; // invalid priority
 8012baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  NVIC->IP[IRQn] = tmppriority;

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
}
 8012bae:	4770      	bx	lr
 8012bb0:	e000ed00 	.word	0xe000ed00
 8012bb4:	e000e100 	.word	0xe000e100

08012bb8 <MIOS32_SPI_IO_Init>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported pin driver mode
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_IO_Init(u8 spi, mios32_spi_pin_driver_t spi_pin_driver)
{
 8012bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bba:	4605      	mov	r5, r0
 8012bbc:	460c      	mov	r4, r1
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8012bbe:	4668      	mov	r0, sp
 8012bc0:	f002 fe29 	bl	8015816 <GPIO_StructInit>

  // select pin driver and output mode
  u8 slave = 0;
  switch( spi_pin_driver ) {
 8012bc4:	2c07      	cmp	r4, #7
 8012bc6:	f200 8110 	bhi.w	8012dea <MIOS32_SPI_IO_Init+0x232>
 8012bca:	e8df f004 	tbb	[pc, r4]
 8012bce:	080a      	.short	0x080a
 8012bd0:	120c0406 	.word	0x120c0406
 8012bd4:	1a15      	.short	0x1a15
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // select pin driver and output mode
  u8 slave = 0;
 8012bd6:	2400      	movs	r4, #0
 8012bd8:	e014      	b.n	8012c04 <MIOS32_SPI_IO_Init+0x4c>
 8012bda:	2400      	movs	r4, #0
 8012bdc:	e00d      	b.n	8012bfa <MIOS32_SPI_IO_Init+0x42>
 8012bde:	2400      	movs	r4, #0
 8012be0:	e008      	b.n	8012bf4 <MIOS32_SPI_IO_Init+0x3c>
 8012be2:	2400      	movs	r4, #0
 8012be4:	e000      	b.n	8012be8 <MIOS32_SPI_IO_Init+0x30>
  switch( spi_pin_driver ) {
    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG:
      slave = 1;
 8012be6:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012be8:	2102      	movs	r1, #2
 8012bea:	f88d 1005 	strb.w	r1, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012bee:	2000      	movs	r0, #0
 8012bf0:	e00c      	b.n	8012c0c <MIOS32_SPI_IO_Init+0x54>
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG_OD:
      slave = 1;
 8012bf2:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012bf4:	2302      	movs	r3, #2
 8012bf6:	e006      	b.n	8012c06 <MIOS32_SPI_IO_Init+0x4e>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK:
      slave = 1;
 8012bf8:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	f88d 0005 	strb.w	r0, [sp, #5]
 8012c00:	e004      	b.n	8012c0c <MIOS32_SPI_IO_Init+0x54>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
 8012c02:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012c04:	2300      	movs	r3, #0
 8012c06:	f88d 3005 	strb.w	r3, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012c0a:	2001      	movs	r0, #1

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012c0c:	2d01      	cmp	r5, #1

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012c0e:	f88d 0006 	strb.w	r0, [sp, #6]

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012c12:	d054      	beq.n	8012cbe <MIOS32_SPI_IO_Init+0x106>
 8012c14:	d303      	bcc.n	8012c1e <MIOS32_SPI_IO_Init+0x66>
 8012c16:	2d02      	cmp	r5, #2
 8012c18:	f040 80e4 	bne.w	8012de4 <MIOS32_SPI_IO_Init+0x22c>
 8012c1c:	e087      	b.n	8012d2e <MIOS32_SPI_IO_Init+0x176>
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      MIOS32_SPI0_RCLK1_AF;
      MIOS32_SPI0_RCLK2_AF;
      MIOS32_SPI0_SCLK_AF;
 8012c1e:	2105      	movs	r1, #5
 8012c20:	460a      	mov	r2, r1
 8012c22:	4873      	ldr	r0, [pc, #460]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012c24:	f002 fe04 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI0_MISO_AF;
 8012c28:	4871      	ldr	r0, [pc, #452]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012c2a:	2106      	movs	r1, #6
 8012c2c:	2205      	movs	r2, #5
 8012c2e:	f002 fdff 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI0_MOSI_AF;
 8012c32:	486f      	ldr	r0, [pc, #444]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012c34:	2107      	movs	r1, #7
 8012c36:	2205      	movs	r2, #5
 8012c38:	f002 fdfa 	bl	8015830 <GPIO_PinAFConfig>
 8012c3c:	2502      	movs	r5, #2
 8012c3e:	2120      	movs	r1, #32
#if !defined(MIOS32_BOARD_MBHP_DIPCOREF4)
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012c40:	9100      	str	r1, [sp, #0]
      if( slave ) {
#if !defined(MIOS32_BOARD_MBHP_DIPCOREF4)
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012c42:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012c46:	486a      	ldr	r0, [pc, #424]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012c48:	4669      	mov	r1, sp
      MIOS32_SPI0_RCLK2_AF;
      MIOS32_SPI0_SCLK_AF;
      MIOS32_SPI0_MISO_AF;
      MIOS32_SPI0_MOSI_AF;

      if( slave ) {
 8012c4a:	b1d4      	cbz	r4, 8012c82 <MIOS32_SPI_IO_Init+0xca>
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012c4c:	f002 fd96 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012c50:	2480      	movs	r4, #128	; 0x80
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012c52:	4867      	ldr	r0, [pc, #412]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012c54:	9400      	str	r4, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012c56:	4669      	mov	r1, sp
 8012c58:	f002 fd90 	bl	801577c <GPIO_Init>

	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012c5c:	2410      	movs	r4, #16
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012c5e:	4864      	ldr	r0, [pc, #400]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);

	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012c60:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012c64:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);

	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012c66:	9400      	str	r4, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012c68:	f002 fd88 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; // GPIO!
 8012c6c:	2201      	movs	r2, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012c6e:	4861      	ldr	r0, [pc, #388]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)

	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; // GPIO!
 8012c70:	f88d 2004 	strb.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012c74:	4669      	mov	r1, sp
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; // GPIO!
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012c76:	9400      	str	r4, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012c78:	f002 fd80 	bl	801577c <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012c7c:	f88d 5004 	strb.w	r5, [sp, #4]
 8012c80:	e019      	b.n	8012cb6 <MIOS32_SPI_IO_Init+0xfe>
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012c82:	f002 fd7b 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012c86:	2780      	movs	r7, #128	; 0x80
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012c88:	4859      	ldr	r0, [pc, #356]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012c8a:	9700      	str	r7, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012c8c:	4669      	mov	r1, sp
 8012c8e:	f002 fd75 	bl	801577c <GPIO_Init>
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012c92:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012c94:	2710      	movs	r7, #16
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012c96:	4856      	ldr	r0, [pc, #344]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012c98:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012c9c:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012c9e:	9700      	str	r7, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012ca0:	f002 fd6c 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012ca4:	4853      	ldr	r0, [pc, #332]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012ca6:	9700      	str	r7, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012ca8:	4669      	mov	r1, sp
 8012caa:	f002 fd67 	bl	801577c <GPIO_Init>
#else
# warning "Please doublecheck if RE3 has to be set to 1 to disable MEMs"
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012cae:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012cb2:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8012cb6:	2340      	movs	r3, #64	; 0x40
 8012cb8:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
 8012cba:	484d      	ldr	r0, [pc, #308]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012cbc:	e06f      	b.n	8012d9e <MIOS32_SPI_IO_Init+0x1e6>
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      MIOS32_SPI1_RCLK1_AF;
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
 8012cbe:	484e      	ldr	r0, [pc, #312]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012cc0:	210d      	movs	r1, #13
 8012cc2:	2205      	movs	r2, #5
 8012cc4:	f002 fdb4 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI1_MISO_AF;
 8012cc8:	484a      	ldr	r0, [pc, #296]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
 8012cca:	2102      	movs	r1, #2
 8012ccc:	2205      	movs	r2, #5
 8012cce:	f002 fdaf 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI1_MOSI_AF;
 8012cd2:	4848      	ldr	r0, [pc, #288]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
 8012cd4:	2103      	movs	r1, #3
 8012cd6:	2205      	movs	r2, #5
 8012cd8:	f002 fdaa 	bl	8015830 <GPIO_PinAFConfig>

      if( slave ) {
 8012cdc:	2c00      	cmp	r4, #0
 8012cde:	f040 8084 	bne.w	8012dea <MIOS32_SPI_IO_Init+0x232>
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
 8012ce2:	ae02      	add	r6, sp, #8
 8012ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012ce8:	2702      	movs	r7, #2
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
 8012cea:	f846 0d08 	str.w	r0, [r6, #-8]!
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012cee:	4669      	mov	r1, sp
 8012cf0:	4841      	ldr	r0, [pc, #260]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012cf2:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012cf6:	f002 fd41 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012cfa:	2108      	movs	r1, #8
 8012cfc:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012cfe:	483d      	ldr	r0, [pc, #244]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
 8012d00:	4669      	mov	r1, sp
 8012d02:	f002 fd3b 	bl	801577c <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d06:	483c      	ldr	r0, [pc, #240]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012d08:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d0c:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012d0e:	9700      	str	r7, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d10:	f002 fd34 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012d14:	4838      	ldr	r0, [pc, #224]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012d16:	9500      	str	r5, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012d18:	4669      	mov	r1, sp
 8012d1a:	f002 fd2f 	bl	801577c <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
 8012d1e:	2204      	movs	r2, #4
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d20:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012d24:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
 8012d28:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);
 8012d2a:	4832      	ldr	r0, [pc, #200]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
 8012d2c:	e037      	b.n	8012d9e <MIOS32_SPI_IO_Init+0x1e6>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      MIOS32_SPI2_RCLK1_AF;
 8012d2e:	4830      	ldr	r0, [pc, #192]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
 8012d30:	210f      	movs	r1, #15
 8012d32:	2206      	movs	r2, #6
 8012d34:	f002 fd7c 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
 8012d38:	482f      	ldr	r0, [pc, #188]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d3a:	2103      	movs	r1, #3
 8012d3c:	2206      	movs	r2, #6
 8012d3e:	f002 fd77 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI2_MISO_AF;
 8012d42:	482d      	ldr	r0, [pc, #180]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d44:	2104      	movs	r1, #4
 8012d46:	2206      	movs	r2, #6
 8012d48:	f002 fd72 	bl	8015830 <GPIO_PinAFConfig>
      MIOS32_SPI2_MOSI_AF;
 8012d4c:	482a      	ldr	r0, [pc, #168]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d4e:	2105      	movs	r1, #5
 8012d50:	2206      	movs	r2, #6
 8012d52:	f002 fd6d 	bl	8015830 <GPIO_PinAFConfig>
 8012d56:	2208      	movs	r2, #8

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d58:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
 8012d5c:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012d5e:	4826      	ldr	r0, [pc, #152]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d60:	4669      	mov	r1, sp
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
      MIOS32_SPI2_MISO_AF;
      MIOS32_SPI2_MOSI_AF;

      if( slave ) {
 8012d62:	b30c      	cbz	r4, 8012da8 <MIOS32_SPI_IO_Init+0x1f0>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012d64:	f002 fd0a 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012d68:	2120      	movs	r1, #32
 8012d6a:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012d6c:	4822      	ldr	r0, [pc, #136]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d6e:	4669      	mov	r1, sp
 8012d70:	f002 fd04 	bl	801577c <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012d78:	481d      	ldr	r0, [pc, #116]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012d7a:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012d7c:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d7e:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012d82:	f002 fcfb 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012d86:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012d8a:	481a      	ldr	r0, [pc, #104]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012d8c:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012d8e:	4669      	mov	r1, sp
 8012d90:	f002 fcf4 	bl	801577c <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d94:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MISO_PIN;
 8012d98:	2010      	movs	r0, #16
 8012d9a:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
 8012d9c:	4816      	ldr	r0, [pc, #88]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
 8012d9e:	4669      	mov	r1, sp
 8012da0:	f002 fcec 	bl	801577c <GPIO_Init>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8012da4:	2000      	movs	r0, #0
 8012da6:	e022      	b.n	8012dee <MIOS32_SPI_IO_Init+0x236>
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012da8:	f002 fce8 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012dac:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012dae:	4812      	ldr	r0, [pc, #72]	; (8012df8 <MIOS32_SPI_IO_Init+0x240>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012db0:	9600      	str	r6, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012db2:	4669      	mov	r1, sp
 8012db4:	f002 fce2 	bl	801577c <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012db8:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012dbe:	480c      	ldr	r0, [pc, #48]	; (8012df0 <MIOS32_SPI_IO_Init+0x238>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012dc0:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012dc2:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012dc4:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012dc8:	f002 fcd8 	bl	801577c <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012dcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012dd0:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012dd2:	4669      	mov	r1, sp
 8012dd4:	4807      	ldr	r0, [pc, #28]	; (8012df4 <MIOS32_SPI_IO_Init+0x23c>)
 8012dd6:	f002 fcd1 	bl	801577c <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012dda:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012dde:	f88d 6007 	strb.w	r6, [sp, #7]
 8012de2:	e7d9      	b.n	8012d98 <MIOS32_SPI_IO_Init+0x1e0>

      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012de4:	f06f 0001 	mvn.w	r0, #1
 8012de8:	e001      	b.n	8012dee <MIOS32_SPI_IO_Init+0x236>
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
#if defined(MIOS32_BOARD_MBHP_DIPCOREF4)
	return -3; // slave mode not supported for this pin
 8012dea:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012df0:	40020000 	.word	0x40020000
 8012df4:	40020800 	.word	0x40020800
 8012df8:	40020400 	.word	0x40020400

08012dfc <MIOS32_SPI_RC_PinSet>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported RCx pin selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_RC_PinSet(u8 spi, u8 rc_pin, u8 pin_value)
{
  switch( spi ) {
 8012dfc:	2801      	cmp	r0, #1
 8012dfe:	d00c      	beq.n	8012e1a <MIOS32_SPI_RC_PinSet+0x1e>
 8012e00:	d302      	bcc.n	8012e08 <MIOS32_SPI_RC_PinSet+0xc>
 8012e02:	2802      	cmp	r0, #2
 8012e04:	d126      	bne.n	8012e54 <MIOS32_SPI_RC_PinSet+0x58>
 8012e06:	e010      	b.n	8012e2a <MIOS32_SPI_RC_PinSet+0x2e>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012e08:	b121      	cbz	r1, 8012e14 <MIOS32_SPI_RC_PinSet+0x18>
 8012e0a:	2901      	cmp	r1, #1
 8012e0c:	d125      	bne.n	8012e5a <MIOS32_SPI_RC_PinSet+0x5e>
 8012e0e:	2110      	movs	r1, #16
 8012e10:	4b13      	ldr	r3, [pc, #76]	; (8012e60 <MIOS32_SPI_RC_PinSet+0x64>)
 8012e12:	e019      	b.n	8012e48 <MIOS32_SPI_RC_PinSet+0x4c>
 8012e14:	4913      	ldr	r1, [pc, #76]	; (8012e64 <MIOS32_SPI_RC_PinSet+0x68>)
 8012e16:	2010      	movs	r0, #16
 8012e18:	e011      	b.n	8012e3e <MIOS32_SPI_RC_PinSet+0x42>

  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012e1a:	b119      	cbz	r1, 8012e24 <MIOS32_SPI_RC_PinSet+0x28>
 8012e1c:	2901      	cmp	r1, #1
 8012e1e:	d11c      	bne.n	8012e5a <MIOS32_SPI_RC_PinSet+0x5e>
 8012e20:	4b11      	ldr	r3, [pc, #68]	; (8012e68 <MIOS32_SPI_RC_PinSet+0x6c>)
 8012e22:	e011      	b.n	8012e48 <MIOS32_SPI_RC_PinSet+0x4c>
 8012e24:	4910      	ldr	r1, [pc, #64]	; (8012e68 <MIOS32_SPI_RC_PinSet+0x6c>)
 8012e26:	2002      	movs	r0, #2
 8012e28:	e009      	b.n	8012e3e <MIOS32_SPI_RC_PinSet+0x42>

  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012e2a:	b129      	cbz	r1, 8012e38 <MIOS32_SPI_RC_PinSet+0x3c>
 8012e2c:	2901      	cmp	r1, #1
 8012e2e:	d114      	bne.n	8012e5a <MIOS32_SPI_RC_PinSet+0x5e>
 8012e30:	4b0b      	ldr	r3, [pc, #44]	; (8012e60 <MIOS32_SPI_RC_PinSet+0x64>)
 8012e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012e36:	e007      	b.n	8012e48 <MIOS32_SPI_RC_PinSet+0x4c>
 8012e38:	490a      	ldr	r1, [pc, #40]	; (8012e64 <MIOS32_SPI_RC_PinSet+0x68>)
 8012e3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8012e3e:	b10a      	cbz	r2, 8012e44 <MIOS32_SPI_RC_PinSet+0x48>
 8012e40:	8308      	strh	r0, [r1, #24]
 8012e42:	e003      	b.n	8012e4c <MIOS32_SPI_RC_PinSet+0x50>
 8012e44:	8348      	strh	r0, [r1, #26]
 8012e46:	e001      	b.n	8012e4c <MIOS32_SPI_RC_PinSet+0x50>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012e48:	b112      	cbz	r2, 8012e50 <MIOS32_SPI_RC_PinSet+0x54>
 8012e4a:	8319      	strh	r1, [r3, #24]

  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	4770      	bx	lr
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012e50:	8359      	strh	r1, [r3, #26]
 8012e52:	e7fb      	b.n	8012e4c <MIOS32_SPI_RC_PinSet+0x50>
    }
    break;
#endif

  default:
    return -2; // unsupported SPI port
 8012e54:	f06f 0001 	mvn.w	r0, #1
 8012e58:	4770      	bx	lr
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
    default: return -3; // unsupported RC pin
 8012e5a:	f06f 0002 	mvn.w	r0, #2
  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012e5e:	4770      	bx	lr
 8012e60:	40020800 	.word	0x40020800
 8012e64:	40020000 	.word	0x40020000
 8012e68:	40020400 	.word	0x40020400

08012e6c <MIOS32_SPI_TransferByte>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferByte(u8 spi, u8 b)
{
  SPI_TypeDef *spi_ptr;

  switch( spi ) {
 8012e6c:	2801      	cmp	r0, #1
 8012e6e:	d006      	beq.n	8012e7e <MIOS32_SPI_TransferByte+0x12>
 8012e70:	d303      	bcc.n	8012e7a <MIOS32_SPI_TransferByte+0xe>
 8012e72:	2802      	cmp	r0, #2
 8012e74:	d116      	bne.n	8012ea4 <MIOS32_SPI_TransferByte+0x38>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8012e76:	4b0d      	ldr	r3, [pc, #52]	; (8012eac <MIOS32_SPI_TransferByte+0x40>)
      break;
 8012e78:	e002      	b.n	8012e80 <MIOS32_SPI_TransferByte+0x14>
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8012e7a:	4b0d      	ldr	r3, [pc, #52]	; (8012eb0 <MIOS32_SPI_TransferByte+0x44>)
 8012e7c:	e000      	b.n	8012e80 <MIOS32_SPI_TransferByte+0x14>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8012e7e:	4b0d      	ldr	r3, [pc, #52]	; (8012eb4 <MIOS32_SPI_TransferByte+0x48>)
    default:
      return -2; // unsupported SPI port
  }

  // send byte
  spi_ptr->DR = b;
 8012e80:	8199      	strh	r1, [r3, #12]

  // TK update: the dummy read above becomes obsolete since we are checking for SPI Master mode now
  // which requires a read operation as well

  // wait until SPI transfer finished
  if( spi_ptr->CR1 & SPI_Mode_Master ) {
 8012e82:	881a      	ldrh	r2, [r3, #0]
 8012e84:	f402 7082 	and.w	r0, r2, #260	; 0x104
 8012e88:	b130      	cbz	r0, 8012e98 <MIOS32_SPI_TransferByte+0x2c>
    while( spi_ptr->SR & SPI_I2S_FLAG_BSY );
 8012e8a:	891a      	ldrh	r2, [r3, #8]
 8012e8c:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8012e90:	b281      	uxth	r1, r0
 8012e92:	2900      	cmp	r1, #0
 8012e94:	d1f9      	bne.n	8012e8a <MIOS32_SPI_TransferByte+0x1e>
 8012e96:	e002      	b.n	8012e9e <MIOS32_SPI_TransferByte+0x32>
  } else {
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
 8012e98:	8919      	ldrh	r1, [r3, #8]
 8012e9a:	07ca      	lsls	r2, r1, #31
 8012e9c:	d5fc      	bpl.n	8012e98 <MIOS32_SPI_TransferByte+0x2c>
  }

  // return received byte
  return spi_ptr->DR;
 8012e9e:	899b      	ldrh	r3, [r3, #12]
 8012ea0:	b298      	uxth	r0, r3
 8012ea2:	4770      	bx	lr
      spi_ptr = MIOS32_SPI2_PTR;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012ea4:	f06f 0001 	mvn.w	r0, #1
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
  }

  // return received byte
  return spi_ptr->DR;
}
 8012ea8:	4770      	bx	lr
 8012eaa:	bf00      	nop
 8012eac:	40003c00 	.word	0x40003c00
 8012eb0:	40013000 	.word	0x40013000
 8012eb4:	40003800 	.word	0x40003800

08012eb8 <MIOS32_SPI_TransferModeInit>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if invalid spi_prescaler selected
//! \return -4 if invalid spi_mode selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	b086      	sub	sp, #24
 8012ebc:	4604      	mov	r4, r0
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
 8012ebe:	f44f 7082 	mov.w	r0, #260	; 0x104
 8012ec2:	f8ad 0006 	strh.w	r0, [sp, #6]
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012ec6:	f44f 7000 	mov.w	r0, #512	; 0x200
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012eca:	2300      	movs	r3, #0
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012ecc:	f8ad 000e 	strh.w	r0, [sp, #14]
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012ed0:	2007      	movs	r0, #7
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012ed2:	f8ad 3004 	strh.w	r3, [sp, #4]
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
 8012ed6:	f8ad 3008 	strh.w	r3, [sp, #8]
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
 8012eda:	f8ad 3012 	strh.w	r3, [sp, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012ede:	f8ad 0014 	strh.w	r0, [sp, #20]

  switch( spi_mode ) {
 8012ee2:	2907      	cmp	r1, #7
 8012ee4:	d863      	bhi.n	8012fae <MIOS32_SPI_TransferModeInit+0xf6>
 8012ee6:	e8df f001 	tbb	[pc, r1]
 8012eea:	1e08      	.short	0x1e08
 8012eec:	0b041d14 	.word	0x0b041d14
 8012ef0:	1910      	.short	0x1910
    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012ef2:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012ef6:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK0_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8012efa:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012efe:	e015      	b.n	8012f2c <MIOS32_SPI_TransferModeInit+0x74>
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012f00:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012f04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012f08:	e00d      	b.n	8012f26 <MIOS32_SPI_TransferModeInit+0x6e>
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012f0a:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012f0e:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012f12:	2302      	movs	r3, #2
 8012f14:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	e007      	b.n	8012f2c <MIOS32_SPI_TransferModeInit+0x74>
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012f1c:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012f20:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012f24:	2302      	movs	r3, #2
 8012f26:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012f2a:	2301      	movs	r3, #1
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012f2c:	2a07      	cmp	r2, #7
    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012f2e:	f8ad 300c 	strh.w	r3, [sp, #12]
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012f32:	d842      	bhi.n	8012fba <MIOS32_SPI_TransferModeInit+0x102>
    return -3; // invalid prescaler selected

  switch( spi ) {
 8012f34:	2c01      	cmp	r4, #1
 8012f36:	d01d      	beq.n	8012f74 <MIOS32_SPI_TransferModeInit+0xbc>
 8012f38:	d303      	bcc.n	8012f42 <MIOS32_SPI_TransferModeInit+0x8a>
 8012f3a:	2c02      	cmp	r4, #2
 8012f3c:	d13a      	bne.n	8012fb4 <MIOS32_SPI_TransferModeInit+0xfc>

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012f3e:	4d21      	ldr	r5, [pc, #132]	; (8012fc4 <MIOS32_SPI_TransferModeInit+0x10c>)
 8012f40:	e01c      	b.n	8012f7c <MIOS32_SPI_TransferModeInit+0xc4>
  switch( spi ) {
    case 0: {
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
 8012f42:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8012f46:	2900      	cmp	r1, #0
 8012f48:	d037      	beq.n	8012fba <MIOS32_SPI_TransferModeInit+0x102>
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012f4a:	4c1f      	ldr	r4, [pc, #124]	; (8012fc8 <MIOS32_SPI_TransferModeInit+0x110>)
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8012f4c:	00d2      	lsls	r2, r2, #3
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8012f4e:	4620      	mov	r0, r4
 8012f50:	a901      	add	r1, sp, #4
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012f52:	8825      	ldrh	r5, [r4, #0]
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8012f54:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8012f58:	f002 fe38 	bl	8015bcc <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012f5c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012f60:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012f64:	b2ad      	uxth	r5, r5
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012f66:	d120      	bne.n	8012faa <MIOS32_SPI_TransferModeInit+0xf2>
	if( (prev_cr1 ^ MIOS32_SPI0_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8012f68:	8823      	ldrh	r3, [r4, #0]
 8012f6a:	405d      	eors	r5, r3
 8012f6c:	07a8      	lsls	r0, r5, #30
 8012f6e:	d01c      	beq.n	8012faa <MIOS32_SPI_TransferModeInit+0xf2>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8012f70:	2000      	movs	r0, #0
 8012f72:	e017      	b.n	8012fa4 <MIOS32_SPI_TransferModeInit+0xec>
    case 1: {
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
#if defined(MIOS32_BOARD_MBHP_DIPCOREF4)
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
 8012f74:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8012f78:	b1f9      	cbz	r1, 8012fba <MIOS32_SPI_TransferModeInit+0x102>
	return -3; // slave mode not supported for this SPI
      }
#endif
      u16 prev_cr1 = MIOS32_SPI1_PTR->CR1;
 8012f7a:	4d14      	ldr	r5, [pc, #80]	; (8012fcc <MIOS32_SPI_TransferModeInit+0x114>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8012f7c:	3a01      	subs	r2, #1
 8012f7e:	00d0      	lsls	r0, r2, #3

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012f80:	882e      	ldrh	r6, [r5, #0]

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8012f82:	f8ad 0010 	strh.w	r0, [sp, #16]
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8012f86:	a901      	add	r1, sp, #4
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f002 fe1f 	bl	8015bcc <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012f8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012f96:	b2b6      	uxth	r6, r6

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012f98:	d107      	bne.n	8012faa <MIOS32_SPI_TransferModeInit+0xf2>
	if( (prev_cr1 ^ MIOS32_SPI2_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8012f9a:	8829      	ldrh	r1, [r5, #0]
 8012f9c:	404e      	eors	r6, r1
 8012f9e:	07b1      	lsls	r1, r6, #30
 8012fa0:	d003      	beq.n	8012faa <MIOS32_SPI_TransferModeInit+0xf2>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	21ff      	movs	r1, #255	; 0xff
 8012fa6:	f7ff ff61 	bl	8012e6c <MIOS32_SPI_TransferByte>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8012faa:	2000      	movs	r0, #0
 8012fac:	e007      	b.n	8012fbe <MIOS32_SPI_TransferModeInit+0x106>
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;
    default:
      return -4; // invalid SPI clock/phase mode
 8012fae:	f06f 0003 	mvn.w	r0, #3
 8012fb2:	e004      	b.n	8012fbe <MIOS32_SPI_TransferModeInit+0x106>
      }
#endif
    } break;

    default:
      return -2; // unsupported SPI port
 8012fb4:	f06f 0001 	mvn.w	r0, #1
 8012fb8:	e001      	b.n	8012fbe <MIOS32_SPI_TransferModeInit+0x106>
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
    return -3; // invalid prescaler selected
 8012fba:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012fbe:	b006      	add	sp, #24
 8012fc0:	bd70      	pop	{r4, r5, r6, pc}
 8012fc2:	bf00      	nop
 8012fc4:	40003c00 	.word	0x40003c00
 8012fc8:	40013000 	.word	0x40013000
 8012fcc:	40003800 	.word	0x40003800

08012fd0 <MIOS32_SPI_Init>:
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8012fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012fd4:	4604      	mov	r4, r0
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8012fd6:	b093      	sub	sp, #76	; 0x4c
  // currently only mode 0 supported
  if( mode != 0 )
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	f040 8102 	bne.w	80131e2 <MIOS32_SPI_Init+0x212>
    return -1; // unsupported mode

  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8012fde:	a803      	add	r0, sp, #12
 8012fe0:	f002 fb94 	bl	801570c <DMA_StructInit>
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8012fe4:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8013224 <MIOS32_SPI_Init+0x254>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8012fe8:	4b80      	ldr	r3, [pc, #512]	; (80131ec <MIOS32_SPI_Init+0x21c>)
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8012fea:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8013228 <MIOS32_SPI_Init+0x258>
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8012fee:	f8ca 4000 	str.w	r4, [sl]
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8012ff2:	2210      	movs	r2, #16
 8012ff4:	831a      	strh	r2, [r3, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012ff6:	2102      	movs	r1, #2
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8012ff8:	f8ab 2018 	strh.w	r2, [fp, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	9301      	str	r3, [sp, #4]
 8013000:	f7ff fdda 	bl	8012bb8 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8013004:	2101      	movs	r1, #1
 8013006:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801300a:	f002 fcd7 	bl	80159bc <RCC_APB2PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 801300e:	2101      	movs	r1, #1
 8013010:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013014:	f002 fcae 	bl	8015974 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8013018:	2101      	movs	r1, #1
 801301a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801301e:	f002 fca9 	bl	8015974 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
 8013022:	4873      	ldr	r0, [pc, #460]	; (80131f0 <MIOS32_SPI_Init+0x220>)
 8013024:	4621      	mov	r1, r4
 8013026:	f002 fb82 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 801302a:	4872      	ldr	r0, [pc, #456]	; (80131f4 <MIOS32_SPI_Init+0x224>)
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 801302c:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801302e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8013032:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013036:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 801303a:	9004      	str	r0, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 801303c:	a903      	add	r1, sp, #12
 801303e:	486c      	ldr	r0, [pc, #432]	; (80131f0 <MIOS32_SPI_Init+0x220>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8013040:	9503      	str	r5, [sp, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8013042:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8013044:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8013046:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8013048:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801304a:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801304c:	940b      	str	r4, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801304e:	940c      	str	r4, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013050:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8013054:	f002 fb30 	bl	80156b8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
 8013058:	4867      	ldr	r0, [pc, #412]	; (80131f8 <MIOS32_SPI_Init+0x228>)
 801305a:	4621      	mov	r1, r4
 801305c:	f002 fb67 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8013060:	f04f 0840 	mov.w	r8, #64	; 0x40
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013064:	4864      	ldr	r0, [pc, #400]	; (80131f8 <MIOS32_SPI_Init+0x228>)
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
 8013066:	9503      	str	r5, [sp, #12]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013068:	a903      	add	r1, sp, #12

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 801306a:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 801306c:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801306e:	f8cd 8018 	str.w	r8, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8013072:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013074:	f002 fb20 	bl	80156b8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI0_PTR, ENABLE);
 8013078:	2101      	movs	r1, #1
 801307a:	4860      	ldr	r0, [pc, #384]	; (80131fc <MIOS32_SPI_Init+0x22c>)
 801307c:	f002 fdc5 	bl	8015c0a <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI0_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8013080:	2201      	movs	r2, #1
 8013082:	2103      	movs	r1, #3
 8013084:	485d      	ldr	r0, [pc, #372]	; (80131fc <MIOS32_SPI_Init+0x22c>)
 8013086:	f002 fdcc 	bl	8015c22 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI0_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 801308a:	2105      	movs	r1, #5
 801308c:	203a      	movs	r0, #58	; 0x3a
 801308e:	f7ff fd6d 	bl	8012b6c <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(0, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8013092:	2206      	movs	r2, #6
 8013094:	2103      	movs	r1, #3
 8013096:	4620      	mov	r0, r4
 8013098:	f7ff ff0e 	bl	8012eb8 <MIOS32_SPI_TransferModeInit>
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 801309c:	4958      	ldr	r1, [pc, #352]	; (8013200 <MIOS32_SPI_Init+0x230>)
  // SPI1
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI1

  // disable callback function
  spi_callback[1] = NULL;
 801309e:	f8ca 4004 	str.w	r4, [sl, #4]
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK2_PORT, MIOS32_SPI1_RCLK2_PIN, pin_value); break;
 80130a2:	2501      	movs	r5, #1
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 80130a4:	2702      	movs	r7, #2
 80130a6:	830f      	strh	r7, [r1, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 80130a8:	4628      	mov	r0, r5
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK2_PORT, MIOS32_SPI1_RCLK2_PIN, pin_value); break;
 80130aa:	830d      	strh	r5, [r1, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 80130ac:	4639      	mov	r1, r7
 80130ae:	f7ff fd83 	bl	8012bb8 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80130b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80130b6:	4629      	mov	r1, r5
 80130b8:	f002 fc74 	bl	80159a4 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 80130bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80130c0:	4629      	mov	r1, r5
 80130c2:	f002 fc57 	bl	8015974 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80130c6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80130ca:	4629      	mov	r1, r5
 80130cc:	f002 fc52 	bl	8015974 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
 80130d0:	484c      	ldr	r0, [pc, #304]	; (8013204 <MIOS32_SPI_Init+0x234>)
 80130d2:	4621      	mov	r1, r4
 80130d4:	f002 fb2b 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 80130d8:	4b4b      	ldr	r3, [pc, #300]	; (8013208 <MIOS32_SPI_Init+0x238>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 80130da:	484a      	ldr	r0, [pc, #296]	; (8013204 <MIOS32_SPI_Init+0x234>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 80130dc:	9304      	str	r3, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 80130de:	a903      	add	r1, sp, #12
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
 80130e0:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 80130e2:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80130e4:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 80130e6:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80130e8:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80130ea:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80130ec:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80130ee:	940b      	str	r4, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80130f0:	940c      	str	r4, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 80130f2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 80130f6:	f002 fadf 	bl	80156b8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
 80130fa:	4844      	ldr	r0, [pc, #272]	; (801320c <MIOS32_SPI_Init+0x23c>)
 80130fc:	4621      	mov	r1, r4
 80130fe:	f002 fb16 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8013102:	4842      	ldr	r0, [pc, #264]	; (801320c <MIOS32_SPI_Init+0x23c>)
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
 8013104:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8013106:	a903      	add	r1, sp, #12

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013108:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 801310a:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801310c:	f8cd 8018 	str.w	r8, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8013110:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8013112:	f002 fad1 	bl	80156b8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI1_PTR, ENABLE);
 8013116:	483e      	ldr	r0, [pc, #248]	; (8013210 <MIOS32_SPI_Init+0x240>)
 8013118:	4629      	mov	r1, r5
 801311a:	f002 fd76 	bl	8015c0a <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI1_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 801311e:	462a      	mov	r2, r5
 8013120:	483b      	ldr	r0, [pc, #236]	; (8013210 <MIOS32_SPI_Init+0x240>)
 8013122:	2103      	movs	r1, #3
 8013124:	f002 fd7d 	bl	8015c22 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI1_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8013128:	2105      	movs	r1, #5
 801312a:	200e      	movs	r0, #14
 801312c:	f7ff fd1e 	bl	8012b6c <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(1, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8013130:	2103      	movs	r1, #3
 8013132:	2206      	movs	r2, #6
 8013134:	4628      	mov	r0, r5
 8013136:	f7ff febf 	bl	8012eb8 <MIOS32_SPI_TransferModeInit>
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 801313a:	9a01      	ldr	r2, [sp, #4]
  // SPI2
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI2

  // disable callback function
  spi_callback[2] = NULL;
 801313c:	f8ca 4008 	str.w	r4, [sl, #8]
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8013140:	f44f 7000 	mov.w	r0, #512	; 0x200
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8013144:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 8013148:	f8a2 a018 	strh.w	sl, [r2, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 801314c:	4639      	mov	r1, r7
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 801314e:	f8ab 0018 	strh.w	r0, [fp, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8013152:	4638      	mov	r0, r7
 8013154:	f7ff fd30 	bl	8012bb8 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8013158:	4650      	mov	r0, sl
 801315a:	4629      	mov	r1, r5
 801315c:	f002 fc22 	bl	80159a4 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8013160:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013164:	4629      	mov	r1, r5
 8013166:	f002 fc05 	bl	8015974 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 801316a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801316e:	4629      	mov	r1, r5
 8013170:	f002 fc00 	bl	8015974 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
 8013174:	4827      	ldr	r0, [pc, #156]	; (8013214 <MIOS32_SPI_Init+0x244>)
 8013176:	4621      	mov	r1, r4
 8013178:	f002 fad9 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 801317c:	4926      	ldr	r1, [pc, #152]	; (8013218 <MIOS32_SPI_Init+0x248>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 801317e:	4825      	ldr	r0, [pc, #148]	; (8013214 <MIOS32_SPI_Init+0x244>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8013180:	9104      	str	r1, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8013182:	a903      	add	r1, sp, #12
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
 8013184:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013186:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8013188:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 801318a:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801318c:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801318e:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8013190:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8013192:	940b      	str	r4, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8013194:	940c      	str	r4, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013196:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 801319a:	f002 fa8d 	bl	80156b8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
 801319e:	481f      	ldr	r0, [pc, #124]	; (801321c <MIOS32_SPI_Init+0x24c>)
 80131a0:	4621      	mov	r1, r4
 80131a2:	f002 fac4 	bl	801572e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 80131a6:	481d      	ldr	r0, [pc, #116]	; (801321c <MIOS32_SPI_Init+0x24c>)
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
 80131a8:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 80131aa:	a903      	add	r1, sp, #12

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 80131ac:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 80131ae:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80131b0:	f8cd 8018 	str.w	r8, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80131b4:	9609      	str	r6, [sp, #36]	; 0x24
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 80131b6:	f002 fa7f 	bl	80156b8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI2_PTR, ENABLE);
 80131ba:	4819      	ldr	r0, [pc, #100]	; (8013220 <MIOS32_SPI_Init+0x250>)
 80131bc:	4629      	mov	r1, r5
 80131be:	f002 fd24 	bl	8015c0a <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI2_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 80131c2:	462a      	mov	r2, r5
 80131c4:	4816      	ldr	r0, [pc, #88]	; (8013220 <MIOS32_SPI_Init+0x250>)
 80131c6:	2103      	movs	r1, #3
 80131c8:	f002 fd2b 	bl	8015c22 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI2_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 80131cc:	2105      	movs	r1, #5
 80131ce:	200d      	movs	r0, #13
 80131d0:	f7ff fccc 	bl	8012b6c <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 80131d4:	4638      	mov	r0, r7
 80131d6:	2103      	movs	r1, #3
 80131d8:	2206      	movs	r2, #6
 80131da:	f7ff fe6d 	bl	8012eb8 <MIOS32_SPI_TransferModeInit>
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
 80131de:	4620      	mov	r0, r4
 80131e0:	e001      	b.n	80131e6 <MIOS32_SPI_Init+0x216>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80131e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
}
 80131e6:	b013      	add	sp, #76	; 0x4c
 80131e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ec:	40020000 	.word	0x40020000
 80131f0:	40026440 	.word	0x40026440
 80131f4:	4001300c 	.word	0x4001300c
 80131f8:	40026458 	.word	0x40026458
 80131fc:	40013000 	.word	0x40013000
 8013200:	40020400 	.word	0x40020400
 8013204:	40026058 	.word	0x40026058
 8013208:	4000380c 	.word	0x4000380c
 801320c:	40026070 	.word	0x40026070
 8013210:	40003800 	.word	0x40003800
 8013214:	40026040 	.word	0x40026040
 8013218:	40003c0c 	.word	0x40003c0c
 801321c:	40026088 	.word	0x40026088
 8013220:	40003c00 	.word	0x40003c00
 8013224:	20000304 	.word	0x20000304
 8013228:	40020800 	.word	0x40020800

0801322c <MIOS32_SPI_TransferBlock>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 801322c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 8013230:	2801      	cmp	r0, #1
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 8013232:	468c      	mov	ip, r1
 8013234:	f8dd 8020 	ldr.w	r8, [sp, #32]
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 8013238:	d00f      	beq.n	801325a <MIOS32_SPI_TransferBlock+0x2e>
 801323a:	d307      	bcc.n	801324c <MIOS32_SPI_TransferBlock+0x20>
 801323c:	2802      	cmp	r0, #2
 801323e:	d163      	bne.n	8013308 <MIOS32_SPI_TransferBlock+0xdc>
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
 8013240:	4935      	ldr	r1, [pc, #212]	; (8013318 <MIOS32_SPI_TransferBlock+0xec>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
 8013242:	4f36      	ldr	r7, [pc, #216]	; (801331c <MIOS32_SPI_TransferBlock+0xf0>)
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
 8013244:	4c36      	ldr	r4, [pc, #216]	; (8013320 <MIOS32_SPI_TransferBlock+0xf4>)
    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
 8013246:	4d37      	ldr	r5, [pc, #220]	; (8013324 <MIOS32_SPI_TransferBlock+0xf8>)

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8013248:	4e37      	ldr	r6, [pc, #220]	; (8013328 <MIOS32_SPI_TransferBlock+0xfc>)
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
 801324a:	e00c      	b.n	8013266 <MIOS32_SPI_TransferBlock+0x3a>
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI0_DMA_RX_IRQ_FLAGS;
 801324c:	4932      	ldr	r1, [pc, #200]	; (8013318 <MIOS32_SPI_TransferBlock+0xec>)
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
 801324e:	4c37      	ldr	r4, [pc, #220]	; (801332c <MIOS32_SPI_TransferBlock+0x100>)
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
 8013250:	4d37      	ldr	r5, [pc, #220]	; (8013330 <MIOS32_SPI_TransferBlock+0x104>)
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8013252:	4e38      	ldr	r6, [pc, #224]	; (8013334 <MIOS32_SPI_TransferBlock+0x108>)
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
 8013254:	f04f 57f2 	mov.w	r7, #507510784	; 0x1e400000
 8013258:	e005      	b.n	8013266 <MIOS32_SPI_TransferBlock+0x3a>
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
 801325a:	4f37      	ldr	r7, [pc, #220]	; (8013338 <MIOS32_SPI_TransferBlock+0x10c>)
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
 801325c:	4c37      	ldr	r4, [pc, #220]	; (801333c <MIOS32_SPI_TransferBlock+0x110>)
    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
 801325e:	4d38      	ldr	r5, [pc, #224]	; (8013340 <MIOS32_SPI_TransferBlock+0x114>)

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8013260:	4e38      	ldr	r6, [pc, #224]	; (8013344 <MIOS32_SPI_TransferBlock+0x118>)
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI1_DMA_RX_IRQ_FLAGS;
 8013262:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
    default:
      return -2; // unsupported SPI port
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
 8013266:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801326a:	f1b9 0f00 	cmp.w	r9, #0
 801326e:	d14f      	bne.n	8013310 <MIOS32_SPI_TransferBlock+0xe4>
    return -3;

  // set callback function
  spi_callback[spi] = callback;
 8013270:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8013350 <MIOS32_SPI_TransferBlock+0x124>
 8013274:	f84e 8020 	str.w	r8, [lr, r0, lsl #2]

  // ensure that previously received value doesn't cause DMA access
  if( spi_ptr->DR );
 8013278:	89b0      	ldrh	r0, [r6, #12]

  // configure Rx channel
  // TK: optimization method: read rx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 rx_CCR = dma_rx_ptr->CR & ~CCR_ENABLE;
 801327a:	6820      	ldr	r0, [r4, #0]
 801327c:	f020 0601 	bic.w	r6, r0, #1
  dma_rx_ptr->CR = rx_CCR;
 8013280:	6026      	str	r6, [r4, #0]
  if( receive_buffer != NULL ) {
 8013282:	b11a      	cbz	r2, 801328c <MIOS32_SPI_TransferBlock+0x60>
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
 8013284:	60e2      	str	r2, [r4, #12]
    rx_CCR |= DMA_MemoryInc_Enable;
 8013286:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 801328a:	e007      	b.n	801329c <MIOS32_SPI_TransferBlock+0x70>
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 801328c:	4a2e      	ldr	r2, [pc, #184]	; (8013348 <MIOS32_SPI_TransferBlock+0x11c>)
 801328e:	26ff      	movs	r6, #255	; 0xff
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8013290:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
    rx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 8013294:	7016      	strb	r6, [r2, #0]
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
 8013296:	60e2      	str	r2, [r4, #12]
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8013298:	f020 0601 	bic.w	r6, r0, #1
  }
  dma_rx_ptr->NDTR = len;
 801329c:	6063      	str	r3, [r4, #4]


  // configure Tx channel
  // TK: optimization method: read tx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 tx_CCR = dma_tx_ptr->CR & ~CCR_ENABLE;
 801329e:	682a      	ldr	r2, [r5, #0]
 80132a0:	f022 0001 	bic.w	r0, r2, #1
  dma_tx_ptr->CR = tx_CCR;
 80132a4:	6028      	str	r0, [r5, #0]
  if( send_buffer != NULL ) {
 80132a6:	f1bc 0f00 	cmp.w	ip, #0
 80132aa:	d004      	beq.n	80132b6 <MIOS32_SPI_TransferBlock+0x8a>
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
 80132ac:	f8c5 c00c 	str.w	ip, [r5, #12]
    tx_CCR |= DMA_MemoryInc_Enable;
 80132b0:	f440 6980 	orr.w	r9, r0, #1024	; 0x400
 80132b4:	e009      	b.n	80132ca <MIOS32_SPI_TransferBlock+0x9e>
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 80132b6:	4825      	ldr	r0, [pc, #148]	; (801334c <MIOS32_SPI_TransferBlock+0x120>)
 80132b8:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
    tx_CCR &= ~DMA_MemoryInc_Enable;
 80132bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
    tx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 80132c0:	f880 9000 	strb.w	r9, [r0]
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
 80132c4:	60e8      	str	r0, [r5, #12]
    tx_CCR &= ~DMA_MemoryInc_Enable;
 80132c6:	f022 0901 	bic.w	r9, r2, #1
  }
  dma_tx_ptr->NDTR = len;
 80132ca:	606b      	str	r3, [r5, #4]

  // new for STM32F4 DMA: it's required to clear interrupt flags before DMA channel is enabled again
  DMA_ClearFlag(dma_rx_ptr, dma_rx_irq_flags);
 80132cc:	4620      	mov	r0, r4
 80132ce:	f002 fa37 	bl	8015740 <DMA_ClearFlag>
  DMA_ClearFlag(dma_tx_ptr, dma_tx_irq_flags);
 80132d2:	4628      	mov	r0, r5
 80132d4:	4639      	mov	r1, r7
 80132d6:	f002 fa33 	bl	8015740 <DMA_ClearFlag>
 80132da:	f049 0301 	orr.w	r3, r9, #1

  // enable DMA interrupt if callback function active
  if( callback != NULL ) {
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	d006      	beq.n	80132f2 <MIOS32_SPI_TransferBlock+0xc6>
    rx_CCR |= DMA_IT_TC;
 80132e4:	f046 0611 	orr.w	r6, r6, #17
    dma_rx_ptr->CR = rx_CCR;
 80132e8:	6026      	str	r6, [r4, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
 80132ea:	2000      	movs	r0, #0
  if( callback != NULL ) {
    rx_CCR |= DMA_IT_TC;
    dma_rx_ptr->CR = rx_CCR;

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 80132ec:	602b      	str	r3, [r5, #0]
 80132ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    rx_CCR &= ~DMA_IT_TC;
 80132f2:	f026 0110 	bic.w	r1, r6, #16
 80132f6:	f041 0601 	orr.w	r6, r1, #1
    dma_rx_ptr->CR = rx_CCR;
 80132fa:	6026      	str	r6, [r4, #0]

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 80132fc:	602b      	str	r3, [r5, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
 80132fe:	6860      	ldr	r0, [r4, #4]
 8013300:	2800      	cmp	r0, #0
 8013302:	d1fc      	bne.n	80132fe <MIOS32_SPI_TransferBlock+0xd2>
 8013304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 8013308:	f06f 0001 	mvn.w	r0, #1
 801330c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
    return -3;
 8013310:	f06f 0002 	mvn.w	r0, #2
    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
}
 8013314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013318:	10390000 	.word	0x10390000
 801331c:	20000e40 	.word	0x20000e40
 8013320:	40026040 	.word	0x40026040
 8013324:	40026088 	.word	0x40026088
 8013328:	40003c00 	.word	0x40003c00
 801332c:	40026440 	.word	0x40026440
 8013330:	40026458 	.word	0x40026458
 8013334:	40013000 	.word	0x40013000
 8013338:	20000039 	.word	0x20000039
 801333c:	40026058 	.word	0x40026058
 8013340:	40026070 	.word	0x40026070
 8013344:	40003800 	.word	0x40003800
 8013348:	20000311 	.word	0x20000311
 801334c:	20000310 	.word	0x20000310
 8013350:	20000304 	.word	0x20000304

08013354 <DMA2_Stream2_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Called when callback function has been defined and SPI transfer has finished
/////////////////////////////////////////////////////////////////////////////
MIOS32_SPI0_DMA_IRQHANDLER_FUNC
{
 8013354:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI0_DMA_RX_PTR, MIOS32_SPI0_DMA_RX_IRQ_FLAGS);
 8013356:	4804      	ldr	r0, [pc, #16]	; (8013368 <DMA2_Stream2_IRQHandler+0x14>)
 8013358:	4904      	ldr	r1, [pc, #16]	; (801336c <DMA2_Stream2_IRQHandler+0x18>)
 801335a:	f002 f9f1 	bl	8015740 <DMA_ClearFlag>

  if( spi_callback[0] != NULL )
 801335e:	4b04      	ldr	r3, [pc, #16]	; (8013370 <DMA2_Stream2_IRQHandler+0x1c>)
 8013360:	6818      	ldr	r0, [r3, #0]
 8013362:	b100      	cbz	r0, 8013366 <DMA2_Stream2_IRQHandler+0x12>
    spi_callback[0]();
 8013364:	4780      	blx	r0
 8013366:	bd08      	pop	{r3, pc}
 8013368:	40026440 	.word	0x40026440
 801336c:	10390000 	.word	0x10390000
 8013370:	20000304 	.word	0x20000304

08013374 <DMA1_Stream3_IRQHandler>:
}

MIOS32_SPI1_DMA_IRQHANDLER_FUNC
{
 8013374:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI1_DMA_RX_PTR, MIOS32_SPI1_DMA_RX_IRQ_FLAGS);
 8013376:	4805      	ldr	r0, [pc, #20]	; (801338c <DMA1_Stream3_IRQHandler+0x18>)
 8013378:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
 801337c:	f002 f9e0 	bl	8015740 <DMA_ClearFlag>

  if( spi_callback[1] != NULL )
 8013380:	4b03      	ldr	r3, [pc, #12]	; (8013390 <DMA1_Stream3_IRQHandler+0x1c>)
 8013382:	6858      	ldr	r0, [r3, #4]
 8013384:	b100      	cbz	r0, 8013388 <DMA1_Stream3_IRQHandler+0x14>
    spi_callback[1]();
 8013386:	4780      	blx	r0
 8013388:	bd08      	pop	{r3, pc}
 801338a:	bf00      	nop
 801338c:	40026058 	.word	0x40026058
 8013390:	20000304 	.word	0x20000304

08013394 <DMA1_Stream2_IRQHandler>:
}

MIOS32_SPI2_DMA_IRQHANDLER_FUNC
{
 8013394:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI2_DMA_RX_PTR, MIOS32_SPI2_DMA_RX_IRQ_FLAGS);
 8013396:	4804      	ldr	r0, [pc, #16]	; (80133a8 <DMA1_Stream2_IRQHandler+0x14>)
 8013398:	4904      	ldr	r1, [pc, #16]	; (80133ac <DMA1_Stream2_IRQHandler+0x18>)
 801339a:	f002 f9d1 	bl	8015740 <DMA_ClearFlag>

  if( spi_callback[2] != NULL )
 801339e:	4b04      	ldr	r3, [pc, #16]	; (80133b0 <DMA1_Stream2_IRQHandler+0x1c>)
 80133a0:	6898      	ldr	r0, [r3, #8]
 80133a2:	b100      	cbz	r0, 80133a6 <DMA1_Stream2_IRQHandler+0x12>
    spi_callback[2]();
 80133a4:	4780      	blx	r0
 80133a6:	bd08      	pop	{r3, pc}
 80133a8:	40026040 	.word	0x40026040
 80133ac:	10390000 	.word	0x10390000
 80133b0:	20000304 	.word	0x20000304

080133b4 <MIOS32_BOARD_PinInitHlp>:

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 80133b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133b6:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 80133b8:	4668      	mov	r0, sp

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 80133ba:	460e      	mov	r6, r1
 80133bc:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 80133be:	f002 fa2a 	bl	8015816 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80133c2:	2302      	movs	r3, #2
 80133c4:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 80133c8:	9600      	str	r6, [sp, #0]

  switch( mode ) {
 80133ca:	2c06      	cmp	r4, #6
 80133cc:	d829      	bhi.n	8013422 <MIOS32_BOARD_PinInitHlp+0x6e>
 80133ce:	e8df f004 	tbb	[pc, r4]
 80133d2:	0426      	.short	0x0426
 80133d4:	18130f09 	.word	0x18130f09
 80133d8:	1d          	.byte	0x1d
 80133d9:	00          	.byte	0x00
  case MIOS32_BOARD_PIN_MODE_IGNORE:
    return 0; // don't touch
  case MIOS32_BOARD_PIN_MODE_ANALOG:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80133da:	2003      	movs	r0, #3
 80133dc:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80133e0:	2300      	movs	r3, #0
 80133e2:	e002      	b.n	80133ea <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80133e4:	2300      	movs	r3, #0
 80133e6:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80133ea:	f88d 3007 	strb.w	r3, [sp, #7]
    break;
 80133ee:	e012      	b.n	8013416 <MIOS32_BOARD_PinInitHlp+0x62>
  case MIOS32_BOARD_PIN_MODE_INPUT_PD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80133f0:	2200      	movs	r2, #0
 80133f2:	f88d 2004 	strb.w	r2, [sp, #4]
 80133f6:	e7f8      	b.n	80133ea <MIOS32_BOARD_PinInitHlp+0x36>
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80133f8:	2100      	movs	r1, #0
 80133fa:	f88d 1004 	strb.w	r1, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80133fe:	2301      	movs	r3, #1
 8013400:	e7f3      	b.n	80133ea <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013402:	2001      	movs	r0, #1
 8013404:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013408:	2300      	movs	r3, #0
 801340a:	e002      	b.n	8013412 <MIOS32_BOARD_PinInitHlp+0x5e>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801340c:	2301      	movs	r3, #1
 801340e:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8013412:	f88d 3006 	strb.w	r3, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013416:	4628      	mov	r0, r5
 8013418:	4669      	mov	r1, sp
 801341a:	f002 f9af 	bl	801577c <GPIO_Init>

  return 0; // no error
 801341e:	2000      	movs	r0, #0
 8013420:	e001      	b.n	8013426 <MIOS32_BOARD_PinInitHlp+0x72>
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    break;
  default:
    return -2; // invalid pin mode
 8013422:	f06f 0001 	mvn.w	r0, #1

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);

  return 0; // no error
}
 8013426:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08013428 <MIOS32_BOARD_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8013428:	b920      	cbnz	r0, 8013434 <MIOS32_BOARD_Init+0xc>
    return -1; // unsupported mode

  j5_enable_mask = 0;
 801342a:	4b04      	ldr	r3, [pc, #16]	; (801343c <MIOS32_BOARD_Init+0x14>)
  j10_enable_mask = 0;
 801342c:	4904      	ldr	r1, [pc, #16]	; (8013440 <MIOS32_BOARD_Init+0x18>)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  j5_enable_mask = 0;
 801342e:	8018      	strh	r0, [r3, #0]
  j10_enable_mask = 0;
 8013430:	8008      	strh	r0, [r1, #0]

  return 0; // no error
 8013432:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  j5_enable_mask = 0;
  j10_enable_mask = 0;

  return 0; // no error
}
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	20000314 	.word	0x20000314
 8013440:	20000312 	.word	0x20000312

08013444 <MIOS32_BOARD_LED_Init>:
  return 0; // no error
#elif defined(MIOS32_BOARD_MBHP_DIPCOREF4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  
  // 2 LEDs are available
  if( leds & 1 ) {
 8013444:	07c2      	lsls	r2, r0, #31
//! \return 0 if initialisation passed
//! \return -1 if no LEDs specified for board
//! \return -2 if one or more LEDs not available on board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Init(u32 leds)
{
 8013446:	b510      	push	{r4, lr}
 8013448:	4604      	mov	r4, r0
  return 0; // no error
#elif defined(MIOS32_BOARD_MBHP_DIPCOREF4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  
  // 2 LEDs are available
  if( leds & 1 ) {
 801344a:	d504      	bpl.n	8013456 <MIOS32_BOARD_LED_Init+0x12>
    MIOS32_BOARD_PinInitHlp(GPIOC, GPIO_Pin_6, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED1
 801344c:	4809      	ldr	r0, [pc, #36]	; (8013474 <MIOS32_BOARD_LED_Init+0x30>)
 801344e:	2140      	movs	r1, #64	; 0x40
 8013450:	2205      	movs	r2, #5
 8013452:	f7ff ffaf 	bl	80133b4 <MIOS32_BOARD_PinInitHlp>
  }
  
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) {
 8013456:	07a3      	lsls	r3, r4, #30
 8013458:	d504      	bpl.n	8013464 <MIOS32_BOARD_LED_Init+0x20>
    MIOS32_BOARD_PinInitHlp(GPIOC, GPIO_Pin_7, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED2
 801345a:	4806      	ldr	r0, [pc, #24]	; (8013474 <MIOS32_BOARD_LED_Init+0x30>)
 801345c:	2180      	movs	r1, #128	; 0x80
 801345e:	2205      	movs	r2, #5
 8013460:	f7ff ffa8 	bl	80133b4 <MIOS32_BOARD_PinInitHlp>
  }
#endif
  
  if( leds & 0xfffffffc)
    return -2; // LED doesn't exist
 8013464:	f034 0303 	bics.w	r3, r4, #3
  return 0; // no error
  
#else
  return -1; // no LED specified for board
#endif
}
 8013468:	bf14      	ite	ne
 801346a:	f06f 0001 	mvnne.w	r0, #1
 801346e:	2000      	moveq	r0, #0
 8013470:	bd10      	pop	{r4, pc}
 8013472:	bf00      	nop
 8013474:	40020800 	.word	0x40020800

08013478 <MIOS32_BOARD_LED_Set>:
    return -2; // LED doesn't exist

  return 0; // no error
#elif defined(MIOS32_BOARD_MBHP_DIPCOREF4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( leds & 1 ) { // LED1
 8013478:	07c2      	lsls	r2, r0, #31
 801347a:	d507      	bpl.n	801348c <MIOS32_BOARD_LED_Set+0x14>
 801347c:	4b0c      	ldr	r3, [pc, #48]	; (80134b0 <MIOS32_BOARD_LED_Set+0x38>)
    MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_6, value & 1);
 801347e:	f011 0f01 	tst.w	r1, #1
 8013482:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013486:	bf14      	ite	ne
 8013488:	831a      	strhne	r2, [r3, #24]
 801348a:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) { // LED2
 801348c:	0783      	lsls	r3, r0, #30
 801348e:	d507      	bpl.n	80134a0 <MIOS32_BOARD_LED_Set+0x28>
    MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_7, value & 2);
 8013490:	f011 0f02 	tst.w	r1, #2
 8013494:	4906      	ldr	r1, [pc, #24]	; (80134b0 <MIOS32_BOARD_LED_Set+0x38>)
 8013496:	f04f 0380 	mov.w	r3, #128	; 0x80
 801349a:	bf14      	ite	ne
 801349c:	830b      	strhne	r3, [r1, #24]
 801349e:	834b      	strheq	r3, [r1, #26]
  }
#endif
  if( leds & 0xfffffffc)
    return -2; // LED doesn't exist
 80134a0:	f030 0303 	bics.w	r3, r0, #3
  
  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 80134a4:	bf14      	ite	ne
 80134a6:	f06f 0001 	mvnne.w	r0, #1
 80134aa:	2000      	moveq	r0, #0
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	40020800 	.word	0x40020800

080134b4 <MIOS32_BOARD_LED_Get>:
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
    values |= (1 << 3);
#endif
# elif defined(MIOS32_BOARD_MBHP_DIPCOREF4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOC->ODR & GPIO_Pin_6 ) // LED1
 80134b4:	4b04      	ldr	r3, [pc, #16]	; (80134c8 <MIOS32_BOARD_LED_Get+0x14>)
 80134b6:	6958      	ldr	r0, [r3, #20]
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOC->ODR & GPIO_Pin_7 ) // LED2
 80134b8:	6959      	ldr	r1, [r3, #20]
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
    values |= (1 << 3);
#endif
# elif defined(MIOS32_BOARD_MBHP_DIPCOREF4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOC->ODR & GPIO_Pin_6 ) // LED1
 80134ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOC->ODR & GPIO_Pin_7 ) // LED2
 80134be:	0609      	lsls	r1, r1, #24
    values |= (1 << 1);
 80134c0:	bf48      	it	mi
 80134c2:	f040 0002 	orrmi.w	r0, r0, #2
#endif
#endif
  
  return values;
}
 80134c6:	4770      	bx	lr
 80134c8:	40020800 	.word	0x40020800

080134cc <MIOS32_BOARD_J5_PinInit>:
s32 MIOS32_BOARD_J5_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 80134cc:	2801      	cmp	r0, #1
//!     <LI>MIOS32_BOARD_PIN_MODE_OUTPUT_OD: pin is used as output in open drain mode
//!   </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J5_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
 80134ce:	b510      	push	{r4, lr}
 80134d0:	460a      	mov	r2, r1
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 80134d2:	d817      	bhi.n	8013504 <MIOS32_BOARD_J5_PinInit+0x38>
 80134d4:	4b0d      	ldr	r3, [pc, #52]	; (801350c <MIOS32_BOARD_J5_PinInit+0x40>)
 80134d6:	2101      	movs	r1, #1
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j5_enable_mask &= ~(1 << pin);
 80134d8:	fa01 f100 	lsl.w	r1, r1, r0
 80134dc:	881c      	ldrh	r4, [r3, #0]
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
 80134de:	b922      	cbnz	r2, 80134ea <MIOS32_BOARD_J5_PinInit+0x1e>
    // don't touch
    j5_enable_mask &= ~(1 << pin);
 80134e0:	ea24 0001 	bic.w	r0, r4, r1
 80134e4:	8018      	strh	r0, [r3, #0]

    if( status < 0 )
      return status;
  }

  return 0; // no error
 80134e6:	4610      	mov	r0, r2
 80134e8:	bd10      	pop	{r4, pc}
  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j5_enable_mask &= ~(1 << pin);
  } else {
    // enable pin
    j5_enable_mask |= (1 << pin);
 80134ea:	4321      	orrs	r1, r4
 80134ec:	8019      	strh	r1, [r3, #0]

    s32 status = MIOS32_BOARD_PinInitHlp(j5_pin[pin].port, j5_pin[pin].pin_mask, mode);
 80134ee:	4b08      	ldr	r3, [pc, #32]	; (8013510 <MIOS32_BOARD_J5_PinInit+0x44>)
 80134f0:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80134f4:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80134f8:	8889      	ldrh	r1, [r1, #4]
 80134fa:	f7ff ff5b 	bl	80133b4 <MIOS32_BOARD_PinInitHlp>
 80134fe:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8013502:	bd10      	pop	{r4, pc}
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported
 8013504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return status;
  }

  return 0; // no error
#endif
}
 8013508:	bd10      	pop	{r4, pc}
 801350a:	bf00      	nop
 801350c:	20000314 	.word	0x20000314
 8013510:	0801c3a4 	.word	0x0801c3a4

08013514 <MIOS32_BOARD_J5_PinSet>:
s32 MIOS32_BOARD_J5_PinSet(u8 pin, u8 value)
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 8013514:	2801      	cmp	r0, #1
 8013516:	d815      	bhi.n	8013544 <MIOS32_BOARD_J5_PinSet+0x30>
    return -1; // pin not supported

  if( !(j5_enable_mask & (1 << pin)) )
 8013518:	4b0d      	ldr	r3, [pc, #52]	; (8013550 <MIOS32_BOARD_J5_PinSet+0x3c>)
 801351a:	881a      	ldrh	r2, [r3, #0]
 801351c:	fa42 f200 	asr.w	r2, r2, r0
 8013520:	07d3      	lsls	r3, r2, #31
 8013522:	d512      	bpl.n	801354a <MIOS32_BOARD_J5_PinSet+0x36>
 8013524:	4b0b      	ldr	r3, [pc, #44]	; (8013554 <MIOS32_BOARD_J5_PinSet+0x40>)
 8013526:	00c2      	lsls	r2, r0, #3
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);
 8013528:	b131      	cbz	r1, 8013538 <MIOS32_BOARD_J5_PinSet+0x24>
 801352a:	189a      	adds	r2, r3, r2
 801352c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8013530:	8891      	ldrh	r1, [r2, #4]
 8013532:	8301      	strh	r1, [r0, #24]

  return 0; // no error
 8013534:	2000      	movs	r0, #0
 8013536:	4770      	bx	lr
    return -1; // pin not supported

  if( !(j5_enable_mask & (1 << pin)) )
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);
 8013538:	1899      	adds	r1, r3, r2
 801353a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 801353e:	888b      	ldrh	r3, [r1, #4]
 8013540:	8343      	strh	r3, [r0, #26]
 8013542:	e7f7      	b.n	8013534 <MIOS32_BOARD_J5_PinSet+0x20>
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported
 8013544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013548:	4770      	bx	lr

  if( !(j5_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 801354a:	f06f 0001 	mvn.w	r0, #1

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 801354e:	4770      	bx	lr
 8013550:	20000314 	.word	0x20000314
 8013554:	0801c3a4 	.word	0x0801c3a4

08013558 <MIOS32_BOARD_J10_PinInit>:
      return status;
  }

  return 0; // no error
#endif
}
 8013558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801355c:	4770      	bx	lr

0801355e <MIOS32_BOARD_J10_PinSet>:

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 801355e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013562:	4770      	bx	lr

08013564 <MIOS32_BOARD_J15_PortInit>:
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 8013564:	2801      	cmp	r0, #1
//!   <LI>1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
//! </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PortInit(u32 mode)
{
 8013566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013568:	4607      	mov	r7, r0
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 801356a:	d835      	bhi.n	80135d8 <MIOS32_BOARD_J15_PortInit+0x74>
    return -1; // unsupported mode

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 801356c:	4668      	mov	r0, sp
 801356e:	f002 f952 	bl	8015816 <GPIO_StructInit>
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
  J15_PIN_CS2(0);
 8013572:	4c1b      	ldr	r4, [pc, #108]	; (80135e0 <MIOS32_BOARD_J15_PortInit+0x7c>)
#endif
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
 8013574:	481b      	ldr	r0, [pc, #108]	; (80135e4 <MIOS32_BOARD_J15_PortInit+0x80>)
  J15_PIN_CS2(0);
 8013576:	2501      	movs	r5, #1
#endif
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
 8013578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  J15_PIN_CS2(0);
#endif
  J15_PIN_RW(0);
  J15_PIN_E1(0);
 801357c:	2202      	movs	r2, #2


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801357e:	2100      	movs	r1, #0
#endif
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
 8013580:	8343      	strh	r3, [r0, #26]
  J15_PIN_CS2(0);
 8013582:	8365      	strh	r5, [r4, #26]
#endif
  J15_PIN_RW(0);
 8013584:	8363      	strh	r3, [r4, #26]
  J15_PIN_E1(0);
 8013586:	8362      	strh	r2, [r4, #26]


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013588:	f88d 1006 	strb.w	r1, [sp, #6]

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
#elif J15_MODE == 1
  GPIO_InitStructure.GPIO_Pin = J15_CS1_PIN;
  GPIO_Init(J15_CS1_PORT, &GPIO_InitStructure);
 801358c:	4669      	mov	r1, sp
  J15_PIN_RW(0);
  J15_PIN_E1(0);


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801358e:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
 8013592:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
#elif J15_MODE == 1
  GPIO_InitStructure.GPIO_Pin = J15_CS1_PIN;
 8013596:	9300      	str	r3, [sp, #0]
  GPIO_Init(J15_CS1_PORT, &GPIO_InitStructure);
 8013598:	f002 f8f0 	bl	801577c <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_CS2_PIN;
  GPIO_Init(J15_CS2_PORT, &GPIO_InitStructure);
 801359c:	4620      	mov	r0, r4
 801359e:	4669      	mov	r1, sp
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
  J15_PIN_CS2(0);
 80135a0:	462e      	mov	r6, r5
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
#elif J15_MODE == 1
  GPIO_InitStructure.GPIO_Pin = J15_CS1_PIN;
  GPIO_Init(J15_CS1_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_CS2_PIN;
 80135a2:	9500      	str	r5, [sp, #0]
  GPIO_Init(J15_CS2_PORT, &GPIO_InitStructure);
 80135a4:	f002 f8ea 	bl	801577c <GPIO_Init>
#endif
  // configure open-drain pins (if OD option enabled)
  if( mode )
 80135a8:	b10f      	cbz	r7, 80135ae <MIOS32_BOARD_J15_PortInit+0x4a>
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80135aa:	f88d 5006 	strb.w	r5, [sp, #6]

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
 80135ae:	2004      	movs	r0, #4
 80135b0:	9000      	str	r0, [sp, #0]
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);
 80135b2:	4669      	mov	r1, sp
 80135b4:	480c      	ldr	r0, [pc, #48]	; (80135e8 <MIOS32_BOARD_J15_PortInit+0x84>)
 80135b6:	f002 f8e1 	bl	801577c <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
 80135ba:	2302      	movs	r3, #2
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80135bc:	4808      	ldr	r0, [pc, #32]	; (80135e0 <MIOS32_BOARD_J15_PortInit+0x7c>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
 80135be:	9300      	str	r3, [sp, #0]
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80135c0:	4669      	mov	r1, sp
 80135c2:	f002 f8db 	bl	801577c <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = LCD_E4_PIN;
  GPIO_Init(LCD_E4_PORT, &GPIO_InitStructure);
#endif
#endif

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
 80135c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);
 80135ca:	4805      	ldr	r0, [pc, #20]	; (80135e0 <MIOS32_BOARD_J15_PortInit+0x7c>)
  GPIO_InitStructure.GPIO_Pin = LCD_E4_PIN;
  GPIO_Init(LCD_E4_PORT, &GPIO_InitStructure);
#endif
#endif

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
 80135cc:	9200      	str	r2, [sp, #0]
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);
 80135ce:	4669      	mov	r1, sp
 80135d0:	f002 f8d4 	bl	801577c <GPIO_Init>
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
#endif
  return 0; // no error
 80135d4:	2000      	movs	r0, #0
 80135d6:	e001      	b.n	80135dc <MIOS32_BOARD_J15_PortInit+0x78>
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
    return -1; // unsupported mode
 80135d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
#endif
  return 0; // no error
#endif
}
 80135dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80135de:	bf00      	nop
 80135e0:	40020800 	.word	0x40020800
 80135e4:	40020400 	.word	0x40020400
 80135e8:	40020c00 	.word	0x40020c00

080135ec <MIOS32_BOARD_J15_DataSet>:
//! to output an 8bit value on the data lines
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_DataSet(u8 data)
{
 80135ec:	4b08      	ldr	r3, [pc, #32]	; (8013610 <MIOS32_BOARD_J15_DataSet+0x24>)
#if J15_MODE == 0
  return -1; // LCD port not available
#elif J15_MODE == 1
  J15_PIN_CS1(data & 1);
 80135ee:	f010 0f01 	tst.w	r0, #1
 80135f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80135f6:	bf14      	ite	ne
 80135f8:	831a      	strhne	r2, [r3, #24]
 80135fa:	835a      	strheq	r2, [r3, #26]
  J15_PIN_CS2((data>>1) & 1);
 80135fc:	f010 0f02 	tst.w	r0, #2
 8013600:	4804      	ldr	r0, [pc, #16]	; (8013614 <MIOS32_BOARD_J15_DataSet+0x28>)
 8013602:	f04f 0101 	mov.w	r1, #1
 8013606:	bf14      	ite	ne
 8013608:	8301      	strhne	r1, [r0, #24]
 801360a:	8341      	strheq	r1, [r0, #26]
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_0;

  return 0; // no error
#endif
}
 801360c:	2000      	movs	r0, #0
 801360e:	4770      	bx	lr
 8013610:	40020400 	.word	0x40020400
 8013614:	40020800 	.word	0x40020800

08013618 <MIOS32_BOARD_J15_SerDataShift>:
//! (SCLK connected to J15A:E, Data line connected to J15A:RW)
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_SerDataShift(u8 data)
{
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	4605      	mov	r5, r0
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();
 801361c:	f7ff fa7e 	bl	8012b1c <MIOS32_IRQ_Disable>
 8013620:	2408      	movs	r4, #8
 8013622:	4a0f      	ldr	r2, [pc, #60]	; (8013660 <MIOS32_BOARD_J15_SerDataShift+0x48>)

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 8013624:	490e      	ldr	r1, [pc, #56]	; (8013660 <MIOS32_BOARD_J15_SerDataShift+0x48>)
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
 8013626:	f015 0f80 	tst.w	r5, #128	; 0x80
 801362a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801362e:	bf14      	ite	ne
 8013630:	8313      	strhne	r3, [r2, #24]
 8013632:	8353      	strheq	r3, [r2, #26]
    J15_PIN_SERLCD_SCLK_0; // setup delay
 8013634:	2002      	movs	r0, #2
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 8013636:	006d      	lsls	r5, r5, #1
 8013638:	3c01      	subs	r4, #1
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 801363a:	8350      	strh	r0, [r2, #26]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801363c:	b2ed      	uxtb	r5, r5
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
    J15_PIN_SERLCD_SCLK_0; // stretch...
 801363e:	8350      	strh	r0, [r2, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 8013640:	8350      	strh	r0, [r2, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 8013642:	8350      	strh	r0, [r2, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 8013644:	8350      	strh	r0, [r2, #26]
    J15_PIN_SERLCD_SCLK_1;
 8013646:	8310      	strh	r0, [r2, #24]
    J15_PIN_SERLCD_SCLK_1;
 8013648:	8310      	strh	r0, [r2, #24]
    J15_PIN_SERLCD_SCLK_1;
 801364a:	8310      	strh	r0, [r2, #24]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801364c:	d1e9      	bne.n	8013622 <MIOS32_BOARD_J15_SerDataShift+0xa>
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_DATAOUT(0); 
 801364e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // With RW=1 the CS lines will go into high impedance state, and after 100..200 uS we will
  // see on the scope how CS line levels are changing, e.g. from high to mid level.
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
 8013652:	8348      	strh	r0, [r1, #26]
  J15_PIN_SERLCD_SCLK_0;
 8013654:	8348      	strh	r0, [r1, #26]
  J15_PIN_SERLCD_DATAOUT(0); 
 8013656:	834a      	strh	r2, [r1, #26]

  MIOS32_IRQ_Enable();
 8013658:	f7ff fa74 	bl	8012b44 <MIOS32_IRQ_Enable>

  return 0; // no error
#endif
}
 801365c:	4620      	mov	r0, r4
 801365e:	bd38      	pop	{r3, r4, r5, pc}
 8013660:	40020800 	.word	0x40020800

08013664 <MIOS32_BOARD_J15_RS_Set>:
//! to set the RS pin
//! \param[in] rs state of the RS pin
//! \return < 0 if access to RS pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
 8013664:	4b03      	ldr	r3, [pc, #12]	; (8013674 <MIOS32_BOARD_J15_RS_Set+0x10>)
 8013666:	2204      	movs	r2, #4
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8013668:	b108      	cbz	r0, 801366e <MIOS32_BOARD_J15_RS_Set+0xa>
 801366a:	831a      	strh	r2, [r3, #24]
 801366c:	e000      	b.n	8013670 <MIOS32_BOARD_J15_RS_Set+0xc>
 801366e:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 8013670:	2000      	movs	r0, #0
 8013672:	4770      	bx	lr
 8013674:	40020c00 	.word	0x40020c00

08013678 <MIOS32_BOARD_J15_RW_Set>:
//! to set the RW pin
//! \param[in] rw state of the RW pin
//! \return < 0 if access to RW pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
 8013678:	4b04      	ldr	r3, [pc, #16]	; (801368c <MIOS32_BOARD_J15_RW_Set+0x14>)
 801367a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 801367e:	b108      	cbz	r0, 8013684 <MIOS32_BOARD_J15_RW_Set+0xc>
 8013680:	831a      	strh	r2, [r3, #24]
 8013682:	e000      	b.n	8013686 <MIOS32_BOARD_J15_RW_Set+0xe>
 8013684:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 8013686:	2000      	movs	r0, #0
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	40020800 	.word	0x40020800

08013690 <MIOS32_BOARD_J15_E_Set>:

  }

  return -1; // pin not available
#endif
}
 8013690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013694:	4770      	bx	lr

08013696 <MIOS32_BOARD_J15_GetD7In>:
#if J15_MODE <2
  return -1; // LCD port not available
#elif J15_MODE == 2
  return J15_PIN_D7_IN ? 1 : 0;
#endif
}
 8013696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801369a:	4770      	bx	lr

0801369c <MIOS32_BOARD_J15_D7InPullUpEnable>:
  return -1; // LCD port not available
#elif J15_MODE == 2
  return 0; // not relevant for MBHP_CORE_STM32 board
  // TODO: check if this is true 
#endif
}
 801369c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136a0:	4770      	bx	lr

080136a2 <MIOS32_BOARD_J15_PollUnbusy>:
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
#endif
}
 80136a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136a6:	4770      	bx	lr

080136a8 <MIOS32_TIMER_Init>:
//! \return -2 if invalid period
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMER_Init(u8 timer, u32 period, void (*_irq_handler)(void), u8 irq_priority)
{
  // check if valid timer
  if( timer >= NUM_TIMERS )
 80136a8:	2802      	cmp	r0, #2
//! \return 0 if initialisation passed
//! \return -1 if invalid timer number
//! \return -2 if invalid period
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMER_Init(u8 timer, u32 period, void (*_irq_handler)(void), u8 irq_priority)
{
 80136aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80136ae:	4604      	mov	r4, r0
 80136b0:	4690      	mov	r8, r2
 80136b2:	461f      	mov	r7, r3
  // check if valid timer
  if( timer >= NUM_TIMERS )
 80136b4:	d83d      	bhi.n	8013732 <MIOS32_TIMER_Init+0x8a>
    return -1; // invalid timer selected

  // check if valid period
  if( period < 1 || period >= 65537 )
 80136b6:	1e4e      	subs	r6, r1, #1
 80136b8:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80136bc:	d23c      	bcs.n	8013738 <MIOS32_TIMER_Init+0x90>
    return -2;

  // enable timer clock
  if( timer_base[timer] == TIM1 || timer_base[timer] == TIM8 )
 80136be:	4b21      	ldr	r3, [pc, #132]	; (8013744 <MIOS32_TIMER_Init+0x9c>)
 80136c0:	4a21      	ldr	r2, [pc, #132]	; (8013748 <MIOS32_TIMER_Init+0xa0>)
 80136c2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80136c6:	4821      	ldr	r0, [pc, #132]	; (801374c <MIOS32_TIMER_Init+0xa4>)
 80136c8:	4295      	cmp	r5, r2
    RCC_APB2PeriphClockCmd(rcc[timer], ENABLE);
 80136ca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80136ce:	f04f 0101 	mov.w	r1, #1
  // check if valid period
  if( period < 1 || period >= 65537 )
    return -2;

  // enable timer clock
  if( timer_base[timer] == TIM1 || timer_base[timer] == TIM8 )
 80136d2:	d003      	beq.n	80136dc <MIOS32_TIMER_Init+0x34>
 80136d4:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 80136d8:	429d      	cmp	r5, r3
 80136da:	d102      	bne.n	80136e2 <MIOS32_TIMER_Init+0x3a>
    RCC_APB2PeriphClockCmd(rcc[timer], ENABLE);
 80136dc:	f002 f96e 	bl	80159bc <RCC_APB2PeriphClockCmd>
 80136e0:	e001      	b.n	80136e6 <MIOS32_TIMER_Init+0x3e>
  else
    RCC_APB1PeriphClockCmd(rcc[timer], ENABLE);
 80136e2:	f002 f95f 	bl	80159a4 <RCC_APB1PeriphClockCmd>

  // disable interrupt (if active from previous configuration)
  TIM_ITConfig(timer_base[timer], TIM_IT_Update, DISABLE);
 80136e6:	2200      	movs	r2, #0
 80136e8:	4628      	mov	r0, r5
 80136ea:	2101      	movs	r1, #1
 80136ec:	f002 faec 	bl	8015cc8 <TIM_ITConfig>

  // copy callback function
  timer_callback[timer] = _irq_handler;
 80136f0:	4917      	ldr	r1, [pc, #92]	; (8013750 <MIOS32_TIMER_Init+0xa8>)

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = period-1;
 80136f2:	9602      	str	r6, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80136f4:	2653      	movs	r6, #83	; 0x53

  // disable interrupt (if active from previous configuration)
  TIM_ITConfig(timer_base[timer], TIM_IT_Update, DISABLE);

  // copy callback function
  timer_callback[timer] = _irq_handler;
 80136f6:	f841 8024 	str.w	r8, [r1, r4, lsl #2]

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = period-1;
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80136fa:	f8ad 6004 	strh.w	r6, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(timer_base[timer], &TIM_TimeBaseStructure);
 80136fe:	4628      	mov	r0, r5

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = period-1;
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8013700:	2600      	movs	r6, #0
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(timer_base[timer], &TIM_TimeBaseStructure);
 8013702:	a901      	add	r1, sp, #4

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = period-1;
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8013704:	f8ad 600c 	strh.w	r6, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8013708:	f8ad 6006 	strh.w	r6, [sp, #6]
  TIM_TimeBaseInit(timer_base[timer], &TIM_TimeBaseStructure);
 801370c:	f002 fa92 	bl	8015c34 <TIM_TimeBaseInit>

  // enable interrupt
  TIM_ITConfig(timer_base[timer], TIM_IT_Update, ENABLE);
 8013710:	2101      	movs	r1, #1
 8013712:	460a      	mov	r2, r1
 8013714:	4628      	mov	r0, r5
 8013716:	f002 fad7 	bl	8015cc8 <TIM_ITConfig>

  // enable counter
  TIM_Cmd(timer_base[timer], ENABLE);
 801371a:	4628      	mov	r0, r5
 801371c:	2101      	movs	r1, #1
 801371e:	f002 fac7 	bl	8015cb0 <TIM_Cmd>

  // enable global interrupt
  MIOS32_IRQ_Install(timer_irq_chn[timer], irq_priority);
 8013722:	4a0c      	ldr	r2, [pc, #48]	; (8013754 <MIOS32_TIMER_Init+0xac>)
 8013724:	4639      	mov	r1, r7
 8013726:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
 801372a:	f7ff fa1f 	bl	8012b6c <MIOS32_IRQ_Install>

  return 0; // no error
 801372e:	4630      	mov	r0, r6
 8013730:	e004      	b.n	801373c <MIOS32_TIMER_Init+0x94>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMER_Init(u8 timer, u32 period, void (*_irq_handler)(void), u8 irq_priority)
{
  // check if valid timer
  if( timer >= NUM_TIMERS )
    return -1; // invalid timer selected
 8013732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013736:	e001      	b.n	801373c <MIOS32_TIMER_Init+0x94>

  // check if valid period
  if( period < 1 || period >= 65537 )
    return -2;
 8013738:	f06f 0001 	mvn.w	r0, #1

  // enable global interrupt
  MIOS32_IRQ_Install(timer_irq_chn[timer], irq_priority);

  return 0; // no error
}
 801373c:	b004      	add	sp, #16
 801373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013742:	bf00      	nop
 8013744:	0801c3b4 	.word	0x0801c3b4
 8013748:	40010000 	.word	0x40010000
 801374c:	0801c3cc 	.word	0x0801c3cc
 8013750:	20000318 	.word	0x20000318
 8013754:	0801c3c0 	.word	0x0801c3c0

08013758 <TIM2_IRQHandler>:
//! Interrupt handlers
//! \note don't call them directly from application
/////////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_ALLOCATE_TIM2_IRQn
TIMER0_IRQ_HANDLER
{
 8013758:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER0_BASE, TIM_IT_Update) != RESET ) {
 801375a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801375e:	2101      	movs	r1, #1
 8013760:	f002 fabb 	bl	8015cda <TIM_GetITStatus>
 8013764:	b138      	cbz	r0, 8013776 <TIM2_IRQHandler+0x1e>
    TIM_ClearITPendingBit(TIMER0_BASE, TIM_IT_Update);
 8013766:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801376a:	2101      	movs	r1, #1
 801376c:	f002 fac0 	bl	8015cf0 <TIM_ClearITPendingBit>
    timer_callback[0]();
 8013770:	4b01      	ldr	r3, [pc, #4]	; (8013778 <TIM2_IRQHandler+0x20>)
 8013772:	6818      	ldr	r0, [r3, #0]
 8013774:	4780      	blx	r0
 8013776:	bd08      	pop	{r3, pc}
 8013778:	20000318 	.word	0x20000318

0801377c <TIM3_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM3_IRQn
TIMER1_IRQ_HANDLER
{
 801377c:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER1_BASE, TIM_IT_Update) != RESET ) {
 801377e:	4806      	ldr	r0, [pc, #24]	; (8013798 <TIM3_IRQHandler+0x1c>)
 8013780:	2101      	movs	r1, #1
 8013782:	f002 faaa 	bl	8015cda <TIM_GetITStatus>
 8013786:	b130      	cbz	r0, 8013796 <TIM3_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER1_BASE, TIM_IT_Update);
 8013788:	4803      	ldr	r0, [pc, #12]	; (8013798 <TIM3_IRQHandler+0x1c>)
 801378a:	2101      	movs	r1, #1
 801378c:	f002 fab0 	bl	8015cf0 <TIM_ClearITPendingBit>
    timer_callback[1]();
 8013790:	4b02      	ldr	r3, [pc, #8]	; (801379c <TIM3_IRQHandler+0x20>)
 8013792:	6858      	ldr	r0, [r3, #4]
 8013794:	4780      	blx	r0
 8013796:	bd08      	pop	{r3, pc}
 8013798:	40000400 	.word	0x40000400
 801379c:	20000318 	.word	0x20000318

080137a0 <TIM5_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM5_IRQn
TIMER2_IRQ_HANDLER
{
 80137a0:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER2_BASE, TIM_IT_Update) != RESET ) {
 80137a2:	4806      	ldr	r0, [pc, #24]	; (80137bc <TIM5_IRQHandler+0x1c>)
 80137a4:	2101      	movs	r1, #1
 80137a6:	f002 fa98 	bl	8015cda <TIM_GetITStatus>
 80137aa:	b130      	cbz	r0, 80137ba <TIM5_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER2_BASE, TIM_IT_Update);
 80137ac:	4803      	ldr	r0, [pc, #12]	; (80137bc <TIM5_IRQHandler+0x1c>)
 80137ae:	2101      	movs	r1, #1
 80137b0:	f002 fa9e 	bl	8015cf0 <TIM_ClearITPendingBit>
    timer_callback[2]();
 80137b4:	4b02      	ldr	r3, [pc, #8]	; (80137c0 <TIM5_IRQHandler+0x20>)
 80137b6:	6898      	ldr	r0, [r3, #8]
 80137b8:	4780      	blx	r0
 80137ba:	bd08      	pop	{r3, pc}
 80137bc:	40000c00 	.word	0x40000c00
 80137c0:	20000318 	.word	0x20000318

080137c4 <MIOS32_DELAY_Init>:
//!
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
 80137c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 80137c6:	4604      	mov	r4, r0
 80137c8:	b9b8      	cbnz	r0, 80137fa <MIOS32_DELAY_Init+0x36>
    return -1; // unsupported mode

  // enable timer clock
  if( MIOS32_DELAY_TIMER == TIM1 || MIOS32_DELAY_TIMER == TIM8 )
    RCC_APB2PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);
 80137ca:	2001      	movs	r0, #1
 80137cc:	4601      	mov	r1, r0
 80137ce:	f002 f8f5 	bl	80159bc <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80137d2:	20a7      	movs	r0, #167	; 0xa7
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 80137d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80137d8:	f8ad 0004 	strh.w	r0, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 80137dc:	a901      	add	r1, sp, #4
 80137de:	4809      	ldr	r0, [pc, #36]	; (8013804 <MIOS32_DELAY_Init+0x40>)
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 80137e0:	9302      	str	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80137e2:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80137e6:	f8ad 4006 	strh.w	r4, [sp, #6]
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 80137ea:	f002 fa23 	bl	8015c34 <TIM_TimeBaseInit>

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);
 80137ee:	4805      	ldr	r0, [pc, #20]	; (8013804 <MIOS32_DELAY_Init+0x40>)
 80137f0:	2101      	movs	r1, #1
 80137f2:	f002 fa5d 	bl	8015cb0 <TIM_Cmd>

  return 0; // no error
 80137f6:	4620      	mov	r0, r4
 80137f8:	e001      	b.n	80137fe <MIOS32_DELAY_Init+0x3a>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80137fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);

  return 0; // no error
}
 80137fe:	b004      	add	sp, #16
 8013800:	bd10      	pop	{r4, pc}
 8013802:	bf00      	nop
 8013804:	40010000 	.word	0x40010000

08013808 <MIOS32_DELAY_Wait_uS>:
//! \param[in] uS delay (1..65535 microseconds)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Wait_uS(u16 uS)
{
  u16 start = MIOS32_DELAY_TIMER->CNT;
 8013808:	4b04      	ldr	r3, [pc, #16]	; (801381c <MIOS32_DELAY_Wait_uS+0x14>)
 801380a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801380c:	b289      	uxth	r1, r1

  // note that this even works on 16bit counter wrap-arounds
  while( (u16)(MIOS32_DELAY_TIMER->CNT - start) <= uS );
 801380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013810:	1a52      	subs	r2, r2, r1
 8013812:	b292      	uxth	r2, r2
 8013814:	4282      	cmp	r2, r0
 8013816:	d9fa      	bls.n	801380e <MIOS32_DELAY_Wait_uS+0x6>

  return 0; // no error
}
 8013818:	2000      	movs	r0, #0
 801381a:	4770      	bx	lr
 801381c:	40010000 	.word	0x40010000

08013820 <MIOS32_AIN_Init>:
  // finally start initial conversion
  MIOS32_AIN_StartConversions();

  return 0;
#endif
}
 8013820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013824:	4770      	bx	lr

08013826 <MIOS32_AIN_Handler>:
  // start next scan
  MIOS32_AIN_StartConversions();

  return 0; // no error
#endif
}
 8013826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801382a:	4770      	bx	lr

0801382c <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(MIOS32_USB_DeviceDescriptor);
 801382c:	2312      	movs	r3, #18
 801382e:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_DeviceDescriptor;
}
 8013830:	4800      	ldr	r0, [pc, #0]	; (8013834 <USBD_USR_DeviceDescriptor+0x8>)
 8013832:	4770      	bx	lr
 8013834:	0801c3d8 	.word	0x0801c3d8

08013838 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8013838:	2304      	movs	r3, #4
 801383a:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)USBD_LangIDDesc;
}
 801383c:	4800      	ldr	r0, [pc, #0]	; (8013840 <USBD_USR_LangIDStrDescriptor+0x8>)
 801383e:	4770      	bx	lr
 8013840:	0801c8b9 	.word	0x0801c8b9

08013844 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
static void USBD_USR_Init(void)
{   
 8013844:	4770      	bx	lr

08013846 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
static void USBD_USR_DeviceReset(uint8_t speed )
{
 8013846:	4770      	bx	lr

08013848 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
static void USBD_USR_DeviceConnected (void)
{
 8013848:	4770      	bx	lr

0801384a <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceSuspended(void)
{
 801384a:	4770      	bx	lr

0801384c <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceResumed(void)
{
 801384c:	4770      	bx	lr

0801384e <USBH_HID_USR_UserInput>:
//  //  }
//  //

  return USBH_USR_RESP_OK;

}
 801384e:	2001      	movs	r0, #1
 8013850:	4770      	bx	lr

08013852 <USBH_HID_USR_DeInit>:
 *         Deint User state and associated variables
 * @param  None
 * @retval None
 */
void USBH_HID_USR_DeInit(void)
{
 8013852:	4770      	bx	lr

08013854 <USBH_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_USR_Init(void)
{
 8013854:	4770      	bx	lr

08013856 <USBH_USR_DeviceAttached>:
 *         Displays the message on LCD on device attached
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAttached(void)
{  
 8013856:	4770      	bx	lr

08013858 <USBH_USR_UnrecoveredError>:
 * @brief  USBH_USR_UnrecoveredError
 * @param  None
 * @retval None
 */
static void USBH_USR_UnrecoveredError (void)
{
 8013858:	4770      	bx	lr

0801385a <USBH_USR_ResetDevice>:
 *         Reset USB Device
 * @param  None
 * @retval None
 */
static void USBH_USR_ResetDevice(void)
{
 801385a:	4770      	bx	lr

0801385c <USBH_USR_DeviceSpeedDetected>:
 *         Displays the message on LCD for device speed
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 801385c:	4770      	bx	lr

0801385e <USBH_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 801385e:	4770      	bx	lr

08013860 <USBH_USR_DeviceAddressAssigned>:
 *         USB device is successfully assigned the Address
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAddressAssigned(void)
{
 8013860:	4770      	bx	lr

08013862 <USBH_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
						 USBH_InterfaceDesc_TypeDef *itfDesc,
						 USBH_EpDesc_TypeDef *epDesc)
{
 8013862:	4770      	bx	lr

08013864 <USBH_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 8013864:	4770      	bx	lr

08013866 <USBH_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_USR_Product_String(void *ProductString)
{
 8013866:	4770      	bx	lr

08013868 <USBH_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_USR_SerialNum_String(void *SerialNumString)
{
 8013868:	4770      	bx	lr

0801386a <USBH_USR_EnumerationDone>:
 *         application jump to class
 * @param  None
 * @retval None
 */
static void USBH_USR_EnumerationDone(void)
{
 801386a:	4770      	bx	lr

0801386c <USBH_USR_DeviceNotSupported>:
 *         Device is not supported
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceNotSupported(void)
{
 801386c:	4770      	bx	lr

0801386e <USBH_USR_UserInput>:
 * @retval USBH_USR_Status : User response for key button
 */
static USBH_USR_Status USBH_USR_UserInput(void)
{
  return USBH_USR_RESP_OK;
}
 801386e:	2001      	movs	r0, #1
 8013870:	4770      	bx	lr

08013872 <USBH_USR_OverCurrentDetected>:
 *         Device Overcurrent detection event
 * @param  None
 * @retval None
 */
static void USBH_USR_OverCurrentDetected (void)
{
 8013872:	4770      	bx	lr

08013874 <USBH_USR_Application>:
* @retval Staus
*/
static int USBH_USR_Application(void)
{
  return (0);
}
 8013874:	2000      	movs	r0, #0
 8013876:	4770      	bx	lr

08013878 <USBH_USR_DeInit>:
 *         Deinit User state and associated variables
 * @param  None
 * @retval None
 */
static void USBH_USR_DeInit(void)
{
 8013878:	4770      	bx	lr

0801387a <MIOS32_USB_CLASS_Setup>:
					USB_SETUP_REQ *req)
{
  // not relevant for USB MIDI

  return USBD_OK;
}
 801387a:	2000      	movs	r0, #0
 801387c:	4770      	bx	lr

0801387e <MIOS32_USB_CLASS_EP0_RxReady>:
static uint8_t  MIOS32_USB_CLASS_EP0_RxReady (void  *pdev)
{ 
  // not relevant for USB MIDI
  
  return USBD_OK;
}
 801387e:	2000      	movs	r0, #0
 8013880:	4770      	bx	lr
	...

08013884 <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013884:	b510      	push	{r4, lr}
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013886:	7ac3      	ldrb	r3, [r0, #11]
 8013888:	2b01      	cmp	r3, #1
#ifndef MIOS32_DONT_USE_USB_HOST
		class_status = &USB_FS_Host_Class;
 801388a:	bf0c      	ite	eq
 801388c:	4b0d      	ldreq	r3, [pc, #52]	; (80138c4 <USBH_InterfaceDeInit+0x40>)
#else
		return; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		class_status = &USB_HS_Host_Class;
 801388e:	4b0e      	ldrne	r3, [pc, #56]	; (80138c8 <USBH_InterfaceDeInit+0x44>)
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013890:	4604      	mov	r4, r0
#else
		return; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		class_status = &USB_HS_Host_Class;
 8013892:	7818      	ldrb	r0, [r3, #0]
#else
		return; //
#endif
	}
	switch(*class_status){
 8013894:	2801      	cmp	r0, #1
 8013896:	d004      	beq.n	80138a2 <USBH_InterfaceDeInit+0x1e>
 8013898:	2802      	cmp	r0, #2
 801389a:	d106      	bne.n	80138aa <USBH_InterfaceDeInit+0x26>
	case USBH_IS_MIDI:
		MIOS32_MIDI_USBH_Callbacks.DeInit(pdev, phost);
		class_status = USBH_NO_CLASS; // back to parser class
		break;
	case USBH_IS_HID:
		MIOS32_HID_USBH_Callbacks.DeInit(pdev, phost);
 801389c:	4620      	mov	r0, r4
 801389e:	4a0b      	ldr	r2, [pc, #44]	; (80138cc <USBH_InterfaceDeInit+0x48>)
 80138a0:	e001      	b.n	80138a6 <USBH_InterfaceDeInit+0x22>
		return; //
#endif
	}
	switch(*class_status){
	case USBH_IS_MIDI:
		MIOS32_MIDI_USBH_Callbacks.DeInit(pdev, phost);
 80138a2:	4a0b      	ldr	r2, [pc, #44]	; (80138d0 <USBH_InterfaceDeInit+0x4c>)
 80138a4:	4620      	mov	r0, r4
		class_status = USBH_NO_CLASS; // back to parser class
		break;
	case USBH_IS_HID:
		MIOS32_HID_USBH_Callbacks.DeInit(pdev, phost);
 80138a6:	6853      	ldr	r3, [r2, #4]
 80138a8:	4798      	blx	r3
		class_status = USBH_NO_CLASS; // back to parser class
		break;
	default:
		break;
	}
	DEBUG_MSG("Host(X) interface deinit: %s", pdev->cfg.coreID? "FS" : "HS" );
 80138aa:	7ae1      	ldrb	r1, [r4, #11]
 80138ac:	4b09      	ldr	r3, [pc, #36]	; (80138d4 <USBH_InterfaceDeInit+0x50>)
 80138ae:	4a0a      	ldr	r2, [pc, #40]	; (80138d8 <USBH_InterfaceDeInit+0x54>)
 80138b0:	480a      	ldr	r0, [pc, #40]	; (80138dc <USBH_InterfaceDeInit+0x58>)
 80138b2:	2900      	cmp	r1, #0
 80138b4:	bf0c      	ite	eq
 80138b6:	4611      	moveq	r1, r2
 80138b8:	4619      	movne	r1, r3
}
 80138ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		class_status = USBH_NO_CLASS; // back to parser class
		break;
	default:
		break;
	}
	DEBUG_MSG("Host(X) interface deinit: %s", pdev->cfg.coreID? "FS" : "HS" );
 80138be:	f7fe b9a9 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80138c2:	bf00      	nop
 80138c4:	200035e0 	.word	0x200035e0
 80138c8:	200036c8 	.word	0x200036c8
 80138cc:	0801c904 	.word	0x0801c904
 80138d0:	0801c8dc 	.word	0x0801c8dc
 80138d4:	0801c5e4 	.word	0x0801c5e4
 80138d8:	0801c5e7 	.word	0x0801c5e7
 80138dc:	0801c5ea 	.word	0x0801c5ea

080138e0 <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80138e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USBH_Status status=USBH_NOT_SUPPORTED;
	USBH_HOST *pphost = phost;
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 80138e4:	7ac3      	ldrb	r3, [r0, #11]
 80138e6:	2b01      	cmp	r3, #1
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80138e8:	4680      	mov	r8, r0
 80138ea:	460f      	mov	r7, r1
	USBH_Status status=USBH_NOT_SUPPORTED;
	USBH_HOST *pphost = phost;
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 80138ec:	d006      	beq.n	80138fc <USBH_InterfaceInit+0x1c>
#else
		return status; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		class_status = &USB_HS_Host_Class;
 80138ee:	4a21      	ldr	r2, [pc, #132]	; (8013974 <USBH_InterfaceInit+0x94>)
 80138f0:	4921      	ldr	r1, [pc, #132]	; (8013978 <USBH_InterfaceInit+0x98>)
 80138f2:	4e22      	ldr	r6, [pc, #136]	; (801397c <USBH_InterfaceInit+0x9c>)
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	bf18      	it	ne
 80138f8:	4611      	movne	r1, r2
 80138fa:	e001      	b.n	8013900 <USBH_InterfaceInit+0x20>
	USBH_Status status=USBH_NOT_SUPPORTED;
	USBH_HOST *pphost = phost;
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
#ifndef MIOS32_DONT_USE_USB_HOST
		class_status = &USB_FS_Host_Class;
 80138fc:	4e20      	ldr	r6, [pc, #128]	; (8013980 <USBH_InterfaceInit+0xa0>)
		class_status = &USB_HS_Host_Class;
#else
		return status; //
#endif
	}
	DEBUG_MSG("Host interface Init: %s", pdev->cfg.coreID? "FS" : "HS" );
 80138fe:	491d      	ldr	r1, [pc, #116]	; (8013974 <USBH_InterfaceInit+0x94>)
 8013900:	4820      	ldr	r0, [pc, #128]	; (8013984 <USBH_InterfaceInit+0xa4>)
 8013902:	f7fe f987 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013906:	463c      	mov	r4, r7
	int i;
	for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8013908:	2500      	movs	r5, #0
 801390a:	f897 0038 	ldrb.w	r0, [r7, #56]	; 0x38
 801390e:	4285      	cmp	r5, r0
 8013910:	da2d      	bge.n	801396e <USBH_InterfaceInit+0x8e>
 8013912:	2d02      	cmp	r5, #2
 8013914:	d02b      	beq.n	801396e <USBH_InterfaceInit+0x8e>

		//MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);
		DEBUG_MSG("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);
 8013916:	481c      	ldr	r0, [pc, #112]	; (8013988 <USBH_InterfaceInit+0xa8>)
 8013918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801391c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013920:	4629      	mov	r1, r5
 8013922:	f7fe f977 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>

		// Here we install the class and call Init depending on descriptor
		if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8013926:	f894 9043 	ldrb.w	r9, [r4, #67]	; 0x43
 801392a:	f1b9 0f01 	cmp.w	r9, #1
 801392e:	d10d      	bne.n	801394c <USBH_InterfaceInit+0x6c>
 8013930:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8013934:	2803      	cmp	r0, #3
 8013936:	d116      	bne.n	8013966 <USBH_InterfaceInit+0x86>
				(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {
			// MIDI class interface init
			if(MIOS32_MIDI_USBH_Callbacks.Init(pdev, phost)==USBH_OK){
 8013938:	4b14      	ldr	r3, [pc, #80]	; (801398c <USBH_InterfaceInit+0xac>)
 801393a:	4640      	mov	r0, r8
 801393c:	4639      	mov	r1, r7
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	4790      	blx	r2
 8013942:	b980      	cbnz	r0, 8013966 <USBH_InterfaceInit+0x86>
				*class_status = USBH_IS_MIDI;
 8013944:	f886 9000 	strb.w	r9, [r6]
				status = USBH_OK;
				break;
 8013948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
			else class_status = USBH_NO_CLASS;
		}else if( pphost->device_prop.Itf_Desc[i].bInterfaceClass == 3) {
 801394c:	f1b9 0f03 	cmp.w	r9, #3
 8013950:	d109      	bne.n	8013966 <USBH_InterfaceInit+0x86>
			// HID class interface init
			if(MIOS32_HID_USBH_Callbacks.Init(pdev, phost)==USBH_OK){
 8013952:	4b0f      	ldr	r3, [pc, #60]	; (8013990 <USBH_InterfaceInit+0xb0>)
 8013954:	4640      	mov	r0, r8
 8013956:	4639      	mov	r1, r7
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	4790      	blx	r2
 801395c:	b918      	cbnz	r0, 8013966 <USBH_InterfaceInit+0x86>
				*class_status = USBH_IS_HID;
 801395e:	2102      	movs	r1, #2
 8013960:	7031      	strb	r1, [r6, #0]
				status = USBH_OK;
				break;
 8013962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return status; //
#endif
	}
	DEBUG_MSG("Host interface Init: %s", pdev->cfg.coreID? "FS" : "HS" );
	int i;
	for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8013966:	3501      	adds	r5, #1
 8013968:	3409      	adds	r4, #9
 801396a:	2600      	movs	r6, #0
 801396c:	e7cd      	b.n	801390a <USBH_InterfaceInit+0x2a>
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
	USBH_Status status=USBH_NOT_SUPPORTED;
 801396e:	2003      	movs	r0, #3
			}
			else class_status = USBH_NO_CLASS;
		}else class_status = USBH_NO_CLASS;
	}
	return status;
}
 8013970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013974:	0801c5e4 	.word	0x0801c5e4
 8013978:	0801c5e7 	.word	0x0801c5e7
 801397c:	200036c8 	.word	0x200036c8
 8013980:	200035e0 	.word	0x200035e0
 8013984:	0801c607 	.word	0x0801c607
 8013988:	0801c61f 	.word	0x0801c61f
 801398c:	0801c8dc 	.word	0x0801c8dc
 8013990:	0801c904 	.word	0x0801c904

08013994 <USBH_HID_USR_UnrecoveredError>:
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_UnrecoveredError (void)
{
  DEBUG_MSG ((char*)MSG_UNREC_ERROR);
 8013994:	4801      	ldr	r0, [pc, #4]	; (801399c <USBH_HID_USR_UnrecoveredError+0x8>)
 8013996:	f7fe b93d 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 801399a:	bf00      	nop
 801399c:	0801c42d 	.word	0x0801c42d

080139a0 <USBH_HID_USR_DeviceNotSupported>:
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_DeviceNotSupported(void)
{
  DEBUG_MSG ("> Device not supported.\n");
 80139a0:	4801      	ldr	r0, [pc, #4]	; (80139a8 <USBH_HID_USR_DeviceNotSupported+0x8>)
 80139a2:	f7fe b937 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80139a6:	bf00      	nop
 80139a8:	0801c636 	.word	0x0801c636

080139ac <USBH_HID_USR_EnumerationDone>:
 * @retval None
 */
static void USBH_HID_USR_EnumerationDone(void)
{
//  /* Enumeration complete */
  DEBUG_MSG ((char*)MSG_DEV_ENUMERATED);
 80139ac:	4801      	ldr	r0, [pc, #4]	; (80139b4 <USBH_HID_USR_EnumerationDone+0x8>)
 80139ae:	f7fe b931 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80139b2:	bf00      	nop
 80139b4:	0801c828 	.word	0x0801c828

080139b8 <USBH_HID_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_HID_USR_SerialNum_String(void *SerialNumString)
{
 80139b8:	4601      	mov	r1, r0
  MIOS32_MIDI_SendDebugMessage("[USBH_USR] Serial Number: %s", SerialNumString);
 80139ba:	4801      	ldr	r0, [pc, #4]	; (80139c0 <USBH_HID_USR_SerialNum_String+0x8>)
 80139bc:	f7fe b92a 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80139c0:	0801c64f 	.word	0x0801c64f

080139c4 <USBH_HID_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_HID_USR_Product_String(void *ProductString)
{
 80139c4:	4601      	mov	r1, r0
  MIOS32_MIDI_SendDebugMessage("[USBH_USR] Product: %s", ProductString);
 80139c6:	4801      	ldr	r0, [pc, #4]	; (80139cc <USBH_HID_USR_Product_String+0x8>)
 80139c8:	f7fe b924 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80139cc:	0801c66c 	.word	0x0801c66c

080139d0 <USBH_HID_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_HID_USR_Manufacturer_String(void *ManufacturerString)
{
 80139d0:	4601      	mov	r1, r0
  MIOS32_MIDI_SendDebugMessage("[USBH_USR] Manufacturer: %s", ManufacturerString);
 80139d2:	4801      	ldr	r0, [pc, #4]	; (80139d8 <USBH_HID_USR_Manufacturer_String+0x8>)
 80139d4:	f7fe b91e 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80139d8:	0801c683 	.word	0x0801c683

080139dc <USBH_HID_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_HID_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
                                                     USBH_InterfaceDesc_TypeDef *itfDesc,
                                                     USBH_EpDesc_TypeDef *epDesc)
{
 80139dc:	b510      	push	{r4, lr}
 80139de:	460c      	mov	r4, r1
  USBH_InterfaceDesc_TypeDef *id;

  id = itfDesc;
  DEBUG_MSG ("class 0x%02X", (*id).bInterfaceClass);
 80139e0:	480a      	ldr	r0, [pc, #40]	; (8013a0c <USBH_HID_USR_Configuration_DescAvailable+0x30>)
 80139e2:	7949      	ldrb	r1, [r1, #5]
 80139e4:	f7fe f916 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  if((*id).bInterfaceClass  == 0x08)
 80139e8:	7963      	ldrb	r3, [r4, #5]
 80139ea:	2b08      	cmp	r3, #8
 80139ec:	d101      	bne.n	80139f2 <USBH_HID_USR_Configuration_DescAvailable+0x16>
  {
    DEBUG_MSG ((char*)MSG_MSC_CLASS);
 80139ee:	4808      	ldr	r0, [pc, #32]	; (8013a10 <USBH_HID_USR_Configuration_DescAvailable+0x34>)
 80139f0:	e006      	b.n	8013a00 <USBH_HID_USR_Configuration_DescAvailable+0x24>
  }
  else if((*id).bInterfaceClass  == 0x03)
 80139f2:	2b03      	cmp	r3, #3
 80139f4:	d101      	bne.n	80139fa <USBH_HID_USR_Configuration_DescAvailable+0x1e>
  {
	  DEBUG_MSG ((char*)MSG_HID_CLASS);
 80139f6:	4807      	ldr	r0, [pc, #28]	; (8013a14 <USBH_HID_USR_Configuration_DescAvailable+0x38>)
 80139f8:	e002      	b.n	8013a00 <USBH_HID_USR_Configuration_DescAvailable+0x24>

  }
  else if((*id).bInterfaceClass  == 0x01)
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d104      	bne.n	8013a08 <USBH_HID_USR_Configuration_DescAvailable+0x2c>
  {
	  DEBUG_MSG ((char*)MSG_MIDI_CLASS);
 80139fe:	4806      	ldr	r0, [pc, #24]	; (8013a18 <USBH_HID_USR_Configuration_DescAvailable+0x3c>)

  }
}
 8013a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  DEBUG_MSG ((char*)MSG_HID_CLASS);

  }
  else if((*id).bInterfaceClass  == 0x01)
  {
	  DEBUG_MSG ((char*)MSG_MIDI_CLASS);
 8013a04:	f7fe b906 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a08:	bd10      	pop	{r4, pc}
 8013a0a:	bf00      	nop
 8013a0c:	0801c69f 	.word	0x0801c69f
 8013a10:	0801c448 	.word	0x0801c448
 8013a14:	0801c415 	.word	0x0801c415
 8013a18:	0801c3fc 	.word	0x0801c3fc

08013a1c <USBH_HID_USR_DeviceAddressAssigned>:
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_DeviceAddressAssigned(void)
{
	  DEBUG_MSG ("addr assigned");
 8013a1c:	4801      	ldr	r0, [pc, #4]	; (8013a24 <USBH_HID_USR_DeviceAddressAssigned+0x8>)
 8013a1e:	f7fe b8f9 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a22:	bf00      	nop
 8013a24:	0801c6ac 	.word	0x0801c6ac

08013a28 <USBH_HID_USR_DeviceSpeedDetected>:
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_HID_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
  if(DeviceSpeed == HPRT0_PRTSPD_HIGH_SPEED)
 8013a28:	b908      	cbnz	r0, 8013a2e <USBH_HID_USR_DeviceSpeedDetected+0x6>
  {
    DEBUG_MSG ((char*)MSG_DEV_HIGHSPEED);
 8013a2a:	4806      	ldr	r0, [pc, #24]	; (8013a44 <USBH_HID_USR_DeviceSpeedDetected+0x1c>)
 8013a2c:	e007      	b.n	8013a3e <USBH_HID_USR_DeviceSpeedDetected+0x16>
  }
  else if(DeviceSpeed == HPRT0_PRTSPD_FULL_SPEED)
 8013a2e:	2801      	cmp	r0, #1
 8013a30:	d101      	bne.n	8013a36 <USBH_HID_USR_DeviceSpeedDetected+0xe>
  {
    DEBUG_MSG ((char*)MSG_DEV_FULLSPEED);
 8013a32:	4805      	ldr	r0, [pc, #20]	; (8013a48 <USBH_HID_USR_DeviceSpeedDetected+0x20>)
 8013a34:	e003      	b.n	8013a3e <USBH_HID_USR_DeviceSpeedDetected+0x16>
  }
  else if(DeviceSpeed == HPRT0_PRTSPD_LOW_SPEED)
 8013a36:	2802      	cmp	r0, #2
  {
    DEBUG_MSG ((char*)MSG_DEV_LOWSPEED);
 8013a38:	bf0c      	ite	eq
 8013a3a:	4804      	ldreq	r0, [pc, #16]	; (8013a4c <USBH_HID_USR_DeviceSpeedDetected+0x24>)
  }
  else
  {
    DEBUG_MSG ((char*)MSG_DEV_ERROR);
 8013a3c:	4804      	ldrne	r0, [pc, #16]	; (8013a50 <USBH_HID_USR_DeviceSpeedDetected+0x28>)
 8013a3e:	f7fe b8e9 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a42:	bf00      	nop
 8013a44:	0801c469 	.word	0x0801c469
 8013a48:	0801c59c 	.word	0x0801c59c
 8013a4c:	0801c841 	.word	0x0801c841
 8013a50:	0801c8a8 	.word	0x0801c8a8

08013a54 <USBH_HID_USR_OverCurrentDetected>:
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_OverCurrentDetected (void)
{
  DEBUG_MSG ("Overcurrent detected.\n");
 8013a54:	4801      	ldr	r0, [pc, #4]	; (8013a5c <USBH_HID_USR_OverCurrentDetected+0x8>)
 8013a56:	f7fe b8dd 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a5a:	bf00      	nop
 8013a5c:	0801c6ba 	.word	0x0801c6ba

08013a60 <USBH_HID_USR_ResetDevice>:
 * @retval None
 */
static void USBH_HID_USR_ResetDevice(void)
{
  /* Users can do their application actions here for the USB-Reset */
	DEBUG_MSG ("Reseted");
 8013a60:	4801      	ldr	r0, [pc, #4]	; (8013a68 <USBH_HID_USR_ResetDevice+0x8>)
 8013a62:	f7fe b8d7 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a66:	bf00      	nop
 8013a68:	0801c6d1 	.word	0x0801c6d1

08013a6c <USBH_HID_USR_DeviceAttached>:
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_DeviceAttached(void)
{
  DEBUG_MSG ((char*)MSG_DEV_ATTACHED);
 8013a6c:	4801      	ldr	r0, [pc, #4]	; (8013a74 <USBH_HID_USR_DeviceAttached+0x8>)
 8013a6e:	f7fe b8d1 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013a72:	bf00      	nop
 8013a74:	0801c5d1 	.word	0x0801c5d1

08013a78 <USBH_HID_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_HID_USR_Device_DescAvailable(void *DeviceDesc)
{
 8013a78:	b510      	push	{r4, lr}
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	b08e      	sub	sp, #56	; 0x38
  uint8_t temp[50];
  USBH_DevDesc_TypeDef *hs;
  hs = DeviceDesc;


  sprintf((char *)temp , "VID : %04Xh\n" , (uint32_t)(*hs).idVendor);
 8013a7e:	8922      	ldrh	r2, [r4, #8]
 8013a80:	4908      	ldr	r1, [pc, #32]	; (8013aa4 <USBH_HID_USR_Device_DescAvailable+0x2c>)
 8013a82:	a801      	add	r0, sp, #4
 8013a84:	f001 fdec 	bl	8015660 <sprintf>
  DEBUG_MSG((void *)temp);
 8013a88:	a801      	add	r0, sp, #4
 8013a8a:	f7fe f8c3 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>


  sprintf((char *)temp , "PID : %04Xh\n" , (uint32_t)(*hs).idProduct);
 8013a8e:	a801      	add	r0, sp, #4
 8013a90:	4905      	ldr	r1, [pc, #20]	; (8013aa8 <USBH_HID_USR_Device_DescAvailable+0x30>)
 8013a92:	8962      	ldrh	r2, [r4, #10]
 8013a94:	f001 fde4 	bl	8015660 <sprintf>
  DEBUG_MSG((void *)temp);
 8013a98:	a801      	add	r0, sp, #4
 8013a9a:	f7fe f8bb 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
}
 8013a9e:	b00e      	add	sp, #56	; 0x38
 8013aa0:	bd10      	pop	{r4, pc}
 8013aa2:	bf00      	nop
 8013aa4:	0801c6d9 	.word	0x0801c6d9
 8013aa8:	0801c6e6 	.word	0x0801c6e6

08013aac <USBH_HID_USR_DeviceDisconnected>:
 *         Device disconnect event
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_DeviceDisconnected (void)
{
 8013aac:	b508      	push	{r3, lr}
  MIOS32_USB_MIDI_ChangeConnectionState(1, 0);
 8013aae:	2001      	movs	r0, #1
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	f000 fc99 	bl	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>
  DEBUG_MSG ((char*)MSG_DEV_DISCONNECTED);
 8013ab6:	4802      	ldr	r0, [pc, #8]	; (8013ac0 <USBH_HID_USR_DeviceDisconnected+0x14>)
}
 8013ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @retval None
 */
static void USBH_HID_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(1, 0);
  DEBUG_MSG ((char*)MSG_DEV_DISCONNECTED);
 8013abc:	f7fe b8aa 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013ac0:	0801c5ba 	.word	0x0801c5ba

08013ac4 <USBH_USR_DeviceDisconnected>:
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(0, 0);
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	4601      	mov	r1, r0
 8013ac8:	f000 bc8e 	b.w	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013acc <USBD_USR_DeviceDisconnected>:
* @retval Staus
*/
static void USBD_USR_DeviceDisconnected (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0, 0);
 8013acc:	2000      	movs	r0, #0
 8013ace:	4601      	mov	r1, r0
 8013ad0:	f000 bc8a 	b.w	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013ad4 <USBD_USR_DeviceConfigured>:
* @retval Staus
*/
static void USBD_USR_DeviceConfigured (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0, 1);
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	f000 bc86 	b.w	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013adc <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013adc:	b510      	push	{r4, lr}
  const u8 serial_number_dummy_str[] = "42";
 8013ade:	4b0b      	ldr	r3, [pc, #44]	; (8013b0c <USBD_USR_SerialStrDescriptor+0x30>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013ae0:	b08c      	sub	sp, #48	; 0x30
  const u8 serial_number_dummy_str[] = "42";
 8013ae2:	7898      	ldrb	r0, [r3, #2]
 8013ae4:	881a      	ldrh	r2, [r3, #0]
 8013ae6:	f88d 0006 	strb.w	r0, [sp, #6]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 8013aea:	a802      	add	r0, sp, #8
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013aec:	460c      	mov	r4, r1
  const u8 serial_number_dummy_str[] = "42";
 8013aee:	f8ad 2004 	strh.w	r2, [sp, #4]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 8013af2:	f7fe ff23 	bl	801293c <MIOS32_SYS_SerialNumberGet>
 8013af6:	2800      	cmp	r0, #0
    USBD_GetString ((uint8_t*)serial_number_str, USBD_StrDesc, length);
 8013af8:	bfac      	ite	ge
 8013afa:	a802      	addge	r0, sp, #8
  } else {
    USBD_GetString ((uint8_t*)serial_number_dummy_str, USBD_StrDesc, length);
 8013afc:	a801      	addlt	r0, sp, #4
 8013afe:	4904      	ldr	r1, [pc, #16]	; (8013b10 <USBD_USR_SerialStrDescriptor+0x34>)
 8013b00:	4622      	mov	r2, r4
 8013b02:	f002 fd19 	bl	8016538 <USBD_GetString>
  }

  return USBD_StrDesc;
}
 8013b06:	4802      	ldr	r0, [pc, #8]	; (8013b10 <USBD_USR_SerialStrDescriptor+0x34>)
 8013b08:	b00c      	add	sp, #48	; 0x30
 8013b0a:	bd10      	pop	{r4, pc}
 8013b0c:	0801c6f3 	.word	0x0801c6f3
 8013b10:	20004dfc 	.word	0x20004dfc

08013b14 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 8013b16:	4c14      	ldr	r4, [pc, #80]	; (8013b68 <USBD_USR_ProductStrDescriptor+0x54>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013b18:	460a      	mov	r2, r1
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 8013b1a:	6820      	ldr	r0, [r4, #0]
 8013b1c:	6861      	ldr	r1, [r4, #4]
 8013b1e:	466b      	mov	r3, sp
 8013b20:	c303      	stmia	r3!, {r0, r1}
 8013b22:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8013b26:	7921      	ldrb	r1, [r4, #4]
 8013b28:	6018      	str	r0, [r3, #0]
 8013b2a:	7119      	strb	r1, [r3, #4]
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8013b2c:	2300      	movs	r3, #0
*         return the product string descriptor
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
 8013b2e:	480f      	ldr	r0, [pc, #60]	; (8013b6c <USBD_USR_ProductStrDescriptor+0x58>)
 8013b30:	1819      	adds	r1, r3, r0
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8013b32:	7808      	ldrb	r0, [r1, #0]
 8013b34:	b158      	cbz	r0, 8013b4e <USBD_USR_ProductStrDescriptor+0x3a>
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
 8013b36:	3820      	subs	r0, #32
      valid_str = 0;
 8013b38:	285f      	cmp	r0, #95	; 0x5f
 8013b3a:	bf8c      	ite	hi
 8013b3c:	2000      	movhi	r0, #0
 8013b3e:	2001      	movls	r0, #1
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8013b40:	3301      	adds	r3, #1
 8013b42:	2b20      	cmp	r3, #32
 8013b44:	d006      	beq.n	8013b54 <USBD_USR_ProductStrDescriptor+0x40>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d1f1      	bne.n	8013b2e <USBD_USR_ProductStrDescriptor+0x1a>
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
  int len;

  // buffer[0] and [1] initialized below
  // check for user defined product string
  char *product_str_ptr = (char *)product_str;
 8013b4a:	4668      	mov	r0, sp
 8013b4c:	e005      	b.n	8013b5a <USBD_USR_ProductStrDescriptor+0x46>
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
      valid_str = 0;
  }
  if( valid_str && len )
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d0fb      	beq.n	8013b4a <USBD_USR_ProductStrDescriptor+0x36>
 8013b52:	e001      	b.n	8013b58 <USBD_USR_ProductStrDescriptor+0x44>
 8013b54:	2800      	cmp	r0, #0
 8013b56:	d0f8      	beq.n	8013b4a <USBD_USR_ProductStrDescriptor+0x36>
    product_str_ptr = product_str_user;
 8013b58:	4804      	ldr	r0, [pc, #16]	; (8013b6c <USBD_USR_ProductStrDescriptor+0x58>)
#endif

  USBD_GetString ((uint8_t*)product_str_ptr, USBD_StrDesc, length);
 8013b5a:	4905      	ldr	r1, [pc, #20]	; (8013b70 <USBD_USR_ProductStrDescriptor+0x5c>)
 8013b5c:	f002 fcec 	bl	8016538 <USBD_GetString>

  return USBD_StrDesc;
}
 8013b60:	4803      	ldr	r0, [pc, #12]	; (8013b70 <USBD_USR_ProductStrDescriptor+0x5c>)
 8013b62:	b004      	add	sp, #16
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	bf00      	nop
 8013b68:	0801c6f6 	.word	0x0801c6f6
 8013b6c:	08003fe0 	.word	0x08003fe0
 8013b70:	20004dfc 	.word	0x20004dfc

08013b74 <USBD_USR_InterfaceStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013b74:	f7ff bfce 	b.w	8013b14 <USBD_USR_ProductStrDescriptor>

08013b78 <USBD_USR_ConfigStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013b78:	f7ff bfcc 	b.w	8013b14 <USBD_USR_ProductStrDescriptor>

08013b7c <MIOS32_USB_CLASS_GetUsrStrDesc>:
}


static uint8_t *MIOS32_USB_CLASS_GetUsrStrDesc(uint8_t speed, uint8_t index, uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	f7ff bfc9 	b.w	8013b14 <USBD_USR_ProductStrDescriptor>
	...

08013b84 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013b86:	4c08      	ldr	r4, [pc, #32]	; (8013ba8 <USBD_USR_ManufacturerStrDescriptor+0x24>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013b88:	460a      	mov	r2, r1
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013b8a:	6820      	ldr	r0, [r4, #0]
 8013b8c:	6861      	ldr	r1, [r4, #4]
 8013b8e:	ab01      	add	r3, sp, #4
 8013b90:	c303      	stmia	r3!, {r0, r1}
 8013b92:	68a0      	ldr	r0, [r4, #8]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 8013b94:	4c05      	ldr	r4, [pc, #20]	; (8013bac <USBD_USR_ManufacturerStrDescriptor+0x28>)
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013b96:	6018      	str	r0, [r3, #0]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 8013b98:	4621      	mov	r1, r4
 8013b9a:	a801      	add	r0, sp, #4
 8013b9c:	f002 fccc 	bl	8016538 <USBD_GetString>
  return USBD_StrDesc;
}
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	b004      	add	sp, #16
 8013ba4:	bd10      	pop	{r4, pc}
 8013ba6:	bf00      	nop
 8013ba8:	0801c703 	.word	0x0801c703
 8013bac:	20004dfc 	.word	0x20004dfc

08013bb0 <MIOS32_USB_CLASS_DataOut>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 8013bb0:	2902      	cmp	r1, #2
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
 8013bb2:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 8013bb4:	d103      	bne.n	8013bbe <MIOS32_USB_CLASS_DataOut+0xe>
    MIOS32_USB_MIDI_EP2_OUT_Callback(epnum, 0); // parameters not relevant for STM32F4
 8013bb6:	4608      	mov	r0, r1
 8013bb8:	2100      	movs	r1, #0
 8013bba:	f000 fddd 	bl	8014778 <MIOS32_USB_MIDI_EP2_OUT_Callback>
#endif

  return USBD_OK;
}
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	bd08      	pop	{r3, pc}

08013bc2 <MIOS32_USB_CLASS_DataIn>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 8013bc2:	2901      	cmp	r1, #1
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
 8013bc4:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 8013bc6:	d103      	bne.n	8013bd0 <MIOS32_USB_CLASS_DataIn+0xe>
    MIOS32_USB_MIDI_EP1_IN_Callback(epnum, 0); // parameters not relevant for STM32F4
 8013bc8:	4608      	mov	r0, r1
 8013bca:	2100      	movs	r1, #0
 8013bcc:	f000 fdcc 	bl	8014768 <MIOS32_USB_MIDI_EP1_IN_Callback>
#endif
  
  return USBD_OK;
}
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	bd08      	pop	{r3, pc}

08013bd4 <MIOS32_USB_CLASS_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8013bd4:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 8013bd6:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8013bd8:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 8013bda:	f004 f92c 	bl	8017e36 <DCD_EP_Close>
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_IN_EP);
 8013bde:	4620      	mov	r0, r4
 8013be0:	2181      	movs	r1, #129	; 0x81
 8013be2:	f004 f928 	bl	8017e36 <DCD_EP_Close>
#endif
  
  return USBD_OK;
}
 8013be6:	2000      	movs	r0, #0
 8013be8:	bd10      	pop	{r4, pc}
	...

08013bec <MIOS32_USB_CLASS_Init>:
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013bec:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8013bee:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013bf0:	2240      	movs	r2, #64	; 0x40
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8013bf2:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	f004 f8fd 	bl	8017df4 <DCD_EP_Open>
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_IN_EP, MIOS32_USB_MIDI_DATA_IN_SIZE, USB_OTG_EP_BULK);
 8013bfa:	2181      	movs	r1, #129	; 0x81
 8013bfc:	2240      	movs	r2, #64	; 0x40
 8013bfe:	2302      	movs	r3, #2
 8013c00:	4620      	mov	r0, r4
 8013c02:	f004 f8f7 	bl	8017df4 <DCD_EP_Open>

  // configuration for next transfer
  DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 8013c06:	2102      	movs	r1, #2
 8013c08:	4a03      	ldr	r2, [pc, #12]	; (8013c18 <MIOS32_USB_CLASS_Init+0x2c>)
 8013c0a:	4804      	ldr	r0, [pc, #16]	; (8013c1c <MIOS32_USB_CLASS_Init+0x30>)
 8013c0c:	2340      	movs	r3, #64	; 0x40
 8013c0e:	f004 f92b 	bl	8017e68 <DCD_EP_PrepareRx>
		   (uint8_t*)(USB_FS_rx_buffer),
		   MIOS32_USB_MIDI_DATA_OUT_SIZE);
#endif

  return USBD_OK;
}
 8013c12:	2000      	movs	r0, #0
 8013c14:	bd10      	pop	{r4, pc}
 8013c16:	bf00      	nop
 8013c18:	200035e4 	.word	0x200035e4
 8013c1c:	200036cc 	.word	0x200036cc

08013c20 <USBH_ClassRequest>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB Set Protocol request
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013c20:	b508      	push	{r3, lr}
	USBH_Status status=USBH_NOT_SUPPORTED;
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013c22:	7ac3      	ldrb	r3, [r0, #11]
 8013c24:	2b01      	cmp	r3, #1
#ifndef MIOS32_DONT_USE_USB_HOST
		class_status = &USB_FS_Host_Class;
 8013c26:	bf0c      	ite	eq
 8013c28:	4b07      	ldreq	r3, [pc, #28]	; (8013c48 <USBH_ClassRequest+0x28>)
#else
		return status; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		class_status = &USB_HS_Host_Class;
 8013c2a:	4b08      	ldrne	r3, [pc, #32]	; (8013c4c <USBH_ClassRequest+0x2c>)
 8013c2c:	781a      	ldrb	r2, [r3, #0]
#else
		return status; //
#endif
	}
	switch(*class_status){
 8013c2e:	2a01      	cmp	r2, #1
 8013c30:	d003      	beq.n	8013c3a <USBH_ClassRequest+0x1a>
 8013c32:	2a02      	cmp	r2, #2
 8013c34:	d105      	bne.n	8013c42 <USBH_ClassRequest+0x22>
	case USBH_IS_MIDI:
		status = MIOS32_MIDI_USBH_Callbacks.Requests(pdev, phost);
		break;
	case USBH_IS_HID:
		status = MIOS32_HID_USBH_Callbacks.Requests(pdev, phost);
 8013c36:	4b06      	ldr	r3, [pc, #24]	; (8013c50 <USBH_ClassRequest+0x30>)
 8013c38:	e000      	b.n	8013c3c <USBH_ClassRequest+0x1c>
		return status; //
#endif
	}
	switch(*class_status){
	case USBH_IS_MIDI:
		status = MIOS32_MIDI_USBH_Callbacks.Requests(pdev, phost);
 8013c3a:	4b06      	ldr	r3, [pc, #24]	; (8013c54 <USBH_ClassRequest+0x34>)
		break;
	case USBH_IS_HID:
		status = MIOS32_HID_USBH_Callbacks.Requests(pdev, phost);
 8013c3c:	689a      	ldr	r2, [r3, #8]
 8013c3e:	4790      	blx	r2
		break;
 8013c40:	bd08      	pop	{r3, pc}
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB Set Protocol request
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
	USBH_Status status=USBH_NOT_SUPPORTED;
 8013c42:	2003      	movs	r0, #3
		break;
	default:
		break;
	}
  return status;
}
 8013c44:	bd08      	pop	{r3, pc}
 8013c46:	bf00      	nop
 8013c48:	200035e0 	.word	0x200035e0
 8013c4c:	200036c8 	.word	0x200036c8
 8013c50:	0801c904 	.word	0x0801c904
 8013c54:	0801c8dc 	.word	0x0801c8dc

08013c58 <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013c58:	b508      	push	{r3, lr}
	USBH_Status status=USBH_NOT_SUPPORTED;
	USBH_Class_Status* class_status;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013c5a:	7ac3      	ldrb	r3, [r0, #11]
 8013c5c:	2b01      	cmp	r3, #1
#ifndef MIOS32_DONT_USE_USB_HOST
		class_status = &USB_FS_Host_Class;
 8013c5e:	bf0c      	ite	eq
 8013c60:	4b07      	ldreq	r3, [pc, #28]	; (8013c80 <USBH_Handle+0x28>)
#else
		return status; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		class_status = &USB_HS_Host_Class;
 8013c62:	4b08      	ldrne	r3, [pc, #32]	; (8013c84 <USBH_Handle+0x2c>)
 8013c64:	781a      	ldrb	r2, [r3, #0]
#else
		return status; //
#endif
	}
	switch(*class_status){
 8013c66:	2a01      	cmp	r2, #1
 8013c68:	d003      	beq.n	8013c72 <USBH_Handle+0x1a>
 8013c6a:	2a02      	cmp	r2, #2
 8013c6c:	d105      	bne.n	8013c7a <USBH_Handle+0x22>
	case USBH_IS_MIDI:
		status = MIOS32_MIDI_USBH_Callbacks.Machine(pdev, phost);
		break;
	case USBH_IS_HID:
		status = MIOS32_HID_USBH_Callbacks.Machine(pdev, phost);
 8013c6e:	4b06      	ldr	r3, [pc, #24]	; (8013c88 <USBH_Handle+0x30>)
 8013c70:	e000      	b.n	8013c74 <USBH_Handle+0x1c>
		return status; //
#endif
	}
	switch(*class_status){
	case USBH_IS_MIDI:
		status = MIOS32_MIDI_USBH_Callbacks.Machine(pdev, phost);
 8013c72:	4b06      	ldr	r3, [pc, #24]	; (8013c8c <USBH_Handle+0x34>)
		break;
	case USBH_IS_HID:
		status = MIOS32_HID_USBH_Callbacks.Machine(pdev, phost);
 8013c74:	68da      	ldr	r2, [r3, #12]
 8013c76:	4790      	blx	r2
		break;
 8013c78:	bd08      	pop	{r3, pc}
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
	USBH_Status status=USBH_NOT_SUPPORTED;
 8013c7a:	2003      	movs	r0, #3
		break;
	default:
		break;
	}
  return status;
}
 8013c7c:	bd08      	pop	{r3, pc}
 8013c7e:	bf00      	nop
 8013c80:	200035e0 	.word	0x200035e0
 8013c84:	200036c8 	.word	0x200036c8
 8013c88:	0801c904 	.word	0x0801c904
 8013c8c:	0801c8dc 	.word	0x0801c8dc

08013c90 <USBH_HID_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_HID_USR_Init(void)
{
 8013c90:	b508      	push	{r3, lr}
  static uint8_t startup = 0;

  if(startup == 0 )
 8013c92:	4b08      	ldr	r3, [pc, #32]	; (8013cb4 <USBH_HID_USR_Init+0x24>)
 8013c94:	781a      	ldrb	r2, [r3, #0]
 8013c96:	b962      	cbnz	r2, 8013cb2 <USBH_HID_USR_Init+0x22>
  {
    startup = 1;
 8013c98:	2001      	movs	r0, #1
 8013c9a:	7018      	strb	r0, [r3, #0]
#ifdef USE_USB_OTG_HS
    DEBUG_MSG(" USB OTG HS HID Host FS Mode");
 8013c9c:	4806      	ldr	r0, [pc, #24]	; (8013cb8 <USBH_HID_USR_Init+0x28>)
 8013c9e:	f7fd ffb9 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("> USB Host library started.\n");
 8013ca2:	4806      	ldr	r0, [pc, #24]	; (8013cbc <USBH_HID_USR_Init+0x2c>)
 8013ca4:	f7fd ffb6 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("  USB Host Library v2.1.0" );
 8013ca8:	4805      	ldr	r0, [pc, #20]	; (8013cc0 <USBH_HID_USR_Init+0x30>)
#else
    DEBUG_MSG(" USB OTG HS not used");
#endif

  }
}
 8013caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    startup = 1;
#ifdef USE_USB_OTG_HS
    DEBUG_MSG(" USB OTG HS HID Host FS Mode");
    DEBUG_MSG("> USB Host library started.\n");
    DEBUG_MSG("  USB Host Library v2.1.0" );
 8013cae:	f7fd bfb1 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8013cb2:	bd08      	pop	{r3, pc}
 8013cb4:	20000325 	.word	0x20000325
 8013cb8:	0801c70f 	.word	0x0801c70f
 8013cbc:	0801c72c 	.word	0x0801c72c
 8013cc0:	0801c749 	.word	0x0801c749

08013cc4 <USB_OTG_BSP_Init>:
#ifndef MIOS32_DONT_USE_USB_HS_HOST
static u8 USB_OTG_HS_BSP_Initialised = 0;
#endif

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8013cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  
  GPIO_InitTypeDef GPIO_InitStructure;

  if(USB_OTG_FS_BSP_Initialised == 0){
 8013cc6:	4b39      	ldr	r3, [pc, #228]	; (8013dac <USB_OTG_BSP_Init+0xe8>)
 8013cc8:	781d      	ldrb	r5, [r3, #0]
 8013cca:	2d00      	cmp	r5, #0
 8013ccc:	d148      	bne.n	8013d60 <USB_OTG_BSP_Init+0x9c>
    USB_OTG_FS_BSP_Initialised =1;
 8013cce:	2401      	movs	r4, #1
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	4621      	mov	r1, r4
{
  
  GPIO_InitTypeDef GPIO_InitStructure;

  if(USB_OTG_FS_BSP_Initialised == 0){
    USB_OTG_FS_BSP_Initialised =1;
 8013cd4:	701c      	strb	r4, [r3, #0]
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013cd6:	f001 fe4d 	bl	8015974 <RCC_AHB1PeriphClockCmd>

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 8013cda:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8013cde:	9000      	str	r0, [sp, #0]

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013ce0:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013ce2:	2702      	movs	r7, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013ce4:	4832      	ldr	r0, [pc, #200]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013ce6:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013cea:	4669      	mov	r1, sp

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013cec:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013cf0:	f88d 5006 	strb.w	r5, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013cf4:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013cf8:	f001 fd40 	bl	801577c <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8013cfc:	482c      	ldr	r0, [pc, #176]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
 8013cfe:	2108      	movs	r1, #8
 8013d00:	220a      	movs	r2, #10
 8013d02:	f001 fd95 	bl	8015830 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 8013d06:	482a      	ldr	r0, [pc, #168]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
 8013d08:	2109      	movs	r1, #9
 8013d0a:	220a      	movs	r2, #10
 8013d0c:	f001 fd90 	bl	8015830 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 8013d10:	4827      	ldr	r0, [pc, #156]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
 8013d12:	210b      	movs	r1, #11
 8013d14:	220a      	movs	r2, #10
 8013d16:	f001 fd8b 	bl	8015830 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8013d1a:	220a      	movs	r2, #10
 8013d1c:	4824      	ldr	r0, [pc, #144]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
 8013d1e:	210c      	movs	r1, #12
 8013d20:	f001 fd86 	bl	8015830 <GPIO_PinAFConfig>

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8013d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013d28:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013d2a:	4821      	ldr	r0, [pc, #132]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013d2c:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013d30:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8013d32:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013d36:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013d3a:	f001 fd1f 	bl	801577c <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 8013d3e:	210a      	movs	r1, #10
 8013d40:	460a      	mov	r2, r1
 8013d42:	481b      	ldr	r0, [pc, #108]	; (8013db0 <USB_OTG_BSP_Init+0xec>)
 8013d44:	f001 fd74 	bl	8015830 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8013d48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013d4c:	4621      	mov	r1, r4
 8013d4e:	f001 fe35 	bl	80159bc <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 8013d52:	2080      	movs	r0, #128	; 0x80
 8013d54:	4621      	mov	r1, r4
 8013d56:	f001 fe19 	bl	801598c <RCC_AHB2PeriphClockCmd>

  EXTI_ClearITPendingBit(EXTI_Line0);
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f001 fd08 	bl	8015770 <EXTI_ClearITPendingBit>
  }

#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(USB_OTG_HS_BSP_Initialised == 0){
 8013d60:	4b14      	ldr	r3, [pc, #80]	; (8013db4 <USB_OTG_BSP_Init+0xf0>)
 8013d62:	781a      	ldrb	r2, [r3, #0]
 8013d64:	bb0a      	cbnz	r2, 8013daa <USB_OTG_BSP_Init+0xe6>
    USB_OTG_HS_BSP_Initialised =1;
 8013d66:	2401      	movs	r4, #1
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8013d68:	2002      	movs	r0, #2
 8013d6a:	4621      	mov	r1, r4
  EXTI_ClearITPendingBit(EXTI_Line0);
  }

#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(USB_OTG_HS_BSP_Initialised == 0){
    USB_OTG_HS_BSP_Initialised =1;
 8013d6c:	701c      	strb	r4, [r3, #0]
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8013d6e:	f001 fe01 	bl	8015974 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_14 |
 8013d72:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  GPIO_Pin_15;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013d76:	2103      	movs	r1, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013d78:	2302      	movs	r3, #2
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(USB_OTG_HS_BSP_Initialised == 0){
    USB_OTG_HS_BSP_Initialised =1;
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
  
  GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_14 |
 8013d7a:	9000      	str	r0, [sp, #0]
  GPIO_Pin_15;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013d7c:	f88d 1005 	strb.w	r1, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8013d80:	480d      	ldr	r0, [pc, #52]	; (8013db8 <USB_OTG_BSP_Init+0xf4>)
  
  GPIO_InitStructure.GPIO_Pin =   GPIO_Pin_14 |
  GPIO_Pin_15;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013d82:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8013d86:	4669      	mov	r1, sp
 8013d88:	f001 fcf8 	bl	801577c <GPIO_Init>


  GPIO_PinAFConfig(GPIOB,GPIO_PinSource14,GPIO_AF_OTG2_FS) ;
 8013d8c:	480a      	ldr	r0, [pc, #40]	; (8013db8 <USB_OTG_BSP_Init+0xf4>)
 8013d8e:	210e      	movs	r1, #14
 8013d90:	220c      	movs	r2, #12
 8013d92:	f001 fd4d 	bl	8015830 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB,GPIO_PinSource15,GPIO_AF_OTG2_FS) ;
 8013d96:	4808      	ldr	r0, [pc, #32]	; (8013db8 <USB_OTG_BSP_Init+0xf4>)
 8013d98:	210f      	movs	r1, #15
 8013d9a:	220c      	movs	r2, #12
 8013d9c:	f001 fd48 	bl	8015830 <GPIO_PinAFConfig>
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_OTG_HS, ENABLE) ;
 8013da0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8013da4:	4621      	mov	r1, r4
 8013da6:	f001 fde5 	bl	8015974 <RCC_AHB1PeriphClockCmd>
    
  }
#endif

}
 8013daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013dac:	20000326 	.word	0x20000326
 8013db0:	40020000 	.word	0x40020000
 8013db4:	20000324 	.word	0x20000324
 8013db8:	40020400 	.word	0x40020400

08013dbc <USB_OTG_BSP_EnableInterrupt>:
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
  MIOS32_IRQ_Install(OTG_FS_IRQn, MIOS32_IRQ_USB_PRIORITY);
 8013dbc:	2043      	movs	r0, #67	; 0x43
 8013dbe:	2108      	movs	r1, #8
 8013dc0:	f7fe bed4 	b.w	8012b6c <MIOS32_IRQ_Install>

08013dc4 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_FS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8013dc4:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if( USB_OTG_IsHostMode(&USB_OTG_FS_dev) ) {
 8013dc6:	4808      	ldr	r0, [pc, #32]	; (8013de8 <OTG_FS_IRQHandler+0x24>)
 8013dc8:	f003 fb2e 	bl	8017428 <USB_OTG_IsHostMode>
 8013dcc:	b118      	cbz	r0, 8013dd6 <OTG_FS_IRQHandler+0x12>
    USBH_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8013dce:	4806      	ldr	r0, [pc, #24]	; (8013de8 <OTG_FS_IRQHandler+0x24>)
 8013dd0:	f005 fd94 	bl	80198fc <USBH_OTG_ISR_Handler>
 8013dd4:	e002      	b.n	8013ddc <OTG_FS_IRQHandler+0x18>
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8013dd6:	4804      	ldr	r0, [pc, #16]	; (8013de8 <OTG_FS_IRQHandler+0x24>)
 8013dd8:	f004 f8c4 	bl	8017f64 <USBD_OTG_ISR_Handler>
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8013ddc:	4802      	ldr	r0, [pc, #8]	; (8013de8 <OTG_FS_IRQHandler+0x24>)
#else
  USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
#endif
}
 8013dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBH_OTG_ISR_Handler(&USB_OTG_FS_dev);
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8013de2:	f005 be2f 	b.w	8019a44 <STM32_USBO_OTG_ISR_Handler>
 8013de6:	bf00      	nop
 8013de8:	200036cc 	.word	0x200036cc

08013dec <OTG_HS_IRQHandler>:
  * @retval None
  */
void OTG_HS_IRQHandler(void)
{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  USBH_OTG_ISR_Handler(&USB_OTG_HS_dev);
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <OTG_HS_IRQHandler+0x8>)
 8013dee:	f005 bd85 	b.w	80198fc <USBH_OTG_ISR_Handler>
 8013df2:	bf00      	nop
 8013df4:	20004160 	.word	0x20004160

08013df8 <USB_OTG_BSP_uDelay>:
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013df8:	b280      	uxth	r0, r0
 8013dfa:	f7ff bd05 	b.w	8013808 <MIOS32_DELAY_Wait_uS>

08013dfe <USB_OTG_BSP_mDelay>:
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);
 8013dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013e02:	4358      	muls	r0, r3
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013e04:	b280      	uxth	r0, r0
 8013e06:	f7ff bcff 	b.w	8013808 <MIOS32_DELAY_Wait_uS>
	...

08013e0c <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8013e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013e0e:	7ac4      	ldrb	r4, [r0, #11]
 8013e10:	2c01      	cmp	r4, #1
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8013e12:	4605      	mov	r5, r0
#ifndef MIOS32_DONT_USE_USB_HOST
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013e14:	d11a      	bne.n	8013e4c <USB_OTG_BSP_ConfigVBUS+0x40>
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8013e16:	2004      	movs	r0, #4
 8013e18:	4621      	mov	r1, r4
 8013e1a:	f001 fdab 	bl	8015974 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013e1e:	2000      	movs	r0, #0
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013e20:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013e22:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013e26:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013e2a:	4669      	mov	r1, sp
 8013e2c:	4817      	ldr	r0, [pc, #92]	; (8013e8c <USB_OTG_BSP_ConfigVBUS+0x80>)
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013e2e:	f88d 3005 	strb.w	r3, [sp, #5]
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8013e32:	9400      	str	r4, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013e34:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013e38:	f001 fca0 	bl	801577c <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013e3c:	4813      	ldr	r0, [pc, #76]	; (8013e8c <USB_OTG_BSP_ConfigVBUS+0x80>)
 8013e3e:	4621      	mov	r1, r4
 8013e40:	f001 fcf2 	bl	8015828 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013e44:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8013e48:	f7ff fcde 	bl	8013808 <MIOS32_DELAY_Wait_uS>
  
  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
  }
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
 8013e4c:	7aec      	ldrb	r4, [r5, #11]
 8013e4e:	b9e4      	cbnz	r4, 8013e8a <USB_OTG_BSP_ConfigVBUS+0x7e>
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8013e50:	2004      	movs	r0, #4
 8013e52:	2101      	movs	r1, #1
 8013e54:	f001 fd8e 	bl	8015974 <RCC_AHB1PeriphClockCmd>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013e58:	2103      	movs	r1, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013e5a:	2201      	movs	r2, #1
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8013e5c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013e60:	f88d 1005 	strb.w	r1, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013e64:	4809      	ldr	r0, [pc, #36]	; (8013e8c <USB_OTG_BSP_ConfigVBUS+0x80>)

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013e66:	f88d 2004 	strb.w	r2, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013e6a:	4669      	mov	r1, sp
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8013e6c:	9500      	str	r5, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013e6e:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013e72:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013e76:	f001 fc81 	bl	801577c <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8013e7a:	4804      	ldr	r0, [pc, #16]	; (8013e8c <USB_OTG_BSP_ConfigVBUS+0x80>)
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	f001 fcd3 	bl	8015828 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013e82:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8013e86:	f7ff fcbf 	bl	8013808 <MIOS32_DELAY_Wait_uS>

  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilizing the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
  }
#endif

}
 8013e8a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013e8c:	40020800 	.word	0x40020800

08013e90 <USB_OTG_BSP_DriveVBUS>:
  * @param  state : VBUS states
  * @retval None
  */

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 8013e90:	b538      	push	{r3, r4, r5, lr}
 8013e92:	460c      	mov	r4, r1
#ifndef MIOS32_DONT_USE_USB_HOST
	  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013e94:	7ac1      	ldrb	r1, [r0, #11]
 8013e96:	2901      	cmp	r1, #1
  * @param  state : VBUS states
  * @retval None
  */

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 8013e98:	4605      	mov	r5, r0
#ifndef MIOS32_DONT_USE_USB_HOST
	  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8013e9a:	d106      	bne.n	8013eaa <USB_OTG_BSP_DriveVBUS+0x1a>
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013e9c:	480a      	ldr	r0, [pc, #40]	; (8013ec8 <USB_OTG_BSP_DriveVBUS+0x38>)
  
  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8013e9e:	b914      	cbnz	r4, 8013ea6 <USB_OTG_BSP_DriveVBUS+0x16>
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013ea0:	f001 fcc2 	bl	8015828 <GPIO_SetBits>
 8013ea4:	e001      	b.n	8013eaa <USB_OTG_BSP_DriveVBUS+0x1a>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 8013ea6:	f001 fcc1 	bl	801582c <GPIO_ResetBits>
  }
	  }
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
	  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
 8013eaa:	7aeb      	ldrb	r3, [r5, #11]
 8013eac:	b95b      	cbnz	r3, 8013ec6 <USB_OTG_BSP_DriveVBUS+0x36>
  if (0 == state)
  {
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8013eae:	4806      	ldr	r0, [pc, #24]	; (8013ec8 <USB_OTG_BSP_DriveVBUS+0x38>)
 8013eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  }
	  }
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
	  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
  if (0 == state)
 8013eb4:	b91c      	cbnz	r4, 8013ebe <USB_OTG_BSP_DriveVBUS+0x2e>
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_14);
  }
	  }
#endif
}
 8013eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HS_HOST
	  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID){
  if (0 == state)
  {
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8013eba:	f001 bcb5 	b.w	8015828 <GPIO_SetBits>
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_14);
  }
	  }
#endif
}
 8013ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    GPIO_SetBits(GPIOC, GPIO_Pin_14);
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 8013ec2:	f001 bcb3 	b.w	801582c <GPIO_ResetBits>
 8013ec6:	bd38      	pop	{r3, r4, r5, pc}
 8013ec8:	40020800 	.word	0x40020800

08013ecc <MIOS32_USB_IsInitialized>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_IsInitialized(void)
{
  // we assume that initialisation has been done when B-Session valid flag is set
  __IO USB_OTG_GREGS *GREGS = (USB_OTG_GREGS *)(USB_OTG_FS_BASE_ADDR + USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  return (GREGS->GOTGCTL & (1 << 19)) ? 1 : 0;
 8013ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8013ed0:	6818      	ldr	r0, [r3, #0]
}
 8013ed2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8013ed6:	4770      	bx	lr

08013ed8 <MIOS32_USB_ForceSingleUSB>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_ForceSingleUSB(void)
{
  u8 *single_usb_confirm = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB_CONFIRM;
  u8 *single_usb = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB;
  if( *single_usb_confirm == 0x42 && *single_usb < 0x80 )
 8013ed8:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <MIOS32_USB_ForceSingleUSB+0x1c>)
 8013eda:	7818      	ldrb	r0, [r3, #0]
 8013edc:	2842      	cmp	r0, #66	; 0x42
 8013ede:	d106      	bne.n	8013eee <MIOS32_USB_ForceSingleUSB+0x16>
 8013ee0:	4905      	ldr	r1, [pc, #20]	; (8013ef8 <MIOS32_USB_ForceSingleUSB+0x20>)
 8013ee2:	7808      	ldrb	r0, [r1, #0]
 8013ee4:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *single_usb;
 8013ee8:	bf18      	it	ne
 8013eea:	2000      	movne	r0, #0
 8013eec:	4770      	bx	lr

  return 0;
 8013eee:	2000      	movs	r0, #0
}
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop
 8013ef4:	08003fd4 	.word	0x08003fd4
 8013ef8:	08003fd5 	.word	0x08003fd5

08013efc <MIOS32_USB_CLASS_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *MIOS32_USB_CLASS_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8013efc:	b510      	push	{r4, lr}
 8013efe:	460c      	mov	r4, r1
#if !defined(MIOS32_DONT_USE_USB_MIDI) && MIOS32_USB_MIDI_NUM_PORTS > 1
  if( MIOS32_USB_ForceSingleUSB() ) {
 8013f00:	f7ff ffea 	bl	8013ed8 <MIOS32_USB_ForceSingleUSB>
 8013f04:	23c5      	movs	r3, #197	; 0xc5
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
 8013f06:	8023      	strh	r3, [r4, #0]
  * @retval pointer to descriptor buffer
  */
static uint8_t  *MIOS32_USB_CLASS_GetCfgDesc (uint8_t speed, uint16_t *length)
{
#if !defined(MIOS32_DONT_USE_USB_MIDI) && MIOS32_USB_MIDI_NUM_PORTS > 1
  if( MIOS32_USB_ForceSingleUSB() ) {
 8013f08:	b108      	cbz	r0, 8013f0e <MIOS32_USB_CLASS_GetCfgDesc+0x12>
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
    return (uint8_t *)MIOS32_USB_ConfigDescriptor_SingleUSB;
 8013f0a:	4802      	ldr	r0, [pc, #8]	; (8013f14 <MIOS32_USB_CLASS_GetCfgDesc+0x18>)
 8013f0c:	bd10      	pop	{r4, pc}
  }
#endif
  *length = sizeof (MIOS32_USB_ConfigDescriptor);
  return (uint8_t *)MIOS32_USB_ConfigDescriptor;
 8013f0e:	4802      	ldr	r0, [pc, #8]	; (8013f18 <MIOS32_USB_CLASS_GetCfgDesc+0x1c>)
}
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	bf00      	nop
 8013f14:	0801c763 	.word	0x0801c763
 8013f18:	0801c487 	.word	0x0801c487

08013f1c <MIOS32_USB_ForceDeviceMode>:
#ifdef MIOS32_DONT_USE_USB_HOST
  return 1;
#else
  u8 *enforce_usb_device_confirm = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE_CONFIRM;
  u8 *enforce_usb_device = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE;
  if( *enforce_usb_device_confirm == 0x42 && *enforce_usb_device < 0x80 )
 8013f1c:	4b06      	ldr	r3, [pc, #24]	; (8013f38 <MIOS32_USB_ForceDeviceMode+0x1c>)
 8013f1e:	7818      	ldrb	r0, [r3, #0]
 8013f20:	2842      	cmp	r0, #66	; 0x42
 8013f22:	d106      	bne.n	8013f32 <MIOS32_USB_ForceDeviceMode+0x16>
 8013f24:	4905      	ldr	r1, [pc, #20]	; (8013f3c <MIOS32_USB_ForceDeviceMode+0x20>)
 8013f26:	7808      	ldrb	r0, [r1, #0]
 8013f28:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *enforce_usb_device;
 8013f2c:	bf18      	it	ne
 8013f2e:	2000      	movne	r0, #0
 8013f30:	4770      	bx	lr

  return 0;
 8013f32:	2000      	movs	r0, #0
#endif
}
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop
 8013f38:	08003fd6 	.word	0x08003fd6
 8013f3c:	08003fd7 	.word	0x08003fd7

08013f40 <MIOS32_USB_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
 8013f40:	2802      	cmp	r0, #2
//!   </UL>
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
 8013f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f44:	4605      	mov	r5, r0
  // currently only mode 0..2 supported
  if( mode >= 3 )
 8013f46:	d86b      	bhi.n	8014020 <MIOS32_USB_Init+0xe0>
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8013f48:	f7ff ffc0 	bl	8013ecc <MIOS32_USB_IsInitialized>

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev,
 8013f4c:	4c36      	ldr	r4, [pc, #216]	; (8014028 <MIOS32_USB_Init+0xe8>)
            USB_OTG_FS_CORE_ID,
            &USB_FS_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
 8013f4e:	4b37      	ldr	r3, [pc, #220]	; (801402c <MIOS32_USB_Init+0xec>)

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev,
 8013f50:	4a37      	ldr	r2, [pc, #220]	; (8014030 <MIOS32_USB_Init+0xf0>)
 8013f52:	9300      	str	r3, [sp, #0]
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8013f54:	4606      	mov	r6, r0

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev,
 8013f56:	2101      	movs	r1, #1
 8013f58:	4620      	mov	r0, r4
 8013f5a:	4b36      	ldr	r3, [pc, #216]	; (8014034 <MIOS32_USB_Init+0xf4>)
 8013f5c:	f002 fb2d 	bl	80165ba <USBH_Init>
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
#endif

  // change connection state to disconnected
  USBD_USR_DeviceDisconnected();
 8013f60:	f7ff fdb4 	bl	8013acc <USBD_USR_DeviceDisconnected>

  if( mode == 0 && usb_is_initialized ) {
 8013f64:	bb3d      	cbnz	r5, 8013fb6 <MIOS32_USB_Init+0x76>
 8013f66:	f016 0fff 	tst.w	r6, #255	; 0xff
 8013f6a:	d024      	beq.n	8013fb6 <MIOS32_USB_Init+0x76>
#else

    // don't run complete driver init sequence to ensure that the connection doesn't get lost!

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f7ff fea9 	bl	8013cc4 <USB_OTG_BSP_Init>

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8013f72:	4931      	ldr	r1, [pc, #196]	; (8014038 <MIOS32_USB_Init+0xf8>)
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8013f74:	4a31      	ldr	r2, [pc, #196]	; (801403c <MIOS32_USB_Init+0xfc>)
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013f76:	4b32      	ldr	r3, [pc, #200]	; (8014040 <MIOS32_USB_Init+0x100>)

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8013f78:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_FS_dev, USB_OTG_FS_CORE_ID);
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	2101      	movs	r1, #1
    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8013f80:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013f84:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_FS_dev, USB_OTG_FS_CORE_ID);
 8013f88:	f003 f926 	bl	80171d8 <USB_OTG_SelectCore>

    // enable interrupts
    USB_OTG_EnableGlobalInt(&USB_OTG_FS_dev);
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f003 f9e9 	bl	8017364 <USB_OTG_EnableGlobalInt>
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
 8013f92:	4620      	mov	r0, r4
 8013f94:	f003 fc5c 	bl	8017850 <USB_OTG_EnableDevInt>
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff ff0f 	bl	8013dbc <USB_OTG_BSP_EnableInterrupt>
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;
 8013f9e:	2003      	movs	r0, #3
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
 8013fa0:	2101      	movs	r1, #1
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;
 8013fa2:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_FS_dev, 1);
 8013fa6:	4620      	mov	r0, r4
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
 8013fa8:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_FS_dev, 1);
 8013fac:	f7ff fe1e 	bl	8013bec <MIOS32_USB_CLASS_Init>

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
 8013fb0:	f7ff fd90 	bl	8013ad4 <USBD_USR_DeviceConfigured>
 8013fb4:	e011      	b.n	8013fda <MIOS32_USB_Init+0x9a>
    // init USB device and driver
    USBD_Init(&USB_OTG_FS_dev,
	      USB_OTG_FS_CORE_ID,
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);
 8013fb6:	4821      	ldr	r0, [pc, #132]	; (801403c <MIOS32_USB_Init+0xfc>)

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
  } else {
    // init USB device and driver
    USBD_Init(&USB_OTG_FS_dev,
 8013fb8:	4a21      	ldr	r2, [pc, #132]	; (8014040 <MIOS32_USB_Init+0x100>)
 8013fba:	4b1f      	ldr	r3, [pc, #124]	; (8014038 <MIOS32_USB_Init+0xf8>)
 8013fbc:	9000      	str	r0, [sp, #0]
 8013fbe:	2101      	movs	r1, #1
 8013fc0:	4819      	ldr	r0, [pc, #100]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013fc2:	f002 f819 	bl	8015ff8 <USBD_Init>
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);

    // disconnect device
    DCD_DevDisconnect(&USB_OTG_FS_dev);
 8013fc6:	4818      	ldr	r0, [pc, #96]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013fc8:	f003 ffcb 	bl	8017f62 <DCD_DevDisconnect>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013fcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013fd0:	f7ff fc1a 	bl	8013808 <MIOS32_DELAY_Wait_uS>

    // wait 50 mS
    USB_OTG_BSP_mDelay(50);

    // connect device
    DCD_DevConnect(&USB_OTG_FS_dev);
 8013fd4:	4814      	ldr	r0, [pc, #80]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013fd6:	f003 ffc3 	bl	8017f60 <DCD_DevConnect>
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
 8013fda:	f7ff ff9f 	bl	8013f1c <MIOS32_USB_ForceDeviceMode>
 8013fde:	b918      	cbnz	r0, 8013fe8 <MIOS32_USB_Init+0xa8>
 8013fe0:	4918      	ldr	r1, [pc, #96]	; (8014044 <MIOS32_USB_Init+0x104>)
 8013fe2:	690a      	ldr	r2, [r1, #16]
 8013fe4:	0553      	lsls	r3, r2, #21
 8013fe6:	d502      	bpl.n	8013fee <MIOS32_USB_Init+0xae>
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, DEVICE_MODE);
 8013fe8:	480f      	ldr	r0, [pc, #60]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013fea:	2100      	movs	r1, #0
 8013fec:	e005      	b.n	8013ffa <MIOS32_USB_Init+0xba>
  } else {
    USB_OTG_DriveVbus(&USB_OTG_FS_dev, 1);
 8013fee:	480e      	ldr	r0, [pc, #56]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013ff0:	2101      	movs	r1, #1
 8013ff2:	f003 fa57 	bl	80174a4 <USB_OTG_DriveVbus>
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, HOST_MODE);
 8013ff6:	480c      	ldr	r0, [pc, #48]	; (8014028 <MIOS32_USB_Init+0xe8>)
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	f003 f9f9 	bl	80173f0 <USB_OTG_SetCurrentMode>
#endif


#ifndef MIOS32_DONT_USE_USB_HS_HOST
  /* Init Host Library */
  USBH_Init(&USB_OTG_HS_dev,
 8013ffe:	4b12      	ldr	r3, [pc, #72]	; (8014048 <MIOS32_USB_Init+0x108>)
 8014000:	4a12      	ldr	r2, [pc, #72]	; (801404c <MIOS32_USB_Init+0x10c>)
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	4812      	ldr	r0, [pc, #72]	; (8014050 <MIOS32_USB_Init+0x110>)
 8014006:	4b13      	ldr	r3, [pc, #76]	; (8014054 <MIOS32_USB_Init+0x114>)
 8014008:	2100      	movs	r1, #0
 801400a:	f002 fad6 	bl	80165ba <USBH_Init>
          	USB_OTG_HS_CORE_ID,
            &USB_HS_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_USBH_Callbacks,
            (USBH_Usr_cb_TypeDef *)&USBH_HID_USR_Callbacks); //temp

  USB_OTG_DriveVbus(&USB_OTG_HS_dev, 1);
 801400e:	4810      	ldr	r0, [pc, #64]	; (8014050 <MIOS32_USB_Init+0x110>)
 8014010:	2101      	movs	r1, #1
 8014012:	f003 fa47 	bl	80174a4 <USB_OTG_DriveVbus>
#endif

#if !defined(MIOS32_DONT_USE_USB_HOST) || !defined(MIOS32_DONT_USE_USB_HS_HOST)
#if !defined(MIOS32_DONT_USE_USB_HID)
  MIOS32_USB_HID_Init(0);
 8014016:	2000      	movs	r0, #0
 8014018:	f000 fd76 	bl	8014b08 <MIOS32_USB_HID_Init>
#endif
#endif

  return 0; // no error
 801401c:	2000      	movs	r0, #0
 801401e:	e001      	b.n	8014024 <MIOS32_USB_Init+0xe4>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode
 8014020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_USB_HID_Init(0);
#endif
#endif

  return 0; // no error
}
 8014024:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8014026:	bf00      	nop
 8014028:	200036cc 	.word	0x200036cc
 801402c:	0801c860 	.word	0x0801c860
 8014030:	20004bf4 	.word	0x20004bf4
 8014034:	0801c8dc 	.word	0x0801c8dc
 8014038:	0801c54c 	.word	0x0801c54c
 801403c:	0801c580 	.word	0x0801c580
 8014040:	0801c8c0 	.word	0x0801c8c0
 8014044:	40020000 	.word	0x40020000
 8014048:	2000000c 	.word	0x2000000c
 801404c:	20003624 	.word	0x20003624
 8014050:	20004160 	.word	0x20004160
 8014054:	0801c3ec 	.word	0x0801c3ec

08014058 <USBH_ClassRequest>:
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_Status status = USBH_OK;
  return status;
}
 8014058:	2000      	movs	r0, #0
 801405a:	4770      	bx	lr

0801405c <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 801405c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	USB_MIDI_machine_t* machine;
	uint32_t *rx_buff_pointer;
	uint32_t *tx_buff_pointer;
	u8 cable_offset = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8014060:	7ac3      	ldrb	r3, [r0, #11]
{

	USB_MIDI_machine_t* machine;
	uint32_t *rx_buff_pointer;
	uint32_t *tx_buff_pointer;
	u8 cable_offset = 0;
 8014062:	4a7d      	ldr	r2, [pc, #500]	; (8014258 <USBH_Handle+0x1fc>)
 8014064:	4c7d      	ldr	r4, [pc, #500]	; (801425c <USBH_Handle+0x200>)
 8014066:	2b01      	cmp	r3, #1
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014068:	460e      	mov	r6, r1

	USB_MIDI_machine_t* machine;
	uint32_t *rx_buff_pointer;
	uint32_t *tx_buff_pointer;
	u8 cable_offset = 0;
 801406a:	4b7d      	ldr	r3, [pc, #500]	; (8014260 <USBH_Handle+0x204>)
 801406c:	497d      	ldr	r1, [pc, #500]	; (8014264 <USBH_Handle+0x208>)
 801406e:	bf14      	ite	ne
 8014070:	4699      	movne	r9, r3
 8014072:	46a1      	moveq	r9, r4
 8014074:	bf14      	ite	ne
 8014076:	4690      	movne	r8, r2
 8014078:	4688      	moveq	r8, r1
 801407a:	4c7b      	ldr	r4, [pc, #492]	; (8014268 <USBH_Handle+0x20c>)
 801407c:	497b      	ldr	r1, [pc, #492]	; (801426c <USBH_Handle+0x210>)
 801407e:	bf08      	it	eq
 8014080:	460c      	moveq	r4, r1
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014082:	4605      	mov	r5, r0
		cable_offset = 8;
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}
	if( machine->transfer_possible ) {
 8014084:	7822      	ldrb	r2, [r4, #0]
{

	USB_MIDI_machine_t* machine;
	uint32_t *rx_buff_pointer;
	uint32_t *tx_buff_pointer;
	u8 cable_offset = 0;
 8014086:	bf14      	ite	ne
 8014088:	f04f 0a08 	movne.w	sl, #8
 801408c:	f04f 0a00 	moveq.w	sl, #0
		cable_offset = 8;
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}
	if( machine->transfer_possible ) {
 8014090:	2a00      	cmp	r2, #0
 8014092:	f000 80de 	beq.w	8014252 <USBH_Handle+0x1f6>
		USBH_HOST *pphost = phost;

		if( HCD_IsDeviceConnected(pdev) ) {
 8014096:	f004 f9ea 	bl	801846e <HCD_IsDeviceConnected>
 801409a:	2800      	cmp	r0, #0
 801409c:	f000 80d9 	beq.w	8014252 <USBH_Handle+0x1f6>

			u8 force_rx_req = 0;

			if( machine->transfer_state == USBH_MIDI_TX ) {
 80140a0:	f894 0213 	ldrb.w	r0, [r4, #531]	; 0x213
 80140a4:	2802      	cmp	r0, #2
 80140a6:	d11f      	bne.n	80140e8 <USBH_Handle+0x8c>
				URB_STATE URB_State = HCD_GetURB_State(pdev, machine->hc_num_out);
 80140a8:	4628      	mov	r0, r5
 80140aa:	f894 1215 	ldrb.w	r1, [r4, #533]	; 0x215
 80140ae:	f004 f9e5 	bl	801847c <HCD_GetURB_State>

				if( URB_State == URB_IDLE ) {
 80140b2:	b1a0      	cbz	r0, 80140de <USBH_Handle+0x82>
					// wait...
				} else if( URB_State == URB_DONE ) {
 80140b4:	2801      	cmp	r0, #1
 80140b6:	d073      	beq.n	80141a0 <USBH_Handle+0x144>
					machine->transfer_state = USBH_MIDI_IDLE;
				} else if( URB_State == URB_STALL ) {
 80140b8:	2804      	cmp	r0, #4
 80140ba:	d106      	bne.n	80140ca <USBH_Handle+0x6e>
					// Issue Clear Feature on OUT endpoint
					if( USBH_ClrFeature(pdev, pphost, machine->BulkOutEp, machine->hc_num_out) == USBH_OK ) {
 80140bc:	4628      	mov	r0, r5
 80140be:	4631      	mov	r1, r6
 80140c0:	f894 2216 	ldrb.w	r2, [r4, #534]	; 0x216
 80140c4:	f894 3215 	ldrb.w	r3, [r4, #533]	; 0x215
 80140c8:	e061      	b.n	801418e <USBH_Handle+0x132>
						machine->transfer_state = USBH_MIDI_IDLE;
					}
				} else if( URB_State == URB_NOTREADY ) {
 80140ca:	2802      	cmp	r0, #2
 80140cc:	d109      	bne.n	80140e2 <USBH_Handle+0x86>
					// send again
					USBH_BulkSendData(pdev, (u8*)tx_buff_pointer, machine->tx_count, machine->hc_num_out);
 80140ce:	4628      	mov	r0, r5
 80140d0:	4641      	mov	r1, r8
 80140d2:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 80140d6:	f894 3215 	ldrb.w	r3, [r4, #533]	; 0x215
 80140da:	f002 fe15 	bl	8016d08 <USBH_BulkSendData>
	if( machine->transfer_possible ) {
		USBH_HOST *pphost = phost;

		if( HCD_IsDeviceConnected(pdev) ) {

			u8 force_rx_req = 0;
 80140de:	2000      	movs	r0, #0
 80140e0:	e061      	b.n	80141a6 <USBH_Handle+0x14a>
						machine->transfer_state = USBH_MIDI_IDLE;
					}
				} else if( URB_State == URB_NOTREADY ) {
					// send again
					USBH_BulkSendData(pdev, (u8*)tx_buff_pointer, machine->tx_count, machine->hc_num_out);
				} else if( URB_State == URB_ERROR ) {
 80140e2:	2803      	cmp	r0, #3
 80140e4:	d1fb      	bne.n	80140de <USBH_Handle+0x82>
 80140e6:	e05b      	b.n	80141a0 <USBH_Handle+0x144>
					machine->transfer_state = USBH_MIDI_IDLE;
				}
			} else if( machine->transfer_state == USBH_MIDI_RX ) {
 80140e8:	2801      	cmp	r0, #1
 80140ea:	d1f8      	bne.n	80140de <USBH_Handle+0x82>
				URB_STATE URB_State = HCD_GetURB_State(pdev, machine->hc_num_in);
 80140ec:	4628      	mov	r0, r5
 80140ee:	f894 1214 	ldrb.w	r1, [r4, #532]	; 0x214
 80140f2:	f004 f9c3 	bl	801847c <HCD_GetURB_State>
				if( URB_State == URB_DONE ) {
 80140f6:	2801      	cmp	r0, #1
 80140f8:	d141      	bne.n	801417e <USBH_Handle+0x122>
					// data received from receive
					//u32 count = HCD_GetXferCnt(pdev, USBH_hc_num_in) / 4;
					// Note: HCD_GetXferCnt returns a counter which isn't zeroed immediately on a USBH_BulkReceiveData() call
					u32 count = pdev->host.hc[machine->hc_num_in].xfer_count / 4;
 80140fa:	f894 6214 	ldrb.w	r6, [r4, #532]	; 0x214
 80140fe:	eb05 1246 	add.w	r2, r5, r6, lsl #5
 8014102:	f8d2 08a4 	ldr.w	r0, [r2, #2212]	; 0x8a4

					// push data into FIFO
					if( !count ) {
 8014106:	0886      	lsrs	r6, r0, #2
 8014108:	d102      	bne.n	8014110 <USBH_Handle+0xb4>
						machine->transfer_state = USBH_MIDI_IDLE;
 801410a:	f884 6213 	strb.w	r6, [r4, #531]	; 0x213
 801410e:	e7e6      	b.n	80140de <USBH_Handle+0x82>
					} else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-machine->rx_buffer_size) ) {
 8014110:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 8014114:	b299      	uxth	r1, r3
 8014116:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 801411a:	4296      	cmp	r6, r2
 801411c:	d2df      	bcs.n	80140de <USBH_Handle+0x82>
						u32 *buf_addr = rx_buff_pointer;

						// copy received packages into receive buffer
						// this operation should be atomic
						MIOS32_IRQ_Disable();
 801411e:	f7fe fcfd 	bl	8012b1c <MIOS32_IRQ_Disable>

					// push data into FIFO
					if( !count ) {
						machine->transfer_state = USBH_MIDI_IDLE;
					} else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-machine->rx_buffer_size) ) {
						u32 *buf_addr = rx_buff_pointer;
 8014122:	46cb      	mov	fp, r9
						// copy received packages into receive buffer
						// this operation should be atomic
						MIOS32_IRQ_Disable();
						do {
							mios32_midi_package_t package;
							package.ALL = *buf_addr++;
 8014124:	f85b 7b04 	ldr.w	r7, [fp], #4
							package.cable += cable_offset;
 8014128:	f3c7 1003 	ubfx	r0, r7, #4, #4
 801412c:	eb00 030a 	add.w	r3, r0, sl
 8014130:	f363 1707 	bfi	r7, r3, #4, #4
							if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8014134:	f003 000f 	and.w	r0, r3, #15
 8014138:	3010      	adds	r0, #16
 801413a:	4639      	mov	r1, r7
 801413c:	f7fd fdde 	bl	8011cfc <MIOS32_MIDI_SendPackageToRxCallback>
 8014140:	b9a8      	cbnz	r0, 801416e <USBH_Handle+0x112>
								machine->rx_buffer[machine->rx_buffer_head] = package.ALL;
 8014142:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 8014146:	b28a      	uxth	r2, r1

								if( ++machine->rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8014148:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
						do {
							mios32_midi_package_t package;
							package.ALL = *buf_addr++;
							package.cable += cable_offset;
							if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
								machine->rx_buffer[machine->rx_buffer_head] = package.ALL;
 801414c:	eb04 0382 	add.w	r3, r4, r2, lsl #2

								if( ++machine->rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8014150:	1c4a      	adds	r2, r1, #1
						do {
							mios32_midi_package_t package;
							package.ALL = *buf_addr++;
							package.cable += cable_offset;
							if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
								machine->rx_buffer[machine->rx_buffer_head] = package.ALL;
 8014152:	605f      	str	r7, [r3, #4]

								if( ++machine->rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8014154:	b293      	uxth	r3, r2
 8014156:	2b3f      	cmp	r3, #63	; 0x3f
 8014158:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
									machine->rx_buffer_head = 0;
 801415c:	bf88      	it	hi
 801415e:	f8a4 0106 	strhhi.w	r0, [r4, #262]	; 0x106
								++machine->rx_buffer_size;
 8014162:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
 8014166:	1c41      	adds	r1, r0, #1
 8014168:	b28a      	uxth	r2, r1
 801416a:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
							}
						} while( --count > 0 );
 801416e:	3e01      	subs	r6, #1
 8014170:	d1d8      	bne.n	8014124 <USBH_Handle+0xc8>
						MIOS32_IRQ_Enable();
 8014172:	f7fe fce7 	bl	8012b44 <MIOS32_IRQ_Enable>

						machine->transfer_state = USBH_MIDI_IDLE;
 8014176:	f884 6213 	strb.w	r6, [r4, #531]	; 0x213
						force_rx_req = 1;
 801417a:	2001      	movs	r0, #1
 801417c:	e013      	b.n	80141a6 <USBH_Handle+0x14a>
					}
				} else if( URB_State == URB_STALL ) {
 801417e:	2804      	cmp	r0, #4
 8014180:	d10a      	bne.n	8014198 <USBH_Handle+0x13c>
					// Issue Clear Feature on IN endpoint
					if( USBH_ClrFeature(pdev, pphost, machine->BulkInEp, machine->hc_num_in) == USBH_OK ) {
 8014182:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
 8014186:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 801418a:	4628      	mov	r0, r5
 801418c:	4631      	mov	r1, r6
 801418e:	f002 ffb5 	bl	80170fc <USBH_ClrFeature>
 8014192:	2800      	cmp	r0, #0
 8014194:	d1a3      	bne.n	80140de <USBH_Handle+0x82>
 8014196:	e004      	b.n	80141a2 <USBH_Handle+0x146>
						machine->transfer_state = USBH_MIDI_IDLE;
					}
				} else if( URB_State == URB_ERROR || URB_State == URB_NOTREADY ) {
 8014198:	1e83      	subs	r3, r0, #2
 801419a:	b2d9      	uxtb	r1, r3
 801419c:	2901      	cmp	r1, #1
 801419e:	d89e      	bhi.n	80140de <USBH_Handle+0x82>
					machine->transfer_state = USBH_MIDI_IDLE;
 80141a0:	2000      	movs	r0, #0
 80141a2:	f884 0213 	strb.w	r0, [r4, #531]	; 0x213
				}
			}


			if( machine->transfer_state == USBH_MIDI_IDLE ) {
 80141a6:	f894 3213 	ldrb.w	r3, [r4, #531]	; 0x213
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d151      	bne.n	8014252 <USBH_Handle+0x1f6>
				if( !force_rx_req && machine->tx_buffer_size && machine->transfer_possible ) {
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d144      	bne.n	801423c <USBH_Handle+0x1e0>
 80141b2:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
 80141b6:	b281      	uxth	r1, r0
 80141b8:	2900      	cmp	r1, #0
 80141ba:	d03f      	beq.n	801423c <USBH_Handle+0x1e0>
 80141bc:	7822      	ldrb	r2, [r4, #0]
 80141be:	2a00      	cmp	r2, #0
 80141c0:	d03c      	beq.n	801423c <USBH_Handle+0x1e0>
					// atomic operation to avoid conflict with other interrupts
					MIOS32_IRQ_Disable();
 80141c2:	f7fe fcab 	bl	8012b1c <MIOS32_IRQ_Disable>

					s16 count = (machine->tx_buffer_size > (machine->BulkOutEpSize/4)) ? (machine->BulkOutEpSize/4) : machine->tx_buffer_size;
 80141c6:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
 80141ca:	f8b4 221a 	ldrh.w	r2, [r4, #538]	; 0x21a
 80141ce:	b281      	uxth	r1, r0
 80141d0:	0893      	lsrs	r3, r2, #2
 80141d2:	4299      	cmp	r1, r3
 80141d4:	bf98      	it	ls
 80141d6:	f8b4 3210 	ldrhls.w	r3, [r4, #528]	; 0x210

					// send to IN pipe
					machine->tx_buffer_size -= count;
 80141da:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
			if( machine->transfer_state == USBH_MIDI_IDLE ) {
				if( !force_rx_req && machine->tx_buffer_size && machine->transfer_possible ) {
					// atomic operation to avoid conflict with other interrupts
					MIOS32_IRQ_Disable();

					s16 count = (machine->tx_buffer_size > (machine->BulkOutEpSize/4)) ? (machine->BulkOutEpSize/4) : machine->tx_buffer_size;
 80141de:	b29a      	uxth	r2, r3

					// send to IN pipe
					machine->tx_buffer_size -= count;
 80141e0:	1a81      	subs	r1, r0, r2
 80141e2:	b28b      	uxth	r3, r1
 80141e4:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210

					u32 *buf_addr = tx_buff_pointer;
					int i;
					for(i=0; i<count; ++i) {
 80141e8:	2300      	movs	r3, #0
 80141ea:	b210      	sxth	r0, r2
 80141ec:	4283      	cmp	r3, r0
 80141ee:	da15      	bge.n	801421c <USBH_Handle+0x1c0>
						*(buf_addr++) = machine->tx_buffer[machine->tx_buffer_tail];
 80141f0:	f8b4 020c 	ldrh.w	r0, [r4, #524]	; 0x20c
 80141f4:	b281      	uxth	r1, r0
 80141f6:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 80141fa:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
						if( ++machine->tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 80141fe:	f8b4 020c 	ldrh.w	r0, [r4, #524]	; 0x20c
					machine->tx_buffer_size -= count;

					u32 *buf_addr = tx_buff_pointer;
					int i;
					for(i=0; i<count; ++i) {
						*(buf_addr++) = machine->tx_buffer[machine->tx_buffer_tail];
 8014202:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
						if( ++machine->tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8014206:	1c41      	adds	r1, r0, #1
 8014208:	b288      	uxth	r0, r1
 801420a:	283f      	cmp	r0, #63	; 0x3f
 801420c:	f8a4 020c 	strh.w	r0, [r4, #524]	; 0x20c
 8014210:	d902      	bls.n	8014218 <USBH_Handle+0x1bc>
							machine->tx_buffer_tail = 0;
 8014212:	2100      	movs	r1, #0
 8014214:	f8a4 120c 	strh.w	r1, [r4, #524]	; 0x20c
					// send to IN pipe
					machine->tx_buffer_size -= count;

					u32 *buf_addr = tx_buff_pointer;
					int i;
					for(i=0; i<count; ++i) {
 8014218:	3301      	adds	r3, #1
 801421a:	e7e6      	b.n	80141ea <USBH_Handle+0x18e>
						*(buf_addr++) = machine->tx_buffer[machine->tx_buffer_tail];
						if( ++machine->tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
							machine->tx_buffer_tail = 0;
					}

					machine->tx_count = count * 4;
 801421c:	0092      	lsls	r2, r2, #2
 801421e:	b2d2      	uxtb	r2, r2
					USBH_BulkSendData(pdev, (u8*)tx_buff_pointer, machine->tx_count, machine->hc_num_out);
 8014220:	4641      	mov	r1, r8
						*(buf_addr++) = machine->tx_buffer[machine->tx_buffer_tail];
						if( ++machine->tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
							machine->tx_buffer_tail = 0;
					}

					machine->tx_count = count * 4;
 8014222:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
					USBH_BulkSendData(pdev, (u8*)tx_buff_pointer, machine->tx_count, machine->hc_num_out);
 8014226:	4628      	mov	r0, r5
 8014228:	f894 3215 	ldrb.w	r3, [r4, #533]	; 0x215
 801422c:	f002 fd6c 	bl	8016d08 <USBH_BulkSendData>

					machine->transfer_state = USBH_MIDI_TX;
 8014230:	2102      	movs	r1, #2
 8014232:	f884 1213 	strb.w	r1, [r4, #531]	; 0x213

					MIOS32_IRQ_Enable();
 8014236:	f7fe fc85 	bl	8012b44 <MIOS32_IRQ_Enable>
				}
			}


			if( machine->transfer_state == USBH_MIDI_IDLE ) {
				if( !force_rx_req && machine->tx_buffer_size && machine->transfer_possible ) {
 801423a:	e00a      	b.n	8014252 <USBH_Handle+0x1f6>
					machine->transfer_state = USBH_MIDI_TX;

					MIOS32_IRQ_Enable();
				} else {
					// request data from device
					USBH_BulkReceiveData(pdev, (u8*)rx_buff_pointer, machine->BulkInEpSize, machine->hc_num_in);
 801423c:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 8014240:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
 8014244:	4628      	mov	r0, r5
 8014246:	4649      	mov	r1, r9
 8014248:	f002 fd78 	bl	8016d3c <USBH_BulkReceiveData>
					machine->transfer_state = USBH_MIDI_RX;
 801424c:	2301      	movs	r3, #1
 801424e:	f884 3213 	strb.w	r3, [r4, #531]	; 0x213
			}
		}
	}

  return USBH_OK;
}
 8014252:	2000      	movs	r0, #0
 8014254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014258:	200007a4 	.word	0x200007a4
 801425c:	200035e4 	.word	0x200035e4
 8014260:	20000328 	.word	0x20000328
 8014264:	200007e4 	.word	0x200007e4
 8014268:	20000584 	.word	0x20000584
 801426c:	20000368 	.word	0x20000368

08014270 <MIOS32_USB_MIDI_RxBufferHandler>:
//! USB Device Mode
//!
//! This handler receives new packages if the Rx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
{
 8014270:	b570      	push	{r4, r5, r6, lr}
  s16 count;

  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL ) {
 8014272:	4c28      	ldr	r4, [pc, #160]	; (8014314 <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
 8014274:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8014278:	2b00      	cmp	r3, #0
 801427a:	d049      	beq.n	8014310 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>
    return;
  }

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 801427c:	f7fe fc4e 	bl	8012b1c <MIOS32_IRQ_Disable>

  // check if we can receive new data and get packages to be received from OUT pipe
  u32 ep_num = MIOS32_USB_MIDI_DATA_OUT_EP & 0x7f;
  USB_OTG_EP *ep = &USB_OTG_FS_dev.dev.out_ep[ep_num];
  if( USB_FS_MIDI_machine.rx_buffer_new_data && (count=ep->xfer_count>>2) ) {
 8014280:	4a25      	ldr	r2, [pc, #148]	; (8014318 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 8014282:	f892 010a 	ldrb.w	r0, [r2, #266]	; 0x10a
 8014286:	2800      	cmp	r0, #0
 8014288:	d03e      	beq.n	8014308 <MIOS32_USB_MIDI_RxBufferHandler+0x98>
 801428a:	f8d4 63dc 	ldr.w	r6, [r4, #988]	; 0x3dc
 801428e:	08b6      	lsrs	r6, r6, #2
 8014290:	b2b1      	uxth	r1, r6
 8014292:	2900      	cmp	r1, #0
 8014294:	d038      	beq.n	8014308 <MIOS32_USB_MIDI_RxBufferHandler+0x98>
    // check if buffer is free
    if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-USB_FS_MIDI_machine.rx_buffer_size) ) {
 8014296:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 801429a:	b29a      	uxth	r2, r3
 801429c:	b208      	sxth	r0, r1
 801429e:	f1c2 0140 	rsb	r1, r2, #64	; 0x40
 80142a2:	4288      	cmp	r0, r1
 80142a4:	da30      	bge.n	8014308 <MIOS32_USB_MIDI_RxBufferHandler+0x98>
 80142a6:	2400      	movs	r4, #0

      // copy received packages into receive buffer
      // this operation should be atomic
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;
 80142a8:	4d1c      	ldr	r5, [pc, #112]	; (801431c <MIOS32_USB_MIDI_RxBufferHandler+0xac>)
 80142aa:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 80142ae:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80142b2:	3010      	adds	r0, #16
 80142b4:	4629      	mov	r1, r5
 80142b6:	f7fd fd21 	bl	8011cfc <MIOS32_MIDI_SendPackageToRxCallback>
 80142ba:	b9b0      	cbnz	r0, 80142ea <MIOS32_USB_MIDI_RxBufferHandler+0x7a>
		USB_FS_MIDI_machine.rx_buffer[USB_FS_MIDI_machine.rx_buffer_head] = package.ALL;
 80142bc:	4b16      	ldr	r3, [pc, #88]	; (8014318 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 80142be:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 80142c2:	b291      	uxth	r1, r2
 80142c4:	eb03 0281 	add.w	r2, r3, r1, lsl #2

	  if( ++USB_FS_MIDI_machine.rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 80142c8:	f8b3 1106 	ldrh.w	r1, [r3, #262]	; 0x106
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
		USB_FS_MIDI_machine.rx_buffer[USB_FS_MIDI_machine.rx_buffer_head] = package.ALL;
 80142cc:	6055      	str	r5, [r2, #4]

	  if( ++USB_FS_MIDI_machine.rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 80142ce:	1c4a      	adds	r2, r1, #1
 80142d0:	b291      	uxth	r1, r2
 80142d2:	293f      	cmp	r1, #63	; 0x3f
 80142d4:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
		  USB_FS_MIDI_machine.rx_buffer_head = 0;
 80142d8:	bf88      	it	hi
 80142da:	f8a3 0106 	strhhi.w	r0, [r3, #262]	; 0x106
	  ++USB_FS_MIDI_machine.rx_buffer_size;
 80142de:	f8b3 0108 	ldrh.w	r0, [r3, #264]	; 0x108
 80142e2:	1c42      	adds	r2, r0, #1
 80142e4:	b291      	uxth	r1, r2
 80142e6:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
 80142ea:	3401      	adds	r4, #1
/////////////////////////////////////////////////////////////////////////////
//! USB Device Mode
//!
//! This handler receives new packages if the Rx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
 80142ec:	1b33      	subs	r3, r6, r4

	  if( ++USB_FS_MIDI_machine.rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
		  USB_FS_MIDI_machine.rx_buffer_head = 0;
	  ++USB_FS_MIDI_machine.rx_buffer_size;
	}
      } while( --count > 0 );
 80142ee:	b218      	sxth	r0, r3
 80142f0:	2800      	cmp	r0, #0
 80142f2:	dcd9      	bgt.n	80142a8 <MIOS32_USB_MIDI_RxBufferHandler+0x38>

      // notify, that data has been put into buffer
      USB_FS_MIDI_machine.rx_buffer_new_data = 0;
 80142f4:	4908      	ldr	r1, [pc, #32]	; (8014318 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 80142f6:	4807      	ldr	r0, [pc, #28]	; (8014314 <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
	  ++USB_FS_MIDI_machine.rx_buffer_size;
	}
      } while( --count > 0 );

      // notify, that data has been put into buffer
      USB_FS_MIDI_machine.rx_buffer_new_data = 0;
 80142f8:	2200      	movs	r2, #0
 80142fa:	f881 210a 	strb.w	r2, [r1, #266]	; 0x10a

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 80142fe:	2340      	movs	r3, #64	; 0x40
 8014300:	2102      	movs	r1, #2
 8014302:	4a06      	ldr	r2, [pc, #24]	; (801431c <MIOS32_USB_MIDI_RxBufferHandler+0xac>)
 8014304:	f003 fdb0 	bl	8017e68 <DCD_EP_PrepareRx>
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
}
 8014308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		       (uint8_t*)(USB_FS_rx_buffer),
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
 801430c:	f7fe bc1a 	b.w	8012b44 <MIOS32_IRQ_Enable>
 8014310:	bd70      	pop	{r4, r5, r6, pc}
 8014312:	bf00      	nop
 8014314:	200036cc 	.word	0x200036cc
 8014318:	20000368 	.word	0x20000368
 801431c:	200035e4 	.word	0x200035e4

08014320 <MIOS32_USB_MIDI_TxBufferHandler>:
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL )
 8014320:	4b27      	ldr	r3, [pc, #156]	; (80143c0 <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 8014322:	f8d3 05e4 	ldr.w	r0, [r3, #1508]	; 0x5e4
//!
//! This handler sends the new packages through the IN pipe if the buffer 
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
 8014326:	b510      	push	{r4, lr}
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL )
 8014328:	2800      	cmp	r0, #0
 801432a:	d048      	beq.n	80143be <MIOS32_USB_MIDI_TxBufferHandler+0x9e>
  //   - last transfer finished
  //   - new packages are in the buffer
  //   - the device is configured

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 801432c:	f7fe fbf6 	bl	8012b1c <MIOS32_IRQ_Disable>

  if( !USB_FS_MIDI_machine.tx_buffer_busy && USB_FS_MIDI_machine.tx_buffer_size && USB_FS_MIDI_machine.transfer_possible ) {
 8014330:	4b24      	ldr	r3, [pc, #144]	; (80143c4 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 8014332:	f893 2212 	ldrb.w	r2, [r3, #530]	; 0x212
 8014336:	2a00      	cmp	r2, #0
 8014338:	d13d      	bne.n	80143b6 <MIOS32_USB_MIDI_TxBufferHandler+0x96>
 801433a:	f8b3 1210 	ldrh.w	r1, [r3, #528]	; 0x210
 801433e:	b288      	uxth	r0, r1
 8014340:	2800      	cmp	r0, #0
 8014342:	d038      	beq.n	80143b6 <MIOS32_USB_MIDI_TxBufferHandler+0x96>
 8014344:	781a      	ldrb	r2, [r3, #0]
 8014346:	2a00      	cmp	r2, #0
 8014348:	d035      	beq.n	80143b6 <MIOS32_USB_MIDI_TxBufferHandler+0x96>
  //if( !tx_buffer_busy && tx_buffer_size && (USB_FS_MIDI_machine.transfer_possible || USB_HS_MIDI_machine.transfer_possible) ) {

		  s16 count = (USB_FS_MIDI_machine.tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : USB_FS_MIDI_machine.tx_buffer_size;
 801434a:	f8b3 1210 	ldrh.w	r1, [r3, #528]	; 0x210
 801434e:	b288      	uxth	r0, r1
 8014350:	2810      	cmp	r0, #16
 8014352:	bf98      	it	ls
 8014354:	f8b3 1210 	ldrhls.w	r1, [r3, #528]	; 0x210

    // notify that new package is sent
		  USB_FS_MIDI_machine.tx_buffer_busy = 1;
 8014358:	4b1a      	ldr	r3, [pc, #104]	; (80143c4 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
  MIOS32_IRQ_Disable();

  if( !USB_FS_MIDI_machine.tx_buffer_busy && USB_FS_MIDI_machine.tx_buffer_size && USB_FS_MIDI_machine.transfer_possible ) {
  //if( !tx_buffer_busy && tx_buffer_size && (USB_FS_MIDI_machine.transfer_possible || USB_HS_MIDI_machine.transfer_possible) ) {

		  s16 count = (USB_FS_MIDI_machine.tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : USB_FS_MIDI_machine.tx_buffer_size;
 801435a:	bf94      	ite	ls
 801435c:	b289      	uxthls	r1, r1
 801435e:	2110      	movhi	r1, #16

    // notify that new package is sent
		  USB_FS_MIDI_machine.tx_buffer_busy = 1;
 8014360:	2201      	movs	r2, #1
 8014362:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212

    // send to IN pipe
		  USB_FS_MIDI_machine.tx_buffer_size -= count;
 8014366:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 801436a:	1a42      	subs	r2, r0, r1
 801436c:	b290      	uxth	r0, r2
 801436e:	f8a3 0210 	strh.w	r0, [r3, #528]	; 0x210

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8014372:	2200      	movs	r2, #0
 8014374:	b20b      	sxth	r3, r1
 8014376:	429a      	cmp	r2, r3
 8014378:	da17      	bge.n	80143aa <MIOS32_USB_MIDI_TxBufferHandler+0x8a>
      *(buf_addr++) = USB_FS_MIDI_machine.tx_buffer[USB_FS_MIDI_machine.tx_buffer_tail];
 801437a:	4b12      	ldr	r3, [pc, #72]	; (80143c4 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 801437c:	f8b3 420c 	ldrh.w	r4, [r3, #524]	; 0x20c
 8014380:	b2a0      	uxth	r0, r4
 8014382:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8014386:	4810      	ldr	r0, [pc, #64]	; (80143c8 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8014388:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
 801438c:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
      if( ++USB_FS_MIDI_machine.tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8014390:	f8b3 020c 	ldrh.w	r0, [r3, #524]	; 0x20c
 8014394:	3001      	adds	r0, #1
 8014396:	b280      	uxth	r0, r0
 8014398:	283f      	cmp	r0, #63	; 0x3f
 801439a:	f8a3 020c 	strh.w	r0, [r3, #524]	; 0x20c
 801439e:	d902      	bls.n	80143a6 <MIOS32_USB_MIDI_TxBufferHandler+0x86>
    	  USB_FS_MIDI_machine.tx_buffer_tail = 0;
 80143a0:	2000      	movs	r0, #0
 80143a2:	f8a3 020c 	strh.w	r0, [r3, #524]	; 0x20c
    // send to IN pipe
		  USB_FS_MIDI_machine.tx_buffer_size -= count;

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 80143a6:	3201      	adds	r2, #1
 80143a8:	e7e4      	b.n	8014374 <MIOS32_USB_MIDI_TxBufferHandler+0x54>
      *(buf_addr++) = USB_FS_MIDI_machine.tx_buffer[USB_FS_MIDI_machine.tx_buffer_tail];
      if( ++USB_FS_MIDI_machine.tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
    	  USB_FS_MIDI_machine.tx_buffer_tail = 0;
    }

    DCD_EP_Tx(&USB_OTG_FS_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
 80143aa:	4805      	ldr	r0, [pc, #20]	; (80143c0 <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 80143ac:	4a06      	ldr	r2, [pc, #24]	; (80143c8 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 80143ae:	2181      	movs	r1, #129	; 0x81
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	f003 fd76 	bl	8017ea2 <DCD_EP_Tx>
  }

  MIOS32_IRQ_Enable();
}
 80143b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    DCD_EP_Tx(&USB_OTG_FS_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
  }

  MIOS32_IRQ_Enable();
 80143ba:	f7fe bbc3 	b.w	8012b44 <MIOS32_IRQ_Enable>
 80143be:	bd10      	pop	{r4, pc}
 80143c0:	200036cc 	.word	0x200036cc
 80143c4:	20000368 	.word	0x20000368
 80143c8:	200007e4 	.word	0x200007e4

080143cc <MIOS32_USB_MIDI_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 80143cc:	b920      	cbnz	r0, 80143d8 <MIOS32_USB_MIDI_Init+0xc>
    return -1; // unsupported mode
#ifndef MIOS32_DONT_USE_USB_HOST
  USB_FS_MIDI_machine.transfer_possible = 0;
 80143ce:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <MIOS32_USB_MIDI_Init+0x14>)
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  USB_HS_MIDI_machine.transfer_possible = 0;
 80143d0:	4904      	ldr	r1, [pc, #16]	; (80143e4 <MIOS32_USB_MIDI_Init+0x18>)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
#ifndef MIOS32_DONT_USE_USB_HOST
  USB_FS_MIDI_machine.transfer_possible = 0;
 80143d2:	7018      	strb	r0, [r3, #0]
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  USB_HS_MIDI_machine.transfer_possible = 0;
 80143d4:	7008      	strb	r0, [r1, #0]
#endif
  return 0; // no error
 80143d6:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80143d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  USB_HS_MIDI_machine.transfer_possible = 0;
#endif
  return 0; // no error
}
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop
 80143e0:	20000368 	.word	0x20000368
 80143e4:	20000584 	.word	0x20000584

080143e8 <MIOS32_USB_MIDI_ChangeConnectionState>:
//! \param[in] device number (0 for OTG_FS, 1 for OTG_HS)
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 dev, u8 connected)
{
 80143e8:	2200      	movs	r2, #0

  if(dev == 0){
 80143ea:	b908      	cbnz	r0, 80143f0 <MIOS32_USB_MIDI_ChangeConnectionState+0x8>
	    // in all cases: re-initialize USB MIDI driver
	    // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
	  USB_FS_MIDI_machine.rx_buffer_tail = USB_FS_MIDI_machine.rx_buffer_head = USB_FS_MIDI_machine.rx_buffer_size = 0;
 80143ec:	4b0f      	ldr	r3, [pc, #60]	; (801442c <MIOS32_USB_MIDI_ChangeConnectionState+0x44>)
 80143ee:	e001      	b.n	80143f4 <MIOS32_USB_MIDI_ChangeConnectionState+0xc>
  }
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  else{
	    // in all cases: re-initialize USB MIDI driver
	    // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
	  USB_HS_MIDI_machine.rx_buffer_tail = USB_HS_MIDI_machine.rx_buffer_head = USB_HS_MIDI_machine.rx_buffer_size = 0;
 80143f0:	4b0f      	ldr	r3, [pc, #60]	; (8014430 <MIOS32_USB_MIDI_ChangeConnectionState+0x48>)
 80143f2:	2000      	movs	r0, #0
 80143f4:	f8a3 0108 	strh.w	r0, [r3, #264]	; 0x108
 80143f8:	f8a3 0106 	strh.w	r0, [r3, #262]	; 0x106
 80143fc:	f8a3 0104 	strh.w	r0, [r3, #260]	; 0x104
	  USB_HS_MIDI_machine.rx_buffer_new_data = 0; // no data received yet
 8014400:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	  USB_HS_MIDI_machine.tx_buffer_tail = USB_HS_MIDI_machine.tx_buffer_head = USB_HS_MIDI_machine.tx_buffer_size = 0;
 8014404:	f8a3 0210 	strh.w	r0, [r3, #528]	; 0x210
 8014408:	f8a3 020e 	strh.w	r0, [r3, #526]	; 0x20e
 801440c:	f8a3 020c 	strh.w	r0, [r3, #524]	; 0x20c
 8014410:	2001      	movs	r0, #1
	  if( connected ) {
 8014412:	b129      	cbz	r1, 8014420 <MIOS32_USB_MIDI_ChangeConnectionState+0x38>
		  USB_HS_MIDI_machine.transfer_possible = 1;
 8014414:	7018      	strb	r0, [r3, #0]
		  USB_HS_MIDI_machine.tx_buffer_busy = 0; // buffer not busy anymore
 8014416:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		  USB_HS_MIDI_machine.transfer_state = USBH_MIDI_IDLE;
 801441a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 801441e:	e002      	b.n	8014426 <MIOS32_USB_MIDI_ChangeConnectionState+0x3e>

	  } else {
		// cable disconnected: disable transfers
		  USB_HS_MIDI_machine.transfer_possible = 0;
 8014420:	701a      	strb	r2, [r3, #0]
		  USB_HS_MIDI_machine.tx_buffer_busy = 1; // buffer busy
 8014422:	f883 0212 	strb.w	r0, [r3, #530]	; 0x212
	  }
  }
#endif

  return 0; // no error
}
 8014426:	2000      	movs	r0, #0
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	20000368 	.word	0x20000368
 8014430:	20000584 	.word	0x20000584

08014434 <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014434:	b570      	push	{r4, r5, r6, lr}
	USB_MIDI_machine_t* machine;
	u8 dev = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8014436:	7ac3      	ldrb	r3, [r0, #11]
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
	USB_MIDI_machine_t* machine;
	u8 dev = 0;
 8014438:	4914      	ldr	r1, [pc, #80]	; (801448c <USBH_InterfaceDeInit+0x58>)
 801443a:	4c15      	ldr	r4, [pc, #84]	; (8014490 <USBH_InterfaceDeInit+0x5c>)
 801443c:	2b01      	cmp	r3, #1
 801443e:	bf08      	it	eq
 8014440:	460c      	moveq	r4, r1
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014442:	4605      	mov	r5, r0
		machine = &USB_HS_MIDI_machine;
#else
		return; //
#endif
	}
	if( machine->hc_num_out ) {
 8014444:	f894 1215 	ldrb.w	r1, [r4, #533]	; 0x215
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
	USB_MIDI_machine_t* machine;
	u8 dev = 0;
 8014448:	bf0c      	ite	eq
 801444a:	2600      	moveq	r6, #0
 801444c:	2601      	movne	r6, #1
		machine = &USB_HS_MIDI_machine;
#else
		return; //
#endif
	}
	if( machine->hc_num_out ) {
 801444e:	b149      	cbz	r1, 8014464 <USBH_InterfaceDeInit+0x30>
		USB_OTG_HC_Halt(pdev,machine->hc_num_out);
 8014450:	f003 f9c7 	bl	80177e2 <USB_OTG_HC_Halt>
		USBH_Free_Channel  (pdev, machine->hc_num_out);
 8014454:	4628      	mov	r0, r5
 8014456:	f894 1215 	ldrb.w	r1, [r4, #533]	; 0x215
 801445a:	f002 fbc9 	bl	8016bf0 <USBH_Free_Channel>
		machine->hc_num_out = 0;     /* Reset the Channel as Free */
 801445e:	2000      	movs	r0, #0
 8014460:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
	}

	if( machine->hc_num_in ) {
 8014464:	f894 1214 	ldrb.w	r1, [r4, #532]	; 0x214
 8014468:	b151      	cbz	r1, 8014480 <USBH_InterfaceDeInit+0x4c>
		USB_OTG_HC_Halt(pdev, machine->hc_num_in);
 801446a:	4628      	mov	r0, r5
 801446c:	f003 f9b9 	bl	80177e2 <USB_OTG_HC_Halt>
		USBH_Free_Channel  (pdev, machine->hc_num_in);
 8014470:	4628      	mov	r0, r5
 8014472:	f894 1214 	ldrb.w	r1, [r4, #532]	; 0x214
 8014476:	f002 fbbb 	bl	8016bf0 <USBH_Free_Channel>
		machine->hc_num_in = 0;     /* Reset the Channel as Free */
 801447a:	2200      	movs	r2, #0
 801447c:	f884 2214 	strb.w	r2, [r4, #532]	; 0x214
	}
	MIOS32_USB_MIDI_ChangeConnectionState(dev, 0);
 8014480:	4630      	mov	r0, r6
 8014482:	2100      	movs	r1, #0
}
 8014484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if( machine->hc_num_in ) {
		USB_OTG_HC_Halt(pdev, machine->hc_num_in);
		USBH_Free_Channel  (pdev, machine->hc_num_in);
		machine->hc_num_in = 0;     /* Reset the Channel as Free */
	}
	MIOS32_USB_MIDI_ChangeConnectionState(dev, 0);
 8014488:	f7ff bfae 	b.w	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>
 801448c:	20000368 	.word	0x20000368
 8014490:	20000584 	.word	0x20000584

08014494 <MIOS32_USB_MIDI_CheckAvailable>:
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
	if(cable <8){
 8014494:	2807      	cmp	r0, #7
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
 8014496:	b510      	push	{r4, lr}
 8014498:	4604      	mov	r4, r0
	if(cable <8){
 801449a:	d808      	bhi.n	80144ae <MIOS32_USB_MIDI_CheckAvailable+0x1a>
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
		if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
 801449c:	f7ff fd1c 	bl	8013ed8 <MIOS32_USB_ForceSingleUSB>
 80144a0:	b108      	cbz	r0, 80144a6 <MIOS32_USB_MIDI_CheckAvailable+0x12>
 80144a2:	b114      	cbz	r4, 80144aa <MIOS32_USB_MIDI_CheckAvailable+0x16>
 80144a4:	e009      	b.n	80144ba <MIOS32_USB_MIDI_CheckAvailable+0x26>
			return 0;
#endif
		if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
 80144a6:	2c03      	cmp	r4, #3
 80144a8:	d808      	bhi.n	80144bc <MIOS32_USB_MIDI_CheckAvailable+0x28>
			return 0;
		//DEBUG_MSG("FS, %s", USB_FS_MIDI_machine.transfer_possible ? "xfer ok" : "xfer not ready");
		return USB_FS_MIDI_machine.transfer_possible ? 1 : 0;
 80144aa:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <MIOS32_USB_MIDI_CheckAvailable+0x2c>)
 80144ac:	e000      	b.n	80144b0 <MIOS32_USB_MIDI_CheckAvailable+0x1c>
	}
#ifndef MIOS32_DONT_USE_USB_HS_HOST
	else{
		// todo: Get available port number from descriptor
		return USB_HS_MIDI_machine.transfer_possible ? 1 : 0;
 80144ae:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <MIOS32_USB_MIDI_CheckAvailable+0x30>)
 80144b0:	7818      	ldrb	r0, [r3, #0]
 80144b2:	3000      	adds	r0, #0
 80144b4:	bf18      	it	ne
 80144b6:	2001      	movne	r0, #1
 80144b8:	bd10      	pop	{r4, pc}
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
	if(cable <8){
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
		if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
			return 0;
 80144ba:	2000      	movs	r0, #0
		// todo: Get available port number from descriptor
		return USB_HS_MIDI_machine.transfer_possible ? 1 : 0;
	}
#endif
	return 0; // never reached
}
 80144bc:	bd10      	pop	{r4, pc}
 80144be:	bf00      	nop
 80144c0:	20000368 	.word	0x20000368
 80144c4:	20000584 	.word	0x20000584

080144c8 <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80144c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBH_HOST *pphost = phost;

	USB_MIDI_machine_t* machine;
	u8 dev = 0;
	u8 cable = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 80144cc:	7ac3      	ldrb	r3, [r0, #11]
 80144ce:	2b01      	cmp	r3, #1
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80144d0:	4606      	mov	r6, r0
 80144d2:	460d      	mov	r5, r1
  USBH_HOST *pphost = phost;

	USB_MIDI_machine_t* machine;
	u8 dev = 0;
	u8 cable = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 80144d4:	d103      	bne.n	80144de <USBH_InterfaceInit+0x16>
{
  USBH_HOST *pphost = phost;

	USB_MIDI_machine_t* machine;
	u8 dev = 0;
	u8 cable = 0;
 80144d6:	2700      	movs	r7, #0
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_HOST *pphost = phost;

	USB_MIDI_machine_t* machine;
	u8 dev = 0;
 80144d8:	46b8      	mov	r8, r7
	u8 cable = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
#ifndef MIOS32_DONT_USE_USB_HOST
		machine = &USB_FS_MIDI_machine;
 80144da:	4c40      	ldr	r4, [pc, #256]	; (80145dc <USBH_InterfaceInit+0x114>)
 80144dc:	e003      	b.n	80144e6 <USBH_InterfaceInit+0x1e>
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		dev = 1;
		cable = 8;
		machine = &USB_HS_MIDI_machine;
 80144de:	4c40      	ldr	r4, [pc, #256]	; (80145e0 <USBH_InterfaceInit+0x118>)
		return USBH_NOT_SUPPORTED; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		dev = 1;
		cable = 8;
 80144e0:	2708      	movs	r7, #8
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}else{
#ifndef MIOS32_DONT_USE_USB_HS_HOST
		dev = 1;
 80144e2:	f04f 0801 	mov.w	r8, #1
		//MIOS32_MIDI_DebugPortSet(USB0);
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}
	MIOS32_USB_MIDI_ChangeConnectionState(dev, 0);
 80144e6:	4640      	mov	r0, r8
 80144e8:	2100      	movs	r1, #0
 80144ea:	f7ff ff7d 	bl	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>
  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 80144ee:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d064      	beq.n	80145c0 <USBH_InterfaceInit+0xf8>

    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 80144f6:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 80144fa:	2a01      	cmp	r2, #1
 80144fc:	d103      	bne.n	8014506 <USBH_InterfaceInit+0x3e>
 80144fe:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
 8014502:	2903      	cmp	r1, #3
 8014504:	d00a      	beq.n	801451c <USBH_InterfaceInit+0x54>
		return USBH_NOT_SUPPORTED; //
#endif
	}
	MIOS32_USB_MIDI_ChangeConnectionState(dev, 0);
  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8014506:	2801      	cmp	r0, #1
 8014508:	dd5a      	ble.n	80145c0 <USBH_InterfaceInit+0xf8>

    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 801450a:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 801450e:	2b01      	cmp	r3, #1
 8014510:	d156      	bne.n	80145c0 <USBH_InterfaceInit+0xf8>
 8014512:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
 8014516:	2803      	cmp	r0, #3
 8014518:	d152      	bne.n	80145c0 <USBH_InterfaceInit+0xf8>
 801451a:	e000      	b.n	801451e <USBH_InterfaceInit+0x56>
		return USBH_NOT_SUPPORTED; //
#endif
	}
	MIOS32_USB_MIDI_ChangeConnectionState(dev, 0);
  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 801451c:	2300      	movs	r3, #0
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
	(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
 801451e:	015b      	lsls	r3, r3, #5
 8014520:	18ea      	adds	r2, r5, r3
 8014522:	3250      	adds	r2, #80	; 0x50
 8014524:	7891      	ldrb	r1, [r2, #2]
 8014526:	0608      	lsls	r0, r1, #24
 8014528:	d505      	bpl.n	8014536 <USBH_InterfaceInit+0x6e>
    	  machine->BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 801452a:	f884 1217 	strb.w	r1, [r4, #535]	; 0x217
    	  machine->BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 801452e:	8892      	ldrh	r2, [r2, #4]
 8014530:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
 8014534:	e004      	b.n	8014540 <USBH_InterfaceInit+0x78>
      } else {
    	  machine->BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8014536:	f884 1216 	strb.w	r1, [r4, #534]	; 0x216
    	  machine->BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 801453a:	8890      	ldrh	r0, [r2, #4]
 801453c:	f8a4 021a 	strh.w	r0, [r4, #538]	; 0x21a
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
 8014540:	18eb      	adds	r3, r5, r3
 8014542:	3358      	adds	r3, #88	; 0x58
 8014544:	7898      	ldrb	r0, [r3, #2]
 8014546:	0601      	lsls	r1, r0, #24
 8014548:	d505      	bpl.n	8014556 <USBH_InterfaceInit+0x8e>
    	  machine->BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 801454a:	f884 0217 	strb.w	r0, [r4, #535]	; 0x217
    	  machine->BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 801454e:	889a      	ldrh	r2, [r3, #4]
 8014550:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
 8014554:	e004      	b.n	8014560 <USBH_InterfaceInit+0x98>
      } else {
    	  machine->BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8014556:	f884 0216 	strb.w	r0, [r4, #534]	; 0x216
    	  machine->BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 801455a:	8899      	ldrh	r1, [r3, #4]
 801455c:	f8a4 121a 	strh.w	r1, [r4, #538]	; 0x21a
      }

      machine->hc_num_out = USBH_Alloc_Channel(pdev, machine->BulkOutEp);
 8014560:	f894 1216 	ldrb.w	r1, [r4, #534]	; 0x216
 8014564:	4630      	mov	r0, r6
 8014566:	f002 fb2a 	bl	8016bbe <USBH_Alloc_Channel>
      machine->hc_num_in = USBH_Alloc_Channel(pdev, machine->BulkInEp);
 801456a:	f894 1217 	ldrb.w	r1, [r4, #535]	; 0x217
      } else {
    	  machine->BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
    	  machine->BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      machine->hc_num_out = USBH_Alloc_Channel(pdev, machine->BulkOutEp);
 801456e:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
      machine->hc_num_in = USBH_Alloc_Channel(pdev, machine->BulkInEp);
 8014572:	4630      	mov	r0, r6
 8014574:	f002 fb23 	bl	8016bbe <USBH_Alloc_Channel>
      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8014578:	f04f 0902 	mov.w	r9, #2
    	  machine->BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
    	  machine->BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      machine->hc_num_out = USBH_Alloc_Channel(pdev, machine->BulkOutEp);
      machine->hc_num_in = USBH_Alloc_Channel(pdev, machine->BulkInEp);
 801457c:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8014580:	f894 1215 	ldrb.w	r1, [r4, #533]	; 0x215
 8014584:	f8cd 9000 	str.w	r9, [sp]
 8014588:	f8b4 021a 	ldrh.w	r0, [r4, #538]	; 0x21a
 801458c:	f895 2020 	ldrb.w	r2, [r5, #32]
 8014590:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014594:	9001      	str	r0, [sp, #4]
 8014596:	4630      	mov	r0, r6
 8014598:	f002 faca 	bl	8016b30 <USBH_Open_Channel>
			  pphost->device_prop.address,
			  pphost->device_prop.speed,
			  EP_TYPE_BULK,
			  machine->BulkOutEpSize);

      USBH_Open_Channel(pdev,
 801459c:	f894 1214 	ldrb.w	r1, [r4, #532]	; 0x214
 80145a0:	f8cd 9000 	str.w	r9, [sp]
 80145a4:	f894 0218 	ldrb.w	r0, [r4, #536]	; 0x218
 80145a8:	f895 2020 	ldrb.w	r2, [r5, #32]
 80145ac:	9001      	str	r0, [sp, #4]
 80145ae:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80145b2:	4630      	mov	r0, r6
 80145b4:	f002 fabc 	bl	8016b30 <USBH_Open_Channel>
			  pphost->device_prop.speed,
			  EP_TYPE_BULK,
			  machine->BulkInEpSize);


      MIOS32_USB_MIDI_ChangeConnectionState(dev, 1);
 80145b8:	4640      	mov	r0, r8
 80145ba:	2101      	movs	r1, #1
 80145bc:	f7ff ff14 	bl	80143e8 <MIOS32_USB_MIDI_ChangeConnectionState>
      break;
    }
  }

  if( MIOS32_USB_MIDI_CheckAvailable(cable) == 0 ) {
 80145c0:	4638      	mov	r0, r7
 80145c2:	f7ff ff67 	bl	8014494 <MIOS32_USB_MIDI_CheckAvailable>
 80145c6:	b928      	cbnz	r0, 80145d4 <USBH_InterfaceInit+0x10c>
    pphost->usr_cb->DeviceNotSupported();
 80145c8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 80145cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80145ce:	4788      	blx	r1
    return USBH_NOT_SUPPORTED;
 80145d0:	2003      	movs	r0, #3
 80145d2:	e000      	b.n	80145d6 <USBH_InterfaceInit+0x10e>
  }
  return USBH_OK;
 80145d4:	2000      	movs	r0, #0

}
 80145d6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 80145da:	bf00      	nop
 80145dc:	20000368 	.word	0x20000368
 80145e0:	20000584 	.word	0x20000584

080145e4 <MIOS32_USB_MIDI_PackageSend_NonBlocking>:
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 80145e4:	b538      	push	{r3, r4, r5, lr}
  // device available?
if( !USB_FS_MIDI_machine.transfer_possible )
 80145e6:	4c1a      	ldr	r4, [pc, #104]	; (8014650 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 80145e8:	7823      	ldrb	r3, [r4, #0]
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 80145ea:	4605      	mov	r5, r0
  // device available?
if( !USB_FS_MIDI_machine.transfer_possible )
 80145ec:	b913      	cbnz	r3, 80145f4 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x10>
//if( !USB_HS_MIDI_machine.transfer_possible && !USB_FS_MIDI_machine.transfer_possible )
    return -1;
 80145ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145f2:	bd38      	pop	{r3, r4, r5, pc}

  // buffer full?
  if( USB_FS_MIDI_machine.tx_buffer_size >= (MIOS32_USB_MIDI_TX_BUFFER_SIZE-1) ) {
 80145f4:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
 80145f8:	b281      	uxth	r1, r0
 80145fa:	293e      	cmp	r1, #62	; 0x3e
 80145fc:	d907      	bls.n	801460e <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x2a>
    // call USB handler, so that we are able to get the buffer free again on next execution
    // (this call simplifies polling loops!)
    MIOS32_USB_MIDI_TxBufferHandler();
 80145fe:	f7ff fe8f 	bl	8014320 <MIOS32_USB_MIDI_TxBufferHandler>

    // device still available?
    // (ensures that polling loop terminates if cable has been disconnected)
    if( !USB_FS_MIDI_machine.transfer_possible )
 8014602:	7823      	ldrb	r3, [r4, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d0f2      	beq.n	80145ee <MIOS32_USB_MIDI_PackageSend_NonBlocking+0xa>
      return -1;

    // notify that buffer was full (request retry)
    return -2;
 8014608:	f06f 0001 	mvn.w	r0, #1
 801460c:	bd38      	pop	{r3, r4, r5, pc}
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
 801460e:	f7fe fa85 	bl	8012b1c <MIOS32_IRQ_Disable>
  USB_FS_MIDI_machine.tx_buffer[USB_FS_MIDI_machine.tx_buffer_head++] = package.ALL;
 8014612:	f8b4 220e 	ldrh.w	r2, [r4, #526]	; 0x20e
 8014616:	b293      	uxth	r3, r2
 8014618:	1c59      	adds	r1, r3, #1
 801461a:	b28a      	uxth	r2, r1
 801461c:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
 8014620:	eb04 0083 	add.w	r0, r4, r3, lsl #2
  if( USB_FS_MIDI_machine.tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8014624:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
    return -2;
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
  USB_FS_MIDI_machine.tx_buffer[USB_FS_MIDI_machine.tx_buffer_head++] = package.ALL;
 8014628:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
  if( USB_FS_MIDI_machine.tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 801462c:	b298      	uxth	r0, r3
 801462e:	283f      	cmp	r0, #63	; 0x3f
 8014630:	d902      	bls.n	8014638 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x54>
	  USB_FS_MIDI_machine.tx_buffer_head = 0;
 8014632:	2100      	movs	r1, #0
 8014634:	f8a4 120e 	strh.w	r1, [r4, #526]	; 0x20e
  ++USB_FS_MIDI_machine.tx_buffer_size;
 8014638:	4b05      	ldr	r3, [pc, #20]	; (8014650 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 801463a:	f8b3 2210 	ldrh.w	r2, [r3, #528]	; 0x210
 801463e:	1c50      	adds	r0, r2, #1
 8014640:	b281      	uxth	r1, r0
 8014642:	f8a3 1210 	strh.w	r1, [r3, #528]	; 0x210
  MIOS32_IRQ_Enable();
 8014646:	f7fe fa7d 	bl	8012b44 <MIOS32_IRQ_Enable>

  return 0;
 801464a:	2000      	movs	r0, #0
}
 801464c:	bd38      	pop	{r3, r4, r5, pc}
 801464e:	bf00      	nop
 8014650:	20000368 	.word	0x20000368

08014654 <MIOS32_USB_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: USB not connected
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend(mios32_midi_package_t package)
{
 8014654:	b510      	push	{r4, lr}
 8014656:	4604      	mov	r4, r0
  // was successfull (MIDI port will be used by host), timeout value is
  // reset again

  s32 error;

  while( (error=MIOS32_USB_MIDI_PackageSend_NonBlocking(package)) == -2 ) {
 8014658:	4620      	mov	r0, r4
 801465a:	f7ff ffc3 	bl	80145e4 <MIOS32_USB_MIDI_PackageSend_NonBlocking>
 801465e:	1c83      	adds	r3, r0, #2
 8014660:	d108      	bne.n	8014674 <MIOS32_USB_MIDI_PackageSend+0x20>
    if( timeout_ctr >= 10000 )
 8014662:	4b07      	ldr	r3, [pc, #28]	; (8014680 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8014664:	881a      	ldrh	r2, [r3, #0]
 8014666:	f242 710f 	movw	r1, #9999	; 0x270f
 801466a:	428a      	cmp	r2, r1
 801466c:	d807      	bhi.n	801467e <MIOS32_USB_MIDI_PackageSend+0x2a>
      break;
    ++timeout_ctr;
 801466e:	1c50      	adds	r0, r2, #1
 8014670:	8018      	strh	r0, [r3, #0]
 8014672:	e7f1      	b.n	8014658 <MIOS32_USB_MIDI_PackageSend+0x4>
  }

  if( error >= 0 ) // no error: reset timeout counter
 8014674:	2800      	cmp	r0, #0
 8014676:	db02      	blt.n	801467e <MIOS32_USB_MIDI_PackageSend+0x2a>
    timeout_ctr = 0;
 8014678:	4b01      	ldr	r3, [pc, #4]	; (8014680 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 801467a:	2200      	movs	r2, #0
 801467c:	801a      	strh	r2, [r3, #0]

  return error;
}
 801467e:	bd10      	pop	{r4, pc}
 8014680:	200007a0 	.word	0x200007a0

08014684 <MIOS32_USB_MIDI_PackageReceive>:
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 8014684:	b570      	push	{r4, r5, r6, lr}
	// package received from OTG_FS?
	if( USB_FS_MIDI_machine.rx_buffer_size){
 8014686:	4c22      	ldr	r4, [pc, #136]	; (8014710 <MIOS32_USB_MIDI_PackageReceive+0x8c>)
 8014688:	f8b4 6108 	ldrh.w	r6, [r4, #264]	; 0x108
 801468c:	b2b6      	uxth	r6, r6
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 801468e:	4605      	mov	r5, r0
	// package received from OTG_FS?
	if( USB_FS_MIDI_machine.rx_buffer_size){
 8014690:	b1ae      	cbz	r6, 80146be <MIOS32_USB_MIDI_PackageReceive+0x3a>
		// get package - this operation should be atomic!
		MIOS32_IRQ_Disable();
 8014692:	f7fe fa43 	bl	8012b1c <MIOS32_IRQ_Disable>
		package->ALL = USB_FS_MIDI_machine.rx_buffer[USB_FS_MIDI_machine.rx_buffer_tail];
 8014696:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 801469a:	b281      	uxth	r1, r0
 801469c:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 80146a0:	6853      	ldr	r3, [r2, #4]
 80146a2:	602b      	str	r3, [r5, #0]
		if( ++USB_FS_MIDI_machine.rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 80146a4:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 80146a8:	1c41      	adds	r1, r0, #1
 80146aa:	b28a      	uxth	r2, r1
 80146ac:	2a3f      	cmp	r2, #63	; 0x3f
 80146ae:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
 80146b2:	d902      	bls.n	80146ba <MIOS32_USB_MIDI_PackageReceive+0x36>
			USB_FS_MIDI_machine.rx_buffer_tail = 0;
 80146b4:	2300      	movs	r3, #0
 80146b6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
		--USB_FS_MIDI_machine.rx_buffer_size;
 80146ba:	4c15      	ldr	r4, [pc, #84]	; (8014710 <MIOS32_USB_MIDI_PackageReceive+0x8c>)
 80146bc:	e018      	b.n	80146f0 <MIOS32_USB_MIDI_PackageReceive+0x6c>
		MIOS32_IRQ_Enable();
		return USB_FS_MIDI_machine.rx_buffer_size;

#ifndef MIOS32_DONT_USE_USB_HS_HOST
	// package received from OTG_HS?
	}else if( USB_HS_MIDI_machine.rx_buffer_size ){
 80146be:	4c15      	ldr	r4, [pc, #84]	; (8014714 <MIOS32_USB_MIDI_PackageReceive+0x90>)
 80146c0:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 80146c4:	b298      	uxth	r0, r3
 80146c6:	b1f8      	cbz	r0, 8014708 <MIOS32_USB_MIDI_PackageReceive+0x84>
		// get package - this operation should be atomic!
		MIOS32_IRQ_Disable();
 80146c8:	f7fe fa28 	bl	8012b1c <MIOS32_IRQ_Disable>
		package->ALL = USB_HS_MIDI_machine.rx_buffer[USB_HS_MIDI_machine.rx_buffer_tail];
 80146cc:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
 80146d0:	b28a      	uxth	r2, r1
 80146d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80146d6:	6858      	ldr	r0, [r3, #4]
 80146d8:	6028      	str	r0, [r5, #0]
		if( ++USB_HS_MIDI_machine.rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 80146da:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
 80146de:	1c4a      	adds	r2, r1, #1
 80146e0:	b293      	uxth	r3, r2
 80146e2:	2b3f      	cmp	r3, #63	; 0x3f
 80146e4:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
			USB_HS_MIDI_machine.rx_buffer_tail = 0;
 80146e8:	bf88      	it	hi
 80146ea:	f8a4 6104 	strhhi.w	r6, [r4, #260]	; 0x104
		--USB_HS_MIDI_machine.rx_buffer_size;
 80146ee:	4c09      	ldr	r4, [pc, #36]	; (8014714 <MIOS32_USB_MIDI_PackageReceive+0x90>)
 80146f0:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
 80146f4:	1e41      	subs	r1, r0, #1
 80146f6:	b28a      	uxth	r2, r1
 80146f8:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		MIOS32_IRQ_Enable();
 80146fc:	f7fe fa22 	bl	8012b44 <MIOS32_IRQ_Enable>
		return USB_HS_MIDI_machine.rx_buffer_size;
 8014700:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 8014704:	b298      	uxth	r0, r3
 8014706:	bd70      	pop	{r4, r5, r6, pc}
#endif
	}else return -1;
 8014708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801470c:	bd70      	pop	{r4, r5, r6, pc}
 801470e:	bf00      	nop
 8014710:	20000368 	.word	0x20000368
 8014714:	20000584 	.word	0x20000584

08014718 <MIOS32_USB_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Periodic_mS(void)
{
 8014718:	b508      	push	{r3, lr}
  if( USB_OTG_IsHostMode(&USB_OTG_FS_dev) ) {
 801471a:	480d      	ldr	r0, [pc, #52]	; (8014750 <MIOS32_USB_MIDI_Periodic_mS+0x38>)
 801471c:	f002 fe84 	bl	8017428 <USB_OTG_IsHostMode>
 8014720:	b140      	cbz	r0, 8014734 <MIOS32_USB_MIDI_Periodic_mS+0x1c>
#ifndef MIOS32_DONT_USE_USB_HOST
    // process the USB host events for OTG_FS
	if(USB_FS_Host_Class != USBH_IS_HID)USBH_Process(&USB_OTG_FS_dev, &USB_FS_Host);
 8014722:	4b0c      	ldr	r3, [pc, #48]	; (8014754 <MIOS32_USB_MIDI_Periodic_mS+0x3c>)
 8014724:	7818      	ldrb	r0, [r3, #0]
 8014726:	2802      	cmp	r0, #2
 8014728:	d008      	beq.n	801473c <MIOS32_USB_MIDI_Periodic_mS+0x24>
 801472a:	4809      	ldr	r0, [pc, #36]	; (8014750 <MIOS32_USB_MIDI_Periodic_mS+0x38>)
 801472c:	490a      	ldr	r1, [pc, #40]	; (8014758 <MIOS32_USB_MIDI_Periodic_mS+0x40>)
 801472e:	f002 f857 	bl	80167e0 <USBH_Process>
 8014732:	e003      	b.n	801473c <MIOS32_USB_MIDI_Periodic_mS+0x24>
#endif
  } else {
    // check for received packages
    MIOS32_USB_MIDI_RxBufferHandler();
 8014734:	f7ff fd9c 	bl	8014270 <MIOS32_USB_MIDI_RxBufferHandler>

    // check for packages which should be transmitted
    MIOS32_USB_MIDI_TxBufferHandler();
 8014738:	f7ff fdf2 	bl	8014320 <MIOS32_USB_MIDI_TxBufferHandler>
  }
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  	// process the USB host events for OTG_HS
  	if(USB_HS_Host_Class != USBH_IS_HID)USBH_Process(&USB_OTG_HS_dev, &USB_HS_Host);
 801473c:	4907      	ldr	r1, [pc, #28]	; (801475c <MIOS32_USB_MIDI_Periodic_mS+0x44>)
 801473e:	780a      	ldrb	r2, [r1, #0]
 8014740:	2a02      	cmp	r2, #2
 8014742:	d003      	beq.n	801474c <MIOS32_USB_MIDI_Periodic_mS+0x34>
 8014744:	4806      	ldr	r0, [pc, #24]	; (8014760 <MIOS32_USB_MIDI_Periodic_mS+0x48>)
 8014746:	4907      	ldr	r1, [pc, #28]	; (8014764 <MIOS32_USB_MIDI_Periodic_mS+0x4c>)
 8014748:	f002 f84a 	bl	80167e0 <USBH_Process>
#endif
  return 0;
}
 801474c:	2000      	movs	r0, #0
 801474e:	bd08      	pop	{r3, pc}
 8014750:	200036cc 	.word	0x200036cc
 8014754:	200035e0 	.word	0x200035e0
 8014758:	20004bf4 	.word	0x20004bf4
 801475c:	200036c8 	.word	0x200036c8
 8014760:	20004160 	.word	0x20004160
 8014764:	20003624 	.word	0x20003624

08014768 <MIOS32_USB_MIDI_EP1_IN_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP1_IN_Callback(u8 bEP, u8 bEPStatus)
{
  // package has been sent
	USB_FS_MIDI_machine.tx_buffer_busy = 0;
 8014768:	4b02      	ldr	r3, [pc, #8]	; (8014774 <MIOS32_USB_MIDI_EP1_IN_Callback+0xc>)
 801476a:	2200      	movs	r2, #0
 801476c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212

  // check for next package
  MIOS32_USB_MIDI_TxBufferHandler();
 8014770:	f7ff bdd6 	b.w	8014320 <MIOS32_USB_MIDI_TxBufferHandler>
 8014774:	20000368 	.word	0x20000368

08014778 <MIOS32_USB_MIDI_EP2_OUT_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP2_OUT_Callback(u8 bEP, u8 bEPStatus)
{
  // put package into buffer
	USB_FS_MIDI_machine.rx_buffer_new_data = 1;
 8014778:	4b02      	ldr	r3, [pc, #8]	; (8014784 <MIOS32_USB_MIDI_EP2_OUT_Callback+0xc>)
 801477a:	2201      	movs	r2, #1
 801477c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  MIOS32_USB_MIDI_RxBufferHandler();
 8014780:	f7ff bd76 	b.w	8014270 <MIOS32_USB_MIDI_RxBufferHandler>
 8014784:	20000368 	.word	0x20000368

08014788 <USBH_Handle>:
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev , void   *phost)
{
 8014788:	b570      	push	{r4, r5, r6, lr}
	USBH_HOST *pphost = phost;
	USBH_Status status = USBH_OK;
	USB_HID_machine_t* machine;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
#ifndef MIOS32_DONT_USE_USB_HOST
		machine = &USB_FS_HID_machine;
 801478a:	4b31      	ldr	r3, [pc, #196]	; (8014850 <USBH_Handle+0xc8>)
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev , void   *phost)
{
	USBH_HOST *pphost = phost;
	USBH_Status status = USBH_OK;
	USB_HID_machine_t* machine;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 801478c:	7ac4      	ldrb	r4, [r0, #11]
#ifndef MIOS32_DONT_USE_USB_HOST
		machine = &USB_FS_HID_machine;
 801478e:	4a31      	ldr	r2, [pc, #196]	; (8014854 <USBH_Handle+0xcc>)
 8014790:	2c01      	cmp	r4, #1
 8014792:	bf14      	ite	ne
 8014794:	4614      	movne	r4, r2
 8014796:	461c      	moveq	r4, r3
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev , void   *phost)
{
 8014798:	4605      	mov	r5, r0
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}

	switch (machine->state)
 801479a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev , void   *phost)
{
 801479e:	460e      	mov	r6, r1
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}

	switch (machine->state)
 80147a0:	2805      	cmp	r0, #5
 80147a2:	d853      	bhi.n	801484c <USBH_Handle+0xc4>
 80147a4:	e8df f000 	tbb	[pc, r0]
 80147a8:	0f525203 	.word	0x0f525203
 80147ac:	2309      	.short	0x2309
	{

	case HID_IDLE:
		machine->cb->Init();
 80147ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80147b0:	6811      	ldr	r1, [r2, #0]
 80147b2:	4788      	blx	r1
		machine->state = HID_SYNC;
 80147b4:	2304      	movs	r3, #4
 80147b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44

	case HID_SYNC:

		/* Sync with start of Even Frame */
		if(USB_OTG_IsEvenFrame(pdev) == TRUE)
 80147ba:	4628      	mov	r0, r5
 80147bc:	f002 fe41 	bl	8017442 <USB_OTG_IsEvenFrame>
 80147c0:	2801      	cmp	r0, #1
 80147c2:	d143      	bne.n	801484c <USBH_Handle+0xc4>
 80147c4:	e03f      	b.n	8014846 <USBH_Handle+0xbe>
		}
		break;

	case HID_GET_DATA:

		USBH_InterruptReceiveData(pdev,
 80147c6:	1ca1      	adds	r1, r4, #2
 80147c8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80147cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80147d0:	4628      	mov	r0, r5
 80147d2:	f002 facd 	bl	8016d70 <USBH_InterruptReceiveData>
				machine->buff,
				machine->length,
				machine->hc_num_in);
		machine->start_toggle = 1;
 80147d6:	2101      	movs	r1, #1

		machine->state = HID_POLL;
 80147d8:	2305      	movs	r3, #5

		USBH_InterruptReceiveData(pdev,
				machine->buff,
				machine->length,
				machine->hc_num_in);
		machine->start_toggle = 1;
 80147da:	7061      	strb	r1, [r4, #1]

		machine->state = HID_POLL;
 80147dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		machine->timer = HCD_GetCurrentFrame(pdev);
 80147e0:	4628      	mov	r0, r5
 80147e2:	f003 fe47 	bl	8018474 <HCD_GetCurrentFrame>
 80147e6:	b280      	uxth	r0, r0
 80147e8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
		break;
 80147ec:	e02e      	b.n	801484c <USBH_Handle+0xc4>

	case HID_POLL:
		if(( HCD_GetCurrentFrame(pdev) - machine->timer) >= machine->poll)
 80147ee:	4628      	mov	r0, r5
 80147f0:	f003 fe40 	bl	8018474 <HCD_GetCurrentFrame>
 80147f4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80147f8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80147fc:	b28b      	uxth	r3, r1
 80147fe:	1ac0      	subs	r0, r0, r3
 8014800:	4290      	cmp	r0, r2
 8014802:	d220      	bcs.n	8014846 <USBH_Handle+0xbe>
		{
			machine->state = HID_GET_DATA;
		}
		else if(HCD_GetURB_State(pdev , machine->hc_num_in) == URB_DONE)
 8014804:	4628      	mov	r0, r5
 8014806:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 801480a:	f003 fe37 	bl	801847c <HCD_GetURB_State>
 801480e:	2801      	cmp	r0, #1
 8014810:	d109      	bne.n	8014826 <USBH_Handle+0x9e>
		{
			if(machine->start_toggle == 1) /* handle data once */
 8014812:	7861      	ldrb	r1, [r4, #1]
 8014814:	2901      	cmp	r1, #1
 8014816:	d119      	bne.n	801484c <USBH_Handle+0xc4>
			{
				machine->start_toggle = 0;
				machine->cb->Decode(machine->buff);
 8014818:	6d20      	ldr	r0, [r4, #80]	; 0x50
		}
		else if(HCD_GetURB_State(pdev , machine->hc_num_in) == URB_DONE)
		{
			if(machine->start_toggle == 1) /* handle data once */
			{
				machine->start_toggle = 0;
 801481a:	2300      	movs	r3, #0
 801481c:	7063      	strb	r3, [r4, #1]
				machine->cb->Decode(machine->buff);
 801481e:	6842      	ldr	r2, [r0, #4]
 8014820:	1ca0      	adds	r0, r4, #2
 8014822:	4790      	blx	r2
 8014824:	e012      	b.n	801484c <USBH_Handle+0xc4>
			}
		}
		else if(HCD_GetURB_State(pdev, machine->hc_num_in) == URB_STALL) /* IN Endpoint Stalled */
 8014826:	4628      	mov	r0, r5
 8014828:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 801482c:	f003 fe26 	bl	801847c <HCD_GetURB_State>
 8014830:	2804      	cmp	r0, #4
 8014832:	d10b      	bne.n	801484c <USBH_Handle+0xc4>
		{

			/* Issue Clear Feature on interrupt IN endpoint */
			if( (USBH_ClrFeature(pdev,
 8014834:	4628      	mov	r0, r5
 8014836:	4631      	mov	r1, r6
 8014838:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 801483c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8014840:	f002 fc5c 	bl	80170fc <USBH_ClrFeature>
 8014844:	b910      	cbnz	r0, 801484c <USBH_Handle+0xc4>
					pphost,
					machine->ep_addr,
					machine->hc_num_in)) == USBH_OK)
			{
				/* Change state to issue next IN token */
				machine->state = HID_GET_DATA;
 8014846:	2003      	movs	r0, #3
 8014848:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44

	default:
		break;
	}
	return status;
}
 801484c:	2000      	movs	r0, #0
 801484e:	bd70      	pop	{r4, r5, r6, pc}
 8014850:	20004c98 	.word	0x20004c98
 8014854:	20004d54 	.word	0x20004d54

08014858 <MIOS32_USB_HID_Gamepad_Decode>:
 * @param  data : Mouse data to be displayed
 * @retval None
 */
void MIOS32_USB_HID_Gamepad_Decode(uint8_t *data)
{
	DEBUG_MSG("Gamepad datas %d", *data);
 8014858:	7801      	ldrb	r1, [r0, #0]
 801485a:	4801      	ldr	r0, [pc, #4]	; (8014860 <MIOS32_USB_HID_Gamepad_Decode+0x8>)
 801485c:	f7fd b9da 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8014860:	0801c914 	.word	0x0801c914

08014864 <MIOS32_USB_HID_Gamepad_Init>:
 *         Init Mouse window
 * @param  None
 * @retval None
 */
void MIOS32_USB_HID_Gamepad_Init	(void)
{
 8014864:	b508      	push	{r3, lr}

  DEBUG_MSG((void*)USB_HID_GampadStatus);
 8014866:	4804      	ldr	r0, [pc, #16]	; (8014878 <MIOS32_USB_HID_Gamepad_Init+0x14>)
 8014868:	f7fd f9d4 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("\n\n\n\n\n\n\n\n");
 801486c:	4803      	ldr	r0, [pc, #12]	; (801487c <MIOS32_USB_HID_Gamepad_Init+0x18>)

}
 801486e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void MIOS32_USB_HID_Gamepad_Init	(void)
{

  DEBUG_MSG((void*)USB_HID_GampadStatus);
  DEBUG_MSG("\n\n\n\n\n\n\n\n");
 8014872:	f7fd b9cf 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8014876:	bf00      	nop
 8014878:	0801c8ec 	.word	0x0801c8ec
 801487c:	0801c925 	.word	0x0801c925

08014880 <MIOS32_USB_HID_Keyboard_Decode>:
 *         Process Keyboard data
 * @param  data : Keyboard data to be displayed
 * @retval None
 */
void  MIOS32_USB_HID_Keyboard_Decode (uint8_t *pbuf)
{
 8014880:	b538      	push	{r3, r4, r5, lr}
	uint8_t   jx;
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
	nbr_keys_new  = 0;
 8014882:	492a      	ldr	r1, [pc, #168]	; (801492c <MIOS32_USB_HID_Keyboard_Decode+0xac>)
	uint8_t   ix;
	uint8_t   jx;
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
 8014884:	4a2a      	ldr	r2, [pc, #168]	; (8014930 <MIOS32_USB_HID_Keyboard_Decode+0xb0>)
 8014886:	2300      	movs	r3, #0
	nbr_keys_new  = 0;
 8014888:	700b      	strb	r3, [r1, #0]
	nbr_keys_last = 0;
	key_newest    = 0x00;
 801488a:	492a      	ldr	r1, [pc, #168]	; (8014934 <MIOS32_USB_HID_Keyboard_Decode+0xb4>)
	uint8_t   ix;
	uint8_t   jx;
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
 801488c:	7013      	strb	r3, [r2, #0]
	nbr_keys_new  = 0;
	nbr_keys_last = 0;
	key_newest    = 0x00;
 801488e:	700b      	strb	r3, [r1, #0]


	/* Check if Shift key is pressed */
	if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 8014890:	7801      	ldrb	r1, [r0, #0]
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
	nbr_keys_new  = 0;
	nbr_keys_last = 0;
 8014892:	4a29      	ldr	r2, [pc, #164]	; (8014938 <MIOS32_USB_HID_Keyboard_Decode+0xb8>)
	key_newest    = 0x00;


	/* Check if Shift key is pressed */
	if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 8014894:	2902      	cmp	r1, #2
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
	nbr_keys_new  = 0;
	nbr_keys_last = 0;
 8014896:	7013      	strb	r3, [r2, #0]
 8014898:	4a28      	ldr	r2, [pc, #160]	; (801493c <MIOS32_USB_HID_Keyboard_Decode+0xbc>)
	key_newest    = 0x00;


	/* Check if Shift key is pressed */
	if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 801489a:	d001      	beq.n	80148a0 <MIOS32_USB_HID_Keyboard_Decode+0x20>
 801489c:	2920      	cmp	r1, #32
 801489e:	d100      	bne.n	80148a2 <MIOS32_USB_HID_Keyboard_Decode+0x22>
		shift = TRUE;
 80148a0:	2301      	movs	r3, #1
	} else {
		shift = FALSE;
 80148a2:	7013      	strb	r3, [r2, #0]
 *         Process Keyboard data
 * @param  data : Keyboard data to be displayed
 * @retval None
 */
void  MIOS32_USB_HID_Keyboard_Decode (uint8_t *pbuf)
{
 80148a4:	2300      	movs	r3, #0
		shift = TRUE;
	} else {
		shift = FALSE;
	}

	error = FALSE;
 80148a6:	461a      	mov	r2, r3
 * @brief  USR_KEYBRD_ProcessData
 *         Process Keyboard data
 * @param  data : Keyboard data to be displayed
 * @retval None
 */
void  MIOS32_USB_HID_Keyboard_Decode (uint8_t *pbuf)
 80148a8:	18c1      	adds	r1, r0, r3
 80148aa:	3301      	adds	r3, #1
	error = FALSE;

	/* Check for the value of pressed key */
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
		if ((pbuf[ix] == 0x01) ||
				(pbuf[ix] == 0x02) ||
 80148ac:	7889      	ldrb	r1, [r1, #2]

	error = FALSE;

	/* Check for the value of pressed key */
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
		if ((pbuf[ix] == 0x01) ||
 80148ae:	3901      	subs	r1, #1
				(pbuf[ix] == 0x02) ||
				(pbuf[ix] == 0x03)) {
			error = TRUE;
 80148b0:	2902      	cmp	r1, #2
 80148b2:	bf98      	it	ls
 80148b4:	2201      	movls	r2, #1
	}

	error = FALSE;

	/* Check for the value of pressed key */
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80148b6:	2b06      	cmp	r3, #6
 80148b8:	d1f6      	bne.n	80148a8 <MIOS32_USB_HID_Keyboard_Decode+0x28>
				(pbuf[ix] == 0x03)) {
			error = TRUE;
		}
	}

	if (error == TRUE) {
 80148ba:	2a01      	cmp	r2, #1
 80148bc:	d034      	beq.n	8014928 <MIOS32_USB_HID_Keyboard_Decode+0xa8>
 80148be:	4c1c      	ldr	r4, [pc, #112]	; (8014930 <MIOS32_USB_HID_Keyboard_Decode+0xb0>)
 80148c0:	491a      	ldr	r1, [pc, #104]	; (801492c <MIOS32_USB_HID_Keyboard_Decode+0xac>)
 80148c2:	7822      	ldrb	r2, [r4, #0]
 80148c4:	780b      	ldrb	r3, [r1, #0]
 80148c6:	2100      	movs	r1, #0
 * @brief  USR_KEYBRD_ProcessData
 *         Process Keyboard data
 * @param  data : Keyboard data to be displayed
 * @retval None
 */
void  MIOS32_USB_HID_Keyboard_Decode (uint8_t *pbuf)
 80148c8:	1844      	adds	r4, r0, r1
	}

	nbr_keys     = 0;
	nbr_keys_new = 0;
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
		if (pbuf[ix] != 0) {
 80148ca:	78a4      	ldrb	r4, [r4, #2]
 80148cc:	b13c      	cbz	r4, 80148de <MIOS32_USB_HID_Keyboard_Decode+0x5e>
			keys[nbr_keys] = pbuf[ix];
 80148ce:	4d1c      	ldr	r5, [pc, #112]	; (8014940 <MIOS32_USB_HID_Keyboard_Decode+0xc0>)
 80148d0:	54ac      	strb	r4, [r5, r2]
					break;
				}
			}

			if (jx == nbr_keys_last) {
				keys_new[nbr_keys_new] = pbuf[ix];
 80148d2:	4d1c      	ldr	r5, [pc, #112]	; (8014944 <MIOS32_USB_HID_Keyboard_Decode+0xc4>)
	nbr_keys     = 0;
	nbr_keys_new = 0;
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
		if (pbuf[ix] != 0) {
			keys[nbr_keys] = pbuf[ix];
			nbr_keys++;
 80148d4:	3201      	adds	r2, #1
					break;
				}
			}

			if (jx == nbr_keys_last) {
				keys_new[nbr_keys_new] = pbuf[ix];
 80148d6:	54ec      	strb	r4, [r5, r3]
				nbr_keys_new++;
 80148d8:	3301      	adds	r3, #1
	nbr_keys     = 0;
	nbr_keys_new = 0;
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
		if (pbuf[ix] != 0) {
			keys[nbr_keys] = pbuf[ix];
			nbr_keys++;
 80148da:	b2d2      	uxtb	r2, r2
				}
			}

			if (jx == nbr_keys_last) {
				keys_new[nbr_keys_new] = pbuf[ix];
				nbr_keys_new++;
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	3101      	adds	r1, #1
		return;
	}

	nbr_keys     = 0;
	nbr_keys_new = 0;
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80148e0:	2906      	cmp	r1, #6
 80148e2:	d1f1      	bne.n	80148c8 <MIOS32_USB_HID_Keyboard_Decode+0x48>
 80148e4:	4812      	ldr	r0, [pc, #72]	; (8014930 <MIOS32_USB_HID_Keyboard_Decode+0xb0>)
 80148e6:	7002      	strb	r2, [r0, #0]
 80148e8:	4a10      	ldr	r2, [pc, #64]	; (801492c <MIOS32_USB_HID_Keyboard_Decode+0xac>)
				nbr_keys_new++;
			}
		}
	}

	if (nbr_keys_new == 1) {
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	7013      	strb	r3, [r2, #0]
 80148ee:	d10f      	bne.n	8014910 <MIOS32_USB_HID_Keyboard_Decode+0x90>
		key_newest = keys_new[0];
 80148f0:	4b14      	ldr	r3, [pc, #80]	; (8014944 <MIOS32_USB_HID_Keyboard_Decode+0xc4>)

		if (shift == TRUE) {
 80148f2:	4a12      	ldr	r2, [pc, #72]	; (801493c <MIOS32_USB_HID_Keyboard_Decode+0xbc>)
			}
		}
	}

	if (nbr_keys_new == 1) {
		key_newest = keys_new[0];
 80148f4:	7819      	ldrb	r1, [r3, #0]
 80148f6:	480f      	ldr	r0, [pc, #60]	; (8014934 <MIOS32_USB_HID_Keyboard_Decode+0xb4>)

		if (shift == TRUE) {
 80148f8:	7813      	ldrb	r3, [r2, #0]
			}
		}
	}

	if (nbr_keys_new == 1) {
		key_newest = keys_new[0];
 80148fa:	7001      	strb	r1, [r0, #0]
 80148fc:	4812      	ldr	r0, [pc, #72]	; (8014948 <MIOS32_USB_HID_Keyboard_Decode+0xc8>)

		if (shift == TRUE) {
 80148fe:	2b01      	cmp	r3, #1
			output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[key_newest]];
 8014900:	5c41      	ldrb	r1, [r0, r1]
 8014902:	bf0c      	ite	eq
 8014904:	4811      	ldreq	r0, [pc, #68]	; (801494c <MIOS32_USB_HID_Keyboard_Decode+0xcc>)
		} else {
			output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[key_newest]];
 8014906:	4812      	ldrne	r0, [pc, #72]	; (8014950 <MIOS32_USB_HID_Keyboard_Decode+0xd0>)
 8014908:	5c41      	ldrb	r1, [r0, r1]
		}

		/* call user process handle */ // toDo callback!
		//keyboard_callback(output);
		DEBUG_MSG("KB data: %c", output);
 801490a:	4812      	ldr	r0, [pc, #72]	; (8014954 <MIOS32_USB_HID_Keyboard_Decode+0xd4>)
 801490c:	f7fd f982 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	} else {
		key_newest = 0x00;
	}


	nbr_keys_last  = nbr_keys;
 8014910:	4a07      	ldr	r2, [pc, #28]	; (8014930 <MIOS32_USB_HID_Keyboard_Decode+0xb0>)
 8014912:	4b09      	ldr	r3, [pc, #36]	; (8014938 <MIOS32_USB_HID_Keyboard_Decode+0xb8>)
 8014914:	7810      	ldrb	r0, [r2, #0]
 8014916:	7018      	strb	r0, [r3, #0]
 8014918:	2300      	movs	r3, #0
	for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
		keys_last[ix] = keys[ix];
 801491a:	4909      	ldr	r1, [pc, #36]	; (8014940 <MIOS32_USB_HID_Keyboard_Decode+0xc0>)
 801491c:	4a0e      	ldr	r2, [pc, #56]	; (8014958 <MIOS32_USB_HID_Keyboard_Decode+0xd8>)
 801491e:	5c58      	ldrb	r0, [r3, r1]
 8014920:	5498      	strb	r0, [r3, r2]
 8014922:	3301      	adds	r3, #1
		key_newest = 0x00;
	}


	nbr_keys_last  = nbr_keys;
	for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 8014924:	2b06      	cmp	r3, #6
 8014926:	d1f8      	bne.n	801491a <MIOS32_USB_HID_Keyboard_Decode+0x9a>
 8014928:	bd38      	pop	{r3, r4, r5, pc}
 801492a:	bf00      	nop
 801492c:	20000830 	.word	0x20000830
 8014930:	2000083d 	.word	0x2000083d
 8014934:	20000825 	.word	0x20000825
 8014938:	2000082c 	.word	0x2000082c
 801493c:	20000824 	.word	0x20000824
 8014940:	20000837 	.word	0x20000837
 8014944:	20000826 	.word	0x20000826
 8014948:	0801caef 	.word	0x0801caef
 801494c:	0801ca44 	.word	0x0801ca44
 8014950:	0801c9c2 	.word	0x0801c9c2
 8014954:	0801c92e 	.word	0x0801c92e
 8014958:	20000831 	.word	0x20000831

0801495c <MIOS32_USB_HID_Keyboard_Init>:
 *         Init Keyboard window
 * @param  None
 * @retval None
 */
void  MIOS32_USB_HID_Keyboard_Init (void)
{
 801495c:	b508      	push	{r3, lr}

  DEBUG_MSG((void*)USB_HID_KeybrdStatus);
 801495e:	4805      	ldr	r0, [pc, #20]	; (8014974 <MIOS32_USB_HID_Keyboard_Init+0x18>)
 8014960:	f7fd f958 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("> Use Keyboard to tape characters: \n\n");
 8014964:	4804      	ldr	r0, [pc, #16]	; (8014978 <MIOS32_USB_HID_Keyboard_Init+0x1c>)
 8014966:	f7fd f955 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("\n\n\n\n\n\n");
 801496a:	4804      	ldr	r0, [pc, #16]	; (801497c <MIOS32_USB_HID_Keyboard_Init+0x20>)

}
 801496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void  MIOS32_USB_HID_Keyboard_Init (void)
{

  DEBUG_MSG((void*)USB_HID_KeybrdStatus);
  DEBUG_MSG("> Use Keyboard to tape characters: \n\n");
  DEBUG_MSG("\n\n\n\n\n\n");
 8014970:	f7fd b950 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 8014974:	0801cad9 	.word	0x0801cad9
 8014978:	0801c93a 	.word	0x0801c93a
 801497c:	0801c927 	.word	0x0801c927

08014980 <MIOS32_USB_HID_Mouse_Decode>:
 *         Process Mouse data
 * @param  data : Mouse data to be displayed
 * @retval None
 */
void MIOS32_USB_HID_Mouse_Decode(uint8_t *data)
{
 8014980:	b570      	push	{r4, r5, r6, lr}
	Mouse_Data.button = data[0];
 8014982:	4b15      	ldr	r3, [pc, #84]	; (80149d8 <MIOS32_USB_HID_Mouse_Decode+0x58>)
 8014984:	7802      	ldrb	r2, [r0, #0]
 8014986:	70da      	strb	r2, [r3, #3]

	Mouse_Data.x      = data[1];
 8014988:	7841      	ldrb	r1, [r0, #1]
	Mouse_Data.y      = data[2];
 801498a:	7884      	ldrb	r4, [r0, #2]
 */
void MIOS32_USB_HID_Mouse_Decode(uint8_t *data)
{
	Mouse_Data.button = data[0];

	Mouse_Data.x      = data[1];
 801498c:	7019      	strb	r1, [r3, #0]
	Mouse_Data.y      = data[2];
 801498e:	705c      	strb	r4, [r3, #1]
	uint8_t idx = 1;
	static uint8_t b_state[3] = { 0, 0 , 0};

	if ((Mouse_Data.x != 0) && (Mouse_Data.y != 0))
 8014990:	b129      	cbz	r1, 801499e <MIOS32_USB_HID_Mouse_Decode+0x1e>
 8014992:	b124      	cbz	r4, 801499e <MIOS32_USB_HID_Mouse_Decode+0x1e>
	{
		//HID_MOUSE_UpdatePosition(data->x , data->y);
		DEBUG_MSG("Mouse position, x:%d, y:%d \n", (s8)Mouse_Data.x, (s8)Mouse_Data.y);
 8014994:	4811      	ldr	r0, [pc, #68]	; (80149dc <MIOS32_USB_HID_Mouse_Decode+0x5c>)
 8014996:	b249      	sxtb	r1, r1
 8014998:	b262      	sxtb	r2, r4
 801499a:	f7fd f93b 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 *         Process Mouse data
 * @param  data : Mouse data to be displayed
 * @retval None
 */
void MIOS32_USB_HID_Mouse_Decode(uint8_t *data)
{
 801499e:	2400      	movs	r4, #0
	}

	for ( idx = 0 ; idx < 3 ; idx ++)
	{

		if(Mouse_Data.button & 1 << idx)
 80149a0:	480d      	ldr	r0, [pc, #52]	; (80149d8 <MIOS32_USB_HID_Mouse_Decode+0x58>)
 80149a2:	78c5      	ldrb	r5, [r0, #3]
 80149a4:	fa45 f504 	asr.w	r5, r5, r4
 80149a8:	f015 0601 	ands.w	r6, r5, #1
 80149ac:	4d0c      	ldr	r5, [pc, #48]	; (80149e0 <MIOS32_USB_HID_Mouse_Decode+0x60>)
		{
			if(b_state[idx] == 0)
 80149ae:	5d2a      	ldrb	r2, [r5, r4]
	}

	for ( idx = 0 ; idx < 3 ; idx ++)
	{

		if(Mouse_Data.button & 1 << idx)
 80149b0:	d007      	beq.n	80149c2 <MIOS32_USB_HID_Mouse_Decode+0x42>
		{
			if(b_state[idx] == 0)
 80149b2:	b96a      	cbnz	r2, 80149d0 <MIOS32_USB_HID_Mouse_Decode+0x50>
			{
				//HID_MOUSE_ButtonPressed (idx);
				DEBUG_MSG("Mouse button %d pressed \n", idx);
 80149b4:	480b      	ldr	r0, [pc, #44]	; (80149e4 <MIOS32_USB_HID_Mouse_Decode+0x64>)
 80149b6:	4621      	mov	r1, r4
 80149b8:	f7fd f92c 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
				b_state[idx] = 1;
 80149bc:	2301      	movs	r3, #1
 80149be:	5563      	strb	r3, [r4, r5]
 80149c0:	e006      	b.n	80149d0 <MIOS32_USB_HID_Mouse_Decode+0x50>
			}
		}
		else
		{
			if(b_state[idx] == 1)
 80149c2:	2a01      	cmp	r2, #1
 80149c4:	d104      	bne.n	80149d0 <MIOS32_USB_HID_Mouse_Decode+0x50>
			{
				//HID_MOUSE_ButtonReleased (idx);
				DEBUG_MSG("Mouse button %d released \n", idx);
 80149c6:	4808      	ldr	r0, [pc, #32]	; (80149e8 <MIOS32_USB_HID_Mouse_Decode+0x68>)
 80149c8:	4621      	mov	r1, r4
 80149ca:	f7fd f923 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
				b_state[idx] = 0;
 80149ce:	5566      	strb	r6, [r4, r5]
 80149d0:	3401      	adds	r4, #1
	{
		//HID_MOUSE_UpdatePosition(data->x , data->y);
		DEBUG_MSG("Mouse position, x:%d, y:%d \n", (s8)Mouse_Data.x, (s8)Mouse_Data.y);
	}

	for ( idx = 0 ; idx < 3 ; idx ++)
 80149d2:	2c03      	cmp	r4, #3
 80149d4:	d1e4      	bne.n	80149a0 <MIOS32_USB_HID_Mouse_Decode+0x20>
				DEBUG_MSG("Mouse button %d released \n", idx);
				b_state[idx] = 0;
			}
		}
	}
}
 80149d6:	bd70      	pop	{r4, r5, r6, pc}
 80149d8:	20004d00 	.word	0x20004d00
 80149dc:	0801c960 	.word	0x0801c960
 80149e0:	2000082d 	.word	0x2000082d
 80149e4:	0801c97d 	.word	0x0801c97d
 80149e8:	0801c997 	.word	0x0801c997

080149ec <MIOS32_USB_HID_Mouse_Init>:
 *         Init Mouse window
 * @param  None
 * @retval None
 */
void MIOS32_USB_HID_Mouse_Init	(void)
{
 80149ec:	b508      	push	{r3, lr}

  DEBUG_MSG((void*)USB_HID_MouseStatus);
 80149ee:	4804      	ldr	r0, [pc, #16]	; (8014a00 <MIOS32_USB_HID_Mouse_Init+0x14>)
 80149f0:	f7fd f910 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("\n\n\n\n\n\n\n\n");
 80149f4:	4803      	ldr	r0, [pc, #12]	; (8014a04 <MIOS32_USB_HID_Mouse_Init+0x18>)

}
 80149f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void MIOS32_USB_HID_Mouse_Init	(void)
{

  DEBUG_MSG((void*)USB_HID_MouseStatus);
  DEBUG_MSG("\n\n\n\n\n\n\n\n");
 80149fa:	f7fd b90b 	b.w	8011c14 <MIOS32_MIDI_SendDebugMessage>
 80149fe:	bf00      	nop
 8014a00:	0801cac6 	.word	0x0801cac6
 8014a04:	0801c925 	.word	0x0801c925

08014a08 <USBH_ClassRequest>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB Set Protocol request
*/
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev ,
		void *phost)
{
 8014a08:	b573      	push	{r0, r1, r4, r5, r6, lr}

	USBH_Status status         = USBH_BUSY;
	USBH_Status classReqStatus = USBH_BUSY;
	USB_HID_machine_t* machine;
	USBH_HIDDesc_TypeDef*  desc;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8014a0a:	7ac3      	ldrb	r3, [r0, #11]
#ifndef MIOS32_DONT_USE_USB_HOST
		machine = &USB_FS_HID_machine;
		desc = &USB_FS_HID_Desc;
 8014a0c:	4a3a      	ldr	r2, [pc, #232]	; (8014af8 <USBH_ClassRequest+0xf0>)
 8014a0e:	4e3b      	ldr	r6, [pc, #236]	; (8014afc <USBH_ClassRequest+0xf4>)
 8014a10:	4d3b      	ldr	r5, [pc, #236]	; (8014b00 <USBH_ClassRequest+0xf8>)
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	bf08      	it	eq
 8014a16:	4616      	moveq	r6, r2
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB Set Protocol request
*/
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev ,
		void *phost)
{
 8014a18:	4604      	mov	r4, r0
		return USBH_NOT_SUPPORTED; //
#endif
	}

	/* Switch HID state machine */
	switch (machine->ctl_state)
 8014a1a:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
	USB_HID_machine_t* machine;
	USBH_HIDDesc_TypeDef*  desc;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
#ifndef MIOS32_DONT_USE_USB_HOST
		machine = &USB_FS_HID_machine;
		desc = &USB_FS_HID_Desc;
 8014a1e:	4839      	ldr	r0, [pc, #228]	; (8014b04 <USBH_ClassRequest+0xfc>)
 8014a20:	bf08      	it	eq
 8014a22:	4605      	moveq	r5, r0
		return USBH_NOT_SUPPORTED; //
#endif
	}

	/* Switch HID state machine */
	switch (machine->ctl_state)
 8014a24:	2b04      	cmp	r3, #4
 8014a26:	d865      	bhi.n	8014af4 <USBH_ClassRequest+0xec>
 8014a28:	e8df f003 	tbb	[pc, r3]
 8014a2c:	3f033103 	.word	0x3f033103
 8014a30:	52          	.byte	0x52
 8014a31:	00          	.byte	0x00
  status = USBH_GetDescriptor(pdev,
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,
                                USB_DESC_HID,
                                pdev->host.Rx_Buffer,
 8014a32:	f204 50f4 	addw	r0, r4, #1524	; 0x5f4
                                            uint16_t length)
{

  USBH_Status status;

  status = USBH_GetDescriptor(pdev,
 8014a36:	2209      	movs	r2, #9
 8014a38:	9000      	str	r0, [sp, #0]
 8014a3a:	9201      	str	r2, [sp, #4]
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	2201      	movs	r2, #1
 8014a40:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8014a44:	f002 f9b7 	bl	8016db6 <USBH_GetDescriptor>
	{
	case HID_IDLE:
	case HID_REQ_GET_HID_DESC:

		/* Get HID Desc */
		if (USBH_Get_HID_Descriptor (pdev, pphost, USB_HID_DESC_SIZE)== USBH_OK)
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d153      	bne.n	8014af4 <USBH_ClassRequest+0xec>
* @retval None
*/
static void  USBH_ParseHIDDesc (USBH_HIDDesc_TypeDef *desc, uint8_t *buf)
{

  desc->bLength                  = *(uint8_t  *) (buf + 0);
 8014a4c:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8014a50:	7029      	strb	r1, [r5, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8014a52:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 8014a56:	706b      	strb	r3, [r5, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 8014a58:	f894 05f7 	ldrb.w	r0, [r4, #1527]	; 0x5f7
 8014a5c:	f894 25f6 	ldrb.w	r2, [r4, #1526]	; 0x5f6
 8014a60:	eb02 2100 	add.w	r1, r2, r0, lsl #8
 8014a64:	8069      	strh	r1, [r5, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8014a66:	f894 35f8 	ldrb.w	r3, [r4, #1528]	; 0x5f8
 8014a6a:	712b      	strb	r3, [r5, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8014a6c:	f894 05f9 	ldrb.w	r0, [r4, #1529]	; 0x5f9
 8014a70:	7168      	strb	r0, [r5, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8014a72:	f894 25fa 	ldrb.w	r2, [r4, #1530]	; 0x5fa
 8014a76:	71aa      	strb	r2, [r5, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 8014a78:	f894 15fc 	ldrb.w	r1, [r4, #1532]	; 0x5fc
 8014a7c:	f894 35fb 	ldrb.w	r3, [r4, #1531]	; 0x5fb
 8014a80:	eb03 2001 	add.w	r0, r3, r1, lsl #8
 8014a84:	8128      	strh	r0, [r5, #8]
		/* Get HID Desc */
		if (USBH_Get_HID_Descriptor (pdev, pphost, USB_HID_DESC_SIZE)== USBH_OK)
		{

			USBH_ParseHIDDesc(desc, pdev->host.Rx_Buffer);
			machine->ctl_state = HID_REQ_GET_REPORT_DESC;
 8014a86:	2001      	movs	r0, #1
 8014a88:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
 8014a8c:	e033      	b.n	8014af6 <USBH_ClassRequest+0xee>
  status = USBH_GetDescriptor(pdev,
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,
                                USB_DESC_HID_REPORT,
                                pdev->host.Rx_Buffer,
 8014a8e:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
                                                  uint16_t length)
{

  USBH_Status status;

  status = USBH_GetDescriptor(pdev,
 8014a92:	9200      	str	r2, [sp, #0]
 8014a94:	892b      	ldrh	r3, [r5, #8]
 8014a96:	4620      	mov	r0, r4
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8014aa0:	f002 f989 	bl	8016db6 <USBH_GetDescriptor>
		break;
	case HID_REQ_GET_REPORT_DESC:


		/* Get Report Desc */
		if (USBH_Get_HID_ReportDescriptor(pdev , pphost, desc->wItemLength) == USBH_OK)
 8014aa4:	bb30      	cbnz	r0, 8014af4 <USBH_ClassRequest+0xec>
		{
			machine->ctl_state = HID_REQ_SET_IDLE;
 8014aa6:	2103      	movs	r1, #3
 8014aa8:	e00f      	b.n	8014aca <USBH_ClassRequest+0xc2>
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8014aaa:	2200      	movs	r2, #0
                                  USBH_HOST *phost,
                                  uint8_t duration,
                                  uint8_t reportId)
{

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8014aac:	2321      	movs	r3, #33	; 0x21
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8014aae:	200a      	movs	r0, #10
                                  USBH_HOST *phost,
                                  uint8_t duration,
                                  uint8_t reportId)
{

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8014ab0:	750b      	strb	r3, [r1, #20]
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8014ab2:	7548      	strb	r0, [r1, #21]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8014ab4:	82ca      	strh	r2, [r1, #22]

  phost->Control.setup.b.wIndex.w = 0;
 8014ab6:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8014ab8:	834a      	strh	r2, [r1, #26]

  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8014aba:	4620      	mov	r0, r4
 8014abc:	4613      	mov	r3, r2
 8014abe:	f002 f8b2 	bl	8016c26 <USBH_CtlReq>
	case HID_REQ_SET_IDLE:

		classReqStatus = USBH_Set_Idle (pdev, pphost, 0, 0);

		/* set Idle */
		if (classReqStatus == USBH_OK)
 8014ac2:	b108      	cbz	r0, 8014ac8 <USBH_ClassRequest+0xc0>
		{
			machine->ctl_state = HID_REQ_SET_PROTOCOL;
		}
		else if(classReqStatus == USBH_NOT_SUPPORTED)
 8014ac4:	2803      	cmp	r0, #3
 8014ac6:	d115      	bne.n	8014af4 <USBH_ClassRequest+0xec>
		{
			machine->ctl_state = HID_REQ_SET_PROTOCOL;
 8014ac8:	2104      	movs	r1, #4
 8014aca:	f886 1047 	strb.w	r1, [r6, #71]	; 0x47
 8014ace:	e011      	b.n	8014af4 <USBH_ClassRequest+0xec>
    phost->Control.setup.b.wValue.w = 0;
  }
  else
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
 8014ad0:	2201      	movs	r2, #1
                                     USBH_HOST *phost,
                                     uint8_t protocol)
{


  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8014ad2:	2521      	movs	r5, #33	; 0x21
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8014ad4:	200b      	movs	r0, #11
    phost->Control.setup.b.wValue.w = 0;
  }
  else
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
 8014ad6:	82ca      	strh	r2, [r1, #22]
  }

  phost->Control.setup.b.wIndex.w = 0;
 8014ad8:	2200      	movs	r2, #0
                                     USBH_HOST *phost,
                                     uint8_t protocol)
{


  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8014ada:	750d      	strb	r5, [r1, #20]
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8014adc:	7548      	strb	r0, [r1, #21]
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
  }

  phost->Control.setup.b.wIndex.w = 0;
 8014ade:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8014ae0:	834a      	strh	r2, [r1, #26]

  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	4613      	mov	r3, r2
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
  }

  phost->Control.setup.b.wIndex.w = 0;
 8014ae6:	4615      	mov	r5, r2
  phost->Control.setup.b.wLength.w = 0;

  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8014ae8:	f002 f89d 	bl	8016c26 <USBH_CtlReq>
		}
		break;

	case HID_REQ_SET_PROTOCOL:
		/* set protocol */
		if (USBH_Set_Protocol (pdev ,pphost, 0) == USBH_OK)
 8014aec:	b910      	cbnz	r0, 8014af4 <USBH_ClassRequest+0xec>
		{
			machine->ctl_state = HID_REQ_IDLE;
 8014aee:	f886 5047 	strb.w	r5, [r6, #71]	; 0x47
 8014af2:	e000      	b.n	8014af6 <USBH_ClassRequest+0xee>
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev ,
		void *phost)
{
	USBH_HOST *pphost = phost;

	USBH_Status status         = USBH_BUSY;
 8014af4:	2001      	movs	r0, #1
	default:
		break;
	}

	return status;
}
 8014af6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8014af8:	20004c98 	.word	0x20004c98
 8014afc:	20004d54 	.word	0x20004d54
 8014b00:	20004cf6 	.word	0x20004cf6
 8014b04:	20004cec 	.word	0x20004cec

08014b08 <MIOS32_USB_HID_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_HID_Init(u32 mode)
{
#ifndef MIOS32_DONT_USE_USB_HOST
	USB_FS_HID_machine.start_toggle = 0;
 8014b08:	4b02      	ldr	r3, [pc, #8]	; (8014b14 <MIOS32_USB_HID_Init+0xc>)
#endif


#ifndef MIOS32_DONT_USE_USB_HS_HOST
	USB_HS_HID_machine.start_toggle = 0;
 8014b0a:	4903      	ldr	r1, [pc, #12]	; (8014b18 <MIOS32_USB_HID_Init+0x10>)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_HID_Init(u32 mode)
{
#ifndef MIOS32_DONT_USE_USB_HOST
	USB_FS_HID_machine.start_toggle = 0;
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	7058      	strb	r0, [r3, #1]
#endif


#ifndef MIOS32_DONT_USE_USB_HS_HOST
	USB_HS_HID_machine.start_toggle = 0;
 8014b10:	7048      	strb	r0, [r1, #1]
#endif

  return 0;
}
 8014b12:	4770      	bx	lr
 8014b14:	20004c98 	.word	0x20004c98
 8014b18:	20004d54 	.word	0x20004d54

08014b1c <MIOS32_USB_HID_ChangeConnectionState>:
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_HID_ChangeConnectionState(u8 dev, u8 connected)
{
  if(dev>1)return -1;
 8014b1c:	2801      	cmp	r0, #1
 8014b1e:	d807      	bhi.n	8014b30 <MIOS32_USB_HID_ChangeConnectionState+0x14>
#ifndef MIOS32_DONT_USE_USB_HOST
  if(dev == 0){
 8014b20:	b948      	cbnz	r0, 8014b36 <MIOS32_USB_HID_ChangeConnectionState+0x1a>
 8014b22:	4b07      	ldr	r3, [pc, #28]	; (8014b40 <MIOS32_USB_HID_ChangeConnectionState+0x24>)
	  if( connected ) {
 8014b24:	b111      	cbz	r1, 8014b2c <MIOS32_USB_HID_ChangeConnectionState+0x10>
  }
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(dev == 1){
	  if( connected ) {
		  USB_HS_HID_machine.transfer_possible = 1;
 8014b26:	2201      	movs	r2, #1
 8014b28:	701a      	strb	r2, [r3, #0]
 8014b2a:	e006      	b.n	8014b3a <MIOS32_USB_HID_ChangeConnectionState+0x1e>
	  } else {
		// device disconnected: disable transfers
		  USB_HS_HID_machine.transfer_possible = 0;
 8014b2c:	7019      	strb	r1, [r3, #0]
 8014b2e:	e004      	b.n	8014b3a <MIOS32_USB_HID_ChangeConnectionState+0x1e>
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_HID_ChangeConnectionState(u8 dev, u8 connected)
{
  if(dev>1)return -1;
 8014b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b34:	4770      	bx	lr
 8014b36:	4b03      	ldr	r3, [pc, #12]	; (8014b44 <MIOS32_USB_HID_ChangeConnectionState+0x28>)
 8014b38:	e7f4      	b.n	8014b24 <MIOS32_USB_HID_ChangeConnectionState+0x8>
		// device disconnected: disable transfers
		  USB_HS_HID_machine.transfer_possible = 0;
	  }
  }
#endif
	return 0; // no error
 8014b3a:	2000      	movs	r0, #0
}
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop
 8014b40:	20004c98 	.word	0x20004c98
 8014b44:	20004d54 	.word	0x20004d54

08014b48 <USBH_InterfaceDeInit>:
* @param  hdev: Selected device property
* @retval None
*/
void USBH_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
		void *phost)
{
 8014b48:	b570      	push	{r4, r5, r6, lr}
	USB_HID_machine_t* machine;
	u8 dev = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8014b4a:	7ac3      	ldrb	r3, [r0, #11]
*/
void USBH_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
		void *phost)
{
	USB_HID_machine_t* machine;
	u8 dev = 0;
 8014b4c:	4915      	ldr	r1, [pc, #84]	; (8014ba4 <USBH_InterfaceDeInit+0x5c>)
 8014b4e:	4c16      	ldr	r4, [pc, #88]	; (8014ba8 <USBH_InterfaceDeInit+0x60>)
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	bf08      	it	eq
 8014b54:	460c      	moveq	r4, r1
* @param  hdev: Selected device property
* @retval None
*/
void USBH_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
		void *phost)
{
 8014b56:	4605      	mov	r5, r0
		//MIOS32_MIDI_DebugPortSet(USB0);
#else
		return; //
#endif
	}
	if(machine->hc_num_in != 0x00)
 8014b58:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
*/
void USBH_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
		void *phost)
{
	USB_HID_machine_t* machine;
	u8 dev = 0;
 8014b5c:	bf0c      	ite	eq
 8014b5e:	2600      	moveq	r6, #0
 8014b60:	2601      	movne	r6, #1
		//MIOS32_MIDI_DebugPortSet(USB0);
#else
		return; //
#endif
	}
	if(machine->hc_num_in != 0x00)
 8014b62:	b149      	cbz	r1, 8014b78 <USBH_InterfaceDeInit+0x30>
	{
		USB_OTG_HC_Halt(pdev, machine->hc_num_in);
 8014b64:	f002 fe3d 	bl	80177e2 <USB_OTG_HC_Halt>
		USBH_Free_Channel  (pdev, machine->hc_num_in);
 8014b68:	4628      	mov	r0, r5
 8014b6a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8014b6e:	f002 f83f 	bl	8016bf0 <USBH_Free_Channel>
		machine->hc_num_in = 0;     /* Reset the Channel as Free */
 8014b72:	2000      	movs	r0, #0
 8014b74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
	}

	if(machine->hc_num_out != 0x00)
 8014b78:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8014b7c:	b151      	cbz	r1, 8014b94 <USBH_InterfaceDeInit+0x4c>
	{
		USB_OTG_HC_Halt(pdev, machine->hc_num_out);
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f002 fe2f 	bl	80177e2 <USB_OTG_HC_Halt>
		USBH_Free_Channel  (pdev, machine->hc_num_out);
 8014b84:	4628      	mov	r0, r5
 8014b86:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8014b8a:	f002 f831 	bl	8016bf0 <USBH_Free_Channel>
		machine->hc_num_out = 0;     /* Reset the Channel as Free */
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	}
	MIOS32_USB_HID_ChangeConnectionState(dev, 0);
 8014b94:	4630      	mov	r0, r6
 8014b96:	2100      	movs	r1, #0
 8014b98:	f7ff ffc0 	bl	8014b1c <MIOS32_USB_HID_ChangeConnectionState>
	machine->start_toggle = 0;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	7063      	strb	r3, [r4, #1]
 8014ba0:	bd70      	pop	{r4, r5, r6, pc}
 8014ba2:	bf00      	nop
 8014ba4:	20004c98 	.word	0x20004c98
 8014ba8:	20004d54 	.word	0x20004d54

08014bac <MIOS32_USB_HID_CheckAvailable>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_HID_CheckAvailable(u8 dev)
{
#ifndef MIOS32_DONT_USE_USB_HOST
  if(dev == 0){
 8014bac:	b908      	cbnz	r0, 8014bb2 <MIOS32_USB_HID_CheckAvailable+0x6>
	  return USB_FS_HID_machine.transfer_possible ? 1 : 0;
 8014bae:	4b06      	ldr	r3, [pc, #24]	; (8014bc8 <MIOS32_USB_HID_CheckAvailable+0x1c>)
 8014bb0:	e002      	b.n	8014bb8 <MIOS32_USB_HID_CheckAvailable+0xc>
  }
#endif
#ifndef MIOS32_DONT_USE_USB_HS_HOST
  if(dev == 1){
 8014bb2:	2801      	cmp	r0, #1
 8014bb4:	d105      	bne.n	8014bc2 <MIOS32_USB_HID_CheckAvailable+0x16>
	  return USB_HS_HID_machine.transfer_possible ? 1 : 0;
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <MIOS32_USB_HID_CheckAvailable+0x20>)
 8014bb8:	7818      	ldrb	r0, [r3, #0]
 8014bba:	3000      	adds	r0, #0
 8014bbc:	bf18      	it	ne
 8014bbe:	2001      	movne	r0, #1
 8014bc0:	4770      	bx	lr
  }
#endif
	return -1; // not available
 8014bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8014bc6:	4770      	bx	lr
 8014bc8:	20004c98 	.word	0x20004c98
 8014bcc:	20004d54 	.word	0x20004d54

08014bd0 <USBH_InterfaceInit>:
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	USBH_HOST *pphost = phost;

	uint8_t num =0;
	USB_HID_machine_t* machine;
	u8 dev = 0;
	if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8014bd4:	7ac3      	ldrb	r3, [r0, #11]
	uint8_t maxEP;
	USBH_HOST *pphost = phost;

	uint8_t num =0;
	USB_HID_machine_t* machine;
	u8 dev = 0;
 8014bd6:	4c4d      	ldr	r4, [pc, #308]	; (8014d0c <USBH_InterfaceInit+0x13c>)
 8014bd8:	2b01      	cmp	r3, #1
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014bda:	4607      	mov	r7, r0
	uint8_t maxEP;
	USBH_HOST *pphost = phost;

	uint8_t num =0;
	USB_HID_machine_t* machine;
	u8 dev = 0;
 8014bdc:	484c      	ldr	r0, [pc, #304]	; (8014d10 <USBH_InterfaceInit+0x140>)
 8014bde:	bf0c      	ite	eq
 8014be0:	f04f 0900 	moveq.w	r9, #0
 8014be4:	f04f 0901 	movne.w	r9, #1
 8014be8:	bf08      	it	eq
 8014bea:	4604      	moveq	r4, r0
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8014bec:	460d      	mov	r5, r1
#else
		return USBH_NOT_SUPPORTED; //
#endif
	}

	MIOS32_USB_HID_ChangeConnectionState(dev, 0);
 8014bee:	4648      	mov	r0, r9
 8014bf0:	2100      	movs	r1, #0
 8014bf2:	f7ff ff93 	bl	8014b1c <MIOS32_USB_HID_ChangeConnectionState>
	int i;
	machine->state = HID_ERROR;
 8014bf6:	2106      	movs	r1, #6
 8014bf8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44

	for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8014bfc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d076      	beq.n	8014cf2 <USBH_InterfaceInit+0x122>

		if(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass  == USB_HID_BOOT_CODE)
 8014c04:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8014c08:	2a01      	cmp	r2, #1
 8014c0a:	d007      	beq.n	8014c1c <USBH_InterfaceInit+0x4c>

	MIOS32_USB_HID_ChangeConnectionState(dev, 0);
	int i;
	machine->state = HID_ERROR;

	for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	dd70      	ble.n	8014cf2 <USBH_InterfaceInit+0x122>

		if(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass  == USB_HID_BOOT_CODE)
 8014c10:	f895 804d 	ldrb.w	r8, [r5, #77]	; 0x4d
 8014c14:	f1b8 0f01 	cmp.w	r8, #1
 8014c18:	d16b      	bne.n	8014cf2 <USBH_InterfaceInit+0x122>
 8014c1a:	e001      	b.n	8014c20 <USBH_InterfaceInit+0x50>

	MIOS32_USB_HID_ChangeConnectionState(dev, 0);
	int i;
	machine->state = HID_ERROR;

	for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8014c1c:	f04f 0800 	mov.w	r8, #0

		if(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass  == USB_HID_BOOT_CODE)
		{
			DEBUG_MSG("Gamepad code %d", pphost->device_prop.Itf_Desc[i].bInterfaceProtocol);
 8014c20:	2609      	movs	r6, #9
 8014c22:	fb06 5608 	mla	r6, r6, r8, r5
 8014c26:	483b      	ldr	r0, [pc, #236]	; (8014d14 <USBH_InterfaceInit+0x144>)
 8014c28:	f896 1045 	ldrb.w	r1, [r6, #69]	; 0x45
 8014c2c:	f7fc fff2 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
			/*Decode Bootclass Protocl: Mouse or Keyboard*/
			if(pphost->device_prop.Itf_Desc[i].bInterfaceProtocol == USB_HID_KEYBRD_BOOT_CODE)
 8014c30:	f896 0045 	ldrb.w	r0, [r6, #69]	; 0x45
 8014c34:	2801      	cmp	r0, #1
 8014c36:	d101      	bne.n	8014c3c <USBH_InterfaceInit+0x6c>
			{
				machine->cb = &HID_KEYBRD_cb;
 8014c38:	4937      	ldr	r1, [pc, #220]	; (8014d18 <USBH_InterfaceInit+0x148>)
 8014c3a:	e006      	b.n	8014c4a <USBH_InterfaceInit+0x7a>
			}
			else if(pphost->device_prop.Itf_Desc[i].bInterfaceProtocol  == USB_HID_MOUSE_BOOT_CODE)
 8014c3c:	2802      	cmp	r0, #2
 8014c3e:	d101      	bne.n	8014c44 <USBH_InterfaceInit+0x74>
			{
				machine->cb = &HID_MOUSE_cb;
 8014c40:	4936      	ldr	r1, [pc, #216]	; (8014d1c <USBH_InterfaceInit+0x14c>)
 8014c42:	e002      	b.n	8014c4a <USBH_InterfaceInit+0x7a>
			}
			else if(pphost->device_prop.Itf_Desc[i].bInterfaceProtocol  == USB_HID_GAMPAD_BOOT_CODE)
 8014c44:	2805      	cmp	r0, #5
 8014c46:	d101      	bne.n	8014c4c <USBH_InterfaceInit+0x7c>
			{
				machine->cb = &HID_GAMPAD_cb;
 8014c48:	4935      	ldr	r1, [pc, #212]	; (8014d20 <USBH_InterfaceInit+0x150>)
 8014c4a:	6521      	str	r1, [r4, #80]	; 0x50
			}

			machine->state     = HID_IDLE;
			machine->ctl_state = HID_REQ_IDLE;
			machine->ep_addr   = pphost->device_prop.Ep_Desc[i][0].bEndpointAddress;
 8014c4c:	ea4f 1648 	mov.w	r6, r8, lsl #5
			else if(pphost->device_prop.Itf_Desc[i].bInterfaceProtocol  == USB_HID_GAMPAD_BOOT_CODE)
			{
				machine->cb = &HID_GAMPAD_cb;
			}

			machine->state     = HID_IDLE;
 8014c50:	2300      	movs	r3, #0
			machine->ctl_state = HID_REQ_IDLE;
			machine->ep_addr   = pphost->device_prop.Ep_Desc[i][0].bEndpointAddress;
 8014c52:	19a8      	adds	r0, r5, r6
			else if(pphost->device_prop.Itf_Desc[i].bInterfaceProtocol  == USB_HID_GAMPAD_BOOT_CODE)
			{
				machine->cb = &HID_GAMPAD_cb;
			}

			machine->state     = HID_IDLE;
 8014c54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			machine->ctl_state = HID_REQ_IDLE;
 8014c58:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
			machine->ep_addr   = pphost->device_prop.Ep_Desc[i][0].bEndpointAddress;
 8014c5c:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 8014c60:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
			machine->length    = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 8014c64:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
				machine->cb = &HID_GAMPAD_cb;
			}

			machine->state     = HID_IDLE;
			machine->ctl_state = HID_REQ_IDLE;
			machine->ep_addr   = pphost->device_prop.Ep_Desc[i][0].bEndpointAddress;
 8014c68:	3050      	adds	r0, #80	; 0x50
			machine->length    = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 8014c6a:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
			machine->poll      = pphost->device_prop.Ep_Desc[i][0].bInterval ;
 8014c6e:	7983      	ldrb	r3, [r0, #6]

			if (machine->poll  < HID_MIN_POLL)
 8014c70:	2b09      	cmp	r3, #9
			{
				machine->poll = HID_MIN_POLL;
 8014c72:	bf98      	it	ls
 8014c74:	230a      	movls	r3, #10

			/* Check fo available number of endpoints */
			/* Find the number of EPs in the Interface Descriptor */
			/* Choose the lower number in order not to overrun the buffer allocated */
			maxEP = ( (pphost->device_prop.Itf_Desc[i].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
					pphost->device_prop.Itf_Desc[i].bNumEndpoints :
 8014c76:	2209      	movs	r2, #9
 8014c78:	fb02 5108 	mla	r1, r2, r8, r5
			machine->length    = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
			machine->poll      = pphost->device_prop.Ep_Desc[i][0].bInterval ;

			if (machine->poll  < HID_MIN_POLL)
			{
				machine->poll = HID_MIN_POLL;
 8014c7c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c


			/* Check fo available number of endpoints */
			/* Find the number of EPs in the Interface Descriptor */
			/* Choose the lower number in order not to overrun the buffer allocated */
			maxEP = ( (pphost->device_prop.Itf_Desc[i].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8014c80:	f891 3042 	ldrb.w	r3, [r1, #66]	; 0x42
*         The function init the HID class.
* @param  pdev: Selected device
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, void *phost)
 8014c84:	2b04      	cmp	r3, #4
 8014c86:	bf28      	it	cs
 8014c88:	2304      	movcs	r3, #4
 8014c8a:	19ae      	adds	r6, r5, r6
 8014c8c:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8014c90:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8014c94:	3652      	adds	r6, #82	; 0x52
 8014c96:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
					pphost->device_prop.Itf_Desc[i].bNumEndpoints :
					USBH_MAX_NUM_ENDPOINTS);


			/* Decode endpoint IN and OUT address from interface descriptor */
			for (num=0; num < maxEP; num++)
 8014c9a:	4546      	cmp	r6, r8
 8014c9c:	d023      	beq.n	8014ce6 <USBH_InterfaceInit+0x116>
			{
				if(pphost->device_prop.Ep_Desc[i][num].bEndpointAddress & 0x80)
 8014c9e:	7833      	ldrb	r3, [r6, #0]
 8014ca0:	061a      	lsls	r2, r3, #24
 8014ca2:	d509      	bpl.n	8014cb8 <USBH_InterfaceInit+0xe8>
				{
					machine->HIDIntInEp = (pphost->device_prop.Ep_Desc[i][num].bEndpointAddress);
 8014ca4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
					machine->hc_num_in  =\
							USBH_Alloc_Channel(pdev,
 8014ca8:	7831      	ldrb	r1, [r6, #0]
 8014caa:	4638      	mov	r0, r7
 8014cac:	f001 ff87 	bl	8016bbe <USBH_Alloc_Channel>
 8014cb0:	4601      	mov	r1, r0
			for (num=0; num < maxEP; num++)
			{
				if(pphost->device_prop.Ep_Desc[i][num].bEndpointAddress & 0x80)
				{
					machine->HIDIntInEp = (pphost->device_prop.Ep_Desc[i][num].bEndpointAddress);
					machine->hc_num_in  =\
 8014cb2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8014cb6:	e008      	b.n	8014cca <USBH_InterfaceInit+0xfa>
							EP_TYPE_INTR,
							machine->length);
				}
				else
				{
					machine->HIDIntOutEp = (pphost->device_prop.Ep_Desc[i][num].bEndpointAddress);
 8014cb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
					machine->hc_num_out  =\
							USBH_Alloc_Channel(pdev,
 8014cbc:	7831      	ldrb	r1, [r6, #0]
 8014cbe:	4638      	mov	r0, r7
 8014cc0:	f001 ff7d 	bl	8016bbe <USBH_Alloc_Channel>
 8014cc4:	4601      	mov	r1, r0
							machine->length);
				}
				else
				{
					machine->HIDIntOutEp = (pphost->device_prop.Ep_Desc[i][num].bEndpointAddress);
					machine->hc_num_out  =\
 8014cc6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
							USBH_Alloc_Channel(pdev,
									pphost->device_prop.Ep_Desc[i][num].bEndpointAddress);

					/* Open channel for OUT endpoint */
					USBH_Open_Channel  (pdev,
 8014cca:	2003      	movs	r0, #3
 8014ccc:	9000      	str	r0, [sp, #0]
 8014cce:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8014cd2:	f895 2020 	ldrb.w	r2, [r5, #32]
 8014cd6:	9001      	str	r0, [sp, #4]
 8014cd8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014cdc:	4638      	mov	r0, r7
 8014cde:	f001 ff27 	bl	8016b30 <USBH_Open_Channel>
 8014ce2:	3608      	adds	r6, #8
 8014ce4:	e7d9      	b.n	8014c9a <USBH_InterfaceInit+0xca>
							machine->length);
				}

			}

		    MIOS32_USB_HID_ChangeConnectionState(dev, 1);
 8014ce6:	4648      	mov	r0, r9
 8014ce8:	2101      	movs	r1, #1
 8014cea:	f7ff ff17 	bl	8014b1c <MIOS32_USB_HID_ChangeConnectionState>
		    machine->start_toggle = 0;
 8014cee:	2000      	movs	r0, #0
 8014cf0:	7060      	strb	r0, [r4, #1]
		    break;
		}
	}
	if( MIOS32_USB_HID_CheckAvailable(dev) == 0 ) {
 8014cf2:	4648      	mov	r0, r9
 8014cf4:	f7ff ff5a 	bl	8014bac <MIOS32_USB_HID_CheckAvailable>
 8014cf8:	b928      	cbnz	r0, 8014d06 <USBH_InterfaceInit+0x136>
		pphost->usr_cb->DeviceNotSupported();
 8014cfa:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8014cfe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014d00:	4788      	blx	r1
		return USBH_NOT_SUPPORTED;
 8014d02:	2003      	movs	r0, #3
 8014d04:	e000      	b.n	8014d08 <USBH_InterfaceInit+0x138>
	}
	return USBH_OK;
 8014d06:	2000      	movs	r0, #0

}
 8014d08:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8014d0c:	20004d54 	.word	0x20004d54
 8014d10:	20004c98 	.word	0x20004c98
 8014d14:	0801c9b2 	.word	0x0801c9b2
 8014d18:	20000060 	.word	0x20000060
 8014d1c:	20000070 	.word	0x20000070
 8014d20:	20000068 	.word	0x20000068

08014d24 <MIOS32_UART_IsAssignedToMIDI>:
s32 MIOS32_UART_IsAssignedToMIDI(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return 0; // no UART available
#else
  return (uart_assigned_to_midi & (1 << uart)) ? 1 : 0;
 8014d24:	4b03      	ldr	r3, [pc, #12]	; (8014d34 <MIOS32_UART_IsAssignedToMIDI+0x10>)
 8014d26:	7819      	ldrb	r1, [r3, #0]
 8014d28:	fa41 f000 	asr.w	r0, r1, r0
#endif
}
 8014d2c:	f000 0001 	and.w	r0, r0, #1
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	20000950 	.word	0x20000950

08014d38 <MIOS32_UART_BaudrateSet>:
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8014d38:	b530      	push	{r4, r5, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014d3a:	2801      	cmp	r0, #1
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	4604      	mov	r4, r0
 8014d40:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014d42:	d81b      	bhi.n	8014d7c <MIOS32_UART_BaudrateSet+0x44>
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8014d44:	f04f 010c 	mov.w	r1, #12

  USART_InitStructure.USART_BaudRate = baudrate;
 8014d48:	aa04      	add	r2, sp, #16
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8014d4a:	f04f 0300 	mov.w	r3, #0
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
 8014d4e:	bf14      	ite	ne
 8014d50:	480c      	ldrne	r0, [pc, #48]	; (8014d84 <MIOS32_UART_BaudrateSet+0x4c>)
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8014d52:	480d      	ldreq	r0, [pc, #52]	; (8014d88 <MIOS32_UART_BaudrateSet+0x50>)
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8014d54:	f8ad 100a 	strh.w	r1, [sp, #10]
  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8014d58:	4669      	mov	r1, sp
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8014d5a:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8014d5e:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8014d62:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8014d66:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;
 8014d6a:	f842 5d10 	str.w	r5, [r2, #-16]!

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8014d6e:	f000 ffc3 	bl	8015cf8 <USART_Init>
  default:
    return -2; // not prepared
  }

  // store baudrate in array
  uart_baudrate[uart] = baudrate;
 8014d72:	4806      	ldr	r0, [pc, #24]	; (8014d8c <MIOS32_UART_BaudrateSet+0x54>)
 8014d74:	f840 5024 	str.w	r5, [r0, r4, lsl #2]

  return 0;
 8014d78:	2000      	movs	r0, #0
 8014d7a:	e001      	b.n	8014d80 <MIOS32_UART_BaudrateSet+0x48>
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // store baudrate in array
  uart_baudrate[uart] = baudrate;

  return 0;
#endif
}
 8014d80:	b005      	add	sp, #20
 8014d82:	bd30      	pop	{r4, r5, pc}
 8014d84:	40004c00 	.word	0x40004c00
 8014d88:	40004400 	.word	0x40004400
 8014d8c:	20000948 	.word	0x20000948

08014d90 <MIOS32_UART_InitPort>:
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8014d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d92:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8014d94:	4668      	mov	r0, sp
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8014d96:	461d      	mov	r5, r3
 8014d98:	460e      	mov	r6, r1
 8014d9a:	4617      	mov	r7, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8014d9c:	f000 fd3b 	bl	8015816 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8014da0:	2300      	movs	r3, #0

  if( uart >= NUM_SUPPORTED_UARTS )
 8014da2:	2c01      	cmp	r4, #1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8014da4:	f88d 3005 	strb.w	r3, [sp, #5]

  if( uart >= NUM_SUPPORTED_UARTS )
 8014da8:	d847      	bhi.n	8014e3a <MIOS32_UART_InitPort+0xaa>
 8014daa:	4825      	ldr	r0, [pc, #148]	; (8014e40 <MIOS32_UART_InitPort+0xb0>)
 8014dac:	2201      	movs	r2, #1
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
 8014dae:	fa02 f204 	lsl.w	r2, r2, r4
 8014db2:	7801      	ldrb	r1, [r0, #0]

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
 8014db4:	b10d      	cbz	r5, 8014dba <MIOS32_UART_InitPort+0x2a>
    uart_assigned_to_midi |= (1 << uart);
 8014db6:	430a      	orrs	r2, r1
 8014db8:	e001      	b.n	8014dbe <MIOS32_UART_InitPort+0x2e>
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8014dba:	ea21 0202 	bic.w	r2, r1, r2
  }

  switch( uart ) {
 8014dbe:	2c01      	cmp	r4, #1

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8014dc0:	7002      	strb	r2, [r0, #0]
 8014dc2:	f04f 0502 	mov.w	r5, #2
  }

  switch( uart ) {
 8014dc6:	d01b      	beq.n	8014e00 <MIOS32_UART_InitPort+0x70>
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8014dc8:	3f05      	subs	r7, #5
 8014dca:	bf18      	it	ne
 8014dcc:	2701      	movne	r7, #1

  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8014dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014dd2:	481c      	ldr	r0, [pc, #112]	; (8014e44 <MIOS32_UART_InitPort+0xb4>)

  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8014dd4:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014dd6:	4669      	mov	r1, sp
  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014dd8:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8014ddc:	f88d 7006 	strb.w	r7, [sp, #6]
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014de0:	f000 fccc 	bl	801577c <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8014de4:	2001      	movs	r0, #1
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8014de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8014dea:	f88d 0007 	strb.w	r0, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8014dee:	9100      	str	r1, [sp, #0]
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8014df0:	4814      	ldr	r0, [pc, #80]	; (8014e44 <MIOS32_UART_InitPort+0xb4>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014df2:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8014df6:	4669      	mov	r1, sp
 8014df8:	f000 fcc0 	bl	801577c <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	e017      	b.n	8014e30 <MIOS32_UART_InitPort+0xa0>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8014e00:	2204      	movs	r2, #4
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8014e02:	3f05      	subs	r7, #5
 8014e04:	bf18      	it	ne
 8014e06:	2701      	movne	r7, #1
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8014e08:	480f      	ldr	r0, [pc, #60]	; (8014e48 <MIOS32_UART_InitPort+0xb8>)
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8014e0a:	9200      	str	r2, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8014e0c:	4669      	mov	r1, sp

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014e0e:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8014e12:	f88d 7006 	strb.w	r7, [sp, #6]
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8014e16:	f000 fcb1 	bl	801577c <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8014e1a:	2308      	movs	r3, #8
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8014e1c:	480a      	ldr	r0, [pc, #40]	; (8014e48 <MIOS32_UART_InitPort+0xb8>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014e1e:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8014e22:	4669      	mov	r1, sp
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8014e24:	f88d 4007 	strb.w	r4, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8014e28:	9300      	str	r3, [sp, #0]
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8014e2a:	f000 fca7 	bl	801577c <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8014e2e:	4620      	mov	r0, r4
 8014e30:	4631      	mov	r1, r6
 8014e32:	f7ff ff81 	bl	8014d38 <MIOS32_UART_BaudrateSet>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 8014e36:	2000      	movs	r0, #0
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
  } break;
 8014e38:	e001      	b.n	8014e3e <MIOS32_UART_InitPort+0xae>
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART
 8014e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return -1; // unsupported UART
  }

  return 0; // no error
#endif
}
 8014e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014e40:	20000950 	.word	0x20000950
 8014e44:	40020800 	.word	0x40020800
 8014e48:	40020000 	.word	0x40020000

08014e4c <MIOS32_UART_InitPortDefault>:
//! Initializes a given UART interface based on default settings
//! \param[in] uart UART number (0..2)
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPortDefault(u8 uart)
{
 8014e4c:	b510      	push	{r4, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  switch( uart ) {
 8014e4e:	4604      	mov	r4, r0
 8014e50:	b130      	cbz	r0, 8014e60 <MIOS32_UART_InitPortDefault+0x14>
 8014e52:	2801      	cmp	r0, #1
 8014e54:	d10c      	bne.n	8014e70 <MIOS32_UART_InitPortDefault+0x24>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
 8014e56:	f647 2112 	movw	r1, #31250	; 0x7a12
 8014e5a:	2206      	movs	r2, #6
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	e003      	b.n	8014e68 <MIOS32_UART_InitPortDefault+0x1c>
#else
  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
# if MIOS32_UART0_TX_OD
    MIOS32_UART_InitPort(0, MIOS32_UART0_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART0_ASSIGNMENT == 1);
 8014e60:	f647 2112 	movw	r1, #31250	; 0x7a12
 8014e64:	2206      	movs	r2, #6
 8014e66:	2301      	movs	r3, #1
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
 8014e68:	f7ff ff92 	bl	8014d90 <MIOS32_UART_InitPort>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 8014e6c:	2000      	movs	r0, #0
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
# else
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_PP, MIOS32_UART1_ASSIGNMENT == 1);
# endif
  } break;
 8014e6e:	bd10      	pop	{r4, pc}
# endif
  } break;
#endif

  default:
    return -1; // unsupported UART
 8014e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }

  return 0; // no error
#endif
}
 8014e74:	bd10      	pop	{r4, pc}
	...

08014e78 <MIOS32_UART_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
 8014e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d15c      	bne.n	8014f3c <MIOS32_UART_Init+0xc4>
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 8014e82:	210a      	movs	r1, #10
 8014e84:	2208      	movs	r2, #8
 8014e86:	482f      	ldr	r0, [pc, #188]	; (8014f44 <MIOS32_UART_Init+0xcc>)

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8014e88:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014f60 <MIOS32_UART_Init+0xe8>
 8014e8c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8014f64 <MIOS32_UART_Init+0xec>
 8014e90:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8014f68 <MIOS32_UART_Init+0xf0>
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8014e94:	4f2c      	ldr	r7, [pc, #176]	; (8014f48 <MIOS32_UART_Init+0xd0>)
 8014e96:	4e2d      	ldr	r6, [pc, #180]	; (8014f4c <MIOS32_UART_Init+0xd4>)
 8014e98:	4d2d      	ldr	r5, [pc, #180]	; (8014f50 <MIOS32_UART_Init+0xd8>)
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 8014e9a:	f000 fcc9 	bl	8015830 <GPIO_PinAFConfig>
 8014e9e:	210b      	movs	r1, #11
 8014ea0:	2208      	movs	r2, #8
 8014ea2:	4828      	ldr	r0, [pc, #160]	; (8014f44 <MIOS32_UART_Init+0xcc>)
 8014ea4:	f000 fcc4 	bl	8015830 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART1_REMAP_FUNC;
 8014ea8:	2102      	movs	r1, #2
 8014eaa:	2207      	movs	r2, #7
 8014eac:	4829      	ldr	r0, [pc, #164]	; (8014f54 <MIOS32_UART_Init+0xdc>)
 8014eae:	f000 fcbf 	bl	8015830 <GPIO_PinAFConfig>
 8014eb2:	2207      	movs	r2, #7
 8014eb4:	2103      	movs	r1, #3
 8014eb6:	4827      	ldr	r0, [pc, #156]	; (8014f54 <MIOS32_UART_Init+0xdc>)
 8014eb8:	f000 fcba 	bl	8015830 <GPIO_PinAFConfig>
  MIOS32_UART3_REMAP_FUNC;
#endif

  // enable all USART clocks
  // TODO: more generic approach for different UART selections
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_USART6, ENABLE);
 8014ebc:	2030      	movs	r0, #48	; 0x30
 8014ebe:	2101      	movs	r1, #1
 8014ec0:	f000 fd7c 	bl	80159bc <RCC_APB2PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8014eca:	f000 fd6b 	bl	80159a4 <RCC_APB1PeriphClockCmd>
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;

      MIOS32_UART_InitPortDefault(uart);
 8014ece:	4620      	mov	r0, r4

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8014ed0:	f88a 4000 	strb.w	r4, [sl]
 8014ed4:	f889 4000 	strb.w	r4, [r9]
 8014ed8:	f888 4000 	strb.w	r4, [r8]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8014edc:	703c      	strb	r4, [r7, #0]
 8014ede:	7034      	strb	r4, [r6, #0]
 8014ee0:	702c      	strb	r4, [r5, #0]

      MIOS32_UART_InitPortDefault(uart);
 8014ee2:	f7ff ffb3 	bl	8014e4c <MIOS32_UART_InitPortDefault>
 8014ee6:	2001      	movs	r0, #1

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8014ee8:	f88a 4001 	strb.w	r4, [sl, #1]
 8014eec:	f889 4001 	strb.w	r4, [r9, #1]
 8014ef0:	f888 4001 	strb.w	r4, [r8, #1]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8014ef4:	707c      	strb	r4, [r7, #1]
 8014ef6:	7074      	strb	r4, [r6, #1]
 8014ef8:	706c      	strb	r4, [r5, #1]

      MIOS32_UART_InitPortDefault(uart);
 8014efa:	f7ff ffa7 	bl	8014e4c <MIOS32_UART_InitPortDefault>
    }
  }

  // configure and enable UART interrupts
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART0_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8014efe:	2104      	movs	r1, #4
 8014f00:	2034      	movs	r0, #52	; 0x34
 8014f02:	f7fd fe33 	bl	8012b6c <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
 8014f06:	2201      	movs	r2, #1
 8014f08:	4813      	ldr	r0, [pc, #76]	; (8014f58 <MIOS32_UART_Init+0xe0>)
 8014f0a:	f240 5125 	movw	r1, #1317	; 0x525
 8014f0e:	f000 ff5b 	bl	8015dc8 <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8014f12:	2104      	movs	r1, #4
 8014f14:	2026      	movs	r0, #38	; 0x26
 8014f16:	f7fd fe29 	bl	8012b6c <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	480f      	ldr	r0, [pc, #60]	; (8014f5c <MIOS32_UART_Init+0xe4>)
 8014f1e:	f240 5125 	movw	r1, #1317	; 0x525
 8014f22:	f000 ff51 	bl	8015dc8 <USART_ITConfig>
  USART_ITConfig(MIOS32_UART3, USART_IT_RXNE, ENABLE);
#endif

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 8014f26:	2101      	movs	r1, #1
 8014f28:	480b      	ldr	r0, [pc, #44]	; (8014f58 <MIOS32_UART_Init+0xe0>)
 8014f2a:	f000 ff41 	bl	8015db0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART1, ENABLE);
 8014f2e:	480b      	ldr	r0, [pc, #44]	; (8014f5c <MIOS32_UART_Init+0xe4>)
 8014f30:	2101      	movs	r1, #1
 8014f32:	f000 ff3d 	bl	8015db0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
 8014f36:	4620      	mov	r0, r4
 8014f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
#endif
}
 8014f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f44:	40020800 	.word	0x40020800
 8014f48:	20000946 	.word	0x20000946
 8014f4c:	20000951 	.word	0x20000951
 8014f50:	2000083e 	.word	0x2000083e
 8014f54:	40020000 	.word	0x40020000
 8014f58:	40004c00 	.word	0x40004c00
 8014f5c:	40004400 	.word	0x40004400
 8014f60:	20000840 	.word	0x20000840
 8014f64:	20000944 	.word	0x20000944
 8014f68:	20000842 	.word	0x20000842

08014f6c <MIOS32_UART_RxBufferGet>:
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014f6c:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: number of received bytes
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
 8014f6e:	b538      	push	{r3, r4, r5, lr}
 8014f70:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014f72:	d81b      	bhi.n	8014fac <MIOS32_UART_RxBufferGet+0x40>
    return -1; // UART not available

  if( !rx_buffer_size[uart] )
 8014f74:	4b10      	ldr	r3, [pc, #64]	; (8014fb8 <MIOS32_UART_RxBufferGet+0x4c>)
 8014f76:	5c18      	ldrb	r0, [r3, r0]
 8014f78:	b1d8      	cbz	r0, 8014fb2 <MIOS32_UART_RxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014f7a:	f7fd fdcf 	bl	8012b1c <MIOS32_IRQ_Disable>
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014f7e:	4b0f      	ldr	r3, [pc, #60]	; (8014fbc <MIOS32_UART_RxBufferGet+0x50>)
 8014f80:	490f      	ldr	r1, [pc, #60]	; (8014fc0 <MIOS32_UART_RxBufferGet+0x54>)
 8014f82:	5d1a      	ldrb	r2, [r3, r4]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014f84:	5d18      	ldrb	r0, [r3, r4]
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014f86:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014f8a:	1c42      	adds	r2, r0, #1
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014f8c:	5d4d      	ldrb	r5, [r1, r5]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014f8e:	b2d1      	uxtb	r1, r2
 8014f90:	293f      	cmp	r1, #63	; 0x3f
 8014f92:	5519      	strb	r1, [r3, r4]
 8014f94:	d901      	bls.n	8014f9a <MIOS32_UART_RxBufferGet+0x2e>
    rx_buffer_tail[uart] = 0;
 8014f96:	2000      	movs	r0, #0
 8014f98:	5518      	strb	r0, [r3, r4]
  --rx_buffer_size[uart];
 8014f9a:	4b07      	ldr	r3, [pc, #28]	; (8014fb8 <MIOS32_UART_RxBufferGet+0x4c>)
 8014f9c:	5d1a      	ldrb	r2, [r3, r4]
 8014f9e:	1e51      	subs	r1, r2, #1
 8014fa0:	b2c8      	uxtb	r0, r1
 8014fa2:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8014fa4:	f7fd fdce 	bl	8012b44 <MIOS32_IRQ_Enable>

  return b; // return received byte
 8014fa8:	4628      	mov	r0, r5
 8014faa:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8014fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fb0:	bd38      	pop	{r3, r4, r5, pc}

  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer
 8014fb2:	f06f 0001 	mvn.w	r0, #1
  --rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return received byte
#endif
}
 8014fb6:	bd38      	pop	{r3, r4, r5, pc}
 8014fb8:	20000840 	.word	0x20000840
 8014fbc:	20000842 	.word	0x20000842
 8014fc0:	200008c4 	.word	0x200008c4

08014fc4 <MIOS32_UART_RxBufferPut>:
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014fc4:	2801      	cmp	r0, #1
//! \return -1 if UART not available
//! \return -2 if buffer full (retry)
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
 8014fc6:	b538      	push	{r3, r4, r5, lr}
 8014fc8:	4604      	mov	r4, r0
 8014fca:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014fcc:	d81c      	bhi.n	8015008 <MIOS32_UART_RxBufferPut+0x44>
    return -1; // UART not available

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014fce:	4b11      	ldr	r3, [pc, #68]	; (8015014 <MIOS32_UART_RxBufferPut+0x50>)
 8014fd0:	5c18      	ldrb	r0, [r3, r0]
 8014fd2:	283f      	cmp	r0, #63	; 0x3f
 8014fd4:	d81b      	bhi.n	801500e <MIOS32_UART_RxBufferPut+0x4a>
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014fd6:	f7fd fda1 	bl	8012b1c <MIOS32_IRQ_Disable>
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 8014fda:	4b0f      	ldr	r3, [pc, #60]	; (8015018 <MIOS32_UART_RxBufferPut+0x54>)
 8014fdc:	490f      	ldr	r1, [pc, #60]	; (801501c <MIOS32_UART_RxBufferPut+0x58>)
 8014fde:	5d1a      	ldrb	r2, [r3, r4]
 8014fe0:	eb02 1084 	add.w	r0, r2, r4, lsl #6
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014fe4:	5d1a      	ldrb	r2, [r3, r4]
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 8014fe6:	540d      	strb	r5, [r1, r0]
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014fe8:	1c50      	adds	r0, r2, #1
 8014fea:	b2c1      	uxtb	r1, r0
 8014fec:	293f      	cmp	r1, #63	; 0x3f
 8014fee:	5519      	strb	r1, [r3, r4]
 8014ff0:	d901      	bls.n	8014ff6 <MIOS32_UART_RxBufferPut+0x32>
    rx_buffer_head[uart] = 0;
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	551a      	strb	r2, [r3, r4]
  ++rx_buffer_size[uart];
 8014ff6:	4b07      	ldr	r3, [pc, #28]	; (8015014 <MIOS32_UART_RxBufferPut+0x50>)
 8014ff8:	5d18      	ldrb	r0, [r3, r4]
 8014ffa:	1c41      	adds	r1, r0, #1
 8014ffc:	b2ca      	uxtb	r2, r1
 8014ffe:	551a      	strb	r2, [r3, r4]
  MIOS32_IRQ_Enable();
 8015000:	f7fd fda0 	bl	8012b44 <MIOS32_IRQ_Enable>

  return 0; // no error
 8015004:	2000      	movs	r0, #0
 8015006:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8015008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801500c:	bd38      	pop	{r3, r4, r5, pc}

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
    return -2; // buffer full (retry)
 801500e:	f06f 0001 	mvn.w	r0, #1
  ++rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 8015012:	bd38      	pop	{r3, r4, r5, pc}
 8015014:	20000840 	.word	0x20000840
 8015018:	20000944 	.word	0x20000944
 801501c:	200008c4 	.word	0x200008c4

08015020 <MIOS32_UART_TxBufferGet>:
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015020:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: transmitted byte
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
 8015022:	b538      	push	{r3, r4, r5, lr}
 8015024:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015026:	d81b      	bhi.n	8015060 <MIOS32_UART_TxBufferGet+0x40>
    return -1; // UART not available

  if( !tx_buffer_size[uart] )
 8015028:	4b10      	ldr	r3, [pc, #64]	; (801506c <MIOS32_UART_TxBufferGet+0x4c>)
 801502a:	5c18      	ldrb	r0, [r3, r0]
 801502c:	b1d8      	cbz	r0, 8015066 <MIOS32_UART_TxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 801502e:	f7fd fd75 	bl	8012b1c <MIOS32_IRQ_Disable>
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8015032:	4b0f      	ldr	r3, [pc, #60]	; (8015070 <MIOS32_UART_TxBufferGet+0x50>)
 8015034:	490f      	ldr	r1, [pc, #60]	; (8015074 <MIOS32_UART_TxBufferGet+0x54>)
 8015036:	5d1a      	ldrb	r2, [r3, r4]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8015038:	5d18      	ldrb	r0, [r3, r4]
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 801503a:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 801503e:	1c42      	adds	r2, r0, #1
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8015040:	5d4d      	ldrb	r5, [r1, r5]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8015042:	b2d1      	uxtb	r1, r2
 8015044:	293f      	cmp	r1, #63	; 0x3f
 8015046:	5519      	strb	r1, [r3, r4]
 8015048:	d901      	bls.n	801504e <MIOS32_UART_TxBufferGet+0x2e>
    tx_buffer_tail[uart] = 0;
 801504a:	2000      	movs	r0, #0
 801504c:	5518      	strb	r0, [r3, r4]
  --tx_buffer_size[uart];
 801504e:	4b07      	ldr	r3, [pc, #28]	; (801506c <MIOS32_UART_TxBufferGet+0x4c>)
 8015050:	5d1a      	ldrb	r2, [r3, r4]
 8015052:	1e51      	subs	r1, r2, #1
 8015054:	b2c8      	uxtb	r0, r1
 8015056:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8015058:	f7fd fd74 	bl	8012b44 <MIOS32_IRQ_Enable>

  return b; // return transmitted byte
 801505c:	4628      	mov	r0, r5
 801505e:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8015060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015064:	bd38      	pop	{r3, r4, r5, pc}

  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer
 8015066:	f06f 0001 	mvn.w	r0, #1
  --tx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return transmitted byte
#endif
}
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	20000946 	.word	0x20000946
 8015070:	2000083e 	.word	0x2000083e
 8015074:	20000844 	.word	0x20000844

08015078 <MIOS32_UART_TxBufferPutMore_NonBlocking>:
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015078:	2801      	cmp	r0, #1
//! \return -2 if buffer full or cannot get all requested bytes (retry)
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
 801507a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507c:	4604      	mov	r4, r0
 801507e:	460d      	mov	r5, r1
 8015080:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015082:	d830      	bhi.n	80150e6 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6e>
    return -1; // UART not available

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
 8015084:	4b1b      	ldr	r3, [pc, #108]	; (80150f4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 8015086:	5c18      	ldrb	r0, [r3, r0]
 8015088:	1881      	adds	r1, r0, r2
 801508a:	293f      	cmp	r1, #63	; 0x3f
 801508c:	dc2e      	bgt.n	80150ec <MIOS32_UART_TxBufferPutMore_NonBlocking+0x74>
    return -2; // buffer full or cannot get all requested bytes (retry)

  // copy bytes to be transmitted into transmit buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 801508e:	f7fd fd45 	bl	8012b1c <MIOS32_IRQ_Disable>

  u16 i;
  for(i=0; i<len; ++i) {
 8015092:	4628      	mov	r0, r5
 8015094:	1b42      	subs	r2, r0, r5
 8015096:	b293      	uxth	r3, r2
 8015098:	42b3      	cmp	r3, r6
 801509a:	d220      	bcs.n	80150de <MIOS32_UART_TxBufferPutMore_NonBlocking+0x66>
    tx_buffer[uart][tx_buffer_head[uart]] = *buffer++;
 801509c:	4b16      	ldr	r3, [pc, #88]	; (80150f8 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x80>)
 801509e:	4917      	ldr	r1, [pc, #92]	; (80150fc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x84>)
 80150a0:	5d1f      	ldrb	r7, [r3, r4]
 80150a2:	eb07 1284 	add.w	r2, r7, r4, lsl #6
 80150a6:	f810 7b01 	ldrb.w	r7, [r0], #1
 80150aa:	548f      	strb	r7, [r1, r2]

    if( ++tx_buffer_head[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 80150ac:	5d1a      	ldrb	r2, [r3, r4]
 80150ae:	1c51      	adds	r1, r2, #1
 80150b0:	b2ca      	uxtb	r2, r1
 80150b2:	2a3f      	cmp	r2, #63	; 0x3f
 80150b4:	551a      	strb	r2, [r3, r4]
 80150b6:	d901      	bls.n	80150bc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x44>
      tx_buffer_head[uart] = 0;
 80150b8:	2100      	movs	r1, #0
 80150ba:	5519      	strb	r1, [r3, r4]

    // enable Tx interrupt if buffer was empty
    if( ++tx_buffer_size[uart] == 1 ) {
 80150bc:	4a0d      	ldr	r2, [pc, #52]	; (80150f4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 80150be:	5d13      	ldrb	r3, [r2, r4]
 80150c0:	1c59      	adds	r1, r3, #1
 80150c2:	b2cb      	uxtb	r3, r1
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	5513      	strb	r3, [r2, r4]
 80150c8:	d1e4      	bne.n	8015094 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
      switch( uart ) {
 80150ca:	2c01      	cmp	r4, #1
        case 0: MIOS32_UART0->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80150cc:	bf14      	ite	ne
 80150ce:	4b0c      	ldrne	r3, [pc, #48]	; (8015100 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x88>)
#if NUM_SUPPORTED_UARTS >=2
        case 1: MIOS32_UART1->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80150d0:	4b0c      	ldreq	r3, [pc, #48]	; (8015104 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 80150d2:	899a      	ldrh	r2, [r3, #12]
 80150d4:	b291      	uxth	r1, r2
 80150d6:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80150da:	819a      	strh	r2, [r3, #12]
 80150dc:	e7da      	b.n	8015094 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
        default: MIOS32_IRQ_Enable(); return -3; // uart not supported by routine (yet)
      }
    }
  }

  MIOS32_IRQ_Enable();
 80150de:	f7fd fd31 	bl	8012b44 <MIOS32_IRQ_Enable>

  return 0; // no error
 80150e2:	2000      	movs	r0, #0
 80150e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80150e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
    return -2; // buffer full or cannot get all requested bytes (retry)
 80150ec:	f06f 0001 	mvn.w	r0, #1

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 80150f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150f2:	bf00      	nop
 80150f4:	20000946 	.word	0x20000946
 80150f8:	20000951 	.word	0x20000951
 80150fc:	20000844 	.word	0x20000844
 8015100:	40004c00 	.word	0x40004c00
 8015104:	40004400 	.word	0x40004400

08015108 <MIOS32_UART_TxBufferPutMore>:
//! \return -1 if UART not available
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore(u8 uart, u8 *buffer, u16 len)
{
 8015108:	b570      	push	{r4, r5, r6, lr}
 801510a:	4606      	mov	r6, r0
 801510c:	460d      	mov	r5, r1
 801510e:	4614      	mov	r4, r2
  s32 error;

  while( (error=MIOS32_UART_TxBufferPutMore_NonBlocking(uart, buffer, len)) == -2 );
 8015110:	4630      	mov	r0, r6
 8015112:	4629      	mov	r1, r5
 8015114:	4622      	mov	r2, r4
 8015116:	f7ff ffaf 	bl	8015078 <MIOS32_UART_TxBufferPutMore_NonBlocking>
 801511a:	1c83      	adds	r3, r0, #2
 801511c:	d0f8      	beq.n	8015110 <MIOS32_UART_TxBufferPutMore+0x8>

  return error;
}
 801511e:	bd70      	pop	{r4, r5, r6, pc}

08015120 <UART4_IRQHandler>:
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8015120:	4b19      	ldr	r3, [pc, #100]	; (8015188 <UART4_IRQHandler+0x68>)
 8015122:	881a      	ldrh	r2, [r3, #0]
 8015124:	f002 0020 	and.w	r0, r2, #32
 8015128:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
 801512a:	b510      	push	{r4, lr}
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 801512c:	b181      	cbz	r1, 8015150 <UART4_IRQHandler+0x30>
    u8 b = MIOS32_UART0->DR;
 801512e:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8015130:	2000      	movs	r0, #0
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;
 8015132:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8015134:	f7ff fdf6 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 8015138:	b920      	cbnz	r0, 8015144 <UART4_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 801513a:	2000      	movs	r0, #0
 801513c:	4621      	mov	r1, r4
 801513e:	f7ff ff41 	bl	8014fc4 <MIOS32_UART_RxBufferPut>
 8015142:	e005      	b.n	8015150 <UART4_IRQHandler+0x30>
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8015144:	2020      	movs	r0, #32
 8015146:	4621      	mov	r1, r4
 8015148:	f7fc fdce 	bl	8011ce8 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 801514c:	2800      	cmp	r0, #0
 801514e:	d0f4      	beq.n	801513a <UART4_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
 8015150:	4c0d      	ldr	r4, [pc, #52]	; (8015188 <UART4_IRQHandler+0x68>)
 8015152:	8823      	ldrh	r3, [r4, #0]
 8015154:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8015158:	b290      	uxth	r0, r2
 801515a:	b198      	cbz	r0, 8015184 <UART4_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 801515c:	490b      	ldr	r1, [pc, #44]	; (801518c <UART4_IRQHandler+0x6c>)
 801515e:	780b      	ldrb	r3, [r1, #0]
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(0) > 0 ) {
 8015160:	b153      	cbz	r3, 8015178 <UART4_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(0);
 8015162:	2000      	movs	r0, #0
 8015164:	f7ff ff5c 	bl	8015020 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8015168:	2800      	cmp	r0, #0
 801516a:	da02      	bge.n	8015172 <UART4_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART0->DR = 0xff;
 801516c:	20ff      	movs	r0, #255	; 0xff
 801516e:	80a0      	strh	r0, [r4, #4]
 8015170:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART0->DR = b;
 8015172:	b282      	uxth	r2, r0
 8015174:	80a2      	strh	r2, [r4, #4]
 8015176:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART0->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8015178:	89a2      	ldrh	r2, [r4, #12]
 801517a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 801517e:	0401      	lsls	r1, r0, #16
 8015180:	0c0b      	lsrs	r3, r1, #16
 8015182:	81a3      	strh	r3, [r4, #12]
 8015184:	bd10      	pop	{r4, pc}
 8015186:	bf00      	nop
 8015188:	40004c00 	.word	0x40004c00
 801518c:	20000946 	.word	0x20000946

08015190 <USART2_IRQHandler>:
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 8015190:	4b19      	ldr	r3, [pc, #100]	; (80151f8 <USART2_IRQHandler+0x68>)
 8015192:	881a      	ldrh	r2, [r3, #0]
 8015194:	f002 0020 	and.w	r0, r2, #32
 8015198:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
 801519a:	b510      	push	{r4, lr}
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 801519c:	b181      	cbz	r1, 80151c0 <USART2_IRQHandler+0x30>
    u8 b = MIOS32_UART1->DR;
 801519e:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80151a0:	2001      	movs	r0, #1
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;
 80151a2:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80151a4:	f7ff fdbe 	bl	8014d24 <MIOS32_UART_IsAssignedToMIDI>
 80151a8:	b920      	cbnz	r0, 80151b4 <USART2_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80151aa:	2001      	movs	r0, #1
 80151ac:	4621      	mov	r1, r4
 80151ae:	f7ff ff09 	bl	8014fc4 <MIOS32_UART_RxBufferPut>
 80151b2:	e005      	b.n	80151c0 <USART2_IRQHandler+0x30>
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80151b4:	2021      	movs	r0, #33	; 0x21
 80151b6:	4621      	mov	r1, r4
 80151b8:	f7fc fd96 	bl	8011ce8 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80151bc:	2800      	cmp	r0, #0
 80151be:	d0f4      	beq.n	80151aa <USART2_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
 80151c0:	4c0d      	ldr	r4, [pc, #52]	; (80151f8 <USART2_IRQHandler+0x68>)
 80151c2:	8823      	ldrh	r3, [r4, #0]
 80151c4:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80151c8:	b290      	uxth	r0, r2
 80151ca:	b198      	cbz	r0, 80151f4 <USART2_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 80151cc:	490b      	ldr	r1, [pc, #44]	; (80151fc <USART2_IRQHandler+0x6c>)
 80151ce:	784b      	ldrb	r3, [r1, #1]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(1) > 0 ) {
 80151d0:	b153      	cbz	r3, 80151e8 <USART2_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(1);
 80151d2:	2001      	movs	r0, #1
 80151d4:	f7ff ff24 	bl	8015020 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 80151d8:	2800      	cmp	r0, #0
 80151da:	da02      	bge.n	80151e2 <USART2_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART1->DR = 0xff;
 80151dc:	20ff      	movs	r0, #255	; 0xff
 80151de:	80a0      	strh	r0, [r4, #4]
 80151e0:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART1->DR = b;
 80151e2:	b282      	uxth	r2, r0
 80151e4:	80a2      	strh	r2, [r4, #4]
 80151e6:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART1->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80151e8:	89a2      	ldrh	r2, [r4, #12]
 80151ea:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80151ee:	0401      	lsls	r1, r0, #16
 80151f0:	0c0b      	lsrs	r3, r1, #16
 80151f2:	81a3      	strh	r3, [r4, #12]
 80151f4:	bd10      	pop	{r4, pc}
 80151f6:	bf00      	nop
 80151f8:	40004400 	.word	0x40004400
 80151fc:	20000946 	.word	0x20000946

08015200 <EV_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8015200:	6803      	ldr	r3, [r0, #0]
 8015202:	8a9a      	ldrh	r2, [r3, #20]

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags
 8015204:	8b19      	ldrh	r1, [r3, #24]
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8015206:	b292      	uxth	r2, r2

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8015208:	07d1      	lsls	r1, r2, #31

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
 801520a:	b510      	push	{r4, lr}
  u32 SR1Register = iicx->base->SR1;

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 801520c:	d50d      	bpl.n	801522a <EV_IRQHandler+0x2a>
    // don't send address if stop was requested (WRITE_WITHOUT_STOP - mode, start condition was sent)
    // we have to wait for the application to start the next transfer
    if( iicx->transfer_state.STOP_REQUESTED ) {
 801520e:	6941      	ldr	r1, [r0, #20]
 8015210:	078a      	lsls	r2, r1, #30
 8015212:	d507      	bpl.n	8015224 <EV_IRQHandler+0x24>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 8015214:	7d02      	ldrb	r2, [r0, #20]
 8015216:	f022 0101 	bic.w	r1, r2, #1
 801521a:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801521c:	8898      	ldrh	r0, [r3, #4]
 801521e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8015222:	e027      	b.n	8015274 <EV_IRQHandler+0x74>
      return;
    }

    /* Send the slave address for transmssion or for reception (according to the configured value
       in the write master write routine */
    iicx->base->DR = iicx->iic_address;
 8015224:	7900      	ldrb	r0, [r0, #4]
 8015226:	8218      	strh	r0, [r3, #16]
    return;
 8015228:	bd10      	pop	{r4, pc}
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
 801522a:	f002 0102 	and.w	r1, r2, #2
 801522e:	b289      	uxth	r1, r1
 8015230:	2900      	cmp	r1, #0
 8015232:	d031      	beq.n	8015298 <EV_IRQHandler+0x98>
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8015234:	7901      	ldrb	r1, [r0, #4]
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8015236:	8a02      	ldrh	r2, [r0, #16]
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8015238:	f011 0f01 	tst.w	r1, #1
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 801523c:	b291      	uxth	r1, r2
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 801523e:	d11d      	bne.n	801527c <EV_IRQHandler+0x7c>
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8015240:	2900      	cmp	r1, #0
 8015242:	d036      	beq.n	80152b2 <EV_IRQHandler+0xb2>
	iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

	// transfer finished
	iicx->transfer_state.BUSY = 0;	
      } else {
	if( iicx->buffer_ix < iicx->buffer_len ) {
 8015244:	8a42      	ldrh	r2, [r0, #18]
 8015246:	b291      	uxth	r1, r2
 8015248:	8a02      	ldrh	r2, [r0, #16]
 801524a:	b292      	uxth	r2, r2
 801524c:	4291      	cmp	r1, r2
 801524e:	d208      	bcs.n	8015262 <EV_IRQHandler+0x62>
	  /* Write the first data in the data register */
	  iicx->base->DR = (iicx->tx_buffer_ptr == NULL) ? 0 : iicx->tx_buffer_ptr[iicx->buffer_ix++];
 8015250:	6882      	ldr	r2, [r0, #8]
 8015252:	b12a      	cbz	r2, 8015260 <EV_IRQHandler+0x60>
 8015254:	8a41      	ldrh	r1, [r0, #18]
 8015256:	b289      	uxth	r1, r1
 8015258:	5c52      	ldrb	r2, [r2, r1]
 801525a:	3101      	adds	r1, #1
 801525c:	b289      	uxth	r1, r1
 801525e:	8241      	strh	r1, [r0, #18]
 8015260:	821a      	strh	r2, [r3, #16]
	}

	/* If no further data to be sent, disable the I2C BUF IT
	   in order to not have a TxE interrupt */
	if( iicx->buffer_ix >= iicx->buffer_len ) {
 8015262:	8a42      	ldrh	r2, [r0, #18]
 8015264:	8a00      	ldrh	r0, [r0, #16]
 8015266:	b291      	uxth	r1, r2
 8015268:	b282      	uxth	r2, r0
 801526a:	4291      	cmp	r1, r2
 801526c:	d378      	bcc.n	8015360 <EV_IRQHandler+0x160>
	  iicx->base->CR2 &= (u16)~I2C_IT_BUF;
 801526e:	8899      	ldrh	r1, [r3, #4]
 8015270:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8015274:	0402      	lsls	r2, r0, #16
 8015276:	0c11      	lsrs	r1, r2, #16
 8015278:	8099      	strh	r1, [r3, #4]
 801527a:	bd10      	pop	{r4, pc}
      /* Master Receiver */

      /* At this stage, ADDR is cleared because both SR1 and SR2 were read.*/
      /* EV6_1: used for single byte reception. The ACK disable and the STOP
	 Programming should be done just after ADDR is cleared. */
      if( iicx->buffer_len == 1 ) {
 801527c:	2901      	cmp	r1, #1
 801527e:	d16f      	bne.n	8015360 <EV_IRQHandler+0x160>
	/* Clear ACK */
	iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8015280:	881a      	ldrh	r2, [r3, #0]
 8015282:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8015286:	040a      	lsls	r2, r1, #16
 8015288:	0c11      	lsrs	r1, r2, #16
 801528a:	8019      	strh	r1, [r3, #0]
	/* Program the STOP */
	iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 801528c:	881a      	ldrh	r2, [r3, #0]
 801528e:	b291      	uxth	r1, r2
 8015290:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 8015294:	801a      	strh	r2, [r3, #0]
 8015296:	e05f      	b.n	8015358 <EV_IRQHandler+0x158>
    return;
  }

  /* Master transmits the remaing data: from data2 until the last one.  */
  /* If TXE is set */
  if( (SR1Register &0x0084) == 0x0080 ) {
 8015298:	f002 0184 	and.w	r1, r2, #132	; 0x84
 801529c:	2980      	cmp	r1, #128	; 0x80
 801529e:	d106      	bne.n	80152ae <EV_IRQHandler+0xae>
    /* If there is still data to write */
    if( iicx->buffer_ix < iicx->buffer_len ) {
 80152a0:	8a42      	ldrh	r2, [r0, #18]
 80152a2:	b291      	uxth	r1, r2
 80152a4:	8a02      	ldrh	r2, [r0, #16]
 80152a6:	b292      	uxth	r2, r2
 80152a8:	4291      	cmp	r1, r2
 80152aa:	d3d1      	bcc.n	8015250 <EV_IRQHandler+0x50>
 80152ac:	e058      	b.n	8015360 <EV_IRQHandler+0x160>

    return;
  }

  /* If BTF and TXE are set (EV8_2), program the STOP */
  if( (SR1Register & 0x0084) == 0x0084 ) {
 80152ae:	2984      	cmp	r1, #132	; 0x84
 80152b0:	d112      	bne.n	80152d8 <EV_IRQHandler+0xd8>
    /* Program the STOP */
    iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80152b2:	881a      	ldrh	r2, [r3, #0]
 80152b4:	b291      	uxth	r1, r2
 80152b6:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80152ba:	801a      	strh	r2, [r3, #0]
    iicx->transfer_state.STOP_REQUESTED = 1;
 80152bc:	7d01      	ldrb	r1, [r0, #20]
 80152be:	f041 0202 	orr.w	r2, r1, #2
 80152c2:	7502      	strb	r2, [r0, #20]

    // disable all interrupts
    iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80152c4:	8899      	ldrh	r1, [r3, #4]
 80152c6:	f421 62e0 	bic.w	r2, r1, #1792	; 0x700
 80152ca:	0411      	lsls	r1, r2, #16
 80152cc:	0c0a      	lsrs	r2, r1, #16
 80152ce:	809a      	strh	r2, [r3, #4]

    // transfer finished
    iicx->transfer_state.BUSY = 0;
 80152d0:	7d03      	ldrb	r3, [r0, #20]
 80152d2:	f023 0101 	bic.w	r1, r3, #1
 80152d6:	e042      	b.n	801535e <EV_IRQHandler+0x15e>

    return;
  }

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
 80152d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80152dc:	b291      	uxth	r1, r2
 80152de:	2900      	cmp	r1, #0
 80152e0:	d03e      	beq.n	8015360 <EV_IRQHandler+0x160>
 80152e2:	68c1      	ldr	r1, [r0, #12]
 80152e4:	2900      	cmp	r1, #0
 80152e6:	d03b      	beq.n	8015360 <EV_IRQHandler+0x160>
    /* Read the data register */

    u8 b = iicx->base->DR;
 80152e8:	8a1c      	ldrh	r4, [r3, #16]

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80152ea:	8a42      	ldrh	r2, [r0, #18]

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
    /* Read the data register */

    u8 b = iicx->base->DR;
 80152ec:	b2e3      	uxtb	r3, r4

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80152ee:	b294      	uxth	r4, r2
 80152f0:	8a02      	ldrh	r2, [r0, #16]
 80152f2:	b292      	uxth	r2, r2
 80152f4:	4294      	cmp	r4, r2
 80152f6:	d205      	bcs.n	8015304 <EV_IRQHandler+0x104>
      iicx->rx_buffer_ptr[iicx->buffer_ix++] = b;
 80152f8:	8a42      	ldrh	r2, [r0, #18]
 80152fa:	b292      	uxth	r2, r2
 80152fc:	548b      	strb	r3, [r1, r2]
 80152fe:	1c51      	adds	r1, r2, #1
 8015300:	b28a      	uxth	r2, r1
 8015302:	8242      	strh	r2, [r0, #18]

    // last byte received, disable interrupts and return.
    if( iicx->transfer_state.STOP_REQUESTED ) {
 8015304:	6941      	ldr	r1, [r0, #20]
 8015306:	0789      	lsls	r1, r1, #30
 8015308:	d50b      	bpl.n	8015322 <EV_IRQHandler+0x122>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 801530a:	7d02      	ldrb	r2, [r0, #20]
 801530c:	f022 0101 	bic.w	r1, r2, #1
 8015310:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015312:	6800      	ldr	r0, [r0, #0]
 8015314:	8883      	ldrh	r3, [r0, #4]
 8015316:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801531a:	0411      	lsls	r1, r2, #16
 801531c:	0c0b      	lsrs	r3, r1, #16
 801531e:	8083      	strh	r3, [r0, #4]
      return;
 8015320:	bd10      	pop	{r4, pc}
    }
 
    // request NAK and stop condition before receiving last data
    if( (iicx->buffer_ix >= iicx->buffer_len-1) || (iicx->transfer_state.ABORT_IF_FIRST_BYTE_0 && iicx->buffer_ix == 1 && b == 0x00) ) {
 8015322:	8a42      	ldrh	r2, [r0, #18]
 8015324:	b291      	uxth	r1, r2
 8015326:	8a02      	ldrh	r2, [r0, #16]
 8015328:	b292      	uxth	r2, r2
 801532a:	3a01      	subs	r2, #1
 801532c:	4291      	cmp	r1, r2
 801532e:	da07      	bge.n	8015340 <EV_IRQHandler+0x140>
 8015330:	6941      	ldr	r1, [r0, #20]
 8015332:	074a      	lsls	r2, r1, #29
 8015334:	d514      	bpl.n	8015360 <EV_IRQHandler+0x160>
 8015336:	8a42      	ldrh	r2, [r0, #18]
 8015338:	b291      	uxth	r1, r2
 801533a:	2901      	cmp	r1, #1
 801533c:	d110      	bne.n	8015360 <EV_IRQHandler+0x160>
 801533e:	b97b      	cbnz	r3, 8015360 <EV_IRQHandler+0x160>
      /* Clear ACK */
      iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8015340:	6802      	ldr	r2, [r0, #0]
 8015342:	8813      	ldrh	r3, [r2, #0]
 8015344:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8015348:	040b      	lsls	r3, r1, #16
 801534a:	0c19      	lsrs	r1, r3, #16
 801534c:	8011      	strh	r1, [r2, #0]
      /* Program the STOP */
      iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 801534e:	8813      	ldrh	r3, [r2, #0]
 8015350:	b299      	uxth	r1, r3
 8015352:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8015356:	8013      	strh	r3, [r2, #0]
      iicx->transfer_state.STOP_REQUESTED = 1;
 8015358:	7d03      	ldrb	r3, [r0, #20]
 801535a:	f043 0102 	orr.w	r1, r3, #2
 801535e:	7501      	strb	r1, [r0, #20]
 8015360:	bd10      	pop	{r4, pc}
	...

08015364 <ER_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4604      	mov	r4, r0
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 8015368:	6800      	ldr	r0, [r0, #0]
 801536a:	f000 fa8d 	bl	8015888 <I2C_GetLastEvent>
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 801536e:	4b17      	ldr	r3, [pc, #92]	; (80153cc <ER_IRQHandler+0x68>)
 8015370:	4003      	ands	r3, r0
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 8015372:	4605      	mov	r5, r0
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 8015374:	b13b      	cbz	r3, 8015386 <ER_IRQHandler+0x22>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_BERR);
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 801537c:	f000 fa8c 	bl	8015898 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_BUS;
 8015380:	f06f 0005 	mvn.w	r0, #5
 8015384:	61a0      	str	r0, [r4, #24]
  }

  // arbitration lost
  if( event & I2C_FLAG_ARLO ) {
 8015386:	4912      	ldr	r1, [pc, #72]	; (80153d0 <ER_IRQHandler+0x6c>)
 8015388:	4029      	ands	r1, r5
 801538a:	b131      	cbz	r1, 801539a <ER_IRQHandler+0x36>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_ARLO);
 801538c:	6820      	ldr	r0, [r4, #0]
 801538e:	4911      	ldr	r1, [pc, #68]	; (80153d4 <ER_IRQHandler+0x70>)
 8015390:	f000 fa82 	bl	8015898 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_ARBITRATION_LOST;
 8015394:	f06f 0204 	mvn.w	r2, #4
 8015398:	61a2      	str	r2, [r4, #24]
  }

  // no acknowledge received from slave (e.g. slave not connected)
  if( event & I2C_FLAG_AF ) {
 801539a:	4b0f      	ldr	r3, [pc, #60]	; (80153d8 <ER_IRQHandler+0x74>)
 801539c:	402b      	ands	r3, r5
 801539e:	b153      	cbz	r3, 80153b6 <ER_IRQHandler+0x52>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_AF);
 80153a0:	6820      	ldr	r0, [r4, #0]
 80153a2:	490e      	ldr	r1, [pc, #56]	; (80153dc <ER_IRQHandler+0x78>)
 80153a4:	f000 fa78 	bl	8015898 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_SLAVE_NOT_CONNECTED;
 80153a8:	f06f 0006 	mvn.w	r0, #6
 80153ac:	61a0      	str	r0, [r4, #24]
    // send stop condition to release bus
    I2C_GenerateSTOP(iicx->base, ENABLE);
 80153ae:	2101      	movs	r1, #1
 80153b0:	6820      	ldr	r0, [r4, #0]
 80153b2:	f000 fa54 	bl	801585e <I2C_GenerateSTOP>
  }

  // disable interrupts
  I2C_ITConfig(iicx->base, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR, DISABLE);
 80153b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80153ba:	2200      	movs	r2, #0
 80153bc:	6820      	ldr	r0, [r4, #0]
 80153be:	f000 fa5a 	bl	8015876 <I2C_ITConfig>

  // notify that transfer has finished (due to the error)
  iicx->transfer_state.BUSY = 0;
 80153c2:	7d21      	ldrb	r1, [r4, #20]
 80153c4:	f021 0201 	bic.w	r2, r1, #1
 80153c8:	7522      	strb	r2, [r4, #20]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	10000100 	.word	0x10000100
 80153d0:	10000200 	.word	0x10000200
 80153d4:	01000200 	.word	0x01000200
 80153d8:	10000400 	.word	0x10000400
 80153dc:	01000400 	.word	0x01000400

080153e0 <I2C2_EV_IRQHandler>:
// interrupt vectors
/////////////////////////////////////////////////////////////////////////////

void I2C2_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80153e0:	4801      	ldr	r0, [pc, #4]	; (80153e8 <I2C2_EV_IRQHandler+0x8>)
 80153e2:	f7ff bf0d 	b.w	8015200 <EV_IRQHandler>
 80153e6:	bf00      	nop
 80153e8:	20000954 	.word	0x20000954

080153ec <I2C2_ER_IRQHandler>:
}

void I2C2_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80153ec:	4801      	ldr	r0, [pc, #4]	; (80153f4 <I2C2_ER_IRQHandler+0x8>)
 80153ee:	f7ff bfb9 	b.w	8015364 <ER_IRQHandler>
 80153f2:	bf00      	nop
 80153f4:	20000954 	.word	0x20000954

080153f8 <I2C1_EV_IRQHandler>:


#if MIOS32_IIC_NUM >= 2
void I2C1_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[1]);
 80153f8:	4801      	ldr	r0, [pc, #4]	; (8015400 <I2C1_EV_IRQHandler+0x8>)
 80153fa:	f7ff bf01 	b.w	8015200 <EV_IRQHandler>
 80153fe:	bf00      	nop
 8015400:	20000978 	.word	0x20000978

08015404 <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[1]);
 8015404:	4801      	ldr	r0, [pc, #4]	; (801540c <I2C1_ER_IRQHandler+0x8>)
 8015406:	f7ff bfad 	b.w	8015364 <ER_IRQHandler>
 801540a:	bf00      	nop
 801540c:	20000978 	.word	0x20000978

08015410 <printchar>:

static void printchar(char **str, int c)
{
  //	extern int putchar(int c);
	
	if (str) {
 8015410:	b128      	cbz	r0, 801541e <printchar+0xe>
		**str = c;
 8015412:	6803      	ldr	r3, [r0, #0]
 8015414:	7019      	strb	r1, [r3, #0]
		++(*str);
 8015416:	6801      	ldr	r1, [r0, #0]
 8015418:	1c4a      	adds	r2, r1, #1
 801541a:	6002      	str	r2, [r0, #0]
 801541c:	4770      	bx	lr
	}
#ifndef MIOS32_DONT_USE_COM
	else MIOS32_COM_SendChar(1, c); // (void)putchar(c);
 801541e:	2001      	movs	r0, #1
 8015420:	b2c9      	uxtb	r1, r1
 8015422:	f7fc bfe1 	b.w	80123e8 <MIOS32_COM_SendChar>

08015426 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8015426:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 801542a:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 801542c:	4680      	mov	r8, r0
 801542e:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8015430:	dc01      	bgt.n	8015436 <prints+0x10>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8015432:	2720      	movs	r7, #32
 8015434:	e00f      	b.n	8015456 <prints+0x30>

	if (width > 0) {
 8015436:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8015438:	f819 1002 	ldrb.w	r1, [r9, r2]
 801543c:	b109      	cbz	r1, 8015442 <prints+0x1c>
 801543e:	3201      	adds	r2, #1
 8015440:	e7fa      	b.n	8015438 <prints+0x12>
		if (len >= width) width = 0;
 8015442:	42a2      	cmp	r2, r4
		else width -= len;
 8015444:	bfb4      	ite	lt
 8015446:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 801544a:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 801544c:	f013 0f02 	tst.w	r3, #2
 8015450:	bf0c      	ite	eq
 8015452:	2720      	moveq	r7, #32
 8015454:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8015456:	07db      	lsls	r3, r3, #31
 8015458:	d40c      	bmi.n	8015474 <prints+0x4e>
 801545a:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 801545c:	2d00      	cmp	r5, #0
 801545e:	dd05      	ble.n	801546c <prints+0x46>
			printchar (out, padchar);
 8015460:	4640      	mov	r0, r8
 8015462:	4639      	mov	r1, r7
 8015464:	f7ff ffd4 	bl	8015410 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8015468:	3d01      	subs	r5, #1
 801546a:	e7f7      	b.n	801545c <prints+0x36>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 801546c:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8015470:	1ba4      	subs	r4, r4, r6
 8015472:	e000      	b.n	8015476 <prints+0x50>
{
	register int pc = 0, padchar = ' ';
 8015474:	2600      	movs	r6, #0
 8015476:	4635      	mov	r5, r6
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8015478:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 801547c:	5d59      	ldrb	r1, [r3, r5]
 801547e:	b121      	cbz	r1, 801548a <prints+0x64>
		printchar (out, *string);
 8015480:	4640      	mov	r0, r8
 8015482:	f7ff ffc5 	bl	8015410 <printchar>
		++pc;
 8015486:	3501      	adds	r5, #1
 8015488:	e7f6      	b.n	8015478 <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 801548a:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 801548c:	2e00      	cmp	r6, #0
 801548e:	dd05      	ble.n	801549c <prints+0x76>
		printchar (out, padchar);
 8015490:	4640      	mov	r0, r8
 8015492:	4639      	mov	r1, r7
 8015494:	f7ff ffbc 	bl	8015410 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8015498:	3e01      	subs	r6, #1
 801549a:	e7f7      	b.n	801548c <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 801549c:	2c00      	cmp	r4, #0
 801549e:	bfac      	ite	ge
 80154a0:	1928      	addge	r0, r5, r4
 80154a2:	1c28      	addlt	r0, r5, #0
 80154a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080154a8 <printi>:
/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12
#endif

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80154a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80154ae:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80154b2:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80154b4:	460c      	mov	r4, r1

	if (i == 0) {
 80154b6:	b951      	cbnz	r1, 80154ce <printi+0x26>
		print_buf[0] = '0';
 80154b8:	2230      	movs	r2, #48	; 0x30
 80154ba:	f88d 2004 	strb.w	r2, [sp, #4]
		print_buf[1] = '\0';
 80154be:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 80154c2:	4632      	mov	r2, r6
 80154c4:	a901      	add	r1, sp, #4
 80154c6:	4643      	mov	r3, r8
 80154c8:	f7ff ffad 	bl	8015426 <prints>
 80154cc:	e035      	b.n	801553a <printi+0x92>
	}

	if (sg && b == 10 && i < 0) {
 80154ce:	b133      	cbz	r3, 80154de <printi+0x36>
 80154d0:	2a0a      	cmp	r2, #10
 80154d2:	d104      	bne.n	80154de <printi+0x36>
 80154d4:	2900      	cmp	r1, #0
 80154d6:	da02      	bge.n	80154de <printi+0x36>
		neg = 1;
		u = -i;
 80154d8:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 80154da:	2701      	movs	r7, #1
 80154dc:	e000      	b.n	80154e0 <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80154de:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80154e0:	ad04      	add	r5, sp, #16
 80154e2:	2300      	movs	r3, #0
 80154e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80154e8:	46aa      	mov	sl, r5

	while (u) {
 80154ea:	b16c      	cbz	r4, 8015508 <printi+0x60>
		t = u % b;
 80154ec:	fbb4 f3f2 	udiv	r3, r4, r2
 80154f0:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 80154f4:	2c09      	cmp	r4, #9
 80154f6:	dd02      	ble.n	80154fe <printi+0x56>
			t += letbase - '0' - 10;
 80154f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80154fa:	393a      	subs	r1, #58	; 0x3a
 80154fc:	1864      	adds	r4, r4, r1
		*--s = t + '0';
 80154fe:	3430      	adds	r4, #48	; 0x30
 8015500:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 8015504:	461c      	mov	r4, r3
 8015506:	e7ef      	b.n	80154e8 <printi+0x40>
	}

	if (neg) {
 8015508:	b187      	cbz	r7, 801552c <printi+0x84>
		if( width && (pad & PAD_ZERO) ) {
 801550a:	b14e      	cbz	r6, 8015520 <printi+0x78>
 801550c:	f018 0f02 	tst.w	r8, #2
 8015510:	d006      	beq.n	8015520 <printi+0x78>
			printchar (out, '-');
 8015512:	4648      	mov	r0, r9
 8015514:	212d      	movs	r1, #45	; 0x2d
 8015516:	f7ff ff7b 	bl	8015410 <printchar>
			++pc;
			--width;
 801551a:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 801551c:	2701      	movs	r7, #1
			--width;
 801551e:	e005      	b.n	801552c <printi+0x84>
		}
		else {
			*--s = '-';
 8015520:	202d      	movs	r0, #45	; 0x2d
 8015522:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015526:	f805 0c01 	strb.w	r0, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 801552a:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 801552c:	4648      	mov	r0, r9
 801552e:	4651      	mov	r1, sl
 8015530:	4632      	mov	r2, r6
 8015532:	4643      	mov	r3, r8
 8015534:	f7ff ff77 	bl	8015426 <prints>
 8015538:	1838      	adds	r0, r7, r0
}
 801553a:	b004      	add	sp, #16
 801553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015540 <print>:

static int print( char **out, const char *format, va_list args )
{
 8015540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015542:	b089      	sub	sp, #36	; 0x24
 8015544:	4606      	mov	r6, r0
 8015546:	460d      	mov	r5, r1
 8015548:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 801554a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 801554c:	782b      	ldrb	r3, [r5, #0]
 801554e:	b123      	cbz	r3, 801555a <print+0x1a>
		if (*format == '%') {
 8015550:	2b25      	cmp	r3, #37	; 0x25
 8015552:	d179      	bne.n	8015648 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8015554:	7868      	ldrb	r0, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8015556:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8015558:	b928      	cbnz	r0, 8015566 <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 801555a:	2e00      	cmp	r6, #0
 801555c:	d07b      	beq.n	8015656 <print+0x116>
 801555e:	6830      	ldr	r0, [r6, #0]
 8015560:	2200      	movs	r2, #0
 8015562:	7002      	strb	r2, [r0, #0]
 8015564:	e077      	b.n	8015656 <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 8015566:	2825      	cmp	r0, #37	; 0x25
 8015568:	d06d      	beq.n	8015646 <print+0x106>
			if (*format == '-') {
 801556a:	282d      	cmp	r0, #45	; 0x2d
 801556c:	d102      	bne.n	8015574 <print+0x34>
				++format;
 801556e:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 8015570:	2301      	movs	r3, #1
 8015572:	e000      	b.n	8015576 <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 8015574:	2300      	movs	r3, #0
 8015576:	4617      	mov	r7, r2
 8015578:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 801557a:	7839      	ldrb	r1, [r7, #0]
 801557c:	2930      	cmp	r1, #48	; 0x30
 801557e:	d102      	bne.n	8015586 <print+0x46>
				++format;
				pad |= PAD_ZERO;
 8015580:	f043 0302 	orr.w	r3, r3, #2
 8015584:	e7f7      	b.n	8015576 <print+0x36>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8015586:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8015588:	7839      	ldrb	r1, [r7, #0]
 801558a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 801558e:	fa5f fc80 	uxtb.w	ip, r0
 8015592:	463d      	mov	r5, r7
 8015594:	3701      	adds	r7, #1
 8015596:	f1bc 0f09 	cmp.w	ip, #9
 801559a:	d803      	bhi.n	80155a4 <print+0x64>
				width *= 10;
				width += *format - '0';
 801559c:	250a      	movs	r5, #10
 801559e:	fb05 0202 	mla	r2, r5, r2, r0
 80155a2:	e7f1      	b.n	8015588 <print+0x48>
			}
			if( *format == 's' ) {
 80155a4:	2973      	cmp	r1, #115	; 0x73
 80155a6:	d109      	bne.n	80155bc <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 80155a8:	9f05      	ldr	r7, [sp, #20]
 80155aa:	1d39      	adds	r1, r7, #4
 80155ac:	9105      	str	r1, [sp, #20]
 80155ae:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 80155b0:	4f2a      	ldr	r7, [pc, #168]	; (801565c <print+0x11c>)
 80155b2:	4630      	mov	r0, r6
 80155b4:	2900      	cmp	r1, #0
 80155b6:	bf08      	it	eq
 80155b8:	4639      	moveq	r1, r7
 80155ba:	e041      	b.n	8015640 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 80155bc:	2964      	cmp	r1, #100	; 0x64
 80155be:	d10e      	bne.n	80155de <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80155c0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80155c4:	9905      	ldr	r1, [sp, #20]
 80155c6:	2361      	movs	r3, #97	; 0x61
 80155c8:	9302      	str	r3, [sp, #8]
 80155ca:	1d08      	adds	r0, r1, #4
 80155cc:	6809      	ldr	r1, [r1, #0]
 80155ce:	9005      	str	r0, [sp, #20]
 80155d0:	220a      	movs	r2, #10
 80155d2:	4630      	mov	r0, r6
 80155d4:	2301      	movs	r3, #1
 80155d6:	f7ff ff67 	bl	80154a8 <printi>
 80155da:	1824      	adds	r4, r4, r0
				continue;
 80155dc:	e039      	b.n	8015652 <print+0x112>
			}
			if( *format == 'x' ) {
 80155de:	2978      	cmp	r1, #120	; 0x78
 80155e0:	d106      	bne.n	80155f0 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80155e2:	9905      	ldr	r1, [sp, #20]
 80155e4:	1d08      	adds	r0, r1, #4
 80155e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80155ea:	9005      	str	r0, [sp, #20]
 80155ec:	2261      	movs	r2, #97	; 0x61
 80155ee:	e007      	b.n	8015600 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 80155f0:	2958      	cmp	r1, #88	; 0x58
 80155f2:	d10a      	bne.n	801560a <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80155f4:	9905      	ldr	r1, [sp, #20]
 80155f6:	1d08      	adds	r0, r1, #4
 80155f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80155fc:	9005      	str	r0, [sp, #20]
 80155fe:	2241      	movs	r2, #65	; 0x41
 8015600:	9202      	str	r2, [sp, #8]
 8015602:	4630      	mov	r0, r6
 8015604:	6809      	ldr	r1, [r1, #0]
 8015606:	2210      	movs	r2, #16
 8015608:	e00b      	b.n	8015622 <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 801560a:	2975      	cmp	r1, #117	; 0x75
 801560c:	d10b      	bne.n	8015626 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 801560e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015612:	9905      	ldr	r1, [sp, #20]
 8015614:	2361      	movs	r3, #97	; 0x61
 8015616:	9302      	str	r3, [sp, #8]
 8015618:	1d08      	adds	r0, r1, #4
 801561a:	6809      	ldr	r1, [r1, #0]
 801561c:	9005      	str	r0, [sp, #20]
 801561e:	220a      	movs	r2, #10
 8015620:	4630      	mov	r0, r6
 8015622:	2300      	movs	r3, #0
 8015624:	e7d7      	b.n	80155d6 <print+0x96>
			if( *format == 'b' ) {
				pc += printi (out, va_arg( args, int ), 2, 0, width, pad, 'A');
				continue;
			}
			#endif
			if( *format == 'c' ) {
 8015626:	2963      	cmp	r1, #99	; 0x63
 8015628:	d113      	bne.n	8015652 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 801562a:	9905      	ldr	r1, [sp, #20]
 801562c:	1d08      	adds	r0, r1, #4
 801562e:	6809      	ldr	r1, [r1, #0]
 8015630:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8015632:	2000      	movs	r0, #0
				continue;
			}
			#endif
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8015634:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8015638:	f88d 001d 	strb.w	r0, [sp, #29]
				pc += prints (out, scr, width, pad);
 801563c:	a907      	add	r1, sp, #28
 801563e:	4630      	mov	r0, r6
 8015640:	f7ff fef1 	bl	8015426 <prints>
 8015644:	e7c9      	b.n	80155da <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8015646:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8015648:	4630      	mov	r0, r6
 801564a:	7829      	ldrb	r1, [r5, #0]
 801564c:	f7ff fee0 	bl	8015410 <printchar>
			++pc;
 8015650:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8015652:	3501      	adds	r5, #1
 8015654:	e77a      	b.n	801554c <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8015656:	4620      	mov	r0, r4
 8015658:	b009      	add	sp, #36	; 0x24
 801565a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801565c:	0801cbd7 	.word	0x0801cbd7

08015660 <sprintf>:
{
  return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8015660:	b40e      	push	{r1, r2, r3}
 8015662:	b50f      	push	{r0, r1, r2, r3, lr}
 8015664:	aa05      	add	r2, sp, #20
 8015666:	9001      	str	r0, [sp, #4]
 8015668:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 801566c:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 801566e:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 8015670:	f7ff ff66 	bl	8015540 <print>
}
 8015674:	b004      	add	sp, #16
 8015676:	f85d eb04 	ldr.w	lr, [sp], #4
 801567a:	b003      	add	sp, #12
 801567c:	4770      	bx	lr

0801567e <vsprintf>:

// TK: added for alternative parameter passing
int vsprintf(char *out, const char *format, va_list args)
{
 801567e:	b507      	push	{r0, r1, r2, lr}
  char *_out;
  _out = out;
 8015680:	ab02      	add	r3, sp, #8
 8015682:	f843 0d04 	str.w	r0, [r3, #-4]!
  return print( &_out, format, args );
 8015686:	4618      	mov	r0, r3
 8015688:	f7ff ff5a 	bl	8015540 <print>
}
 801568c:	bd0e      	pop	{r1, r2, r3, pc}
	...

08015690 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8015690:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8015694:	4b02      	ldr	r3, [pc, #8]	; (80156a0 <NVIC_PriorityGroupConfig+0x10>)
 8015696:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 801569a:	60d9      	str	r1, [r3, #12]
 801569c:	4770      	bx	lr
 801569e:	bf00      	nop
 80156a0:	e000ed00 	.word	0xe000ed00

080156a4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80156a4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80156a8:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 80156ac:	4b01      	ldr	r3, [pc, #4]	; (80156b4 <NVIC_SetVectorTable+0x10>)
 80156ae:	4310      	orrs	r0, r2
 80156b0:	6098      	str	r0, [r3, #8]
 80156b2:	4770      	bx	lr
 80156b4:	e000ed00 	.word	0xe000ed00

080156b8 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80156b8:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80156ba:	4b13      	ldr	r3, [pc, #76]	; (8015708 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80156bc:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80156be:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80156c0:	68cc      	ldr	r4, [r1, #12]
 80156c2:	680a      	ldr	r2, [r1, #0]
 80156c4:	4314      	orrs	r4, r2
 80156c6:	694a      	ldr	r2, [r1, #20]
 80156c8:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80156ca:	698a      	ldr	r2, [r1, #24]
 80156cc:	4314      	orrs	r4, r2
 80156ce:	69ca      	ldr	r2, [r1, #28]
 80156d0:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80156d2:	6a0a      	ldr	r2, [r1, #32]
 80156d4:	4314      	orrs	r4, r2
 80156d6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80156d8:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80156da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80156dc:	4314      	orrs	r4, r2
 80156de:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80156e0:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80156e2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80156e4:	4314      	orrs	r4, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80156e6:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80156e8:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80156ea:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80156ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80156ee:	f022 0407 	bic.w	r4, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80156f2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80156f4:	431a      	orrs	r2, r3
 80156f6:	4322      	orrs	r2, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80156f8:	6142      	str	r2, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80156fa:	690b      	ldr	r3, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80156fc:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80156fe:	6889      	ldr	r1, [r1, #8]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8015700:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8015702:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8015704:	60c1      	str	r1, [r0, #12]
 8015706:	bd10      	pop	{r4, pc}
 8015708:	f01c803f 	.word	0xf01c803f

0801570c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 801570c:	2300      	movs	r3, #0
 801570e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8015710:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8015712:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8015714:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8015716:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8015718:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 801571a:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801571c:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801571e:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8015720:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8015722:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8015724:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8015726:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8015728:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801572a:	6383      	str	r3, [r0, #56]	; 0x38
 801572c:	4770      	bx	lr

0801572e <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 801572e:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8015730:	b111      	cbz	r1, 8015738 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8015732:	f043 0101 	orr.w	r1, r3, #1
 8015736:	e001      	b.n	801573c <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8015738:	f023 0101 	bic.w	r1, r3, #1
 801573c:	6001      	str	r1, [r0, #0]
 801573e:	4770      	bx	lr

08015740 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8015740:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8015742:	4b08      	ldr	r3, [pc, #32]	; (8015764 <DMA_ClearFlag+0x24>)
 8015744:	4a08      	ldr	r2, [pc, #32]	; (8015768 <DMA_ClearFlag+0x28>)
 8015746:	4c09      	ldr	r4, [pc, #36]	; (801576c <DMA_ClearFlag+0x2c>)
 8015748:	42a0      	cmp	r0, r4
 801574a:	bf8c      	ite	hi
 801574c:	4610      	movhi	r0, r2
 801574e:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8015750:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8015754:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8015758:	f021 1382 	bic.w	r3, r1, #8519810	; 0x820082
 801575c:	bf14      	ite	ne
 801575e:	60c3      	strne	r3, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8015760:	6083      	streq	r3, [r0, #8]
 8015762:	bd10      	pop	{r4, pc}
 8015764:	40026000 	.word	0x40026000
 8015768:	40026400 	.word	0x40026400
 801576c:	4002640f 	.word	0x4002640f

08015770 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8015770:	4b01      	ldr	r3, [pc, #4]	; (8015778 <EXTI_ClearITPendingBit+0x8>)
 8015772:	6158      	str	r0, [r3, #20]
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop
 8015778:	40013c00 	.word	0x40013c00

0801577c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 801577c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 801577e:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8015780:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8015782:	2301      	movs	r3, #1
 8015784:	fa03 f302 	lsl.w	r3, r3, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8015788:	ea03 0506 	and.w	r5, r3, r6

    if (currentpin == pos)
 801578c:	429d      	cmp	r5, r3
 801578e:	d13e      	bne.n	801580e <GPIO_Init+0x92>
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8015790:	6807      	ldr	r7, [r0, #0]
 8015792:	790c      	ldrb	r4, [r1, #4]
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8015794:	0053      	lsls	r3, r2, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8015796:	fa27 f703 	lsr.w	r7, r7, r3
 801579a:	f007 0703 	and.w	r7, r7, #3
 801579e:	42a7      	cmp	r7, r4
 80157a0:	d00d      	beq.n	80157be <GPIO_Init+0x42>
	GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80157a2:	6807      	ldr	r7, [r0, #0]
 80157a4:	f04f 0c03 	mov.w	ip, #3
 80157a8:	fa0c fc03 	lsl.w	ip, ip, r3
 80157ac:	ea27 070c 	bic.w	r7, r7, ip
 80157b0:	6007      	str	r7, [r0, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80157b2:	6807      	ldr	r7, [r0, #0]
 80157b4:	fa04 fc03 	lsl.w	ip, r4, r3
 80157b8:	ea4c 0707 	orr.w	r7, ip, r7
 80157bc:	6007      	str	r7, [r0, #0]
      }

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80157be:	3c01      	subs	r4, #1
 80157c0:	2c01      	cmp	r4, #1
 80157c2:	d817      	bhi.n	80157f4 <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80157c4:	6887      	ldr	r7, [r0, #8]
 80157c6:	2403      	movs	r4, #3
 80157c8:	fa04 f403 	lsl.w	r4, r4, r3
 80157cc:	ea27 0704 	bic.w	r7, r7, r4
 80157d0:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80157d2:	794c      	ldrb	r4, [r1, #5]
 80157d4:	6887      	ldr	r7, [r0, #8]
 80157d6:	fa04 f403 	lsl.w	r4, r4, r3
 80157da:	433c      	orrs	r4, r7
 80157dc:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80157de:	6844      	ldr	r4, [r0, #4]
 80157e0:	ea24 0505 	bic.w	r5, r4, r5
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80157e4:	798c      	ldrb	r4, [r1, #6]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80157e6:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80157e8:	6845      	ldr	r5, [r0, #4]
 80157ea:	fa04 f402 	lsl.w	r4, r4, r2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80157ee:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80157f0:	432c      	orrs	r4, r5
 80157f2:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80157f4:	68c5      	ldr	r5, [r0, #12]
 80157f6:	2403      	movs	r4, #3
 80157f8:	fa04 f403 	lsl.w	r4, r4, r3
 80157fc:	ea25 0504 	bic.w	r5, r5, r4
 8015800:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8015802:	79cd      	ldrb	r5, [r1, #7]
 8015804:	68c4      	ldr	r4, [r0, #12]
 8015806:	fa05 f303 	lsl.w	r3, r5, r3
 801580a:	4323      	orrs	r3, r4
 801580c:	60c3      	str	r3, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 801580e:	3201      	adds	r2, #1
 8015810:	2a10      	cmp	r2, #16
 8015812:	d1b6      	bne.n	8015782 <GPIO_Init+0x6>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8015814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015816 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8015816:	2100      	movs	r1, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8015818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801581c:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 801581e:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8015820:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8015822:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8015824:	71c1      	strb	r1, [r0, #7]
 8015826:	4770      	bx	lr

08015828 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8015828:	8301      	strh	r1, [r0, #24]
 801582a:	4770      	bx	lr

0801582c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 801582c:	8341      	strh	r1, [r0, #26]
 801582e:	4770      	bx	lr

08015830 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8015830:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8015834:	08c9      	lsrs	r1, r1, #3
 8015836:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8015838:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 801583a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 801583c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8015840:	240f      	movs	r4, #15
 8015842:	fa04 f403 	lsl.w	r4, r4, r3
 8015846:	ea25 0404 	bic.w	r4, r5, r4
 801584a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 801584e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8015852:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8015856:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8015858:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 801585c:	bd30      	pop	{r4, r5, pc}

0801585e <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 801585e:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015860:	b119      	cbz	r1, 801586a <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8015862:	b299      	uxth	r1, r3
 8015864:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8015868:	e003      	b.n	8015872 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 801586a:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 801586e:	040a      	lsls	r2, r1, #16
 8015870:	0c13      	lsrs	r3, r2, #16
 8015872:	8003      	strh	r3, [r0, #0]
 8015874:	4770      	bx	lr

08015876 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8015876:	8883      	ldrh	r3, [r0, #4]
 8015878:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 801587a:	b10a      	cbz	r2, 8015880 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 801587c:	4319      	orrs	r1, r3
 801587e:	e001      	b.n	8015884 <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8015880:	ea23 0101 	bic.w	r1, r3, r1
 8015884:	8081      	strh	r1, [r0, #4]
 8015886:	4770      	bx	lr

08015888 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8015888:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 801588a:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 801588c:	b299      	uxth	r1, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 801588e:	ea41 4200 	orr.w	r2, r1, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8015892:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8015896:	4770      	bx	lr

08015898 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8015898:	43c9      	mvns	r1, r1
 801589a:	b28a      	uxth	r2, r1
 801589c:	8282      	strh	r2, [r0, #20]
 801589e:	4770      	bx	lr

080158a0 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80158a0:	4b01      	ldr	r3, [pc, #4]	; (80158a8 <PWR_BackupAccessCmd+0x8>)
 80158a2:	6018      	str	r0, [r3, #0]
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop
 80158a8:	420e0020 	.word	0x420e0020

080158ac <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80158ac:	4b1e      	ldr	r3, [pc, #120]	; (8015928 <RCC_GetClocksFreq+0x7c>)
 80158ae:	689a      	ldr	r2, [r3, #8]
 80158b0:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 80158b4:	2904      	cmp	r1, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80158b6:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80158b8:	d003      	beq.n	80158c2 <RCC_GetClocksFreq+0x16>
 80158ba:	2908      	cmp	r1, #8
 80158bc:	d003      	beq.n	80158c6 <RCC_GetClocksFreq+0x1a>
 80158be:	4b1b      	ldr	r3, [pc, #108]	; (801592c <RCC_GetClocksFreq+0x80>)
 80158c0:	e018      	b.n	80158f4 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80158c2:	4b1b      	ldr	r3, [pc, #108]	; (8015930 <RCC_GetClocksFreq+0x84>)
 80158c4:	e016      	b.n	80158f4 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80158c6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80158c8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80158ca:	6859      	ldr	r1, [r3, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80158cc:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80158d0:	bf14      	ite	ne
 80158d2:	4b17      	ldrne	r3, [pc, #92]	; (8015930 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80158d4:	4b15      	ldreq	r3, [pc, #84]	; (801592c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80158d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80158da:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80158de:	4a12      	ldr	r2, [pc, #72]	; (8015928 <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80158e0:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80158e4:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80158e6:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80158e8:	f3c1 4401 	ubfx	r4, r1, #16, #2
 80158ec:	1c62      	adds	r2, r4, #1
 80158ee:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80158f0:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80158f4:	490c      	ldr	r1, [pc, #48]	; (8015928 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80158f6:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80158f8:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80158fa:	4a0e      	ldr	r2, [pc, #56]	; (8015934 <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80158fc:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8015900:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8015902:	6803      	ldr	r3, [r0, #0]
 8015904:	fa23 f304 	lsr.w	r3, r3, r4
 8015908:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 801590a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 801590c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8015910:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8015912:	fa23 f404 	lsr.w	r4, r3, r4
 8015916:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8015918:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 801591a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 801591e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8015920:	fa23 f302 	lsr.w	r3, r3, r2
 8015924:	60c3      	str	r3, [r0, #12]
 8015926:	bd10      	pop	{r4, pc}
 8015928:	40023800 	.word	0x40023800
 801592c:	00f42400 	.word	0x00f42400
 8015930:	007a1200 	.word	0x007a1200
 8015934:	20000078 	.word	0x20000078

08015938 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8015938:	f400 7340 	and.w	r3, r0, #768	; 0x300
 801593c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015940:	4b08      	ldr	r3, [pc, #32]	; (8015964 <RCC_RTCCLKConfig+0x2c>)
 8015942:	d108      	bne.n	8015956 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8015944:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8015946:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 801594a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 801594e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8015952:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8015954:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8015956:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015958:	0500      	lsls	r0, r0, #20
 801595a:	ea41 5210 	orr.w	r2, r1, r0, lsr #20
 801595e:	671a      	str	r2, [r3, #112]	; 0x70
 8015960:	4770      	bx	lr
 8015962:	bf00      	nop
 8015964:	40023800 	.word	0x40023800

08015968 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8015968:	4b01      	ldr	r3, [pc, #4]	; (8015970 <RCC_RTCCLKCmd+0x8>)
 801596a:	6018      	str	r0, [r3, #0]
 801596c:	4770      	bx	lr
 801596e:	bf00      	nop
 8015970:	42470e3c 	.word	0x42470e3c

08015974 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8015974:	4b04      	ldr	r3, [pc, #16]	; (8015988 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8015976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015978:	b109      	cbz	r1, 801597e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 801597a:	4310      	orrs	r0, r2
 801597c:	e001      	b.n	8015982 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 801597e:	ea22 0000 	bic.w	r0, r2, r0
 8015982:	6318      	str	r0, [r3, #48]	; 0x30
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop
 8015988:	40023800 	.word	0x40023800

0801598c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 801598c:	4b04      	ldr	r3, [pc, #16]	; (80159a0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 801598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8015990:	b109      	cbz	r1, 8015996 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8015992:	4310      	orrs	r0, r2
 8015994:	e001      	b.n	801599a <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8015996:	ea22 0000 	bic.w	r0, r2, r0
 801599a:	6358      	str	r0, [r3, #52]	; 0x34
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop
 80159a0:	40023800 	.word	0x40023800

080159a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80159a4:	4b04      	ldr	r3, [pc, #16]	; (80159b8 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80159a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80159a8:	b109      	cbz	r1, 80159ae <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80159aa:	4310      	orrs	r0, r2
 80159ac:	e001      	b.n	80159b2 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80159ae:	ea22 0000 	bic.w	r0, r2, r0
 80159b2:	6418      	str	r0, [r3, #64]	; 0x40
 80159b4:	4770      	bx	lr
 80159b6:	bf00      	nop
 80159b8:	40023800 	.word	0x40023800

080159bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80159bc:	4b04      	ldr	r3, [pc, #16]	; (80159d0 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80159be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80159c0:	b109      	cbz	r1, 80159c6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80159c2:	4310      	orrs	r0, r2
 80159c4:	e001      	b.n	80159ca <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80159c6:	ea22 0000 	bic.w	r0, r2, r0
 80159ca:	6458      	str	r0, [r3, #68]	; 0x44
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	40023800 	.word	0x40023800

080159d4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80159d4:	4b04      	ldr	r3, [pc, #16]	; (80159e8 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80159d6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80159d8:	b109      	cbz	r1, 80159de <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80159da:	4310      	orrs	r0, r2
 80159dc:	e001      	b.n	80159e2 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80159de:	ea22 0000 	bic.w	r0, r2, r0
 80159e2:	6118      	str	r0, [r3, #16]
 80159e4:	4770      	bx	lr
 80159e6:	bf00      	nop
 80159e8:	40023800 	.word	0x40023800

080159ec <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80159ec:	4b04      	ldr	r3, [pc, #16]	; (8015a00 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80159ee:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80159f0:	b109      	cbz	r1, 80159f6 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80159f2:	4310      	orrs	r0, r2
 80159f4:	e001      	b.n	80159fa <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80159f6:	ea22 0000 	bic.w	r0, r2, r0
 80159fa:	6158      	str	r0, [r3, #20]
 80159fc:	4770      	bx	lr
 80159fe:	bf00      	nop
 8015a00:	40023800 	.word	0x40023800

08015a04 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8015a04:	4b04      	ldr	r3, [pc, #16]	; (8015a18 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8015a06:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015a08:	b109      	cbz	r1, 8015a0e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8015a0a:	4310      	orrs	r0, r2
 8015a0c:	e001      	b.n	8015a12 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8015a0e:	ea22 0000 	bic.w	r0, r2, r0
 8015a12:	6218      	str	r0, [r3, #32]
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop
 8015a18:	40023800 	.word	0x40023800

08015a1c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8015a1c:	4b04      	ldr	r3, [pc, #16]	; (8015a30 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8015a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015a20:	b109      	cbz	r1, 8015a26 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8015a22:	4310      	orrs	r0, r2
 8015a24:	e001      	b.n	8015a2a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8015a26:	ea22 0000 	bic.w	r0, r2, r0
 8015a2a:	6258      	str	r0, [r3, #36]	; 0x24
 8015a2c:	4770      	bx	lr
 8015a2e:	bf00      	nop
 8015a30:	40023800 	.word	0x40023800

08015a34 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8015a34:	2100      	movs	r1, #0
  
  while (Value >= 10)
 8015a36:	2809      	cmp	r0, #9
 8015a38:	d904      	bls.n	8015a44 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8015a3a:	1c4b      	adds	r3, r1, #1
    Value -= 10;
 8015a3c:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8015a3e:	b2d9      	uxtb	r1, r3
    Value -= 10;
 8015a40:	b2c0      	uxtb	r0, r0
 8015a42:	e7f8      	b.n	8015a36 <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8015a44:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
 8015a48:	b2c0      	uxtb	r0, r0
 8015a4a:	4770      	bx	lr

08015a4c <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	227f      	movs	r2, #127	; 0x7f
 8015a50:	23ff      	movs	r3, #255	; 0xff
 8015a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015a56:	4770      	bx	lr

08015a58 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8015a58:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8015a5a:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8015a5c:	490d      	ldr	r1, [pc, #52]	; (8015a94 <RTC_EnterInitMode+0x3c>)
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 8015a5e:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8015a60:	68ca      	ldr	r2, [r1, #12]
 8015a62:	0650      	lsls	r0, r2, #25
 8015a64:	d413      	bmi.n	8015a8e <RTC_EnterInitMode+0x36>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8015a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a6a:	60c8      	str	r0, [r1, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <RTC_EnterInitMode+0x3c>)
 8015a6e:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 8015a70:	9801      	ldr	r0, [sp, #4]
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8015a72:	f001 0240 	and.w	r2, r1, #64	; 0x40
      initcounter++;  
 8015a76:	1c41      	adds	r1, r0, #1
 8015a78:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8015a7a:	9801      	ldr	r0, [sp, #4]
 8015a7c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015a80:	d001      	beq.n	8015a86 <RTC_EnterInitMode+0x2e>
 8015a82:	2a00      	cmp	r2, #0
 8015a84:	d0f2      	beq.n	8015a6c <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8015a86:	68db      	ldr	r3, [r3, #12]
    {
      status = SUCCESS;
 8015a88:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8015a8c:	e000      	b.n	8015a90 <RTC_EnterInitMode+0x38>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8015a8e:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8015a90:	b002      	add	sp, #8
 8015a92:	4770      	bx	lr
 8015a94:	40002800 	.word	0x40002800

08015a98 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8015a98:	4b02      	ldr	r3, [pc, #8]	; (8015aa4 <RTC_ExitInitMode+0xc>)
 8015a9a:	68da      	ldr	r2, [r3, #12]
 8015a9c:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8015aa0:	60d8      	str	r0, [r3, #12]
 8015aa2:	4770      	bx	lr
 8015aa4:	40002800 	.word	0x40002800

08015aa8 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8015aa8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015aaa:	4c10      	ldr	r4, [pc, #64]	; (8015aec <RTC_Init+0x44>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8015aac:	4605      	mov	r5, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015aae:	23ca      	movs	r3, #202	; 0xca
  RTC->WPR = 0x53;
 8015ab0:	2053      	movs	r0, #83	; 0x53
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015ab2:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8015ab4:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8015ab6:	f7ff ffcf 	bl	8015a58 <RTC_EnterInitMode>
 8015aba:	b190      	cbz	r0, 8015ae2 <RTC_Init+0x3a>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8015abc:	68a1      	ldr	r1, [r4, #8]
 8015abe:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8015ac2:	60a2      	str	r2, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8015ac4:	68a0      	ldr	r0, [r4, #8]
 8015ac6:	682b      	ldr	r3, [r5, #0]
 8015ac8:	ea40 0103 	orr.w	r1, r0, r3
 8015acc:	60a1      	str	r1, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8015ace:	68aa      	ldr	r2, [r5, #8]
 8015ad0:	6122      	str	r2, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8015ad2:	6920      	ldr	r0, [r4, #16]
 8015ad4:	686b      	ldr	r3, [r5, #4]
 8015ad6:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8015ada:	6121      	str	r1, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8015adc:	f7ff ffdc 	bl	8015a98 <RTC_ExitInitMode>

    status = SUCCESS;    
 8015ae0:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8015ae2:	4b02      	ldr	r3, [pc, #8]	; (8015aec <RTC_Init+0x44>)
 8015ae4:	22ff      	movs	r2, #255	; 0xff
 8015ae6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8015ae8:	bd38      	pop	{r3, r4, r5, pc}
 8015aea:	bf00      	nop
 8015aec:	40002800 	.word	0x40002800

08015af0 <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015af0:	480f      	ldr	r0, [pc, #60]	; (8015b30 <RTC_WaitForSynchro+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8015af2:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8015af4:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015af6:	22ca      	movs	r2, #202	; 0xca
  RTC->WPR = 0x53;
 8015af8:	2153      	movs	r1, #83	; 0x53
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 8015afa:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015afc:	6242      	str	r2, [r0, #36]	; 0x24
  RTC->WPR = 0x53;
 8015afe:	6241      	str	r1, [r0, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8015b00:	68c3      	ldr	r3, [r0, #12]
 8015b02:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 8015b06:	60c2      	str	r2, [r0, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8015b08:	4b09      	ldr	r3, [pc, #36]	; (8015b30 <RTC_WaitForSynchro+0x40>)
 8015b0a:	68d8      	ldr	r0, [r3, #12]
    synchrocounter++;  
 8015b0c:	9901      	ldr	r1, [sp, #4]
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8015b0e:	f000 0220 	and.w	r2, r0, #32
    synchrocounter++;  
 8015b12:	1c48      	adds	r0, r1, #1
 8015b14:	9001      	str	r0, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8015b16:	9901      	ldr	r1, [sp, #4]
 8015b18:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8015b1c:	d001      	beq.n	8015b22 <RTC_WaitForSynchro+0x32>
 8015b1e:	2a00      	cmp	r2, #0
 8015b20:	d0f2      	beq.n	8015b08 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8015b22:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8015b24:	22ff      	movs	r2, #255	; 0xff
 8015b26:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 8015b28:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8015b2c:	b002      	add	sp, #8
 8015b2e:	4770      	bx	lr
 8015b30:	40002800 	.word	0x40002800

08015b34 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8015b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b36:	4b21      	ldr	r3, [pc, #132]	; (8015bbc <RTC_SetTime+0x88>)
 8015b38:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8015b3a:	6899      	ldr	r1, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8015b3c:	b920      	cbnz	r0, 8015b48 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8015b3e:	f011 0640 	ands.w	r6, r1, #64	; 0x40
 8015b42:	d127      	bne.n	8015b94 <RTC_SetTime+0x60>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8015b44:	70e6      	strb	r6, [r4, #3]
 8015b46:	e025      	b.n	8015b94 <RTC_SetTime+0x60>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8015b48:	f011 0040 	ands.w	r0, r1, #64	; 0x40
 8015b4c:	d100      	bne.n	8015b50 <RTC_SetTime+0x1c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8015b4e:	70e0      	strb	r0, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015b50:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015b52:	7822      	ldrb	r2, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8015b54:	78a0      	ldrb	r0, [r4, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8015b56:	78e4      	ldrb	r4, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015b58:	022b      	lsls	r3, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015b5a:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015b5e:	4301      	orrs	r1, r0
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015b60:	ea41 4504 	orr.w	r5, r1, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015b64:	4c15      	ldr	r4, [pc, #84]	; (8015bbc <RTC_SetTime+0x88>)
 8015b66:	21ca      	movs	r1, #202	; 0xca
  RTC->WPR = 0x53;
 8015b68:	2053      	movs	r0, #83	; 0x53
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015b6a:	6261      	str	r1, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8015b6c:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8015b6e:	f7ff ff73 	bl	8015a58 <RTC_EnterInitMode>
 8015b72:	b158      	cbz	r0, 8015b8c <RTC_SetTime+0x58>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015b74:	f005 327f 	and.w	r2, r5, #2139062143	; 0x7f7f7f7f
 8015b78:	f022 45fe 	bic.w	r5, r2, #2130706432	; 0x7f000000
 8015b7c:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8015b7e:	f7ff ff8b 	bl	8015a98 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8015b82:	f7ff ffb5 	bl	8015af0 <RTC_WaitForSynchro>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8015b86:	3000      	adds	r0, #0
 8015b88:	bf18      	it	ne
 8015b8a:	2001      	movne	r0, #1
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8015b8c:	4b0b      	ldr	r3, [pc, #44]	; (8015bbc <RTC_SetTime+0x88>)
 8015b8e:	21ff      	movs	r1, #255	; 0xff
 8015b90:	6259      	str	r1, [r3, #36]	; 0x24
 8015b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015b94:	7820      	ldrb	r0, [r4, #0]
 8015b96:	f7ff ff4d 	bl	8015a34 <RTC_ByteToBcd2>
 8015b9a:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015b9c:	7860      	ldrb	r0, [r4, #1]
 8015b9e:	f7ff ff49 	bl	8015a34 <RTC_ByteToBcd2>
 8015ba2:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8015ba4:	78a0      	ldrb	r0, [r4, #2]
 8015ba6:	f7ff ff45 	bl	8015a34 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8015baa:	78e2      	ldrb	r2, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015bac:	ea40 4502 	orr.w	r5, r0, r2, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015bb0:	ea45 4307 	orr.w	r3, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015bb4:	ea43 2506 	orr.w	r5, r3, r6, lsl #8
 8015bb8:	e7d4      	b.n	8015b64 <RTC_SetTime+0x30>
 8015bba:	bf00      	nop
 8015bbc:	40002800 	.word	0x40002800

08015bc0 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8015bc4:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8015bc6:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8015bc8:	7083      	strb	r3, [r0, #2]
 8015bca:	4770      	bx	lr

08015bcc <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8015bcc:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8015bce:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8015bd0:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8015bd2:	884c      	ldrh	r4, [r1, #2]
 8015bd4:	4323      	orrs	r3, r4
 8015bd6:	888c      	ldrh	r4, [r1, #4]
 8015bd8:	4323      	orrs	r3, r4
 8015bda:	88cc      	ldrh	r4, [r1, #6]
 8015bdc:	4323      	orrs	r3, r4
 8015bde:	890c      	ldrh	r4, [r1, #8]
 8015be0:	4323      	orrs	r3, r4
 8015be2:	894c      	ldrh	r4, [r1, #10]
 8015be4:	4323      	orrs	r3, r4
 8015be6:	898c      	ldrh	r4, [r1, #12]
 8015be8:	4323      	orrs	r3, r4
 8015bea:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8015bec:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8015bee:	4323      	orrs	r3, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8015bf0:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8015bf4:	431a      	orrs	r2, r3
 8015bf6:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8015bf8:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8015bfa:	8b82      	ldrh	r2, [r0, #28]
 8015bfc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8015c00:	041a      	lsls	r2, r3, #16
 8015c02:	0c13      	lsrs	r3, r2, #16
 8015c04:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8015c06:	8201      	strh	r1, [r0, #16]
 8015c08:	bd10      	pop	{r4, pc}

08015c0a <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8015c0a:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015c0c:	b119      	cbz	r1, 8015c16 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8015c0e:	b299      	uxth	r1, r3
 8015c10:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8015c14:	e003      	b.n	8015c1e <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8015c16:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8015c1a:	040a      	lsls	r2, r1, #16
 8015c1c:	0c13      	lsrs	r3, r2, #16
 8015c1e:	8003      	strh	r3, [r0, #0]
 8015c20:	4770      	bx	lr

08015c22 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8015c22:	8883      	ldrh	r3, [r0, #4]
 8015c24:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8015c26:	b10a      	cbz	r2, 8015c2c <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8015c28:	4319      	orrs	r1, r3
 8015c2a:	e001      	b.n	8015c30 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8015c2c:	ea23 0101 	bic.w	r1, r3, r1
 8015c30:	8081      	strh	r1, [r0, #4]
 8015c32:	4770      	bx	lr

08015c34 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015c34:	4a1c      	ldr	r2, [pc, #112]	; (8015ca8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8015c36:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015c38:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8015c3a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015c3c:	d012      	beq.n	8015c64 <TIM_TimeBaseInit+0x30>
 8015c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015c42:	4290      	cmp	r0, r2
 8015c44:	d00e      	beq.n	8015c64 <TIM_TimeBaseInit+0x30>
 8015c46:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015c4a:	d00b      	beq.n	8015c64 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8015c4c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8015c50:	4290      	cmp	r0, r2
 8015c52:	d007      	beq.n	8015c64 <TIM_TimeBaseInit+0x30>
 8015c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015c58:	4290      	cmp	r0, r2
 8015c5a:	d003      	beq.n	8015c64 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8015c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015c60:	4290      	cmp	r0, r2
 8015c62:	d103      	bne.n	8015c6c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015c64:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8015c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015c6a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8015c6c:	4a0f      	ldr	r2, [pc, #60]	; (8015cac <TIM_TimeBaseInit+0x78>)
 8015c6e:	4290      	cmp	r0, r2
 8015c70:	d008      	beq.n	8015c84 <TIM_TimeBaseInit+0x50>
 8015c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015c76:	4290      	cmp	r0, r2
 8015c78:	d004      	beq.n	8015c84 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8015c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8015c7e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8015c80:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8015c82:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8015c84:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8015c86:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8015c88:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8015c8a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8015c8c:	4b06      	ldr	r3, [pc, #24]	; (8015ca8 <TIM_TimeBaseInit+0x74>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8015c8e:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8015c90:	4298      	cmp	r0, r3
 8015c92:	d003      	beq.n	8015c9c <TIM_TimeBaseInit+0x68>
 8015c94:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8015c98:	4290      	cmp	r0, r2
 8015c9a:	d101      	bne.n	8015ca0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8015c9c:	7a89      	ldrb	r1, [r1, #10]
 8015c9e:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	8283      	strh	r3, [r0, #20]
 8015ca4:	4770      	bx	lr
 8015ca6:	bf00      	nop
 8015ca8:	40010000 	.word	0x40010000
 8015cac:	40001000 	.word	0x40001000

08015cb0 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8015cb0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8015cb2:	b119      	cbz	r1, 8015cbc <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8015cb4:	b299      	uxth	r1, r3
 8015cb6:	f041 0301 	orr.w	r3, r1, #1
 8015cba:	e003      	b.n	8015cc4 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8015cbc:	f023 0101 	bic.w	r1, r3, #1
 8015cc0:	040a      	lsls	r2, r1, #16
 8015cc2:	0c13      	lsrs	r3, r2, #16
 8015cc4:	8003      	strh	r3, [r0, #0]
 8015cc6:	4770      	bx	lr

08015cc8 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8015cc8:	8983      	ldrh	r3, [r0, #12]
 8015cca:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8015ccc:	b10a      	cbz	r2, 8015cd2 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8015cce:	4319      	orrs	r1, r3
 8015cd0:	e001      	b.n	8015cd6 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8015cd2:	ea23 0101 	bic.w	r1, r3, r1
 8015cd6:	8181      	strh	r1, [r0, #12]
 8015cd8:	4770      	bx	lr

08015cda <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8015cda:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8015cdc:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8015cde:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8015ce2:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8015ce4:	d003      	beq.n	8015cee <TIM_GetITStatus+0x14>
 8015ce6:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8015ce8:	bf0c      	ite	eq
 8015cea:	2000      	moveq	r0, #0
 8015cec:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8015cee:	4770      	bx	lr

08015cf0 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8015cf0:	43c9      	mvns	r1, r1
 8015cf2:	b28a      	uxth	r2, r1
 8015cf4:	8202      	strh	r2, [r0, #16]
 8015cf6:	4770      	bx	lr

08015cf8 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8015cf8:	8a03      	ldrh	r3, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8015cfa:	b530      	push	{r4, r5, lr}
 8015cfc:	460d      	mov	r5, r1
 8015cfe:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8015d00:	88ea      	ldrh	r2, [r5, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8015d02:	b298      	uxth	r0, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8015d04:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8015d08:	4311      	orrs	r1, r2
 8015d0a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8015d0c:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8015d0e:	f423 50b0 	bic.w	r0, r3, #5632	; 0x1600
 8015d12:	f020 010c 	bic.w	r1, r0, #12
 8015d16:	040a      	lsls	r2, r1, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8015d18:	8928      	ldrh	r0, [r5, #8]
 8015d1a:	88a9      	ldrh	r1, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8015d1c:	0c13      	lsrs	r3, r2, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8015d1e:	ea40 0201 	orr.w	r2, r0, r1
 8015d22:	8968      	ldrh	r0, [r5, #10]
 8015d24:	4302      	orrs	r2, r0
 8015d26:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8015d28:	430b      	orrs	r3, r1
 8015d2a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8015d2c:	8aa2      	ldrh	r2, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8015d2e:	89ab      	ldrh	r3, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8015d30:	b290      	uxth	r0, r2

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8015d32:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8015d36:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8015d38:	4319      	orrs	r1, r3
 8015d3a:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8015d3c:	4668      	mov	r0, sp
 8015d3e:	f7ff fdb5 	bl	80158ac <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8015d42:	4a1a      	ldr	r2, [pc, #104]	; (8015dac <USART_Init+0xb4>)
 8015d44:	4294      	cmp	r4, r2
 8015d46:	d003      	beq.n	8015d50 <USART_Init+0x58>
 8015d48:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8015d4c:	4284      	cmp	r4, r0
 8015d4e:	d101      	bne.n	8015d54 <USART_Init+0x5c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8015d50:	9b03      	ldr	r3, [sp, #12]
 8015d52:	e000      	b.n	8015d56 <USART_Init+0x5e>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8015d54:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8015d56:	89a1      	ldrh	r1, [r4, #12]
 8015d58:	b20a      	sxth	r2, r1
 8015d5a:	2a00      	cmp	r2, #0
 8015d5c:	f04f 0019 	mov.w	r0, #25
 8015d60:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8015d62:	fb00 f303 	mul.w	r3, r0, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8015d66:	da01      	bge.n	8015d6c <USART_Init+0x74>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8015d68:	0051      	lsls	r1, r2, #1
 8015d6a:	e000      	b.n	8015d6e <USART_Init+0x76>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8015d6c:	0091      	lsls	r1, r2, #2
 8015d6e:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8015d72:	2364      	movs	r3, #100	; 0x64
 8015d74:	fbb1 f0f3 	udiv	r0, r1, r3
 8015d78:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8015d7a:	0910      	lsrs	r0, r2, #4
 8015d7c:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8015d80:	89a0      	ldrh	r0, [r4, #12]
 8015d82:	b200      	sxth	r0, r0
 8015d84:	2800      	cmp	r0, #0
 8015d86:	da06      	bge.n	8015d96 <USART_Init+0x9e>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8015d88:	00c9      	lsls	r1, r1, #3
 8015d8a:	3132      	adds	r1, #50	; 0x32
 8015d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8015d90:	f003 0007 	and.w	r0, r3, #7
 8015d94:	e005      	b.n	8015da2 <USART_Init+0xaa>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8015d96:	0109      	lsls	r1, r1, #4
 8015d98:	3132      	adds	r1, #50	; 0x32
 8015d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8015d9e:	f003 000f 	and.w	r0, r3, #15
 8015da2:	4302      	orrs	r2, r0
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8015da4:	b290      	uxth	r0, r2
 8015da6:	8120      	strh	r0, [r4, #8]
}
 8015da8:	b005      	add	sp, #20
 8015daa:	bd30      	pop	{r4, r5, pc}
 8015dac:	40011000 	.word	0x40011000

08015db0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8015db0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8015db2:	b119      	cbz	r1, 8015dbc <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8015db4:	b299      	uxth	r1, r3
 8015db6:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 8015dba:	e003      	b.n	8015dc4 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8015dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015dc0:	040a      	lsls	r2, r1, #16
 8015dc2:	0c13      	lsrs	r3, r2, #16
 8015dc4:	8183      	strh	r3, [r0, #12]
 8015dc6:	4770      	bx	lr

08015dc8 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8015dc8:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8015dcc:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8015dce:	2401      	movs	r4, #1
 8015dd0:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8015dd4:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8015dd6:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8015dda:	d101      	bne.n	8015de0 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8015ddc:	300c      	adds	r0, #12
 8015dde:	e004      	b.n	8015dea <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8015de0:	2b02      	cmp	r3, #2
 8015de2:	d101      	bne.n	8015de8 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8015de4:	3010      	adds	r0, #16
 8015de6:	e000      	b.n	8015dea <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8015de8:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8015dea:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8015dec:	b112      	cbz	r2, 8015df4 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8015dee:	ea43 0201 	orr.w	r2, r3, r1
 8015df2:	e001      	b.n	8015df8 <USART_ITConfig+0x30>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8015df4:	ea23 0201 	bic.w	r2, r3, r1
 8015df8:	6002      	str	r2, [r0, #0]
 8015dfa:	bd10      	pop	{r4, pc}

08015dfc <USBD_Resume>:
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8015dfc:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e00:	b510      	push	{r4, lr}
 8015e02:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8015e04:	6918      	ldr	r0, [r3, #16]
 8015e06:	4780      	blx	r0
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8015e08:	2103      	movs	r1, #3
 8015e0a:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  return USBD_OK;
}
 8015e0e:	2000      	movs	r0, #0
 8015e10:	bd10      	pop	{r4, pc}

08015e12 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e12:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
 8015e14:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8015e18:	2104      	movs	r1, #4
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.device_old_status = pdev->dev.device_status;
 8015e1a:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8015e1e:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8015e22:	f8d0 05e8 	ldr.w	r0, [r0, #1512]	; 0x5e8
 8015e26:	68c2      	ldr	r2, [r0, #12]
 8015e28:	4790      	blx	r2
  return USBD_OK;
}
 8015e2a:	2000      	movs	r0, #0
 8015e2c:	bd08      	pop	{r3, pc}

08015e2e <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e2e:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 8015e30:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015e34:	69d9      	ldr	r1, [r3, #28]
 8015e36:	b101      	cbz	r1, 8015e3a <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8015e38:	4788      	blx	r1
  }
  return USBD_OK;
}
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	bd08      	pop	{r3, pc}

08015e3e <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e3e:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8015e40:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015e44:	6a19      	ldr	r1, [r3, #32]
 8015e46:	4788      	blx	r1
  return USBD_OK;
}
 8015e48:	2000      	movs	r0, #0
 8015e4a:	bd08      	pop	{r3, pc}

08015e4c <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e4c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8015e4e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015e52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015e54:	4788      	blx	r1
  return USBD_OK;
}
 8015e56:	2000      	movs	r0, #0
 8015e58:	bd08      	pop	{r3, pc}

08015e5a <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8015e5a:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e5c:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8015e5e:	2240      	movs	r2, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8015e60:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8015e62:	460b      	mov	r3, r1
 8015e64:	f001 ffc6 	bl	8017df4 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8015e68:	2180      	movs	r1, #128	; 0x80
 8015e6a:	2240      	movs	r2, #64	; 0x40
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f001 ffc0 	bl	8017df4 <DCD_EP_Open>
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8015e74:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8015e7e:	6841      	ldr	r1, [r0, #4]
 8015e80:	78a0      	ldrb	r0, [r4, #2]
 8015e82:	4788      	blx	r1
  
  return USBD_OK;
}
 8015e84:	2000      	movs	r0, #0
 8015e86:	bd10      	pop	{r4, pc}

08015e88 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8015e88:	b513      	push	{r0, r1, r4, lr}
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8015e8a:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8015e8c:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8015e8e:	f000 f923 	bl	80160d8 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8015e92:	f89d 1000 	ldrb.w	r1, [sp]
 8015e96:	f001 031f 	and.w	r3, r1, #31
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d00c      	beq.n	8015eb8 <USBD_SetupStage+0x30>
 8015e9e:	d306      	bcc.n	8015eae <USBD_SetupStage+0x26>
 8015ea0:	2b02      	cmp	r3, #2
 8015ea2:	d10e      	bne.n	8015ec2 <USBD_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	4669      	mov	r1, sp
 8015ea8:	f000 f946 	bl	8016138 <USBD_StdEPReq>
    break;
 8015eac:	e00e      	b.n	8015ecc <USBD_SetupStage+0x44>
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8015eae:	4620      	mov	r0, r4
 8015eb0:	4669      	mov	r1, sp
 8015eb2:	f000 f9bb 	bl	801622c <USBD_StdDevReq>
    break;
 8015eb6:	e009      	b.n	8015ecc <USBD_SetupStage+0x44>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8015eb8:	4620      	mov	r0, r4
 8015eba:	4669      	mov	r1, sp
 8015ebc:	f000 f99e 	bl	80161fc <USBD_StdItfReq>
    break;
 8015ec0:	e004      	b.n	8015ecc <USBD_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8015ec8:	f002 f806 	bl	8017ed8 <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 8015ecc:	2000      	movs	r0, #0
 8015ece:	bd1c      	pop	{r2, r3, r4, pc}

08015ed0 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8015ed4:	2900      	cmp	r1, #0
 8015ed6:	d147      	bne.n	8015f68 <USBD_DataInStage+0x98>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8015ed8:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8015edc:	2b02      	cmp	r3, #2
 8015ede:	d137      	bne.n	8015f50 <USBD_DataInStage+0x80>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8015ee0:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8015ee4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d911      	bls.n	8015f10 <USBD_DataInStage+0x40>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8015eec:	1ad2      	subs	r2, r2, r3
 8015eee:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
        if(pdev->cfg.dma_enable == 1)
 8015ef2:	78c0      	ldrb	r0, [r0, #3]
 8015ef4:	2801      	cmp	r0, #1
 8015ef6:	d104      	bne.n	8015f02 <USBD_DataInStage+0x32>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8015ef8:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8015efc:	18cb      	adds	r3, r1, r3
 8015efe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        }
        USBD_CtlContinueSendData (pdev, 
 8015f02:	4620      	mov	r0, r4
 8015f04:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8015f08:	b292      	uxth	r2, r2
 8015f0a:	f000 f8b5 	bl	8016078 <USBD_CtlContinueSendData>
 8015f0e:	e01f      	b.n	8015f50 <USBD_DataInStage+0x80>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8015f10:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c
 8015f14:	fbb5 f6f3 	udiv	r6, r5, r3
 8015f18:	fb03 5616 	mls	r6, r3, r6, r5
 8015f1c:	b95e      	cbnz	r6, 8015f36 <USBD_DataInStage+0x66>
 8015f1e:	429d      	cmp	r5, r3
 8015f20:	d309      	bcc.n	8015f36 <USBD_DataInStage+0x66>
           (ep->total_data_len >= ep->maxpacket) &&
 8015f22:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8015f26:	4295      	cmp	r5, r2
 8015f28:	d205      	bcs.n	8015f36 <USBD_DataInStage+0x66>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8015f2a:	4632      	mov	r2, r6
 8015f2c:	f000 f8a4 	bl	8016078 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8015f30:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8015f34:	e00c      	b.n	8015f50 <USBD_DataInStage+0x80>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8015f36:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 8015f3a:	68c1      	ldr	r1, [r0, #12]
 8015f3c:	b129      	cbz	r1, 8015f4a <USBD_DataInStage+0x7a>
 8015f3e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8015f42:	2b03      	cmp	r3, #3
 8015f44:	d101      	bne.n	8015f4a <USBD_DataInStage+0x7a>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8015f46:	4620      	mov	r0, r4
 8015f48:	4788      	blx	r1
          }          
          USBD_CtlReceiveStatus(pdev);
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	f000 f8b5 	bl	80160ba <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8015f50:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 8015f54:	2a01      	cmp	r2, #1
 8015f56:	d110      	bne.n	8015f7a <USBD_DataInStage+0xaa>
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8015f58:	4909      	ldr	r1, [pc, #36]	; (8015f80 <USBD_DataInStage+0xb0>)
 8015f5a:	6920      	ldr	r0, [r4, #16]
 8015f5c:	680b      	ldr	r3, [r1, #0]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 8015f5e:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8015f60:	6043      	str	r3, [r0, #4]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 8015f62:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
 8015f66:	e008      	b.n	8015f7a <USBD_DataInStage+0xaa>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8015f68:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015f6c:	695b      	ldr	r3, [r3, #20]
 8015f6e:	b123      	cbz	r3, 8015f7a <USBD_DataInStage+0xaa>
 8015f70:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015f74:	2a03      	cmp	r2, #3
 8015f76:	d100      	bne.n	8015f7a <USBD_DataInStage+0xaa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8015f78:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8015f7a:	2000      	movs	r0, #0
 8015f7c:	bd70      	pop	{r4, r5, r6, pc}
 8015f7e:	bf00      	nop
 8015f80:	20004df8 	.word	0x20004df8

08015f84 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8015f84:	b510      	push	{r4, lr}
 8015f86:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8015f88:	bb59      	cbnz	r1, 8015fe2 <USBD_DataOutStage+0x5e>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8015f8a:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
 8015f8e:	2903      	cmp	r1, #3
 8015f90:	d130      	bne.n	8015ff4 <USBD_DataOutStage+0x70>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8015f92:	f8d0 2390 	ldr.w	r2, [r0, #912]	; 0x390
 8015f96:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d914      	bls.n	8015fc8 <USBD_DataOutStage+0x44>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8015f9e:	1ad2      	subs	r2, r2, r3
 8015fa0:	f8c0 2390 	str.w	r2, [r0, #912]	; 0x390
        
        if(pdev->cfg.dma_enable == 1)
 8015fa4:	78c0      	ldrb	r0, [r0, #3]
 8015fa6:	2801      	cmp	r0, #1
 8015fa8:	d104      	bne.n	8015fb4 <USBD_DataOutStage+0x30>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8015faa:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8015fae:	18c8      	adds	r0, r1, r3
 8015fb0:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	bf28      	it	cs
 8015fb8:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8015fc0:	b292      	uxth	r2, r2
 8015fc2:	f000 f862 	bl	801608a <USBD_CtlContinueRx>
 8015fc6:	e015      	b.n	8015ff4 <USBD_DataOutStage+0x70>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8015fc8:	f8d0 15e4 	ldr.w	r1, [r0, #1508]	; 0x5e4
 8015fcc:	690b      	ldr	r3, [r1, #16]
 8015fce:	b123      	cbz	r3, 8015fda <USBD_DataOutStage+0x56>
 8015fd0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015fd4:	2a03      	cmp	r2, #3
 8015fd6:	d100      	bne.n	8015fda <USBD_DataOutStage+0x56>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8015fd8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f000 f85e 	bl	801609c <USBD_CtlSendStatus>
 8015fe0:	e008      	b.n	8015ff4 <USBD_DataOutStage+0x70>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8015fe2:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015fe6:	699b      	ldr	r3, [r3, #24]
 8015fe8:	b123      	cbz	r3, 8015ff4 <USBD_DataOutStage+0x70>
 8015fea:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015fee:	2a03      	cmp	r2, #3
 8015ff0:	d100      	bne.n	8015ff4 <USBD_DataOutStage+0x70>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8015ff2:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8015ff4:	2000      	movs	r0, #0
 8015ff6:	bd10      	pop	{r4, pc}

08015ff8 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8015ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffc:	9f06      	ldr	r7, [sp, #24]
 8015ffe:	4604      	mov	r4, r0
 8016000:	4616      	mov	r6, r2
 8016002:	4698      	mov	r8, r3
 8016004:	460d      	mov	r5, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8016006:	f7fd fe5d 	bl	8013cc4 <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801600a:	4620      	mov	r0, r4
 801600c:	4629      	mov	r1, r5
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 801600e:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8016012:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8016016:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801601a:	f001 fea0 	bl	8017d5e <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 801601e:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8016022:	6818      	ldr	r0, [r3, #0]
 8016024:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8016026:	4620      	mov	r0, r4
}
 8016028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 801602c:	f7fd bec6 	b.w	8013dbc <USB_OTG_BSP_EnableInterrupt>

08016030 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8016030:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8016034:	b510      	push	{r4, lr}
 8016036:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	4790      	blx	r2
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 801603c:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
 8016040:	6881      	ldr	r1, [r0, #8]
 8016042:	4788      	blx	r1
  return USBD_OK; 
}
 8016044:	2000      	movs	r0, #0
 8016046:	bd10      	pop	{r4, pc}

08016048 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8016048:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 801604a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 801604e:	685a      	ldr	r2, [r3, #4]
 8016050:	4790      	blx	r2
  return USBD_OK;
}
 8016052:	2000      	movs	r0, #0
 8016054:	bd08      	pop	{r3, pc}

08016056 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8016056:	b538      	push	{r3, r4, r5, lr}
 8016058:	4604      	mov	r4, r0
 801605a:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 801605c:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8016060:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8016064:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8016066:	2202      	movs	r2, #2
 8016068:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 801606c:	2100      	movs	r1, #0
 801606e:	462a      	mov	r2, r5
 8016070:	f001 ff17 	bl	8017ea2 <DCD_EP_Tx>
 
  return ret;
}
 8016074:	2000      	movs	r0, #0
 8016076:	bd38      	pop	{r3, r4, r5, pc}

08016078 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8016078:	b510      	push	{r4, lr}
 801607a:	460c      	mov	r4, r1
 801607c:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 801607e:	2100      	movs	r1, #0
 8016080:	4622      	mov	r2, r4
 8016082:	f001 ff0e 	bl	8017ea2 <DCD_EP_Tx>
  
  
  return ret;
}
 8016086:	2000      	movs	r0, #0
 8016088:	bd10      	pop	{r4, pc}

0801608a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801608a:	b510      	push	{r4, lr}
 801608c:	460c      	mov	r4, r1
 801608e:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 8016090:	2100      	movs	r1, #0
 8016092:	4622      	mov	r2, r4
 8016094:	f001 fee8 	bl	8017e68 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 8016098:	2000      	movs	r0, #0
 801609a:	bd10      	pop	{r4, pc}

0801609c <USBD_CtlSendStatus>:
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 801609c:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 801609e:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80160a0:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80160a2:	460a      	mov	r2, r1
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80160a4:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80160a6:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80160aa:	460b      	mov	r3, r1
 80160ac:	f001 fef9 	bl	8017ea2 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 80160b0:	4620      	mov	r0, r4
 80160b2:	f001 fe36 	bl	8017d22 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80160b6:	2000      	movs	r0, #0
 80160b8:	bd10      	pop	{r4, pc}

080160ba <USBD_CtlReceiveStatus>:
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80160ba:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80160bc:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80160be:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80160c0:	460a      	mov	r2, r1
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80160c2:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80160c4:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 80160c8:	460b      	mov	r3, r1
 80160ca:	f001 fecd 	bl	8017e68 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 80160ce:	4620      	mov	r0, r4
 80160d0:	f001 fe27 	bl	8017d22 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80160d4:	2000      	movs	r0, #0
 80160d6:	bd10      	pop	{r4, pc}

080160d8 <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 80160d8:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 80160dc:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 80160de:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 80160e2:	704a      	strb	r2, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 80160e4:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 80160e8:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 80160ec:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80160f0:	804a      	strh	r2, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 80160f2:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 80160f6:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 80160fa:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80160fe:	808a      	strh	r2, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8016100:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 8016104:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 8016108:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801610c:	b293      	uxth	r3, r2
 801610e:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8016110:	2101      	movs	r1, #1
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8016112:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8016116:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
 801611a:	4770      	bx	lr

0801611c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 801611c:	b510      	push	{r4, lr}
  
  DCD_EP_Stall(pdev , 0x80);
 801611e:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8016120:	4604      	mov	r4, r0
  
  DCD_EP_Stall(pdev , 0x80);
 8016122:	f001 fed9 	bl	8017ed8 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8016126:	4620      	mov	r0, r4
 8016128:	2100      	movs	r1, #0
 801612a:	f001 fed5 	bl	8017ed8 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 801612e:	4620      	mov	r0, r4
}
 8016130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
  DCD_EP_Stall(pdev , 0);
  USB_OTG_EP0_OutStart(pdev);  
 8016134:	f001 bdf5 	b.w	8017d22 <USB_OTG_EP0_OutStart>

08016138 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8016138:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 801613a:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 801613c:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 801613e:	2e01      	cmp	r6, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8016140:	4604      	mov	r4, r0
 8016142:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 8016144:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8016146:	d011      	beq.n	801616c <USBD_StdEPReq+0x34>
 8016148:	d329      	bcc.n	801619e <USBD_StdEPReq+0x66>
 801614a:	2e03      	cmp	r6, #3
 801614c:	d151      	bne.n	80161f2 <USBD_StdEPReq+0xba>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 801614e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8016152:	2a02      	cmp	r2, #2
 8016154:	d02a      	beq.n	80161ac <USBD_StdEPReq+0x74>
 8016156:	2a03      	cmp	r2, #3
 8016158:	d149      	bne.n	80161ee <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801615a:	8849      	ldrh	r1, [r1, #2]
 801615c:	b9a9      	cbnz	r1, 801618a <USBD_StdEPReq+0x52>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801615e:	b1a3      	cbz	r3, 801618a <USBD_StdEPReq+0x52>
 8016160:	2b80      	cmp	r3, #128	; 0x80
 8016162:	d012      	beq.n	801618a <USBD_StdEPReq+0x52>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 8016164:	4619      	mov	r1, r3
 8016166:	f001 feb7 	bl	8017ed8 <DCD_EP_Stall>
 801616a:	e00e      	b.n	801618a <USBD_StdEPReq+0x52>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 801616c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8016170:	2a02      	cmp	r2, #2
 8016172:	d01b      	beq.n	80161ac <USBD_StdEPReq+0x74>
 8016174:	2a03      	cmp	r2, #3
 8016176:	d13a      	bne.n	80161ee <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8016178:	8849      	ldrh	r1, [r1, #2]
 801617a:	2900      	cmp	r1, #0
 801617c:	d139      	bne.n	80161f2 <USBD_StdEPReq+0xba>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801617e:	b153      	cbz	r3, 8016196 <USBD_StdEPReq+0x5e>
 8016180:	2b80      	cmp	r3, #128	; 0x80
 8016182:	d008      	beq.n	8016196 <USBD_StdEPReq+0x5e>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8016184:	4619      	mov	r1, r3
 8016186:	f001 fec5 	bl	8017f14 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 801618a:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801618e:	4629      	mov	r1, r5
 8016190:	6883      	ldr	r3, [r0, #8]
 8016192:	4620      	mov	r0, r4
 8016194:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016196:	4620      	mov	r0, r4
 8016198:	f7ff ff80 	bl	801609c <USBD_CtlSendStatus>
 801619c:	e029      	b.n	80161f2 <USBD_StdEPReq+0xba>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 801619e:	f890 5112 	ldrb.w	r5, [r0, #274]	; 0x112
 80161a2:	2d02      	cmp	r5, #2
 80161a4:	d002      	beq.n	80161ac <USBD_StdEPReq+0x74>
 80161a6:	2d03      	cmp	r5, #3
 80161a8:	d121      	bne.n	80161ee <USBD_StdEPReq+0xb6>
 80161aa:	e006      	b.n	80161ba <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80161ac:	b30b      	cbz	r3, 80161f2 <USBD_StdEPReq+0xba>
 80161ae:	2b80      	cmp	r3, #128	; 0x80
 80161b0:	d01f      	beq.n	80161f2 <USBD_StdEPReq+0xba>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80161b2:	4619      	mov	r1, r3
 80161b4:	f001 fe90 	bl	8017ed8 <DCD_EP_Stall>
 80161b8:	e01b      	b.n	80161f2 <USBD_StdEPReq+0xba>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 80161ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80161be:	f04f 0028 	mov.w	r0, #40	; 0x28
 80161c2:	d006      	beq.n	80161d2 <USBD_StdEPReq+0x9a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80161c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80161c8:	fb00 4102 	mla	r1, r0, r2, r4
 80161cc:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 80161d0:	e003      	b.n	80161da <USBD_StdEPReq+0xa2>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80161d2:	fb00 4303 	mla	r3, r0, r3, r4
 80161d6:	f893 3376 	ldrb.w	r3, [r3, #886]	; 0x376
 80161da:	4807      	ldr	r0, [pc, #28]	; (80161f8 <USBD_StdEPReq+0xc0>)
 80161dc:	b103      	cbz	r3, 80161e0 <USBD_StdEPReq+0xa8>
        {
          USBD_ep_status = 0x0001;     
 80161de:	2301      	movs	r3, #1
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80161e0:	6003      	str	r3, [r0, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 80161e2:	4905      	ldr	r1, [pc, #20]	; (80161f8 <USBD_StdEPReq+0xc0>)
 80161e4:	4620      	mov	r0, r4
 80161e6:	2202      	movs	r2, #2
 80161e8:	f7ff ff35 	bl	8016056 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80161ec:	e001      	b.n	80161f2 <USBD_StdEPReq+0xba>
      
    default:                         
       USBD_CtlError(pdev , req);
 80161ee:	f7ff ff95 	bl	801611c <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80161f2:	2000      	movs	r0, #0
 80161f4:	bd70      	pop	{r4, r5, r6, pc}
 80161f6:	bf00      	nop
 80161f8:	200009a4 	.word	0x200009a4

080161fc <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80161fc:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 80161fe:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8016202:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8016204:	4604      	mov	r4, r0
 8016206:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 8016208:	d10c      	bne.n	8016224 <USBD_StdItfReq+0x28>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 801620a:	790a      	ldrb	r2, [r1, #4]
 801620c:	2a01      	cmp	r2, #1
 801620e:	d809      	bhi.n	8016224 <USBD_StdItfReq+0x28>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8016210:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8016214:	689a      	ldr	r2, [r3, #8]
 8016216:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8016218:	88e8      	ldrh	r0, [r5, #6]
 801621a:	b928      	cbnz	r0, 8016228 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 801621c:	4620      	mov	r0, r4
 801621e:	f7ff ff3d 	bl	801609c <USBD_CtlSendStatus>
 8016222:	e001      	b.n	8016228 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8016224:	f7ff ff7a 	bl	801611c <USBD_CtlError>
    break;
  }
  return ret;
}
 8016228:	2000      	movs	r0, #0
 801622a:	bd38      	pop	{r3, r4, r5, pc}

0801622c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801622c:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 801622e:	784b      	ldrb	r3, [r1, #1]
 8016230:	2b05      	cmp	r3, #5
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8016232:	b0a2      	sub	sp, #136	; 0x88
 8016234:	4604      	mov	r4, r0
 8016236:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 8016238:	f000 80b1 	beq.w	801639e <USBD_StdDevReq+0x172>
 801623c:	d808      	bhi.n	8016250 <USBD_StdDevReq+0x24>
 801623e:	2b01      	cmp	r3, #1
 8016240:	f000 8143 	beq.w	80164ca <USBD_StdDevReq+0x29e>
 8016244:	f0c0 8108 	bcc.w	8016458 <USBD_StdDevReq+0x22c>
 8016248:	2b03      	cmp	r3, #3
 801624a:	f040 8161 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
 801624e:	e114      	b.n	801647a <USBD_StdDevReq+0x24e>
 8016250:	2b08      	cmp	r3, #8
 8016252:	f000 80f3 	beq.w	801643c <USBD_StdDevReq+0x210>
 8016256:	d803      	bhi.n	8016260 <USBD_StdDevReq+0x34>
 8016258:	2b06      	cmp	r3, #6
 801625a:	f040 8159 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
 801625e:	e006      	b.n	801626e <USBD_StdDevReq+0x42>
 8016260:	2b09      	cmp	r3, #9
 8016262:	f000 80bc 	beq.w	80163de <USBD_StdDevReq+0x1b2>
 8016266:	2b55      	cmp	r3, #85	; 0x55
 8016268:	f040 8152 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
 801626c:	e13d      	b.n	80164ea <USBD_StdDevReq+0x2be>
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 801626e:	8848      	ldrh	r0, [r1, #2]
 8016270:	0a01      	lsrs	r1, r0, #8
 8016272:	1e4b      	subs	r3, r1, #1
 8016274:	2b06      	cmp	r3, #6
 8016276:	f200 814b 	bhi.w	8016510 <USBD_StdDevReq+0x2e4>
 801627a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801627e:	0007      	.short	0x0007
 8016280:	00320018 	.word	0x00320018
 8016284:	01490149 	.word	0x01490149
 8016288:	0073005e 	.word	0x0073005e
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 801628c:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8016290:	78a0      	ldrb	r0, [r4, #2]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	f10d 0106 	add.w	r1, sp, #6
 8016298:	4790      	blx	r2
 801629a:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 801629c:	88e8      	ldrh	r0, [r5, #6]
 801629e:	2840      	cmp	r0, #64	; 0x40
 80162a0:	d003      	beq.n	80162aa <USBD_StdDevReq+0x7e>
 80162a2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d169      	bne.n	801637e <USBD_StdDevReq+0x152>
    {                  
      len = 8;
 80162aa:	2308      	movs	r3, #8
 80162ac:	e057      	b.n	801635e <USBD_StdDevReq+0x132>
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80162ae:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 80162b2:	f10d 0106 	add.w	r1, sp, #6
 80162b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80162b8:	78a0      	ldrb	r0, [r4, #2]
 80162ba:	4790      	blx	r2
#ifdef USB_OTG_HS_CORE
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 80162bc:	78a3      	ldrb	r3, [r4, #2]
 80162be:	2b01      	cmp	r3, #1
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80162c0:	4601      	mov	r1, r0
#ifdef USB_OTG_HS_CORE
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 80162c2:	d109      	bne.n	80162d8 <USBD_StdDevReq+0xac>
 80162c4:	7a20      	ldrb	r0, [r4, #8]
 80162c6:	2801      	cmp	r0, #1
 80162c8:	d106      	bne.n	80162d8 <USBD_StdDevReq+0xac>
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 80162ca:	f8d4 15e4 	ldr.w	r1, [r4, #1508]	; 0x5e4
 80162ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80162d0:	f10d 0106 	add.w	r1, sp, #6
 80162d4:	4790      	blx	r2
 80162d6:	4601      	mov	r1, r0
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80162d8:	2002      	movs	r0, #2
 80162da:	7048      	strb	r0, [r1, #1]
    pdev->dev.pConfig_descriptor = pbuf;    
 80162dc:	f8c4 15f0 	str.w	r1, [r4, #1520]	; 0x5f0
 80162e0:	e04d      	b.n	801637e <USBD_StdDevReq+0x152>
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80162e2:	b2c1      	uxtb	r1, r0
 80162e4:	78a0      	ldrb	r0, [r4, #2]
 80162e6:	2905      	cmp	r1, #5
 80162e8:	d820      	bhi.n	801632c <USBD_StdDevReq+0x100>
 80162ea:	e8df f001 	tbb	[pc, r1]
 80162ee:	0703      	.short	0x0703
 80162f0:	1b17130f 	.word	0x1b17130f
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80162f4:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80162f8:	684a      	ldr	r2, [r1, #4]
 80162fa:	e002      	b.n	8016302 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80162fc:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8016300:	689a      	ldr	r2, [r3, #8]
 8016302:	f10d 0106 	add.w	r1, sp, #6
 8016306:	4790      	blx	r2
 8016308:	4601      	mov	r1, r0
 801630a:	e038      	b.n	801637e <USBD_StdDevReq+0x152>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 801630c:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 8016310:	68d2      	ldr	r2, [r2, #12]
 8016312:	e7f6      	b.n	8016302 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8016314:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 8016318:	690a      	ldr	r2, [r1, #16]
 801631a:	e7f2      	b.n	8016302 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 801631c:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8016320:	695a      	ldr	r2, [r3, #20]
 8016322:	e7ee      	b.n	8016302 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8016324:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 8016328:	698a      	ldr	r2, [r1, #24]
 801632a:	e7ea      	b.n	8016302 <USBD_StdDevReq+0xd6>
      break;
      
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
 801632c:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 8016330:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8016332:	f10d 0206 	add.w	r2, sp, #6
 8016336:	4798      	blx	r3
 8016338:	e7e6      	b.n	8016308 <USBD_StdDevReq+0xdc>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
#ifdef USB_OTG_HS_CORE
    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 801633a:	78a0      	ldrb	r0, [r4, #2]
 801633c:	2800      	cmp	r0, #0
 801633e:	f040 80e7 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
    {
      
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8016342:	f8d4 15e4 	ldr.w	r1, [r4, #1508]	; 0x5e4
 8016346:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8016348:	f10d 0106 	add.w	r1, sp, #6
 801634c:	4790      	blx	r2
            
      USBD_DeviceQualifierDesc[4]= pbuf[14];
 801634e:	4974      	ldr	r1, [pc, #464]	; (8016520 <USBD_StdDevReq+0x2f4>)
 8016350:	7b83      	ldrb	r3, [r0, #14]
      USBD_DeviceQualifierDesc[5]= pbuf[15];
 8016352:	7bc2      	ldrb	r2, [r0, #15]
      USBD_DeviceQualifierDesc[6]= pbuf[16];
 8016354:	7c00      	ldrb	r0, [r0, #16]
    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
    {
      
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
            
      USBD_DeviceQualifierDesc[4]= pbuf[14];
 8016356:	710b      	strb	r3, [r1, #4]
      USBD_DeviceQualifierDesc[5]= pbuf[15];
 8016358:	714a      	strb	r2, [r1, #5]
      USBD_DeviceQualifierDesc[6]= pbuf[16];
 801635a:	7188      	strb	r0, [r1, #6]
      
      pbuf = USBD_DeviceQualifierDesc;
      len  = USB_LEN_DEV_QUALIFIER_DESC;
 801635c:	230a      	movs	r3, #10
 801635e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016362:	e00c      	b.n	801637e <USBD_StdDevReq+0x152>
#endif    

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
#ifdef USB_OTG_HS_CORE   

    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 8016364:	78a0      	ldrb	r0, [r4, #2]
 8016366:	2800      	cmp	r0, #0
 8016368:	f040 80d2 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 801636c:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 8016370:	f10d 0106 	add.w	r1, sp, #6
 8016374:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8016376:	4798      	blx	r3
 8016378:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801637a:	2007      	movs	r0, #7
 801637c:	7048      	strb	r0, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 801637e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016382:	2800      	cmp	r0, #0
 8016384:	f000 80c8 	beq.w	8016518 <USBD_StdDevReq+0x2ec>
 8016388:	88ea      	ldrh	r2, [r5, #6]
 801638a:	2a00      	cmp	r2, #0
 801638c:	f000 80c4 	beq.w	8016518 <USBD_StdDevReq+0x2ec>
  {
    
    len = MIN(len , req->wLength);
 8016390:	4282      	cmp	r2, r0
 8016392:	bf28      	it	cs
 8016394:	4602      	movcs	r2, r0
 8016396:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 801639a:	4620      	mov	r0, r4
 801639c:	e0b5      	b.n	801650a <USBD_StdDevReq+0x2de>
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 801639e:	888a      	ldrh	r2, [r1, #4]
 80163a0:	2a00      	cmp	r2, #0
 80163a2:	f040 80b5 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
 80163a6:	88c9      	ldrh	r1, [r1, #6]
 80163a8:	2900      	cmp	r1, #0
 80163aa:	f040 80b1 	bne.w	8016510 <USBD_StdDevReq+0x2e4>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80163ae:	886e      	ldrh	r6, [r5, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80163b0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80163b4:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80163b8:	2a03      	cmp	r2, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80163ba:	461e      	mov	r6, r3
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80163bc:	f000 80a8 	beq.w	8016510 <USBD_StdDevReq+0x2e4>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80163c0:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80163c4:	4619      	mov	r1, r3
 80163c6:	f001 fdc3 	bl	8017f50 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80163ca:	4620      	mov	r0, r4
 80163cc:	f7ff fe66 	bl	801609c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80163d0:	b10e      	cbz	r6, 80163d6 <USBD_StdDevReq+0x1aa>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 80163d2:	2002      	movs	r0, #2
 80163d4:	e000      	b.n	80163d8 <USBD_StdDevReq+0x1ac>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 80163d6:	2001      	movs	r0, #1
 80163d8:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112
 80163dc:	e09c      	b.n	8016518 <USBD_StdDevReq+0x2ec>
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80163de:	788b      	ldrb	r3, [r1, #2]
 80163e0:	4a50      	ldr	r2, [pc, #320]	; (8016524 <USBD_StdDevReq+0x2f8>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80163e2:	2b01      	cmp	r3, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80163e4:	7013      	strb	r3, [r2, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80163e6:	f200 8093 	bhi.w	8016510 <USBD_StdDevReq+0x2e4>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 80163ea:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80163ee:	2a02      	cmp	r2, #2
 80163f0:	d003      	beq.n	80163fa <USBD_StdDevReq+0x1ce>
 80163f2:	2a03      	cmp	r2, #3
 80163f4:	f040 808e 	bne.w	8016514 <USBD_StdDevReq+0x2e8>
 80163f8:	e008      	b.n	801640c <USBD_StdDevReq+0x1e0>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d061      	beq.n	80164c2 <USBD_StdDevReq+0x296>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80163fe:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8016400:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8016402:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8016406:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
 801640a:	e014      	b.n	8016436 <USBD_StdDevReq+0x20a>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 801640c:	b943      	cbnz	r3, 8016420 <USBD_StdDevReq+0x1f4>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 801640e:	2102      	movs	r1, #2
 8016410:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8016414:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 8016418:	4619      	mov	r1, r3
 801641a:	f7ff fe15 	bl	8016048 <USBD_ClrCfg>
 801641e:	e050      	b.n	80164c2 <USBD_StdDevReq+0x296>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8016420:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 8016424:	2901      	cmp	r1, #1
 8016426:	d04c      	beq.n	80164c2 <USBD_StdDevReq+0x296>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8016428:	f7ff fe0e 	bl	8016048 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 801642c:	483d      	ldr	r0, [pc, #244]	; (8016524 <USBD_StdDevReq+0x2f8>)
 801642e:	7801      	ldrb	r1, [r0, #0]
        USBD_SetCfg(pdev , cfgidx);
 8016430:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8016432:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8016436:	f7ff fdfb 	bl	8016030 <USBD_SetCfg>
 801643a:	e042      	b.n	80164c2 <USBD_StdDevReq+0x296>
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 801643c:	88ca      	ldrh	r2, [r1, #6]
 801643e:	2a01      	cmp	r2, #1
 8016440:	d166      	bne.n	8016510 <USBD_StdDevReq+0x2e4>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8016442:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8016446:	2b02      	cmp	r3, #2
 8016448:	d004      	beq.n	8016454 <USBD_StdDevReq+0x228>
 801644a:	2b03      	cmp	r3, #3
 801644c:	d162      	bne.n	8016514 <USBD_StdDevReq+0x2e8>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 801644e:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8016452:	e05a      	b.n	801650a <USBD_StdDevReq+0x2de>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8016454:	4934      	ldr	r1, [pc, #208]	; (8016528 <USBD_StdDevReq+0x2fc>)
 8016456:	e058      	b.n	801650a <USBD_StdDevReq+0x2de>
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
    
  switch (pdev->dev.device_status) 
 8016458:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 801645c:	1e93      	subs	r3, r2, #2
 801645e:	2b01      	cmp	r3, #1
 8016460:	d858      	bhi.n	8016514 <USBD_StdDevReq+0x2e8>
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 8016462:	4832      	ldr	r0, [pc, #200]	; (801652c <USBD_StdDevReq+0x300>)
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8016464:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 8016468:	2100      	movs	r1, #0
 801646a:	6001      	str	r1, [r0, #0]
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 801646c:	b10a      	cbz	r2, 8016472 <USBD_StdDevReq+0x246>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 801646e:	2302      	movs	r3, #2
 8016470:	6003      	str	r3, [r0, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8016472:	4620      	mov	r0, r4
 8016474:	492d      	ldr	r1, [pc, #180]	; (801652c <USBD_StdDevReq+0x300>)
 8016476:	2202      	movs	r2, #2
 8016478:	e047      	b.n	801650a <USBD_StdDevReq+0x2de>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801647a:	884b      	ldrh	r3, [r1, #2]
 801647c:	2b01      	cmp	r3, #1
 801647e:	d02d      	beq.n	80164dc <USBD_StdDevReq+0x2b0>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8016480:	2b02      	cmp	r3, #2
 8016482:	d149      	bne.n	8016518 <USBD_StdDevReq+0x2ec>
           ((req->wIndex & 0xFF) == 0))
 8016484:	888a      	ldrh	r2, [r1, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8016486:	f012 0fff 	tst.w	r2, #255	; 0xff
 801648a:	d145      	bne.n	8016518 <USBD_StdDevReq+0x2ec>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 801648c:	6900      	ldr	r0, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 801648e:	0a11      	lsrs	r1, r2, #8
 8016490:	1e4a      	subs	r2, r1, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8016492:	6843      	ldr	r3, [r0, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8016494:	2a04      	cmp	r2, #4
 8016496:	d80f      	bhi.n	80164b8 <USBD_StdDevReq+0x28c>
 8016498:	e8df f002 	tbb	[pc, r2]
 801649c:	09070503 	.word	0x09070503
 80164a0:	0b          	.byte	0x0b
 80164a1:	00          	.byte	0x00
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 80164a2:	2001      	movs	r0, #1
 80164a4:	e006      	b.n	80164b4 <USBD_StdDevReq+0x288>
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 80164a6:	2002      	movs	r0, #2
 80164a8:	e004      	b.n	80164b4 <USBD_StdDevReq+0x288>
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 80164aa:	2003      	movs	r0, #3
 80164ac:	e002      	b.n	80164b4 <USBD_StdDevReq+0x288>
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 80164ae:	2004      	movs	r0, #4
 80164b0:	e000      	b.n	80164b4 <USBD_StdDevReq+0x288>
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 80164b2:	2005      	movs	r0, #5
 80164b4:	f360 1306 	bfi	r3, r0, #4, #3
      break;
    }
    SET_TEST_MODE = dctl;
 80164b8:	491d      	ldr	r1, [pc, #116]	; (8016530 <USBD_StdDevReq+0x304>)
 80164ba:	600b      	str	r3, [r1, #0]
    pdev->dev.test_mode = 1;
 80164bc:	2301      	movs	r3, #1
 80164be:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 80164c2:	4620      	mov	r0, r4
 80164c4:	f7ff fdea 	bl	801609c <USBD_CtlSendStatus>
 80164c8:	e026      	b.n	8016518 <USBD_StdDevReq+0x2ec>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 80164ca:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80164ce:	1e93      	subs	r3, r2, #2
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	d81f      	bhi.n	8016514 <USBD_StdDevReq+0x2e8>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80164d4:	884a      	ldrh	r2, [r1, #2]
 80164d6:	2a01      	cmp	r2, #1
 80164d8:	d11e      	bne.n	8016518 <USBD_StdDevReq+0x2ec>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80164da:	2300      	movs	r3, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 80164dc:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80164e0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 80164e4:	6893      	ldr	r3, [r2, #8]
 80164e6:	4798      	blx	r3
 80164e8:	e7eb      	b.n	80164c2 <USBD_StdDevReq+0x296>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 80164ea:	7809      	ldrb	r1, [r1, #0]
 80164ec:	29c0      	cmp	r1, #192	; 0xc0
 80164ee:	d10f      	bne.n	8016510 <USBD_StdDevReq+0x2e4>
 80164f0:	886a      	ldrh	r2, [r5, #2]
 80164f2:	b96a      	cbnz	r2, 8016510 <USBD_StdDevReq+0x2e4>
 80164f4:	88ee      	ldrh	r6, [r5, #6]
 80164f6:	2e80      	cmp	r6, #128	; 0x80
 80164f8:	d10a      	bne.n	8016510 <USBD_StdDevReq+0x2e4>
      const uint8_t midi_indicator[128] = {
 80164fa:	490e      	ldr	r1, [pc, #56]	; (8016534 <USBD_StdDevReq+0x308>)
 80164fc:	4632      	mov	r2, r6
 80164fe:	a802      	add	r0, sp, #8
 8016500:	f005 fc92 	bl	801be28 <memcpy>
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x55,0x46,0x1F,
	0x00,0xD8,0x48,0x40,0x37,0x6A,0xF7,0x6A,0x00,0x30,0x00,0x00,0xC7,0x06,0x2E,0x73,
	0x4A,0x2C,0x13,0x7B,0xE9,0x7F,0x32,0x00,0x2A,0x28,0x0D,0x9B,0xFE,0x0B,0x21,0xEF,
	0x42,0x2A,0x2F,0x73,0xB5,0xB8,0xDA,0x76,0xE6,0x79,0xBF,0x0F,0xEB,0x79,0x3E,0x0B};

      USBD_CtlSendData(pdev, (uint8_t *)midi_indicator, 0x80);
 8016504:	4620      	mov	r0, r4
 8016506:	a902      	add	r1, sp, #8
 8016508:	4632      	mov	r2, r6
 801650a:	f7ff fda4 	bl	8016056 <USBD_CtlSendData>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 801650e:	e003      	b.n	8016518 <USBD_StdDevReq+0x2ec>
      USBD_CtlError(pdev , req);
    }
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8016510:	4620      	mov	r0, r4
 8016512:	4629      	mov	r1, r5
 8016514:	f7ff fe02 	bl	801611c <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8016518:	2000      	movs	r0, #0
 801651a:	b022      	add	sp, #136	; 0x88
 801651c:	bd70      	pop	{r4, r5, r6, pc}
 801651e:	bf00      	nop
 8016520:	20000054 	.word	0x20000054
 8016524:	200009a0 	.word	0x200009a0
 8016528:	200009a8 	.word	0x200009a8
 801652c:	2000099c 	.word	0x2000099c
 8016530:	20004df8 	.word	0x20004df8
 8016534:	0801cbde 	.word	0x0801cbde

08016538 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016538:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 801653a:	b1c0      	cbz	r0, 801656e <USBD_GetString+0x36>
 801653c:	2300      	movs	r3, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 801653e:	5cc5      	ldrb	r5, [r0, r3]
 8016540:	b2dc      	uxtb	r4, r3
 8016542:	3301      	adds	r3, #1
 8016544:	2d00      	cmp	r5, #0
 8016546:	d1fa      	bne.n	801653e <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8016548:	1c63      	adds	r3, r4, #1
 801654a:	005b      	lsls	r3, r3, #1
 801654c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 801654e:	2203      	movs	r2, #3
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
 8016550:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8016552:	704a      	strb	r2, [r1, #1]
  * @param  desc : descriptor buffer
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 8016554:	3801      	subs	r0, #1
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8016556:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
 8016558:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801655c:	b13a      	cbz	r2, 801656e <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 801655e:	1c5c      	adds	r4, r3, #1
 8016560:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8016562:	b2e2      	uxtb	r2, r4
 8016564:	3302      	adds	r3, #2
 8016566:	2400      	movs	r4, #0
 8016568:	548c      	strb	r4, [r1, r2]
 801656a:	b2db      	uxtb	r3, r3
 801656c:	e7f4      	b.n	8016558 <USBD_GetString+0x20>
 801656e:	bd30      	pop	{r4, r5, pc}

08016570 <USBH_Connected>:
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 1;
 8016570:	2301      	movs	r3, #1
 8016572:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;
}
 8016576:	2000      	movs	r0, #0
 8016578:	4770      	bx	lr

0801657a <USBH_Disconnected>:
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 0;
 801657a:	2300      	movs	r3, #0
 801657c:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;  
}
 8016580:	4618      	mov	r0, r3
 8016582:	4770      	bx	lr

08016584 <USBH_SOF>:

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
  /* This callback could be used to implement a scheduler process */
  return 0;  
}
 8016584:	2000      	movs	r0, #0
 8016586:	4770      	bx	lr

08016588 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8016588:	b570      	push	{r4, r5, r6, lr}
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 801658a:	2301      	movs	r3, #1
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801658c:	2500      	movs	r5, #0
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 801658e:	2240      	movs	r2, #64	; 0x40
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8016590:	460c      	mov	r4, r1
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8016592:	70cb      	strb	r3, [r1, #3]
  
  phost->Control.state = CTRL_SETUP;
 8016594:	770b      	strb	r3, [r1, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8016596:	718a      	strb	r2, [r1, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8016598:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 801659c:	4606      	mov	r6, r0
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801659e:	700d      	strb	r5, [r1, #0]
  phost->gStateBkp = HOST_IDLE; 
 80165a0:	704d      	strb	r5, [r1, #1]
  phost->EnumState = ENUM_IDLE;
 80165a2:	708d      	strb	r5, [r1, #2]
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 80165a4:	f881 5020 	strb.w	r5, [r1, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 80165a8:	7909      	ldrb	r1, [r1, #4]
 80165aa:	f000 fb21 	bl	8016bf0 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 80165ae:	4630      	mov	r0, r6
 80165b0:	7961      	ldrb	r1, [r4, #5]
 80165b2:	f000 fb1d 	bl	8016bf0 <USBH_Free_Channel>
  return USBH_OK;
}
 80165b6:	4628      	mov	r0, r5
 80165b8:	bd70      	pop	{r4, r5, r6, pc}

080165ba <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 80165ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165be:	9f06      	ldr	r7, [sp, #24]
 80165c0:	4614      	mov	r4, r2
 80165c2:	4698      	mov	r8, r3
 80165c4:	4605      	mov	r5, r0
 80165c6:	460e      	mov	r6, r1
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 80165c8:	f7fd fb7c 	bl	8013cc4 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 80165cc:	2000      	movs	r0, #0
 80165ce:	f7fd fc1d 	bl	8013e0c <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 80165d2:	4621      	mov	r1, r4
 80165d4:	4628      	mov	r0, r5
 80165d6:	f7ff ffd7 	bl	8016588 <USBH_DeInit>
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
  phost->usr_cb = usr_cb;  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 80165da:	4631      	mov	r1, r6
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 80165dc:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
  phost->usr_cb = usr_cb;  
 80165e0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 80165e4:	4628      	mov	r0, r5
 80165e6:	f001 ff09 	bl	80183fc <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 80165ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80165ee:	6818      	ldr	r0, [r3, #0]
 80165f0:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80165f2:	4628      	mov	r0, r5
}
 80165f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80165f8:	f7fd bbe0 	b.w	8013dbc <USB_OTG_BSP_EnableInterrupt>

080165fc <USBH_ErrorHandle>:
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80165fc:	1f0b      	subs	r3, r1, #4
 80165fe:	2b01      	cmp	r3, #1
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 8016600:	b510      	push	{r4, lr}
 8016602:	4604      	mov	r4, r0
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8016604:	d806      	bhi.n	8016614 <USBH_ErrorHandle+0x18>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 8016606:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 801660a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801660c:	4780      	blx	r0
    phost->gState = HOST_ERROR_STATE;   
 801660e:	210a      	movs	r1, #10
 8016610:	7021      	strb	r1, [r4, #0]
 8016612:	bd10      	pop	{r4, pc}
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 8016614:	2906      	cmp	r1, #6
 8016616:	d105      	bne.n	8016624 <USBH_ErrorHandle+0x28>
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
 8016618:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    phost->gState = HOST_ERROR_STATE;   
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
  {
    phost->gState = HOST_ERROR_STATE;  
 801661c:	200a      	movs	r0, #10
 801661e:	7020      	strb	r0, [r4, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 8016620:	680a      	ldr	r2, [r1, #0]
 8016622:	4790      	blx	r2
 8016624:	bd10      	pop	{r4, pc}
	...

08016628 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8016628:	b570      	push	{r4, r5, r6, lr}
 801662a:	4605      	mov	r5, r0
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;

  
  switch (phost->Control.state)
 801662c:	7f08      	ldrb	r0, [r1, #28]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 801662e:	2300      	movs	r3, #0
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8016630:	460c      	mov	r4, r1
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 8016632:	748b      	strb	r3, [r1, #18]

  
  switch (phost->Control.state)
 8016634:	1e41      	subs	r1, r0, #1
 8016636:	290a      	cmp	r1, #10
 8016638:	f200 80cd 	bhi.w	80167d6 <USBH_HandleControl+0x1ae>
 801663c:	e8df f001 	tbb	[pc, r1]
 8016640:	3f370e06 	.word	0x3f370e06
 8016644:	81796759 	.word	0x81796759
 8016648:	aa9a      	.short	0xaa9a
 801664a:	bc          	.byte	0xbc
 801664b:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 801664c:	4628      	mov	r0, r5
 801664e:	f104 0114 	add.w	r1, r4, #20
 8016652:	7962      	ldrb	r2, [r4, #5]
 8016654:	f000 fb0b 	bl	8016c6e <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8016658:	2302      	movs	r3, #2
 801665a:	e0b4      	b.n	80167c6 <USBH_HandleControl+0x19e>
    break; 
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 801665c:	4628      	mov	r0, r5
 801665e:	7961      	ldrb	r1, [r4, #5]
 8016660:	f001 ff0c 	bl	801847c <HCD_GetURB_State>
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8016664:	2801      	cmp	r0, #1
 8016666:	d11a      	bne.n	801669e <USBH_HandleControl+0x76>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016668:	7d22      	ldrb	r2, [r4, #20]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 801666a:	8b61      	ldrh	r1, [r4, #26]
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801666c:	f022 037f 	bic.w	r3, r2, #127	; 0x7f
 8016670:	b2d8      	uxtb	r0, r3
 8016672:	4a5a      	ldr	r2, [pc, #360]	; (80167dc <USBH_HandleControl+0x1b4>)
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8016674:	b139      	cbz	r1, 8016686 <USBH_HandleControl+0x5e>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8016676:	f241 3188 	movw	r1, #5000	; 0x1388
 801667a:	8011      	strh	r1, [r2, #0]
        if (direction == USB_D2H)
 801667c:	b108      	cbz	r0, 8016682 <USBH_HandleControl+0x5a>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 801667e:	2003      	movs	r0, #3
 8016680:	e007      	b.n	8016692 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8016682:	2005      	movs	r0, #5
 8016684:	e005      	b.n	8016692 <USBH_HandleControl+0x6a>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8016686:	2332      	movs	r3, #50	; 0x32
 8016688:	8013      	strh	r3, [r2, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 801668a:	b108      	cbz	r0, 8016690 <USBH_HandleControl+0x68>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 801668c:	2009      	movs	r0, #9
 801668e:	e000      	b.n	8016692 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8016690:	2007      	movs	r0, #7
 8016692:	7720      	strb	r0, [r4, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8016694:	4628      	mov	r0, r5
 8016696:	f001 feed 	bl	8018474 <HCD_GetCurrentFrame>
 801669a:	8220      	strh	r0, [r4, #16]
 801669c:	e09b      	b.n	80167d6 <USBH_HandleControl+0x1ae>
    }
    else if(URB_Status == URB_ERROR)
 801669e:	2803      	cmp	r0, #3
 80166a0:	f040 8099 	bne.w	80167d6 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;     
 80166a4:	210b      	movs	r1, #11
      phost->Control.status = CTRL_XACTERR;
 80166a6:	2005      	movs	r0, #5
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
 80166a8:	7721      	strb	r1, [r4, #28]
      phost->Control.status = CTRL_XACTERR;
 80166aa:	74a0      	strb	r0, [r4, #18]
 80166ac:	e093      	b.n	80167d6 <USBH_HandleControl+0x1ae>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 80166ae:	7923      	ldrb	r3, [r4, #4]
 80166b0:	68a1      	ldr	r1, [r4, #8]
 80166b2:	89a2      	ldrh	r2, [r4, #12]
 80166b4:	4628      	mov	r0, r5
 80166b6:	f000 fb11 	bl	8016cdc <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80166ba:	2304      	movs	r3, #4
 80166bc:	e083      	b.n	80167c6 <USBH_HandleControl+0x19e>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 80166be:	4628      	mov	r0, r5
 80166c0:	7921      	ldrb	r1, [r4, #4]
 80166c2:	f001 fedb 	bl	801847c <HCD_GetURB_State>
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 80166c6:	2801      	cmp	r0, #1
 80166c8:	d102      	bne.n	80166d0 <USBH_HandleControl+0xa8>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80166ca:	2309      	movs	r3, #9
 80166cc:	7723      	strb	r3, [r4, #28]
 80166ce:	e006      	b.n	80166de <USBH_HandleControl+0xb6>
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 80166d0:	2804      	cmp	r0, #4
 80166d2:	d102      	bne.n	80166da <USBH_HandleControl+0xb2>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 80166d4:	7862      	ldrb	r2, [r4, #1]
 80166d6:	7022      	strb	r2, [r4, #0]
 80166d8:	e07d      	b.n	80167d6 <USBH_HandleControl+0x1ae>
    }   
    else if (URB_Status == URB_ERROR)
 80166da:	2803      	cmp	r0, #3
 80166dc:	d06a      	beq.n	80167b4 <USBH_HandleControl+0x18c>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 80166de:	4628      	mov	r0, r5
 80166e0:	f001 fec8 	bl	8018474 <HCD_GetCurrentFrame>
 80166e4:	4a3d      	ldr	r2, [pc, #244]	; (80167dc <USBH_HandleControl+0x1b4>)
 80166e6:	8a21      	ldrh	r1, [r4, #16]
 80166e8:	8813      	ldrh	r3, [r2, #0]
 80166ea:	1a40      	subs	r0, r0, r1
 80166ec:	4298      	cmp	r0, r3
 80166ee:	d972      	bls.n	80167d6 <USBH_HandleControl+0x1ae>
 80166f0:	e060      	b.n	80167b4 <USBH_HandleControl+0x18c>
    }   
    break;
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 80166f2:	7963      	ldrb	r3, [r4, #5]
 80166f4:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 80166f8:	2001      	movs	r0, #1
 80166fa:	f881 08a9 	strb.w	r0, [r1, #2217]	; 0x8a9
        
    USBH_CtlSendData (pdev,
 80166fe:	7963      	ldrb	r3, [r4, #5]
 8016700:	68a1      	ldr	r1, [r4, #8]
 8016702:	89a2      	ldrh	r2, [r4, #12]
 8016704:	4628      	mov	r0, r5
 8016706:	f000 fac9 	bl	8016c9c <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 801670a:	2306      	movs	r3, #6
 801670c:	e05b      	b.n	80167c6 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 801670e:	4628      	mov	r0, r5
 8016710:	7961      	ldrb	r1, [r4, #5]
 8016712:	f001 feb3 	bl	801847c <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 8016716:	2801      	cmp	r0, #1
 8016718:	d101      	bne.n	801671e <USBH_HandleControl+0xf6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 801671a:	2307      	movs	r3, #7
 801671c:	e053      	b.n	80167c6 <USBH_HandleControl+0x19e>
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 801671e:	2804      	cmp	r0, #4
 8016720:	d103      	bne.n	801672a <USBH_HandleControl+0x102>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8016722:	7862      	ldrb	r2, [r4, #1]
      phost->Control.state = CTRL_STALLED;  
 8016724:	230c      	movs	r3, #12
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8016726:	7022      	strb	r2, [r4, #0]
 8016728:	e04d      	b.n	80167c6 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_STALLED;  
    } 
    else if  (URB_Status == URB_NOTREADY)
 801672a:	2802      	cmp	r0, #2
 801672c:	d140      	bne.n	80167b0 <USBH_HandleControl+0x188>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 801672e:	2305      	movs	r3, #5
 8016730:	e049      	b.n	80167c6 <USBH_HandleControl+0x19e>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8016732:	2100      	movs	r1, #0
 8016734:	7923      	ldrb	r3, [r4, #4]
 8016736:	4628      	mov	r0, r5
 8016738:	460a      	mov	r2, r1
 801673a:	f000 facf 	bl	8016cdc <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801673e:	2308      	movs	r3, #8
 8016740:	e041      	b.n	80167c6 <USBH_HandleControl+0x19e>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8016742:	4628      	mov	r0, r5
 8016744:	7921      	ldrb	r1, [r4, #4]
 8016746:	f001 fe99 	bl	801847c <HCD_GetURB_State>
    
    if  ( URB_Status == URB_DONE)
 801674a:	2801      	cmp	r0, #1
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 801674c:	4606      	mov	r6, r0
    
    if  ( URB_Status == URB_DONE)
 801674e:	d027      	beq.n	80167a0 <USBH_HandleControl+0x178>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.state = CTRL_COMPLETE;
    }
    
    else if (URB_Status == URB_ERROR)
 8016750:	2803      	cmp	r0, #3
 8016752:	d02f      	beq.n	80167b4 <USBH_HandleControl+0x18c>
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8016754:	4628      	mov	r0, r5
 8016756:	f001 fe8d 	bl	8018474 <HCD_GetCurrentFrame>
      - phost->Control.timer) > timeout)
 801675a:	4a20      	ldr	r2, [pc, #128]	; (80167dc <USBH_HandleControl+0x1b4>)
 801675c:	8a21      	ldrh	r1, [r4, #16]
 801675e:	8813      	ldrh	r3, [r2, #0]
 8016760:	1a40      	subs	r0, r0, r1
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8016762:	4298      	cmp	r0, r3
 8016764:	d826      	bhi.n	80167b4 <USBH_HandleControl+0x18c>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 8016766:	2e04      	cmp	r6, #4
 8016768:	d135      	bne.n	80167d6 <USBH_HandleControl+0x1ae>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801676a:	7861      	ldrb	r1, [r4, #1]
      phost->Control.status = CTRL_STALL;
 801676c:	74a6      	strb	r6, [r4, #18]
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801676e:	7021      	strb	r1, [r4, #0]
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
 8016770:	2003      	movs	r0, #3
 8016772:	bd70      	pop	{r4, r5, r6, pc}
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8016774:	7960      	ldrb	r0, [r4, #5]
 8016776:	3045      	adds	r0, #69	; 0x45
 8016778:	eb05 1140 	add.w	r1, r5, r0, lsl #5
    USBH_CtlSendData (pdev,
 801677c:	4628      	mov	r0, r5
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 801677e:	7a4a      	ldrb	r2, [r1, #9]
 8016780:	f082 0301 	eor.w	r3, r2, #1
 8016784:	724b      	strb	r3, [r1, #9]
    USBH_CtlSendData (pdev,
 8016786:	2100      	movs	r1, #0
 8016788:	7963      	ldrb	r3, [r4, #5]
 801678a:	460a      	mov	r2, r1
 801678c:	f000 fa86 	bl	8016c9c <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016790:	230a      	movs	r3, #10
 8016792:	e018      	b.n	80167c6 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8016794:	4628      	mov	r0, r5
 8016796:	7961      	ldrb	r1, [r4, #5]
 8016798:	f001 fe70 	bl	801847c <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 801679c:	2801      	cmp	r0, #1
 801679e:	d103      	bne.n	80167a8 <USBH_HandleControl+0x180>
    { 
      phost->gState =   phost->gStateBkp; 
 80167a0:	7860      	ldrb	r0, [r4, #1]
      phost->Control.state = CTRL_COMPLETE; 
 80167a2:	230d      	movs	r3, #13
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp; 
 80167a4:	7020      	strb	r0, [r4, #0]
 80167a6:	e00e      	b.n	80167c6 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_COMPLETE; 
    }
    else if  (URB_Status == URB_NOTREADY)
 80167a8:	2802      	cmp	r0, #2
 80167aa:	d101      	bne.n	80167b0 <USBH_HandleControl+0x188>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80167ac:	2309      	movs	r3, #9
 80167ae:	e00a      	b.n	80167c6 <USBH_HandleControl+0x19e>
    }      
    else if (URB_Status == URB_ERROR)
 80167b0:	2803      	cmp	r0, #3
 80167b2:	d110      	bne.n	80167d6 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;      
 80167b4:	230b      	movs	r3, #11
 80167b6:	e006      	b.n	80167c6 <USBH_HandleControl+0x19e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80167b8:	7ba2      	ldrb	r2, [r4, #14]
 80167ba:	1c53      	adds	r3, r2, #1
 80167bc:	b2d8      	uxtb	r0, r3
 80167be:	2802      	cmp	r0, #2
 80167c0:	73a0      	strb	r0, [r4, #14]
 80167c2:	d802      	bhi.n	80167ca <USBH_HandleControl+0x1a2>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 80167c4:	2301      	movs	r3, #1
 80167c6:	7723      	strb	r3, [r4, #28]
 80167c8:	e005      	b.n	80167d6 <USBH_HandleControl+0x1ae>
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
 80167ca:	7862      	ldrb	r2, [r4, #1]
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 80167cc:	2108      	movs	r1, #8
 80167ce:	74a1      	strb	r1, [r4, #18]
      phost->gState =   phost->gStateBkp;
 80167d0:	7022      	strb	r2, [r4, #0]
      
      status = USBH_FAIL;
 80167d2:	2002      	movs	r0, #2
 80167d4:	bd70      	pop	{r4, r5, r6, pc}
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 80167d6:	2000      	movs	r0, #0
    
  default:
    break;
  }
  return status;
}
 80167d8:	bd70      	pop	{r4, r5, r6, pc}
 80167da:	bf00      	nop
 80167dc:	200009ac 	.word	0x200009ac

080167e0 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 80167e0:	b570      	push	{r4, r5, r6, lr}
 80167e2:	b094      	sub	sp, #80	; 0x50
  volatile USBH_Status status = USBH_FAIL;
 80167e4:	2602      	movs	r6, #2
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 80167e6:	4605      	mov	r5, r0
 80167e8:	460c      	mov	r4, r1
  volatile USBH_Status status = USBH_FAIL;
 80167ea:	f88d 600f 	strb.w	r6, [sp, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 80167ee:	f001 fe3e 	bl	801846e <HCD_IsDeviceConnected>
 80167f2:	b920      	cbnz	r0, 80167fe <USBH_Process+0x1e>
 80167f4:	7823      	ldrb	r3, [r4, #0]
 80167f6:	b113      	cbz	r3, 80167fe <USBH_Process+0x1e>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 80167f8:	42b3      	cmp	r3, r6
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80167fa:	bf18      	it	ne
 80167fc:	7026      	strbne	r6, [r4, #0]
    }
  }
    
  switch (phost->gState)
 80167fe:	7820      	ldrb	r0, [r4, #0]
 8016800:	280a      	cmp	r0, #10
 8016802:	f200 8190 	bhi.w	8016b26 <USBH_Process+0x346>
 8016806:	e8df f010 	tbh	[pc, r0, lsl #1]
 801680a:	000b      	.short	0x000b
 801680c:	01760017 	.word	0x01760017
 8016810:	0053018e 	.word	0x0053018e
 8016814:	01530146 	.word	0x01530146
 8016818:	01360161 	.word	0x01360161
 801681c:	0166018e 	.word	0x0166018e
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8016820:	4628      	mov	r0, r5
 8016822:	f001 fe24 	bl	801846e <HCD_IsDeviceConnected>
 8016826:	2800      	cmp	r0, #0
 8016828:	f000 817d 	beq.w	8016b26 <USBH_Process+0x346>
    {
      phost->gState = HOST_DEV_ATTACHED;
 801682c:	2201      	movs	r2, #1
 801682e:	7022      	strb	r2, [r4, #0]
      USB_OTG_BSP_mDelay(100);
 8016830:	2064      	movs	r0, #100	; 0x64
 8016832:	f7fd fae4 	bl	8013dfe <USB_OTG_BSP_mDelay>
 8016836:	e176      	b.n	8016b26 <USBH_Process+0x346>
    }
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8016838:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 801683c:	68b0      	ldr	r0, [r6, #8]
 801683e:	4780      	blx	r0
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8016840:	2100      	movs	r1, #0
 8016842:	4628      	mov	r0, r5
 8016844:	f000 f9bb 	bl	8016bbe <USBH_Alloc_Channel>
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8016848:	2180      	movs	r1, #128	; 0x80
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 801684a:	7160      	strb	r0, [r4, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 801684c:	4628      	mov	r0, r5
 801684e:	f000 f9b6 	bl	8016bbe <USBH_Alloc_Channel>
 8016852:	7120      	strb	r0, [r4, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8016854:	4628      	mov	r0, r5
 8016856:	f001 fe05 	bl	8018464 <HCD_ResetPort>
 801685a:	4606      	mov	r6, r0
 801685c:	2800      	cmp	r0, #0
 801685e:	f040 8162 	bne.w	8016b26 <USBH_Process+0x346>
    {
      phost->usr_cb->ResetDevice();
 8016862:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016866:	68cb      	ldr	r3, [r1, #12]
 8016868:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 801686a:	4628      	mov	r0, r5
 801686c:	f001 fdf4 	bl	8018458 <HCD_GetCurrentSpeed>
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8016870:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      phost->usr_cb->ResetDevice();
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8016874:	b2c0      	uxtb	r0, r0
 8016876:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 801687a:	2204      	movs	r2, #4
 801687c:	7022      	strb	r2, [r4, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 801687e:	698b      	ldr	r3, [r1, #24]
 8016880:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8016882:	79a0      	ldrb	r0, [r4, #6]
 8016884:	7921      	ldrb	r1, [r4, #4]
 8016886:	f894 2020 	ldrb.w	r2, [r4, #32]
 801688a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801688e:	9001      	str	r0, [sp, #4]
 8016890:	9600      	str	r6, [sp, #0]
 8016892:	4628      	mov	r0, r5
 8016894:	f000 f94c 	bl	8016b30 <USBH_Open_Channel>
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8016898:	79a0      	ldrb	r0, [r4, #6]
 801689a:	7961      	ldrb	r1, [r4, #5]
 801689c:	9001      	str	r0, [sp, #4]
 801689e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80168a2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80168a6:	9600      	str	r6, [sp, #0]
 80168a8:	4628      	mov	r0, r5
 80168aa:	f000 f941 	bl	8016b30 <USBH_Open_Channel>
 80168ae:	e13a      	b.n	8016b26 <USBH_Process+0x346>
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  USBH_Status Status = USBH_BUSY;  
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 80168b0:	78a3      	ldrb	r3, [r4, #2]
 80168b2:	2b09      	cmp	r3, #9
 80168b4:	f200 8137 	bhi.w	8016b26 <USBH_Process+0x346>
 80168b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80168bc:	002c000a 	.word	0x002c000a
 80168c0:	0064003c 	.word	0x0064003c
 80168c4:	0082006e 	.word	0x0082006e
 80168c8:	00b4009b 	.word	0x00b4009b
 80168cc:	00d700cc 	.word	0x00d700cc
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 80168d0:	4628      	mov	r0, r5
 80168d2:	4621      	mov	r1, r4
 80168d4:	2208      	movs	r2, #8
 80168d6:	f000 fab0 	bl	8016e3a <USBH_Get_DevDesc>
 80168da:	4606      	mov	r6, r0
 80168dc:	2800      	cmp	r0, #0
 80168de:	f040 8122 	bne.w	8016b26 <USBH_Process+0x346>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 80168e2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80168e6:	71a0      	strb	r0, [r4, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 80168e8:	4628      	mov	r0, r5
 80168ea:	f001 fdbb 	bl	8018464 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 80168ee:	79a2      	ldrb	r2, [r4, #6]
 80168f0:	7961      	ldrb	r1, [r4, #5]
 80168f2:	9201      	str	r2, [sp, #4]
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80168f4:	2301      	movs	r3, #1
 80168f6:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 80168f8:	4632      	mov	r2, r6
 80168fa:	4633      	mov	r3, r6
 80168fc:	9600      	str	r6, [sp, #0]
 80168fe:	4628      	mov	r0, r5
 8016900:	f000 f940 	bl	8016b84 <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8016904:	79a0      	ldrb	r0, [r4, #6]
 8016906:	7921      	ldrb	r1, [r4, #4]
 8016908:	9001      	str	r0, [sp, #4]
 801690a:	9600      	str	r6, [sp, #0]
 801690c:	4628      	mov	r0, r5
 801690e:	4632      	mov	r2, r6
 8016910:	4633      	mov	r3, r6
 8016912:	e034      	b.n	801697e <USBH_Process+0x19e>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8016914:	4628      	mov	r0, r5
 8016916:	4621      	mov	r1, r4
 8016918:	2212      	movs	r2, #18
 801691a:	f000 fa8e 	bl	8016e3a <USBH_Get_DevDesc>
 801691e:	2800      	cmp	r0, #0
 8016920:	f040 8101 	bne.w	8016b26 <USBH_Process+0x346>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8016924:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016928:	f104 0022 	add.w	r0, r4, #34	; 0x22
 801692c:	69ca      	ldr	r2, [r1, #28]
 801692e:	4790      	blx	r2
      phost->EnumState = ENUM_SET_ADDR;
 8016930:	2002      	movs	r0, #2
 8016932:	e098      	b.n	8016a66 <USBH_Process+0x286>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8016934:	4628      	mov	r0, r5
 8016936:	4621      	mov	r1, r4
 8016938:	2201      	movs	r2, #1
 801693a:	f000 fbc3 	bl	80170c4 <USBH_SetAddress>
 801693e:	4606      	mov	r6, r0
 8016940:	2800      	cmp	r0, #0
 8016942:	f040 80f0 	bne.w	8016b26 <USBH_Process+0x346>
    {
      USB_OTG_BSP_mDelay(2);
 8016946:	2002      	movs	r0, #2
 8016948:	f7fd fa59 	bl	8013dfe <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 801694c:	2101      	movs	r1, #1
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 801694e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
    {
      USB_OTG_BSP_mDelay(2);
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8016952:	f884 1020 	strb.w	r1, [r4, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8016956:	6a02      	ldr	r2, [r0, #32]
 8016958:	4790      	blx	r2
      phost->EnumState = ENUM_GET_CFG_DESC;
 801695a:	2303      	movs	r3, #3
 801695c:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 801695e:	7921      	ldrb	r1, [r4, #4]
 8016960:	f894 2020 	ldrb.w	r2, [r4, #32]
 8016964:	9600      	str	r6, [sp, #0]
 8016966:	4633      	mov	r3, r6
 8016968:	9601      	str	r6, [sp, #4]
 801696a:	4628      	mov	r0, r5
 801696c:	f000 f90a 	bl	8016b84 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8016970:	7961      	ldrb	r1, [r4, #5]
 8016972:	f894 2020 	ldrb.w	r2, [r4, #32]
 8016976:	9600      	str	r6, [sp, #0]
 8016978:	9601      	str	r6, [sp, #4]
 801697a:	4628      	mov	r0, r5
 801697c:	4633      	mov	r3, r6
 801697e:	f000 f901 	bl	8016b84 <USBH_Modify_Channel>
 8016982:	e0d0      	b.n	8016b26 <USBH_Process+0x346>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8016984:	4628      	mov	r0, r5
 8016986:	4621      	mov	r1, r4
 8016988:	2209      	movs	r2, #9
 801698a:	f000 faad 	bl	8016ee8 <USBH_Get_CfgDesc>
 801698e:	2800      	cmp	r0, #0
 8016990:	f040 80c9 	bne.w	8016b26 <USBH_Process+0x346>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8016994:	2004      	movs	r0, #4
 8016996:	e066      	b.n	8016a66 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8016998:	4628      	mov	r0, r5
 801699a:	4621      	mov	r1, r4
 801699c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801699e:	f000 faa3 	bl	8016ee8 <USBH_Get_CfgDesc>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	f040 80bf 	bne.w	8016b26 <USBH_Process+0x346>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 80169a8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80169ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80169b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b2:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 80169b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80169ba:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80169bc:	2005      	movs	r0, #5
 80169be:	e052      	b.n	8016a66 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 80169c0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80169c4:	b172      	cbz	r2, 80169e4 <USBH_Process+0x204>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 80169c6:	20ff      	movs	r0, #255	; 0xff
 80169c8:	9000      	str	r0, [sp, #0]
 80169ca:	4621      	mov	r1, r4
 80169cc:	4628      	mov	r0, r5
 80169ce:	ab04      	add	r3, sp, #16
 80169d0:	f000 fa0b 	bl	8016dea <USBH_Get_StringDesc>
 80169d4:	2800      	cmp	r0, #0
 80169d6:	f040 80a6 	bne.w	8016b26 <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 80169da:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80169de:	a804      	add	r0, sp, #16
 80169e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80169e2:	e003      	b.n	80169ec <USBH_Process+0x20c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 80169e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80169e8:	4850      	ldr	r0, [pc, #320]	; (8016b2c <USBH_Process+0x34c>)
 80169ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80169ec:	4788      	blx	r1
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80169ee:	2006      	movs	r0, #6
 80169f0:	e039      	b.n	8016a66 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 80169f2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80169f6:	b172      	cbz	r2, 8016a16 <USBH_Process+0x236>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 80169f8:	20ff      	movs	r0, #255	; 0xff
 80169fa:	9000      	str	r0, [sp, #0]
 80169fc:	4621      	mov	r1, r4
 80169fe:	4628      	mov	r0, r5
 8016a00:	ab04      	add	r3, sp, #16
 8016a02:	f000 f9f2 	bl	8016dea <USBH_Get_StringDesc>
 8016a06:	2800      	cmp	r0, #0
 8016a08:	f040 808d 	bne.w	8016b26 <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8016a0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8016a10:	a804      	add	r0, sp, #16
 8016a12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8016a14:	e003      	b.n	8016a1e <USBH_Process+0x23e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 8016a16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8016a1a:	4844      	ldr	r0, [pc, #272]	; (8016b2c <USBH_Process+0x34c>)
 8016a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016a1e:	4788      	blx	r1
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016a20:	2007      	movs	r0, #7
 8016a22:	e020      	b.n	8016a66 <USBH_Process+0x286>
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8016a24:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8016a28:	b16a      	cbz	r2, 8016a46 <USBH_Process+0x266>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8016a2a:	20ff      	movs	r0, #255	; 0xff
 8016a2c:	9000      	str	r0, [sp, #0]
 8016a2e:	4621      	mov	r1, r4
 8016a30:	4628      	mov	r0, r5
 8016a32:	ab04      	add	r3, sp, #16
 8016a34:	f000 f9d9 	bl	8016dea <USBH_Get_StringDesc>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	d174      	bne.n	8016b26 <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8016a3c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8016a40:	a804      	add	r0, sp, #16
 8016a42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8016a44:	e003      	b.n	8016a4e <USBH_Process+0x26e>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 8016a46:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8016a4a:	4838      	ldr	r0, [pc, #224]	; (8016b2c <USBH_Process+0x34c>)
 8016a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016a4e:	4788      	blx	r1
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8016a50:	2008      	movs	r0, #8
 8016a52:	e008      	b.n	8016a66 <USBH_Process+0x286>
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 8016a54:	4628      	mov	r0, r5
 8016a56:	4621      	mov	r1, r4
 8016a58:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8016a5c:	f000 fb40 	bl	80170e0 <USBH_SetCfg>
 8016a60:	2800      	cmp	r0, #0
 8016a62:	d160      	bne.n	8016b26 <USBH_Process+0x346>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8016a64:	2009      	movs	r0, #9
 8016a66:	70a0      	strb	r0, [r4, #2]
 8016a68:	e05d      	b.n	8016b26 <USBH_Process+0x346>
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8016a6a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016a6e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8016a70:	4790      	blx	r2
      
      phost->gState  = HOST_USR_INPUT;    
 8016a72:	2208      	movs	r2, #8
 8016a74:	e056      	b.n	8016b24 <USBH_Process+0x344>
    }
    break;
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8016a76:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016a7a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8016a7c:	4790      	blx	r2
 8016a7e:	2801      	cmp	r0, #1
 8016a80:	d151      	bne.n	8016b26 <USBH_Process+0x346>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8016a82:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8016a86:	4628      	mov	r0, r5
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	4621      	mov	r1, r4
 8016a8c:	4790      	blx	r2
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	d149      	bne.n	8016b26 <USBH_Process+0x346>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8016a92:	2205      	movs	r2, #5
 8016a94:	e046      	b.n	8016b24 <USBH_Process+0x344>
    }   
    break;
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8016a96:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	688a      	ldr	r2, [r1, #8]
 8016a9e:	4621      	mov	r1, r4
 8016aa0:	4790      	blx	r2
 8016aa2:	f88d 000f 	strb.w	r0, [sp, #15]
    
     if(status == USBH_OK)
 8016aa6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8016aaa:	b948      	cbnz	r0, 8016ac0 <USBH_Process+0x2e0>
     {
       phost->gState  = HOST_CLASS;
 8016aac:	2206      	movs	r2, #6
 8016aae:	e039      	b.n	8016b24 <USBH_Process+0x344>
 
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8016ab0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	68c3      	ldr	r3, [r0, #12]
 8016ab8:	4628      	mov	r0, r5
 8016aba:	4798      	blx	r3
 8016abc:	f88d 000f 	strb.w	r0, [sp, #15]
    USBH_ErrorHandle(phost, status);
 8016ac0:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f7ff fd99 	bl	80165fc <USBH_ErrorHandle>
    break;       
 8016aca:	e02c      	b.n	8016b26 <USBH_Process+0x346>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 8016acc:	4628      	mov	r0, r5
 8016ace:	4621      	mov	r1, r4
 8016ad0:	f7ff fdaa 	bl	8016628 <USBH_HandleControl>
    break;
 8016ad4:	e027      	b.n	8016b26 <USBH_Process+0x346>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f7ff fd55 	bl	8016588 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8016ade:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016ae2:	684b      	ldr	r3, [r1, #4]
 8016ae4:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8016ae6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8016aea:	f104 0120 	add.w	r1, r4, #32
 8016aee:	6842      	ldr	r2, [r0, #4]
 8016af0:	4628      	mov	r0, r5
 8016af2:	4790      	blx	r2
    break;
 8016af4:	e017      	b.n	8016b26 <USBH_Process+0x346>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8016af6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8016afa:	690b      	ldr	r3, [r1, #16]
 8016afc:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8016afe:	4621      	mov	r1, r4
 8016b00:	4628      	mov	r0, r5
 8016b02:	f7ff fd41 	bl	8016588 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8016b06:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8016b0a:	6850      	ldr	r0, [r2, #4]
 8016b0c:	4780      	blx	r0
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8016b0e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016b12:	4628      	mov	r0, r5
 8016b14:	684b      	ldr	r3, [r1, #4]
 8016b16:	f104 0120 	add.w	r1, r4, #32
 8016b1a:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8016b1c:	4628      	mov	r0, r5
 8016b1e:	f000 f873 	bl	8016c08 <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 8016b22:	2200      	movs	r2, #0
 8016b24:	7022      	strb	r2, [r4, #0]
    
  default :
    break;
  }

}
 8016b26:	b014      	add	sp, #80	; 0x50
 8016b28:	bd70      	pop	{r4, r5, r6, pc}
 8016b2a:	bf00      	nop
 8016b2c:	0801cc5e 	.word	0x0801cc5e

08016b30 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8016b30:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8016b32:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 8016b36:	f8b4 5a70 	ldrh.w	r5, [r4, #2672]	; 0xa70
 8016b3a:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 8016b3e:	f005 067f 	and.w	r6, r5, #127	; 0x7f
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8016b42:	f884 2890 	strb.w	r2, [r4, #2192]	; 0x890
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8016b46:	f89d 2010 	ldrb.w	r2, [sp, #16]
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8016b4a:	f884 6891 	strb.w	r6, [r4, #2193]	; 0x891
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8016b4e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 8016b52:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8016b56:	f884 2895 	strb.w	r2, [r4, #2197]	; 0x895
  pdev->host.hc[hc_num].max_packet = mps; 
 8016b5a:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  pdev->host.hc[hc_num].speed = speed; 
 8016b5e:	f884 3893 	strb.w	r3, [r4, #2195]	; 0x893
  pdev->host.hc[hc_num].toggle_in = 0; 
 8016b62:	f101 0245 	add.w	r2, r1, #69	; 0x45
 8016b66:	eb00 1242 	add.w	r2, r0, r2, lsl #5

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
  pdev->host.hc[hc_num].max_packet = mps; 
 8016b6a:	f8a4 5896 	strh.w	r5, [r4, #2198]	; 0x896
  pdev->host.hc[hc_num].speed = speed; 
  pdev->host.hc[hc_num].toggle_in = 0; 
 8016b6e:	2500      	movs	r5, #0
 8016b70:	7215      	strb	r5, [r2, #8]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8016b72:	7255      	strb	r5, [r2, #9]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8016b74:	b913      	cbnz	r3, 8016b7c <USBH_Open_Channel+0x4c>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8016b76:	2301      	movs	r3, #1
 8016b78:	f884 3894 	strb.w	r3, [r4, #2196]	; 0x894
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8016b7c:	f000 fd33 	bl	80175e6 <USB_OTG_HC_Init>
  
  return HC_OK; 

}
 8016b80:	2000      	movs	r0, #0
 8016b82:	bd70      	pop	{r4, r5, r6, pc}

08016b84 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8016b84:	b570      	push	{r4, r5, r6, lr}
 8016b86:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  
  if(dev_address != 0)
 8016b8a:	b11a      	cbz	r2, 8016b94 <USBH_Modify_Channel+0x10>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8016b8c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8016b90:	f885 2890 	strb.w	r2, [r5, #2192]	; 0x890
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8016b94:	014a      	lsls	r2, r1, #5
 8016b96:	1885      	adds	r5, r0, r2
 8016b98:	f8b5 6896 	ldrh.w	r6, [r5, #2198]	; 0x896
 8016b9c:	42a6      	cmp	r6, r4
 8016b9e:	d002      	beq.n	8016ba6 <USBH_Modify_Channel+0x22>
 8016ba0:	b10c      	cbz	r4, 8016ba6 <USBH_Modify_Channel+0x22>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8016ba2:	f8a5 4896 	strh.w	r4, [r5, #2198]	; 0x896
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8016ba6:	1882      	adds	r2, r0, r2
 8016ba8:	f892 4893 	ldrb.w	r4, [r2, #2195]	; 0x893
 8016bac:	429c      	cmp	r4, r3
 8016bae:	d002      	beq.n	8016bb6 <USBH_Modify_Channel+0x32>
 8016bb0:	b10b      	cbz	r3, 8016bb6 <USBH_Modify_Channel+0x32>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8016bb2:	f882 3893 	strb.w	r3, [r2, #2195]	; 0x893
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8016bb6:	f000 fd16 	bl	80175e6 <USB_OTG_HC_Init>
  return HC_OK; 

}
 8016bba:	2000      	movs	r0, #0
 8016bbc:	bd70      	pop	{r4, r5, r6, pc}

08016bbe <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8016bbe:	b510      	push	{r4, lr}
 8016bc0:	2300      	movs	r3, #0
  * @brief  USBH_Alloc_Channel
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
 8016bc2:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8016bc6:	b2da      	uxtb	r2, r3
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8016bc8:	f9b4 4a70 	ldrsh.w	r4, [r4, #2672]	; 0xa70
 8016bcc:	2c00      	cmp	r4, #0
 8016bce:	db08      	blt.n	8016be2 <USBH_Alloc_Channel+0x24>
  
  hc_num =  USBH_GetFreeChannel(pdev);

  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8016bd0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016bd4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8016bd8:	ea6f 4351 	mvn.w	r3, r1, lsr #17
 8016bdc:	f8a0 3a70 	strh.w	r3, [r0, #2672]	; 0xa70
 8016be0:	e004      	b.n	8016bec <USBH_Alloc_Channel+0x2e>
 8016be2:	3301      	adds	r3, #1
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8016be4:	2b08      	cmp	r3, #8
 8016be6:	d1ec      	bne.n	8016bc2 <USBH_Alloc_Channel+0x4>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8016be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
  }
  return hc_num;
}
 8016bec:	b2d0      	uxtb	r0, r2
 8016bee:	bd10      	pop	{r4, pc}

08016bf0 <USBH_Free_Channel>:
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
   if(idx < HC_MAX)
 8016bf0:	2907      	cmp	r1, #7
 8016bf2:	d807      	bhi.n	8016c04 <USBH_Free_Channel+0x14>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8016bf4:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8016bf8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8016bfc:	8903      	ldrh	r3, [r0, #8]
 8016bfe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8016c02:	8102      	strh	r2, [r0, #8]
   }
   return USBH_OK;
}
 8016c04:	2000      	movs	r0, #0
 8016c06:	4770      	bx	lr

08016c08 <USBH_DeAllocate_AllChannel>:
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
   {
	 pdev->host.channel[idx] = 0;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	f8a0 3a74 	strh.w	r3, [r0, #2676]	; 0xa74
 8016c0e:	f8a0 3a76 	strh.w	r3, [r0, #2678]	; 0xa76
 8016c12:	f8a0 3a78 	strh.w	r3, [r0, #2680]	; 0xa78
 8016c16:	f8a0 3a7a 	strh.w	r3, [r0, #2682]	; 0xa7a
 8016c1a:	f8a0 3a7c 	strh.w	r3, [r0, #2684]	; 0xa7c
 8016c1e:	f8a0 3a7e 	strh.w	r3, [r0, #2686]	; 0xa7e
   }
   return USBH_OK;
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	4770      	bx	lr

08016c26 <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8016c26:	78c8      	ldrb	r0, [r1, #3]
 8016c28:	2801      	cmp	r0, #1
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8016c2a:	b510      	push	{r4, lr}
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8016c2c:	d004      	beq.n	8016c38 <USBH_CtlReq+0x12>
 8016c2e:	2802      	cmp	r0, #2
 8016c30:	f04f 0301 	mov.w	r3, #1
 8016c34:	d119      	bne.n	8016c6a <USBH_CtlReq+0x44>
 8016c36:	e008      	b.n	8016c4a <USBH_CtlReq+0x24>
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8016c38:	780c      	ldrb	r4, [r1, #0]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
  phost->Control.buff = buff; 
  phost->Control.length = length;
 8016c3a:	818b      	strh	r3, [r1, #12]
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8016c3c:	704c      	strb	r4, [r1, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8016c3e:	2407      	movs	r4, #7
 8016c40:	700c      	strb	r4, [r1, #0]
  phost->Control.buff = buff; 
 8016c42:	608a      	str	r2, [r1, #8]
  phost->Control.length = length;
  phost->Control.state = CTRL_SETUP;  
 8016c44:	7708      	strb	r0, [r1, #28]
  switch (phost->RequestState)
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
    phost->RequestState = CMD_WAIT;
 8016c46:	2302      	movs	r3, #2
 8016c48:	e008      	b.n	8016c5c <USBH_CtlReq+0x36>
    status = USBH_BUSY;
    break;
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
 8016c4a:	7f0a      	ldrb	r2, [r1, #28]
 8016c4c:	2a0d      	cmp	r2, #13
 8016c4e:	d103      	bne.n	8016c58 <USBH_CtlReq+0x32>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      phost->Control.state =CTRL_IDLE;  
 8016c50:	2000      	movs	r0, #0
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8016c52:	70cb      	strb	r3, [r1, #3]
      phost->Control.state =CTRL_IDLE;  
 8016c54:	7708      	strb	r0, [r1, #28]
 8016c56:	bd10      	pop	{r4, pc}
      status = USBH_OK;      
    }
    else if  (phost->Control.state == CTRL_ERROR)
 8016c58:	2a0b      	cmp	r2, #11
 8016c5a:	d101      	bne.n	8016c60 <USBH_CtlReq+0x3a>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 8016c5c:	70cb      	strb	r3, [r1, #3]
 8016c5e:	bd10      	pop	{r4, pc}
      status = USBH_FAIL;
    }   
     else if  (phost->Control.state == CTRL_STALLED )
 8016c60:	2a0c      	cmp	r2, #12
 8016c62:	d102      	bne.n	8016c6a <USBH_CtlReq+0x44>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8016c64:	70cb      	strb	r3, [r1, #3]
      status = USBH_NOT_SUPPORTED;
 8016c66:	2003      	movs	r0, #3
 8016c68:	bd10      	pop	{r4, pc}
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
 8016c6a:	4618      	mov	r0, r3
    
  default:
    break; 
  }
  return status;
}
 8016c6c:	bd10      	pop	{r4, pc}

08016c6e <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8016c6e:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016c70:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8016c74:	2500      	movs	r5, #0
 8016c76:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8016c7a:	f102 0515 	add.w	r5, r2, #21
 8016c7e:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 8016c82:	2503      	movs	r5, #3
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016c84:	f8c3 15fc 	str.w	r1, [r3, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 8016c88:	2108      	movs	r1, #8
 8016c8a:	f8c4 18a0 	str.w	r1, [r4, #2208]	; 0x8a0
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8016c8e:	f883 55f8 	strb.w	r5, [r3, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 8016c92:	4611      	mov	r1, r2
 8016c94:	f001 fbf6 	bl	8018484 <HCD_SubmitRequest>
}
 8016c98:	b2c0      	uxtb	r0, r0
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}

08016c9c <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016c9c:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016c9e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8016ca2:	2500      	movs	r5, #0
 8016ca4:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016ca8:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
 8016cac:	4625      	mov	r5, r4
  pdev->host.hc[hc_num].xfer_len = length;
 8016cae:	f8c4 28a0 	str.w	r2, [r4, #2208]	; 0x8a0
 
  if ( length == 0 )
 8016cb2:	b912      	cbnz	r2, 8016cba <USBH_CtlSendData+0x1e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	f884 18a9 	strb.w	r1, [r4, #2217]	; 0x8a9
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016cba:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8016cbe:	f892 18a9 	ldrb.w	r1, [r2, #2217]	; 0x8a9
 8016cc2:	f103 0215 	add.w	r2, r3, #21
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8016cc6:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016cca:	b101      	cbz	r1, 8016cce <USBH_CtlSendData+0x32>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016ccc:	2102      	movs	r1, #2
 8016cce:	f882 15f8 	strb.w	r1, [r2, #1528]	; 0x5f8
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	f001 fbd6 	bl	8018484 <HCD_SubmitRequest>
   
  return USBH_OK;
}
 8016cd8:	2000      	movs	r0, #0
 8016cda:	bd38      	pop	{r3, r4, r5, pc}

08016cdc <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016cdc:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;
 8016cde:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016ce2:	2601      	movs	r6, #1
 8016ce4:	f885 6892 	strb.w	r6, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016ce8:	f103 0615 	add.w	r6, r3, #21
 8016cec:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8016cf0:	2602      	movs	r6, #2
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016cf2:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
                                uint16_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016cf6:	f884 65f8 	strb.w	r6, [r4, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = length;  
 8016cfa:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0

  HCD_SubmitRequest (pdev , hc_num);   
 8016cfe:	4619      	mov	r1, r3
 8016d00:	f001 fbc0 	bl	8018484 <HCD_SubmitRequest>
  
  return USBH_OK;
  
}
 8016d04:	2000      	movs	r0, #0
 8016d06:	bd70      	pop	{r4, r5, r6, pc}

08016d08 <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8016d08:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016d0a:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016d0e:	2400      	movs	r4, #0
 8016d10:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d14:	f103 0415 	add.w	r4, r3, #21
 8016d18:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;  
 8016d1c:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d20:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;  

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016d24:	f895 18a9 	ldrb.w	r1, [r5, #2217]	; 0x8a9
 8016d28:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8016d2c:	b101      	cbz	r1, 8016d30 <USBH_BulkSendData+0x28>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016d2e:	2102      	movs	r1, #2
 8016d30:	7221      	strb	r1, [r4, #8]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8016d32:	4619      	mov	r1, r3
 8016d34:	f001 fba6 	bl	8018484 <HCD_SubmitRequest>
  return USBH_OK;
}
 8016d38:	2000      	movs	r0, #0
 8016d3a:	bd38      	pop	{r3, r4, r5, pc}

08016d3c <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016d3c:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8016d3e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016d42:	2401      	movs	r4, #1
 8016d44:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d48:	f103 0415 	add.w	r4, r3, #21
 8016d4c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 8016d50:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
  pdev->host.hc[hc_num].ep_is_in = 1;   
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d54:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8016d58:	f895 18a8 	ldrb.w	r1, [r5, #2216]	; 0x8a8
 8016d5c:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8016d60:	b101      	cbz	r1, 8016d64 <USBH_BulkReceiveData+0x28>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016d62:	2102      	movs	r1, #2
 8016d64:	7221      	strb	r1, [r4, #8]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8016d66:	4619      	mov	r1, r3
 8016d68:	f001 fb8c 	bl	8018484 <HCD_SubmitRequest>
  return USBH_OK;
}
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	bd38      	pop	{r3, r4, r5, pc}

08016d70 <USBH_InterruptReceiveData>:
  */
USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8016d70:	b538      	push	{r3, r4, r5, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;  
 8016d72:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016d76:	2401      	movs	r4, #1
 8016d78:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d7c:	f103 0415 	add.w	r4, r3, #21
 8016d80:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 8016d84:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016d88:	f103 0245 	add.w	r2, r3, #69	; 0x45
                                uint8_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;  
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016d8c:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8016d90:	eb00 1142 	add.w	r1, r0, r2, lsl #5
 8016d94:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8016d98:	7a09      	ldrb	r1, [r1, #8]
 8016d9a:	b101      	cbz	r1, 8016d9e <USBH_InterruptReceiveData+0x2e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016d9c:	2102      	movs	r1, #2
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016d9e:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016da2:	7221      	strb	r1, [r4, #8]
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8016da4:	7a11      	ldrb	r1, [r2, #8]
 8016da6:	f081 0101 	eor.w	r1, r1, #1
 8016daa:	7211      	strb	r1, [r2, #8]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8016dac:	4619      	mov	r1, r3
 8016dae:	f001 fb69 	bl	8018484 <HCD_SubmitRequest>
  
  return USBH_OK;
}
 8016db2:	2000      	movs	r0, #0
 8016db4:	bd38      	pop	{r3, r4, r5, pc}

08016db6 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8016db6:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
  phost->Control.setup.b.wValue.w = value_idx;
 8016dbc:	82cb      	strh	r3, [r1, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8016dbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8016dc2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8016dc6:	9d03      	ldr	r5, [sp, #12]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016dc8:	750a      	strb	r2, [r1, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016dca:	2206      	movs	r2, #6
  phost->Control.setup.b.wValue.w = value_idx;
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8016dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8016dd0:	bf0c      	ite	eq
 8016dd2:	f240 4309 	movweq	r3, #1033	; 0x409
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8016dd6:	2300      	movne	r3, #0
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016dd8:	754a      	strb	r2, [r1, #21]
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8016dda:	830b      	strh	r3, [r1, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8016ddc:	462a      	mov	r2, r5
 8016dde:	4623      	mov	r3, r4
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
 8016de0:	834c      	strh	r4, [r1, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
}
 8016de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8016de6:	f7ff bf1e 	b.w	8016c26 <USBH_CtlReq>

08016dea <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8016dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016dec:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8016df0:	461d      	mov	r5, r3
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8016df2:	f442 7340 	orr.w	r3, r2, #768	; 0x300
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8016df6:	f200 52f4 	addw	r2, r0, #1524	; 0x5f4
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8016dfa:	e88d 0044 	stmia.w	sp, {r2, r6}
 8016dfe:	2200      	movs	r2, #0
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8016e00:	4604      	mov	r4, r0
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8016e02:	f7ff ffd8 	bl	8016db6 <USBH_GetDescriptor>
 8016e06:	b9b8      	cbnz	r0, 8016e38 <USBH_Get_StringDesc+0x4e>
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8016e08:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 8016e0c:	2b03      	cmp	r3, #3
 8016e0e:	d113      	bne.n	8016e38 <USBH_Get_StringDesc+0x4e>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8016e10:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8016e14:	1e8a      	subs	r2, r1, #2
 8016e16:	4296      	cmp	r6, r2
 8016e18:	bfa8      	it	ge
 8016e1a:	4616      	movge	r6, r2
 8016e1c:	b2b6      	uxth	r6, r6
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8016e1e:	f204 54f6 	addw	r4, r4, #1526	; 0x5f6
    
    for (idx = 0; idx < strlength; idx+=2 )
 8016e22:	4603      	mov	r3, r0
 8016e24:	42b3      	cmp	r3, r6
 8016e26:	d205      	bcs.n	8016e34 <USBH_Get_StringDesc+0x4a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016e28:	5ce1      	ldrb	r1, [r4, r3]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8016e2a:	1c9a      	adds	r2, r3, #2
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016e2c:	f805 1b01 	strb.w	r1, [r5], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8016e30:	b293      	uxth	r3, r2
 8016e32:	e7f7      	b.n	8016e24 <USBH_Get_StringDesc+0x3a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 8016e34:	2300      	movs	r3, #0
 8016e36:	702b      	strb	r3, [r5, #0]
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
  }
  return status;
}
 8016e38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08016e3a <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8016e3c:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016e40:	4616      	mov	r6, r2
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8016e42:	e88d 0048 	stmia.w	sp, {r3, r6}
 8016e46:	2200      	movs	r2, #0
 8016e48:	f44f 7380 	mov.w	r3, #256	; 0x100
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	460d      	mov	r5, r1
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8016e50:	f7ff ffb1 	bl	8016db6 <USBH_GetDescriptor>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d145      	bne.n	8016ee4 <USBH_Get_DevDesc+0xaa>
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8016e58:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8016e5c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8016e60:	f894 15f5 	ldrb.w	r1, [r4, #1525]	; 0x5f5
 8016e64:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8016e68:	f894 25f7 	ldrb.w	r2, [r4, #1527]	; 0x5f7
 8016e6c:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 8016e70:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8016e74:	84a9      	strh	r1, [r5, #36]	; 0x24
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8016e76:	f894 25f8 	ldrb.w	r2, [r4, #1528]	; 0x5f8
 8016e7a:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8016e7e:	f894 35f9 	ldrb.w	r3, [r4, #1529]	; 0x5f9
 8016e82:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8016e86:	f894 15fa 	ldrb.w	r1, [r4, #1530]	; 0x5fa
 8016e8a:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8016e8e:	f894 25fb 	ldrb.w	r2, [r4, #1531]	; 0x5fb
  
  if (length > 8)
 8016e92:	2e08      	cmp	r6, #8
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
  dev_desc->bcdUSB             = LE16 (buf +  2);
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8016e94:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  
  if (length > 8)
 8016e98:	d924      	bls.n	8016ee4 <USBH_Get_DevDesc+0xaa>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8016e9a:	f894 15fd 	ldrb.w	r1, [r4, #1533]	; 0x5fd
 8016e9e:	f894 35fc 	ldrb.w	r3, [r4, #1532]	; 0x5fc
 8016ea2:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016ea6:	856a      	strh	r2, [r5, #42]	; 0x2a
    dev_desc->idProduct          = LE16 (buf + 10);
 8016ea8:	f894 15ff 	ldrb.w	r1, [r4, #1535]	; 0x5ff
 8016eac:	f894 35fe 	ldrb.w	r3, [r4, #1534]	; 0x5fe
 8016eb0:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016eb4:	85aa      	strh	r2, [r5, #44]	; 0x2c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8016eb6:	f894 1601 	ldrb.w	r1, [r4, #1537]	; 0x601
 8016eba:	f894 3600 	ldrb.w	r3, [r4, #1536]	; 0x600
 8016ebe:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016ec2:	85ea      	strh	r2, [r5, #46]	; 0x2e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8016ec4:	f894 1602 	ldrb.w	r1, [r4, #1538]	; 0x602
 8016ec8:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8016ecc:	f894 3603 	ldrb.w	r3, [r4, #1539]	; 0x603
 8016ed0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8016ed4:	f894 2604 	ldrb.w	r2, [r4, #1540]	; 0x604
 8016ed8:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8016edc:	f894 1605 	ldrb.w	r1, [r4, #1541]	; 0x605
 8016ee0:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
  }
  return status;      
}
 8016ee4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

08016ee8 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eec:	4617      	mov	r7, r2
 8016eee:	b08d      	sub	sp, #52	; 0x34
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 8016ef0:	f200 54f4 	addw	r4, r0, #1524	; 0x5f4

{
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8016ef4:	e88d 0090 	stmia.w	sp, {r4, r7}
 8016ef8:	2200      	movs	r2, #0
 8016efa:	f44f 7300 	mov.w	r3, #512	; 0x200
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016efe:	4606      	mov	r6, r0
 8016f00:	460d      	mov	r5, r1
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8016f02:	f7ff ff58 	bl	8016db6 <USBH_GetDescriptor>
 8016f06:	9002      	str	r0, [sp, #8]
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	f040 80d1 	bne.w	80170b0 <USBH_Get_CfgDesc+0x1c8>
 8016f0e:	9b02      	ldr	r3, [sp, #8]
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 8016f10:	b29a      	uxth	r2, r3
 8016f12:	42ba      	cmp	r2, r7
 8016f14:	d206      	bcs.n	8016f24 <USBH_Get_CfgDesc+0x3c>
* @param  itf_desc: Interface Descriptor address
* @param  ep_desc: Endpoint Descriptor address
* @param  length: Length of the descriptor
* @retval Status
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
 8016f16:	18f2      	adds	r2, r6, r3
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8016f18:	4867      	ldr	r0, [pc, #412]	; (80170b8 <USBH_Get_CfgDesc+0x1d0>)
 8016f1a:	f892 15f4 	ldrb.w	r1, [r2, #1524]	; 0x5f4
 8016f1e:	5419      	strb	r1, [r3, r0]
 8016f20:	3301      	adds	r3, #1
 8016f22:	e7f5      	b.n	8016f10 <USBH_Get_CfgDesc+0x28>
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8016f24:	f896 05f4 	ldrb.w	r0, [r6, #1524]	; 0x5f4
 8016f28:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8016f2c:	f896 15f5 	ldrb.w	r1, [r6, #1525]	; 0x5f5
 8016f30:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8016f34:	f896 25f7 	ldrb.w	r2, [r6, #1527]	; 0x5f7
 8016f38:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 8016f3c:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8016f40:	86e8      	strh	r0, [r5, #54]	; 0x36
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8016f42:	f896 15f8 	ldrb.w	r1, [r6, #1528]	; 0x5f8
 8016f46:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8016f4a:	f896 25f9 	ldrb.w	r2, [r6, #1529]	; 0x5f9
 8016f4e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8016f52:	f896 35fa 	ldrb.w	r3, [r6, #1530]	; 0x5fa
 8016f56:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8016f5a:	f896 05fb 	ldrb.w	r0, [r6, #1531]	; 0x5fb
 8016f5e:	f885 003b 	strb.w	r0, [r5, #59]	; 0x3b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8016f62:	f896 25fc 	ldrb.w	r2, [r6, #1532]	; 0x5fc
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016f66:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8016f68:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016f6c:	f240 80a0 	bls.w	80170b0 <USBH_Get_CfgDesc+0x1c8>
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 8016f70:	2902      	cmp	r1, #2
 8016f72:	d905      	bls.n	8016f80 <USBH_Get_CfgDesc+0x98>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8016f74:	4851      	ldr	r0, [pc, #324]	; (80170bc <USBH_Get_CfgDesc+0x1d4>)
    prev_itf = 0; 
 8016f76:	4952      	ldr	r1, [pc, #328]	; (80170c0 <USBH_Get_CfgDesc+0x1d8>)
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	8003      	strh	r3, [r0, #0]
    prev_itf = 0; 
 8016f7c:	700b      	strb	r3, [r1, #0]
 8016f7e:	e097      	b.n	80170b0 <USBH_Get_CfgDesc+0x1c8>
 8016f80:	494f      	ldr	r1, [pc, #316]	; (80170c0 <USBH_Get_CfgDesc+0x1d8>)
 8016f82:	484e      	ldr	r0, [pc, #312]	; (80170bc <USBH_Get_CfgDesc+0x1d4>)
 8016f84:	780b      	ldrb	r3, [r1, #0]
 8016f86:	f8b0 9000 	ldrh.w	r9, [r0]
 8016f8a:	930a      	str	r3, [sp, #40]	; 0x28
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 8016f8c:	2209      	movs	r2, #9
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
 8016f8e:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 8016f90:	4291      	cmp	r1, r2
 8016f92:	d9ef      	bls.n	8016f74 <USBH_Get_CfgDesc+0x8c>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016f94:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8016f96:	18e4      	adds	r4, r4, r3
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016f98:	18d2      	adds	r2, r2, r3
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8016f9a:	7860      	ldrb	r0, [r4, #1]
 8016f9c:	2804      	cmp	r0, #4
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016f9e:	b292      	uxth	r2, r2
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8016fa0:	d1f5      	bne.n	8016f8e <USBH_Get_CfgDesc+0xa6>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 8016fa2:	f894 b003 	ldrb.w	fp, [r4, #3]
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8016fa6:	78a7      	ldrb	r7, [r4, #2]
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 8016fa8:	f1bb 0f02 	cmp.w	fp, #2
 8016fac:	d8ef      	bhi.n	8016f8e <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8016fae:	7826      	ldrb	r6, [r4, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016fb0:	7961      	ldrb	r1, [r4, #5]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8016fb2:	9605      	str	r6, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8016fb4:	7926      	ldrb	r6, [r4, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016fb6:	9106      	str	r1, [sp, #24]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8016fb8:	79a3      	ldrb	r3, [r4, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8016fba:	79e0      	ldrb	r0, [r4, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016fbc:	7a21      	ldrb	r1, [r4, #8]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8016fbe:	9307      	str	r3, [sp, #28]
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8016fc0:	2e04      	cmp	r6, #4
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8016fc2:	9008      	str	r0, [sp, #32]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016fc4:	9109      	str	r1, [sp, #36]	; 0x24
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8016fc6:	d8e2      	bhi.n	8016f8e <USBH_Get_CfgDesc+0xa6>
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8016fc8:	b2fb      	uxtb	r3, r7
          pif               = &itf_desc[if_ix];
 8016fca:	b258      	sxtb	r0, r3
 8016fcc:	2109      	movs	r1, #9
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8016fce:	9303      	str	r3, [sp, #12]
          pif               = &itf_desc[if_ix];
 8016fd0:	fb01 5300 	mla	r3, r1, r0, r5
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016fd4:	eb05 1040 	add.w	r0, r5, r0, lsl #5
 8016fd8:	3050      	adds	r0, #80	; 0x50
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
 8016fda:	333e      	adds	r3, #62	; 0x3e
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016fdc:	9004      	str	r0, [sp, #16]
 8016fde:	f04f 0800 	mov.w	r8, #0
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 8016fe2:	fa4f fc88 	sxtb.w	ip, r8
 8016fe6:	45b4      	cmp	ip, r6
 8016fe8:	dad1      	bge.n	8016f8e <USBH_Get_CfgDesc+0xa6>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016fea:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8016fec:	1864      	adds	r4, r4, r1
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016fee:	1852      	adds	r2, r2, r1
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8016ff0:	7860      	ldrb	r0, [r4, #1]
 8016ff2:	2805      	cmp	r0, #5
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016ff4:	b292      	uxth	r2, r2
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8016ff6:	d1f4      	bne.n	8016fe2 <USBH_Get_CfgDesc+0xfa>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
 8016ff8:	9803      	ldr	r0, [sp, #12]
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016ffa:	9904      	ldr	r1, [sp, #16]
                
                if(prev_itf != if_ix)
 8016ffc:	fa4f fa80 	sxtb.w	sl, r0
 8017000:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017002:	4550      	cmp	r0, sl
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8017004:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
                
                if(prev_itf != if_ix)
 8017008:	d013      	beq.n	8017032 <USBH_Get_CfgDesc+0x14a>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801700a:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801700c:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801700e:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8017010:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8017012:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8017016:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8017018:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 801701a:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801701c:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801701e:	9808      	ldr	r0, [sp, #32]
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
                {
                  prev_itf = if_ix;
 8017020:	970a      	str	r7, [sp, #40]	; 0x28
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8017022:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8017024:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8017026:	f04f 0e04 	mov.w	lr, #4
 801702a:	f883 e001 	strb.w	lr, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801702e:	7218      	strb	r0, [r3, #8]
 8017030:	e018      	b.n	8017064 <USBH_Get_CfgDesc+0x17c>
                  prev_itf = if_ix;
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 8017032:	f894 a004 	ldrb.w	sl, [r4, #4]
 8017036:	7960      	ldrb	r0, [r4, #5]
 8017038:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
 801703c:	45d1      	cmp	r9, sl
 801703e:	dca6      	bgt.n	8016f8e <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8017040:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8017042:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8017044:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8017046:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8017048:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801704c:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801704e:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8017050:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8017052:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8017054:	9808      	ldr	r0, [sp, #32]
 8017056:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8017058:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 801705a:	f04f 0904 	mov.w	r9, #4
 801705e:	f883 9001 	strb.w	r9, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8017062:	7218      	strb	r0, [r3, #8]
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8017064:	f894 9000 	ldrb.w	r9, [r4]
 8017068:	9804      	ldr	r0, [sp, #16]
 801706a:	f800 903c 	strb.w	r9, [r0, ip, lsl #3]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 801706e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8017072:	f881 c001 	strb.w	ip, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8017076:	78a0      	ldrb	r0, [r4, #2]
 8017078:	7088      	strb	r0, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 801707a:	f894 e003 	ldrb.w	lr, [r4, #3]
 801707e:	f881 e003 	strb.w	lr, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8017082:	f894 9005 	ldrb.w	r9, [r4, #5]
 8017086:	f894 c004 	ldrb.w	ip, [r4, #4]
 801708a:	eb0c 2009 	add.w	r0, ip, r9, lsl #8
 801708e:	8088      	strh	r0, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8017090:	f894 e006 	ldrb.w	lr, [r4, #6]
 8017094:	f881 e006 	strb.w	lr, [r1, #6]
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 8017098:	f894 9005 	ldrb.w	r9, [r4, #5]
 801709c:	7921      	ldrb	r1, [r4, #4]
                ep_ix++;
 801709e:	f108 0801 	add.w	r8, r8, #1
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80170a2:	eb01 2009 	add.w	r0, r1, r9, lsl #8
 80170a6:	fa1f f980 	uxth.w	r9, r0
                ep_ix++;
 80170aa:	fa5f f888 	uxtb.w	r8, r8
 80170ae:	e798      	b.n	8016fe2 <USBH_Get_CfgDesc+0xfa>
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
}
 80170b0:	9802      	ldr	r0, [sp, #8]
 80170b2:	b00d      	add	sp, #52	; 0x34
 80170b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b8:	20004e60 	.word	0x20004e60
 80170bc:	200009b0 	.word	0x200009b0
 80170c0:	200009ae 	.word	0x200009ae

080170c4 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 80170c4:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80170c6:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80170c8:	2505      	movs	r5, #5
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80170ca:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 80170cc:	4623      	mov	r3, r4
 80170ce:	4622      	mov	r2, r4
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80170d0:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80170d2:	754d      	strb	r5, [r1, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
 80170d4:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 80170d6:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
}
 80170d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 80170dc:	f7ff bda3 	b.w	8016c26 <USBH_CtlReq>

080170e0 <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 80170e0:	b530      	push	{r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80170e2:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80170e4:	2509      	movs	r5, #9
  phost->Control.setup.b.wValue.w = cfg_idx;
 80170e6:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 80170e8:	4623      	mov	r3, r4
 80170ea:	4622      	mov	r2, r4
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80170ec:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80170ee:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
 80170f0:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;           
 80170f2:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
}
 80170f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 80170f8:	f7ff bd95 	b.w	8016c26 <USBH_CtlReq>

080170fc <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 80170fc:	b530      	push	{r4, r5, lr}
 80170fe:	f103 0345 	add.w	r3, r3, #69	; 0x45
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8017102:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8017106:	2402      	movs	r4, #2
 8017108:	750c      	strb	r4, [r1, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801710a:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801710c:	2400      	movs	r4, #0
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 801710e:	f012 0f80 	tst.w	r2, #128	; 0x80
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8017112:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
  phost->Control.setup.b.wIndex.w = ep_num;
 8017114:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8017116:	82cc      	strh	r4, [r1, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
 8017118:	834c      	strh	r4, [r1, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 801711a:	bf14      	ite	ne
 801711c:	721c      	strbne	r4, [r3, #8]
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 801711e:	725c      	strbeq	r4, [r3, #9]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8017120:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8017122:	4625      	mov	r5, r4
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8017124:	4613      	mov	r3, r2
}
 8017126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 801712a:	f7ff bd7c 	b.w	8016c26 <USBH_CtlReq>
	...

08017130 <USB_OTG_EnableCommonInt>:
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8017130:	68c3      	ldr	r3, [r0, #12]
  int_mask.b.usbsuspend = 1; 
  
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
 8017132:	4803      	ldr	r0, [pc, #12]	; (8017140 <USB_OTG_EnableCommonInt+0x10>)
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8017134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8017138:	615a      	str	r2, [r3, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 801713a:	6198      	str	r0, [r3, #24]
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	d0000804 	.word	0xd0000804

08017144 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8017144:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 8017146:	2300      	movs	r3, #0
 8017148:	4c10      	ldr	r4, [pc, #64]	; (801718c <USB_OTG_CoreReset+0x48>)
 801714a:	9301      	str	r3, [sp, #4]
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 801714c:	4605      	mov	r5, r0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 801714e:	2003      	movs	r0, #3
 8017150:	f7fc fe52 	bl	8013df8 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8017154:	68e8      	ldr	r0, [r5, #12]
 8017156:	6902      	ldr	r2, [r0, #16]
    if (++count > 200000)
 8017158:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 801715a:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 801715c:	d013      	beq.n	8017186 <USB_OTG_CoreReset+0x42>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 801715e:	9901      	ldr	r1, [sp, #4]
 8017160:	2900      	cmp	r1, #0
 8017162:	daf4      	bge.n	801714e <USB_OTG_CoreReset+0xa>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 8017164:	9b01      	ldr	r3, [sp, #4]
 8017166:	f043 0201 	orr.w	r2, r3, #1
 801716a:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 801716c:	9901      	ldr	r1, [sp, #4]
 801716e:	4a07      	ldr	r2, [pc, #28]	; (801718c <USB_OTG_CoreReset+0x48>)
 8017170:	6101      	str	r1, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8017172:	6903      	ldr	r3, [r0, #16]
    if (++count > 200000)
 8017174:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8017176:	9301      	str	r3, [sp, #4]
    if (++count > 200000)
 8017178:	d002      	beq.n	8017180 <USB_OTG_CoreReset+0x3c>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 801717a:	9901      	ldr	r1, [sp, #4]
 801717c:	07c9      	lsls	r1, r1, #31
 801717e:	d4f8      	bmi.n	8017172 <USB_OTG_CoreReset+0x2e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8017180:	2003      	movs	r0, #3
 8017182:	f7fc fe39 	bl	8013df8 <USB_OTG_BSP_uDelay>
  return status;
}
 8017186:	2000      	movs	r0, #0
 8017188:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801718a:	bf00      	nop
 801718c:	00030d41 	.word	0x00030d41

08017190 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8017190:	b530      	push	{r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 8017192:	78c4      	ldrb	r4, [r0, #3]
 8017194:	b96c      	cbnz	r4, 80171b2 <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8017196:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 801719a:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 801719c:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80171a0:	109b      	asrs	r3, r3, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80171a2:	4622      	mov	r2, r4
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d004      	beq.n	80171b2 <USB_OTG_WritePacket+0x22>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80171a8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80171ac:	3201      	adds	r2, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80171ae:	6028      	str	r0, [r5, #0]
 80171b0:	e7f8      	b.n	80171a4 <USB_OTG_WritePacket+0x14>
    }
  }
  return status;
}
 80171b2:	2000      	movs	r0, #0
 80171b4:	bd30      	pop	{r4, r5, pc}

080171b6 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 80171b6:	b510      	push	{r4, lr}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80171b8:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80171ba:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80171be:	1092      	asrs	r2, r2, #2
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80171c0:	2300      	movs	r3, #0
 80171c2:	4293      	cmp	r3, r2
 80171c4:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80171c8:	d004      	beq.n	80171d4 <USB_OTG_ReadPacket+0x1e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80171ca:	6820      	ldr	r0, [r4, #0]
 80171cc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80171d0:	3301      	adds	r3, #1
 80171d2:	e7f6      	b.n	80171c2 <USB_OTG_ReadPacket+0xc>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 80171d4:	1808      	adds	r0, r1, r0
 80171d6:	bd10      	pop	{r4, pc}

080171d8 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80171d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 80171da:	2300      	movs	r3, #0
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80171dc:	2201      	movs	r2, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80171de:	2440      	movs	r4, #64	; 0x40
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80171e0:	2901      	cmp	r1, #1
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 80171e2:	70c3      	strb	r3, [r0, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80171e4:	7082      	strb	r2, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80171e6:	8084      	strh	r4, [r0, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80171e8:	d10c      	bne.n	8017204 <USB_OTG_SelectCore+0x2c>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 80171ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 80171ee:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 80171f0:	2208      	movs	r2, #8
    pdev->cfg.dev_endpoints    = 4 ;
 80171f2:	2404      	movs	r4, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 80171f4:	2102      	movs	r1, #2
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 80171f6:	80c3      	strh	r3, [r0, #6]
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 80171f8:	7002      	strb	r2, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 80171fa:	7044      	strb	r4, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 80171fc:	7201      	strb	r1, [r0, #8]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 80171fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017202:	e00b      	b.n	801721c <USB_OTG_SelectCore+0x44>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8017204:	b951      	cbnz	r1, 801721c <USB_OTG_SelectCore+0x44>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8017206:	230c      	movs	r3, #12
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8017208:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 12 ;
 801720a:	7003      	strb	r3, [r0, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 801720c:	2106      	movs	r1, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 801720e:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 8017212:	2602      	movs	r6, #2
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8017214:	4b20      	ldr	r3, [pc, #128]	; (8017298 <USB_OTG_SelectCore+0xc0>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
 8017216:	7041      	strb	r1, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8017218:	80c5      	strh	r5, [r0, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 801721a:	7206      	strb	r6, [r0, #8]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 801721c:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8017220:	6105      	str	r5, [r0, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017222:	7845      	ldrb	r5, [r0, #1]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8017224:	60c3      	str	r3, [r0, #12]
 8017226:	4602      	mov	r2, r0
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017228:	4619      	mov	r1, r3
 801722a:	2400      	movs	r4, #0
 801722c:	3204      	adds	r2, #4
 801722e:	42ac      	cmp	r4, r5
 8017230:	f101 0620 	add.w	r6, r1, #32
 8017234:	d208      	bcs.n	8017248 <USB_OTG_SelectCore+0x70>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 8017236:	f501 6710 	add.w	r7, r1, #2304	; 0x900
 801723a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 801723e:	6511      	str	r1, [r2, #80]	; 0x50
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8017240:	6157      	str	r7, [r2, #20]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017242:	3401      	adds	r4, #1
 8017244:	4631      	mov	r1, r6
 8017246:	e7f1      	b.n	801722c <USB_OTG_SelectCore+0x54>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8017248:	f503 6480 	add.w	r4, r3, #1024	; 0x400
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 801724c:	f503 6188 	add.w	r1, r3, #1088	; 0x440
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8017250:	6144      	str	r4, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8017252:	7804      	ldrb	r4, [r0, #0]
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8017254:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8017258:	2200      	movs	r2, #0
 801725a:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 801725e:	42a2      	cmp	r2, r4
 8017260:	d206      	bcs.n	8017270 <USB_OTG_SelectCore+0x98>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 8017262:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8017266:	3201      	adds	r2, #1
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8017268:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 801726c:	3120      	adds	r1, #32
 801726e:	e7f6      	b.n	801725e <USB_OTG_SelectCore+0x86>
 8017270:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8017274:	2200      	movs	r2, #0
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8017276:	42a2      	cmp	r2, r4
 8017278:	d207      	bcs.n	801728a <USB_OTG_SelectCore+0xb2>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 801727a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 801727e:	3201      	adds	r2, #1
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8017280:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 8017284:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8017288:	e7f5      	b.n	8017276 <USB_OTG_SelectCore+0x9e>
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 801728a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801728e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  
  return status;
}
 8017292:	2000      	movs	r0, #0
 8017294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017296:	bf00      	nop
 8017298:	40040000 	.word	0x40040000

0801729c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 801729c:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 801729e:	7a03      	ldrb	r3, [r0, #8]
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 80172a0:	2500      	movs	r5, #0
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80172a2:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80172a4:	4604      	mov	r4, r0
 80172a6:	68c3      	ldr	r3, [r0, #12]
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80172a8:	d121      	bne.n	80172ee <USB_OTG_CoreInit+0x52>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80172aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 80172ac:	7a61      	ldrb	r1, [r4, #9]
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
    gccfg.b.pwdn = 0;
 80172ae:	f365 4010 	bfi	r0, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 80172b2:	b109      	cbz	r1, 80172b8 <USB_OTG_CoreInit+0x1c>
    {
      gccfg.b.sofouten = 1;   
 80172b4:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80172b8:	6398      	str	r0, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80172ba:	68da      	ldr	r2, [r3, #12]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80172bc:	f36f 1286 	bfc	r2, #6, #1
#ifdef USB_OTG_INTERNAL_VBUS_ENABLED
    usbcfg.b.ulpi_ext_vbus_drv = 0; /* Use internal VBUS */
 80172c0:	f36f 5214 	bfc	r2, #20, #1
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80172c4:	f36f 5296 	bfc	r2, #22, #1
    
    usbcfg.b.ulpi_fsls = 0;
 80172c8:	f36f 4251 	bfc	r2, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 80172cc:	f36f 42d3 	bfc	r2, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80172d0:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80172d2:	4620      	mov	r0, r4
 80172d4:	f7ff ff36 	bl	8017144 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 80172d8:	78e3      	ldrb	r3, [r4, #3]
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d119      	bne.n	8017312 <USB_OTG_CoreInit+0x76>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80172de:	2105      	movs	r1, #5
 80172e0:	f361 0544 	bfi	r5, r1, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80172e4:	68e0      	ldr	r0, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 80172e6:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80172ea:	6085      	str	r5, [r0, #8]
 80172ec:	e011      	b.n	8017312 <USB_OTG_CoreInit+0x76>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 80172ee:	68da      	ldr	r2, [r3, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 80172f0:	f042 0140 	orr.w	r1, r2, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80172f4:	60d9      	str	r1, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 80172f6:	f7ff ff25 	bl	8017144 <USB_OTG_CoreReset>
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 80172fa:	7a60      	ldrb	r0, [r4, #9]
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80172fc:	68e3      	ldr	r3, [r4, #12]
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
 80172fe:	2800      	cmp	r0, #0
 8017300:	bf0c      	ite	eq
 8017302:	f44f 1234 	moveq.w	r2, #2949120	; 0x2d0000
 8017306:	f44f 1274 	movne.w	r2, #3997696	; 0x3d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 801730a:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 801730c:	2014      	movs	r0, #20
 801730e:	f7fc fd76 	bl	8013dfe <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8017312:	78e2      	ldrb	r2, [r4, #3]
 8017314:	2a01      	cmp	r2, #1
 8017316:	d106      	bne.n	8017326 <USB_OTG_CoreInit+0x8a>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8017318:	68e3      	ldr	r3, [r4, #12]
 801731a:	6899      	ldr	r1, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 801731c:	f021 003e 	bic.w	r0, r1, #62	; 0x3e
    ahbcfg.b.dmaenable = 1;
 8017320:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8017324:	609a      	str	r2, [r3, #8]
    
  }
  /* initialize OTG features */
#ifdef  USE_OTG_MODE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID){
 8017326:	7ae3      	ldrb	r3, [r4, #11]
 8017328:	2b01      	cmp	r3, #1
 801732a:	d108      	bne.n	801733e <USB_OTG_CoreInit+0xa2>
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801732c:	68e1      	ldr	r1, [r4, #12]
 801732e:	68ca      	ldr	r2, [r1, #12]
    usbcfg.b.hnpcap = 1;
    usbcfg.b.srpcap = 1;
 8017330:	f442 7340 	orr.w	r3, r2, #768	; 0x300
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8017334:	60cb      	str	r3, [r1, #12]
    USB_OTG_EnableCommonInt(pdev);
 8017336:	4620      	mov	r0, r4
 8017338:	f7ff fefa 	bl	8017130 <USB_OTG_EnableCommonInt>
 801733c:	e010      	b.n	8017360 <USB_OTG_CoreInit+0xc4>
  }else{
    USB_OTG_EnableCommonInt(pdev);
 801733e:	4620      	mov	r0, r4
 8017340:	f7ff fef6 	bl	8017130 <USB_OTG_EnableCommonInt>
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8017344:	68e1      	ldr	r1, [r4, #12]
 8017346:	68c8      	ldr	r0, [r1, #12]
    usbcfg.b.hnpcap = 0;
 8017348:	f420 7240 	bic.w	r2, r0, #768	; 0x300
    usbcfg.b.srpcap = 1;
 801734c:	f442 7380 	orr.w	r3, r2, #256	; 0x100
    usbcfg.b.force_host = 1;
 8017350:	f043 5000 	orr.w	r0, r3, #536870912	; 0x20000000
    usbcfg.b.force_dev = 0;
 8017354:	f36f 709e 	bfc	r0, #30, #1
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8017358:	60c8      	str	r0, [r1, #12]
    USB_OTG_BSP_mDelay(50);
 801735a:	2032      	movs	r0, #50	; 0x32
 801735c:	f7fc fd4f 	bl	8013dfe <USB_OTG_BSP_mDelay>
    //USB_OTG_EnableCommonInt(pdev);
  }
#endif
  return status;
}
 8017360:	2000      	movs	r0, #0
 8017362:	bd38      	pop	{r3, r4, r5, pc}

08017364 <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8017364:	68c3      	ldr	r3, [r0, #12]
 8017366:	689a      	ldr	r2, [r3, #8]
 8017368:	f042 0001 	orr.w	r0, r2, #1
 801736c:	6098      	str	r0, [r3, #8]
  return status;
}
 801736e:	2000      	movs	r0, #0
 8017370:	4770      	bx	lr

08017372 <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8017372:	68c3      	ldr	r3, [r0, #12]
 8017374:	689a      	ldr	r2, [r3, #8]
 8017376:	f022 0001 	bic.w	r0, r2, #1
 801737a:	6098      	str	r0, [r3, #8]
  return status;
}
 801737c:	2000      	movs	r0, #0
 801737e:	4770      	bx	lr

08017380 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8017380:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 8017382:	2300      	movs	r3, #0
 8017384:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 8017386:	9a01      	ldr	r2, [sp, #4]
 8017388:	f042 0320 	orr.w	r3, r2, #32
 801738c:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 801738e:	9a01      	ldr	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8017390:	4b09      	ldr	r3, [pc, #36]	; (80173b8 <USB_OTG_FlushTxFifo+0x38>)
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
 8017392:	f361 128a 	bfi	r2, r1, #6, #5
 8017396:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8017398:	68c2      	ldr	r2, [r0, #12]
 801739a:	9801      	ldr	r0, [sp, #4]
 801739c:	6110      	str	r0, [r2, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 801739e:	6911      	ldr	r1, [r2, #16]
    if (++count > 200000)
 80173a0:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80173a2:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80173a4:	d002      	beq.n	80173ac <USB_OTG_FlushTxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80173a6:	9801      	ldr	r0, [sp, #4]
 80173a8:	0680      	lsls	r0, r0, #26
 80173aa:	d4f8      	bmi.n	801739e <USB_OTG_FlushTxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80173ac:	2003      	movs	r0, #3
 80173ae:	f7fc fd23 	bl	8013df8 <USB_OTG_BSP_uDelay>
  return status;
}
 80173b2:	2000      	movs	r0, #0
 80173b4:	bd0e      	pop	{r1, r2, r3, pc}
 80173b6:	bf00      	nop
 80173b8:	00030d41 	.word	0x00030d41

080173bc <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80173bc:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80173be:	2300      	movs	r3, #0
 80173c0:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 80173c2:	9901      	ldr	r1, [sp, #4]
 80173c4:	f041 0210 	orr.w	r2, r1, #16
 80173c8:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80173ca:	68c0      	ldr	r0, [r0, #12]
 80173cc:	9b01      	ldr	r3, [sp, #4]
 80173ce:	4a07      	ldr	r2, [pc, #28]	; (80173ec <USB_OTG_FlushRxFifo+0x30>)
 80173d0:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80173d2:	6901      	ldr	r1, [r0, #16]
    if (++count > 200000)
 80173d4:	3a01      	subs	r2, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80173d6:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80173d8:	d002      	beq.n	80173e0 <USB_OTG_FlushRxFifo+0x24>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80173da:	9b01      	ldr	r3, [sp, #4]
 80173dc:	06d9      	lsls	r1, r3, #27
 80173de:	d4f8      	bmi.n	80173d2 <USB_OTG_FlushRxFifo+0x16>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80173e0:	2003      	movs	r0, #3
 80173e2:	f7fc fd09 	bl	8013df8 <USB_OTG_BSP_uDelay>
  return status;
}
 80173e6:	2000      	movs	r0, #0
 80173e8:	bd0e      	pop	{r1, r2, r3, pc}
 80173ea:	bf00      	nop
 80173ec:	00030d41 	.word	0x00030d41

080173f0 <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80173f0:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 80173f2:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80173f4:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 80173f6:	2901      	cmp	r1, #1
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
 80173f8:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 80173fc:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 8017400:	d102      	bne.n	8017408 <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_host = 1;
 8017402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017406:	e002      	b.n	801740e <USB_OTG_SetCurrentMode+0x1e>
  }
  else if ( mode == DEVICE_MODE)
 8017408:	b909      	cbnz	r1, 801740e <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 801740a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 801740e:	2032      	movs	r0, #50	; 0x32
  else if ( mode == DEVICE_MODE)
  {
    usbcfg.b.force_dev = 1;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8017410:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 8017412:	f7fc fcf4 	bl	8013dfe <USB_OTG_BSP_mDelay>
  return status;
}
 8017416:	2000      	movs	r0, #0
 8017418:	bd08      	pop	{r3, pc}

0801741a <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 801741a:	68c3      	ldr	r3, [r0, #12]
 801741c:	6958      	ldr	r0, [r3, #20]
 801741e:	f000 0101 	and.w	r1, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 8017422:	f081 0001 	eor.w	r0, r1, #1
 8017426:	4770      	bx	lr

08017428 <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8017428:	68c3      	ldr	r3, [r0, #12]
 801742a:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 801742c:	f000 0001 	and.w	r0, r0, #1
 8017430:	4770      	bx	lr

08017432 <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8017432:	68c3      	ldr	r3, [r0, #12]
 8017434:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8017436:	6998      	ldr	r0, [r3, #24]
  return v;
}
 8017438:	4010      	ands	r0, r2
 801743a:	4770      	bx	lr

0801743c <USB_OTG_ReadOtgItr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadOtgItr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.GREGS->GOTGINT));
 801743c:	68c3      	ldr	r3, [r0, #12]
 801743e:	6858      	ldr	r0, [r3, #4]
}
 8017440:	4770      	bx	lr

08017442 <USB_OTG_IsEvenFrame>:
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8017442:	6943      	ldr	r3, [r0, #20]
 8017444:	6898      	ldr	r0, [r3, #8]
 8017446:	f000 0101 	and.w	r1, r0, #1
}
 801744a:	f081 0001 	eor.w	r0, r1, #1
 801744e:	4770      	bx	lr

08017450 <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8017450:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8017452:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8017454:	4604      	mov	r4, r0
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 8017456:	2500      	movs	r5, #0
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8017458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 801745c:	619d      	str	r5, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 801745e:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8017460:	f7ff fe66 	bl	8017130 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8017464:	78e0      	ldrb	r0, [r4, #3]
  {  
    intmsk.b.rxstsqlvl  = 1;
 8017466:	42a8      	cmp	r0, r5
 8017468:	bf0c      	ite	eq
 801746a:	2110      	moveq	r1, #16
 801746c:	4629      	movne	r1, r5
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
 801746e:	f041 530c 	orr.w	r3, r1, #587202560	; 0x23000000
  intmsk.b.sofintr    = 1;  
 8017472:	f043 0208 	orr.w	r2, r3, #8
  intmsk.b.incomplisoout  = 1; 
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8017476:	68e3      	ldr	r3, [r4, #12]
 8017478:	6999      	ldr	r1, [r3, #24]
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
  intmsk.b.sofintr    = 1;  
  intmsk.b.incomplisoout  = 1; 
 801747a:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 801747e:	ea21 0100 	bic.w	r1, r1, r0
 8017482:	ea41 0200 	orr.w	r2, r1, r0
 8017486:	619a      	str	r2, [r3, #24]
  return status;
}
 8017488:	4628      	mov	r0, r5
 801748a:	bd38      	pop	{r3, r4, r5, pc}

0801748c <USB_OTG_InitFSLSPClkSel>:
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  //hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
  hcfg.d32 = 0;
 801748c:	2300      	movs	r3, #0
  hcfg.b.fslspclksel = freq;
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 801748e:	6942      	ldr	r2, [r0, #20]
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  //hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
  hcfg.d32 = 0;
  hcfg.b.fslspclksel = freq;
 8017490:	f361 0301 	bfi	r3, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8017494:	6013      	str	r3, [r2, #0]
 8017496:	4770      	bx	lr

08017498 <USB_OTG_ReadHPRT0>:
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8017498:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 801749c:	6818      	ldr	r0, [r3, #0]
  hprt0.b.prtena = 0;
  hprt0.b.prtconndet = 0;
  hprt0.b.prtenchng = 0;
  hprt0.b.prtovrcurrchng = 0;
  return hprt0.d32;
}
 801749e:	f020 002e 	bic.w	r0, r0, #46	; 0x2e
 80174a2:	4770      	bx	lr

080174a4 <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 80174a4:	b538      	push	{r3, r4, r5, lr}
 80174a6:	4604      	mov	r4, r0
 80174a8:	460d      	mov	r5, r1
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 80174aa:	f7fc fcf1 	bl	8013e90 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80174ae:	4620      	mov	r0, r4
 80174b0:	f7ff fff2 	bl	8017498 <USB_OTG_ReadHPRT0>
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 80174b4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80174b8:	f002 0110 	and.w	r1, r2, #16
 80174bc:	b2cb      	uxtb	r3, r1
 80174be:	b933      	cbnz	r3, 80174ce <USB_OTG_DriveVbus+0x2a>
 80174c0:	2d01      	cmp	r5, #1
 80174c2:	d104      	bne.n	80174ce <USB_OTG_DriveVbus+0x2a>
  {
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80174c4:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
  {
    hprt0.b.prtpwr = 1;
 80174c8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80174cc:	6010      	str	r0, [r2, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 80174ce:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80174d2:	f001 0310 	and.w	r3, r1, #16
 80174d6:	b2da      	uxtb	r2, r3
 80174d8:	b12a      	cbz	r2, 80174e6 <USB_OTG_DriveVbus+0x42>
 80174da:	b925      	cbnz	r5, 80174e6 <USB_OTG_DriveVbus+0x42>
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80174dc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
  {
    hprt0.b.prtpwr = 0;
 80174e0:	f365 300c 	bfi	r0, r5, #12, #1
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80174e4:	6008      	str	r0, [r1, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 80174e6:	20c8      	movs	r0, #200	; 0xc8
}
 80174e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  
  USB_OTG_BSP_mDelay(200);
 80174ec:	f7fc bc87 	b.w	8013dfe <USB_OTG_BSP_mDelay>

080174f0 <USB_OTG_ReadHostAllChannels_intr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 80174f0:	6943      	ldr	r3, [r0, #20]
 80174f2:	6958      	ldr	r0, [r3, #20]
}
 80174f4:	4770      	bx	lr

080174f6 <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80174f6:	b538      	push	{r3, r4, r5, lr}
 80174f8:	4605      	mov	r5, r0
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80174fa:	f7ff ffcd 	bl	8017498 <USB_OTG_ReadHPRT0>
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80174fe:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
 8017502:	f440 7480 	orr.w	r4, r0, #256	; 0x100
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8017506:	601c      	str	r4, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 8017508:	200a      	movs	r0, #10
 801750a:	f7fc fc78 	bl	8013dfe <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801750e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
  hprt0.b.prtrst = 0;
 8017512:	f36f 2408 	bfc	r4, #8, #1
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8017516:	6004      	str	r4, [r0, #0]
  USB_OTG_BSP_mDelay (20);   
 8017518:	2014      	movs	r0, #20
 801751a:	f7fc fc70 	bl	8013dfe <USB_OTG_BSP_mDelay>
  return 1;
}
 801751e:	2001      	movs	r0, #1
 8017520:	bd38      	pop	{r3, r4, r5, pc}

08017522 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8017522:	b570      	push	{r4, r5, r6, lr}
 8017524:	4604      	mov	r4, r0
#endif
  hcfg.d32 = 0;
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8017526:	f7fc fc71 	bl	8013e0c <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 801752a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  //USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
 801752e:	2500      	movs	r5, #0
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8017530:	601d      	str	r5, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8017532:	7a21      	ldrb	r1, [r4, #8]
 8017534:	2901      	cmp	r1, #1
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 8017536:	bf08      	it	eq
 8017538:	4629      	moveq	r1, r5
 801753a:	4620      	mov	r0, r4
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 801753c:	bf18      	it	ne
 801753e:	2101      	movne	r1, #1
 8017540:	f7ff ffa4 	bl	801748c <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 8017544:	4620      	mov	r0, r4
 8017546:	f7ff ffd6 	bl	80174f6 <USB_OTG_ResetPort>
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 801754a:	7ae0      	ldrb	r0, [r4, #11]
 801754c:	2801      	cmp	r0, #1
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
  ptxfifosize.d32 = 0;
 801754e:	462e      	mov	r6, r5
  USB_OTG_ResetPort(pdev);
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8017550:	d113      	bne.n	801757a <USB_OTG_CoreInitHost+0x58>
  {
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8017552:	6963      	ldr	r3, [r4, #20]
    hcfg.b.fslssupp = 0;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8017554:	68e1      	ldr	r1, [r4, #12]
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8017556:	681a      	ldr	r2, [r3, #0]
    hcfg.b.fslssupp = 0;
 8017558:	f36f 0282 	bfc	r2, #2, #1
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 801755c:	601a      	str	r2, [r3, #0]
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 801755e:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8017560:	23e0      	movs	r3, #224	; 0xe0
    hcfg.b.fslssupp = 0;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8017562:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8017566:	f363 060f 	bfi	r6, r3, #0, #16
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 801756a:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 801756e:	f2c0 0660 	movt	r6, #96	; 0x60
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
    hcfg.b.fslssupp = 0;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8017572:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8017574:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8017576:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  }
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
 801757a:	7ae2      	ldrb	r2, [r4, #11]
 801757c:	b99a      	cbnz	r2, 80175a6 <USB_OTG_CoreInitHost+0x84>
  {
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 801757e:	6961      	ldr	r1, [r4, #20]
 8017580:	6808      	ldr	r0, [r1, #0]
    //hcfg.d32 = 0;
    hcfg.b.fslssupp = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8017582:	2240      	movs	r2, #64	; 0x40
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
  {
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
    //hcfg.d32 = 0;
    hcfg.b.fslssupp = 1;
 8017584:	f040 0304 	orr.w	r3, r0, #4
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 8017588:	20a0      	movs	r0, #160	; 0xa0
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
  {
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
    //hcfg.d32 = 0;
    hcfg.b.fslssupp = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 801758a:	600b      	str	r3, [r1, #0]
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
 801758c:	f362 050f 	bfi	r5, r2, #0, #16
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
    //hcfg.d32 = 0;
    hcfg.b.fslssupp = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8017590:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 8017592:	f360 060f 	bfi	r6, r0, #0, #16
    hcfg.b.fslssupp = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
 8017596:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
 801759a:	f2c0 0660 	movt	r6, #96	; 0x60
    hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
    //hcfg.d32 = 0;
    hcfg.b.fslssupp = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 801759e:	624a      	str	r2, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 80175a0:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 80175a2:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  
#ifdef USE_OTG_MODE
  /* Clear Host Set HNP Enable in the USB_OTG Control Register */
  //gotgctl.b.hstsethnpen = 1;
  //USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, (1 << 11), 0);
 80175a6:	68e3      	ldr	r3, [r4, #12]
 80175a8:	6819      	ldr	r1, [r3, #0]
 80175aa:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 80175ae:	601a      	str	r2, [r3, #0]
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80175b0:	2110      	movs	r1, #16
 80175b2:	4620      	mov	r0, r4
 80175b4:	f7ff fee4 	bl	8017380 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80175b8:	4620      	mov	r0, r4
 80175ba:	f7ff feff 	bl	80173bc <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80175be:	2300      	movs	r3, #0
 80175c0:	7820      	ldrb	r0, [r4, #0]
 80175c2:	4283      	cmp	r3, r0
 80175c4:	d20a      	bcs.n	80175dc <USB_OTG_CoreInitHost+0xba>
/**
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
 80175c6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80175ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80175d2:	2100      	movs	r1, #0
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80175d4:	6090      	str	r0, [r2, #8]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80175d6:	3301      	adds	r3, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80175d8:	60d1      	str	r1, [r2, #12]
 80175da:	e7f1      	b.n	80175c0 <USB_OTG_CoreInitHost+0x9e>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
#endif
  
  USB_OTG_EnableHostInt(pdev);
 80175dc:	4620      	mov	r0, r4
 80175de:	f7ff ff37 	bl	8017450 <USB_OTG_EnableHostInt>
  return status;
}
 80175e2:	2000      	movs	r0, #0
 80175e4:	bd70      	pop	{r4, r5, r6, pc}

080175e6 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80175e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 80175e8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80175ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80175f0:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80175f4:	60a5      	str	r5, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
 80175f6:	78c6      	ldrb	r6, [r0, #3]
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
 80175f8:	2200      	movs	r2, #0
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
  {
    hcintmsk.b.ahberr = 1;
 80175fa:	2e01      	cmp	r6, #1
 80175fc:	bf0c      	ite	eq
 80175fe:	2304      	moveq	r3, #4
 8017600:	4613      	movne	r3, r2
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 8017602:	014e      	lsls	r6, r1, #5
 8017604:	1987      	adds	r7, r0, r6
 8017606:	f897 5895 	ldrb.w	r5, [r7, #2197]	; 0x895
 801760a:	2d03      	cmp	r5, #3
 801760c:	d82b      	bhi.n	8017666 <USB_OTG_HC_Init+0x80>
 801760e:	e8df f005 	tbb	[pc, r5]
 8017612:	2002      	.short	0x2002
 8017614:	1402      	.short	0x1402
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8017616:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 801761a:	f043 0789 	orr.w	r7, r3, #137	; 0x89
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 801761e:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
 8017622:	b115      	cbz	r5, 801762a <USB_OTG_HC_Init+0x44>
    {
      hcintmsk.b.bblerr = 1;
 8017624:	f447 63a2 	orr.w	r3, r7, #1296	; 0x510
 8017628:	e01d      	b.n	8017666 <USB_OTG_HC_Init+0x80>
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
      if (pdev->host.hc[hc_num].do_ping) 
 801762a:	f896 6894 	ldrb.w	r6, [r6, #2196]	; 0x894
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 801762e:	f447 638a 	orr.w	r3, r7, #1104	; 0x450
      if (pdev->host.hc[hc_num].do_ping) 
 8017632:	b1c6      	cbz	r6, 8017666 <USB_OTG_HC_Init+0x80>
      {
        hcintmsk.b.ack = 1;
 8017634:	f447 638e 	orr.w	r3, r7, #1136	; 0x470
 8017638:	e015      	b.n	8017666 <USB_OTG_HC_Init+0x80>
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801763a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
    break;
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 801763e:	f043 0799 	orr.w	r7, r3, #153	; 0x99
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8017642:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
 8017646:	f447 63c0 	orr.w	r3, r7, #1536	; 0x600
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801764a:	b165      	cbz	r5, 8017666 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.bblerr = 1;
 801764c:	f447 63e0 	orr.w	r3, r7, #1792	; 0x700
 8017650:	e009      	b.n	8017666 <USB_OTG_HC_Init+0x80>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8017652:	1986      	adds	r6, r0, r6
      hcintmsk.b.bblerr = 1;
    }
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 8017654:	f043 0701 	orr.w	r7, r3, #1
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8017658:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
 801765c:	f447 7308 	orr.w	r3, r7, #544	; 0x220
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8017660:	b10d      	cbz	r5, 8017666 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
 8017662:	f447 7368 	orr.w	r3, r7, #928	; 0x3a0
    }
    break;
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 8017666:	60e3      	str	r3, [r4, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8017668:	6943      	ldr	r3, [r0, #20]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 801766a:	2701      	movs	r7, #1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 801766c:	699e      	ldr	r6, [r3, #24]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 801766e:	fa07 f701 	lsl.w	r7, r7, r1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8017672:	4337      	orrs	r7, r6
 8017674:	619f      	str	r7, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8017676:	68c3      	ldr	r3, [r0, #12]
 8017678:	699d      	ldr	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 801767a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 801767e:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8017682:	619d      	str	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8017684:	f890 1890 	ldrb.w	r1, [r0, #2192]	; 0x890
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8017688:	f890 7891 	ldrb.w	r7, [r0, #2193]	; 0x891
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 801768c:	f890 3892 	ldrb.w	r3, [r0, #2194]	; 0x892
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8017690:	f361 529c 	bfi	r2, r1, #22, #7
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8017694:	f890 1893 	ldrb.w	r1, [r0, #2195]	; 0x893
 8017698:	f1b1 0c02 	subs.w	ip, r1, #2
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 801769c:	f367 22ce 	bfi	r2, r7, #11, #4
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80176a0:	f1dc 0700 	rsbs	r7, ip, #0
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80176a4:	f363 32cf 	bfi	r2, r3, #15, #1
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80176a8:	eb57 030c 	adcs.w	r3, r7, ip
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80176ac:	f890 7895 	ldrb.w	r7, [r0, #2197]	; 0x895
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80176b0:	f8b0 0896 	ldrh.w	r0, [r0, #2198]	; 0x896
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80176b4:	f363 4251 	bfi	r2, r3, #17, #1
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80176b8:	f367 4293 	bfi	r2, r7, #18, #2
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80176bc:	f360 020a 	bfi	r2, r0, #0, #11
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 80176c0:	2f03      	cmp	r7, #3
  {
    hcchar.b.oddfrm  = 1;
 80176c2:	bf08      	it	eq
 80176c4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80176c8:	6022      	str	r2, [r4, #0]
  return status;
}
 80176ca:	2000      	movs	r0, #0
 80176cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176ce <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80176ce:	b570      	push	{r4, r5, r6, lr}
 80176d0:	460d      	mov	r5, r1
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80176d2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80176d6:	b086      	sub	sp, #24
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80176d8:	f8d1 38a0 	ldr.w	r3, [r1, #2208]	; 0x8a0
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80176dc:	4604      	mov	r4, r0
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
  hctsiz.d32 = 0;
 80176de:	2200      	movs	r2, #0
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80176e0:	b17b      	cbz	r3, 8017702 <USB_OTG_HC_StartXfer+0x34>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80176e2:	f8b1 0896 	ldrh.w	r0, [r1, #2198]	; 0x896
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80176e6:	1e5e      	subs	r6, r3, #1
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80176e8:	1833      	adds	r3, r6, r0
 80176ea:	fbb3 f6f0 	udiv	r6, r3, r0
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80176ee:	b2b3      	uxth	r3, r6
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 80176f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176f4:	d906      	bls.n	8017704 <USB_OTG_HC_StartXfer+0x36>
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80176f6:	0200      	lsls	r0, r0, #8
 80176f8:	f8c1 08a0 	str.w	r0, [r1, #2208]	; 0x8a0
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
 80176fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017700:	e000      	b.n	8017704 <USB_OTG_HC_StartXfer+0x36>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 8017702:	2301      	movs	r3, #1
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8017704:	0168      	lsls	r0, r5, #5
 8017706:	1821      	adds	r1, r4, r0
 8017708:	f891 6892 	ldrb.w	r6, [r1, #2194]	; 0x892
 801770c:	b126      	cbz	r6, 8017718 <USB_OTG_HC_StartXfer+0x4a>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 801770e:	f8b1 6896 	ldrh.w	r6, [r1, #2198]	; 0x896
 8017712:	435e      	muls	r6, r3
 8017714:	f8c1 68a0 	str.w	r6, [r1, #2208]	; 0x8a0
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8017718:	1820      	adds	r0, r4, r0
 801771a:	f8d0 18a0 	ldr.w	r1, [r0, #2208]	; 0x8a0
 801771e:	f361 0212 	bfi	r2, r1, #0, #19
  hctsiz.b.pktcnt = num_packets;
 8017722:	f363 42dc 	bfi	r2, r3, #19, #10
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8017726:	f105 0315 	add.w	r3, r5, #21
 801772a:	eb04 1643 	add.w	r6, r4, r3, lsl #5
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801772e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8017732:	f896 05f8 	ldrb.w	r0, [r6, #1528]	; 0x5f8
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8017736:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 801773a:	f360 725e 	bfi	r2, r0, #29, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801773e:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8017740:	78e2      	ldrb	r2, [r4, #3]
 8017742:	2a01      	cmp	r2, #1
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8017744:	bf08      	it	eq
 8017746:	f8d6 25fc 	ldreq.w	r2, [r6, #1532]	; 0x5fc
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 801774a:	4620      	mov	r0, r4
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  if (pdev->cfg.dma_enable == 1)
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 801774c:	bf08      	it	eq
 801774e:	615a      	streq	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8017750:	681e      	ldr	r6, [r3, #0]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8017752:	f7ff fe76 	bl	8017442 <USB_OTG_IsEvenFrame>
 8017756:	f360 765d 	bfi	r6, r0, #29, #1
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801775a:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 801775e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8017762:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
 8017766:	f36f 769e 	bfc	r6, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801776a:	600e      	str	r6, [r1, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 801776c:	78e3      	ldrb	r3, [r4, #3]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d134      	bne.n	80177dc <USB_OTG_HC_StartXfer+0x10e>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8017772:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8017776:	f892 0892 	ldrb.w	r0, [r2, #2194]	; 0x892
 801777a:	2800      	cmp	r0, #0
 801777c:	d12e      	bne.n	80177dc <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
 801777e:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8017782:	b35b      	cbz	r3, 80177dc <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8017784:	f892 2895 	ldrb.w	r2, [r2, #2197]	; 0x895
 8017788:	2a03      	cmp	r2, #3
 801778a:	d81e      	bhi.n	80177ca <USB_OTG_HC_StartXfer+0xfc>
 801778c:	e8df f002 	tbb	[pc, r2]
 8017790:	0f020f02 	.word	0x0f020f02
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8017794:	68e2      	ldr	r2, [r4, #12]
 8017796:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8017798:	1cd8      	adds	r0, r3, #3
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 801779a:	9103      	str	r1, [sp, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 801779c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80177a0:	b289      	uxth	r1, r1
 80177a2:	4281      	cmp	r1, r0
 80177a4:	d211      	bcs.n	80177ca <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80177a6:	6991      	ldr	r1, [r2, #24]
 80177a8:	f041 0020 	orr.w	r0, r1, #32
 80177ac:	e00c      	b.n	80177c8 <USB_OTG_HC_StartXfer+0xfa>
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80177ae:	6961      	ldr	r1, [r4, #20]
 80177b0:	6908      	ldr	r0, [r1, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80177b2:	1cd9      	adds	r1, r3, #3
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80177b4:	b282      	uxth	r2, r0
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80177b6:	9001      	str	r0, [sp, #4]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80177b8:	f3c1 008f 	ubfx	r0, r1, #2, #16
 80177bc:	4282      	cmp	r2, r0
 80177be:	d204      	bcs.n	80177ca <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80177c0:	68e2      	ldr	r2, [r4, #12]
 80177c2:	6991      	ldr	r1, [r2, #24]
 80177c4:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80177c8:	6190      	str	r0, [r2, #24]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 80177ca:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80177ce:	4620      	mov	r0, r4
 80177d0:	f8d2 189c 	ldr.w	r1, [r2, #2204]	; 0x89c
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	462a      	mov	r2, r5
 80177d8:	f7ff fcda 	bl	8017190 <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
}
 80177dc:	2000      	movs	r0, #0
 80177de:	b006      	add	sp, #24
 80177e0:	bd70      	pop	{r4, r5, r6, pc}

080177e2 <USB_OTG_HC_Halt>:
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80177e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80177e6:	b086      	sub	sp, #24
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80177e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80177ec:	6813      	ldr	r3, [r2, #0]
  hcchar.b.chen = 1;
  hcchar.b.chdis = 1;
 80177ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 80177f2:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80177f6:	f011 010c 	ands.w	r1, r1, #12
 80177fa:	d001      	beq.n	8017800 <USB_OTG_HC_Halt+0x1e>
 80177fc:	2908      	cmp	r1, #8
 80177fe:	d102      	bne.n	8017806 <USB_OTG_HC_Halt+0x24>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8017800:	68c0      	ldr	r0, [r0, #12]
 8017802:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017804:	e001      	b.n	801780a <USB_OTG_HC_Halt+0x28>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8017806:	6940      	ldr	r0, [r0, #20]
 8017808:	6901      	ldr	r1, [r0, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 801780a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801780e:	b909      	cbnz	r1, 8017814 <USB_OTG_HC_Halt+0x32>
    {
      hcchar.b.chen = 0;
 8017810:	f361 73df 	bfi	r3, r1, #31, #1
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8017814:	6013      	str	r3, [r2, #0]
  return status;
}
 8017816:	2000      	movs	r0, #0
 8017818:	b006      	add	sp, #24
 801781a:	4770      	bx	lr

0801781c <USB_OTG_HC_DoPing>:
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801781c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8017820:	b510      	push	{r4, lr}
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8017822:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
 8017826:	2301      	movs	r3, #1
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
 8017828:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  hctsiz.b.pktcnt = 1;
 801782c:	f363 44dc 	bfi	r4, r3, #19, #10
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8017830:	6104      	str	r4, [r0, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8017832:	6803      	ldr	r3, [r0, #0]
{
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 8017834:	2200      	movs	r2, #0
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.chen = 1;
 8017836:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
 801783a:	f362 719e 	bfi	r1, r2, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801783e:	6001      	str	r1, [r0, #0]
  return status;  
}
 8017840:	4610      	mov	r0, r2
 8017842:	bd10      	pop	{r4, pc}

08017844 <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8017844:	6903      	ldr	r3, [r0, #16]
 8017846:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 8017848:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 801784c:	601a      	str	r2, [r3, #0]
 801784e:	4770      	bx	lr

08017850 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8017850:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8017852:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8017854:	4604      	mov	r4, r0
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8017856:	2500      	movs	r5, #0
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8017858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 801785c:	619d      	str	r5, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 801785e:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8017860:	f7ff fc66 	bl	8017130 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8017864:	78e0      	ldrb	r0, [r4, #3]
  {
    intmsk.b.rxstsqlvl = 1;
 8017866:	42a8      	cmp	r0, r5
 8017868:	bf0c      	ite	eq
 801786a:	2110      	moveq	r1, #16
 801786c:	4629      	movne	r1, r5
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
  intmsk.b.usbreset   = 1;
  intmsk.b.enumdone   = 1;
  intmsk.b.inepintr   = 1;
 801786e:	f441 2387 	orr.w	r3, r1, #276480	; 0x43800
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
 8017872:	f043 1208 	orr.w	r2, r3, #524296	; 0x80008
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8017876:	68e3      	ldr	r3, [r4, #12]
 8017878:	6999      	ldr	r1, [r3, #24]
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 801787a:	f442 1040 	orr.w	r0, r2, #3145728	; 0x300000
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 801787e:	ea21 0100 	bic.w	r1, r1, r0
 8017882:	ea41 0200 	orr.w	r2, r1, r0
 8017886:	619a      	str	r2, [r3, #24]
  return status;
}
 8017888:	4628      	mov	r0, r5
 801788a:	bd38      	pop	{r3, r4, r5, pc}

0801788c <USB_OTG_CoreInitDev>:
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 801788c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8017890:	6901      	ldr	r1, [r0, #16]
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8017892:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 8017894:	2600      	movs	r6, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8017896:	601e      	str	r6, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8017898:	680a      	ldr	r2, [r1, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 801789a:	f366 22cc 	bfi	r2, r6, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 801789e:	600a      	str	r2, [r1, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 80178a0:	7ac3      	ldrb	r3, [r0, #11]
 80178a2:	2b01      	cmp	r3, #1
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 80178a4:	4604      	mov	r4, r0
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 80178a6:	4635      	mov	r5, r6
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 80178a8:	d11b      	bne.n	80178e2 <USB_OTG_CoreInitDev+0x56>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 80178aa:	2103      	movs	r1, #3
 80178ac:	f7ff ffca 	bl	8017844 <USB_OTG_InitDevSpeed>
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80178b0:	21c0      	movs	r1, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80178b2:	68e0      	ldr	r0, [r4, #12]
 80178b4:	2280      	movs	r2, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 80178b6:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80178ba:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 80178be:	f362 451f 	bfi	r5, r2, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 80178c2:	f362 060f 	bfi	r6, r2, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80178c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80178ca:	6242      	str	r2, [r0, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 80178cc:	6286      	str	r6, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 80178ce:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80178d2:	f363 050f 	bfi	r5, r3, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 80178d6:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 80178da:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 80178de:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
  }
#endif
#ifdef USB_OTG_HS_CORE
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID  )
 80178e2:	7ae1      	ldrb	r1, [r4, #11]
 80178e4:	bb11      	cbnz	r1, 801792c <USB_OTG_CoreInitDev+0xa0>
  {
    
    /* Set High speed phy */
    
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80178e6:	7a22      	ldrb	r2, [r4, #8]
 80178e8:	2a01      	cmp	r2, #1
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH);
    }
    else /* set High speed phy in Full speed mode */
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
 80178ea:	bf18      	it	ne
 80178ec:	2101      	movne	r1, #1
    
    /* Set High speed phy */
    
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH);
 80178ee:	4620      	mov	r0, r4
    }
    else /* set High speed phy in Full speed mode */
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
 80178f0:	f7ff ffa8 	bl	8017844 <USB_OTG_InitDevSpeed>
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 80178f4:	2340      	movs	r3, #64	; 0x40
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80178f6:	2180      	movs	r1, #128	; 0x80
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 80178f8:	68e0      	ldr	r0, [r4, #12]
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
 80178fa:	f363 461f 	bfi	r6, r3, #16, #16
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80178fe:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
 8017902:	f363 451f 	bfi	r5, r3, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
 8017906:	f363 060f 	bfi	r6, r3, #0, #16
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 801790a:	22c0      	movs	r2, #192	; 0xc0
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 801790c:	6243      	str	r3, [r0, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 801790e:	6286      	str	r6, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8017910:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8017914:	f362 050f 	bfi	r5, r2, #0, #16
    txfifosize.b.depth = TX2_FIFO_HS_SIZE;
 8017918:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 801791c:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8017920:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    
    /* EP4 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX4_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[3], txfifosize.d32 );
 8017924:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    
    
    /* EP5 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
 8017928:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 801792c:	2110      	movs	r1, #16
 801792e:	4620      	mov	r0, r4
 8017930:	f7ff fd26 	bl	8017380 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8017934:	4620      	mov	r0, r4
 8017936:	f7ff fd41 	bl	80173bc <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 801793a:	6920      	ldr	r0, [r4, #16]
 801793c:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 801793e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8017942:	6103      	str	r3, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8017944:	6143      	str	r3, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8017946:	6181      	str	r1, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8017948:	61c3      	str	r3, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801794a:	7862      	ldrb	r2, [r4, #1]
 801794c:	4293      	cmp	r3, r2
 801794e:	d214      	bcs.n	801797a <USB_OTG_CoreInitDev+0xee>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8017950:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017954:	3301      	adds	r3, #1
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8017956:	6990      	ldr	r0, [r2, #24]
 8017958:	6801      	ldr	r1, [r0, #0]
    if (depctl.b.epena)
 801795a:	f3c1 6207 	ubfx	r2, r1, #24, #8
 801795e:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8017962:	b2ca      	uxtb	r2, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8017964:	2a00      	cmp	r2, #0
 8017966:	bf14      	ite	ne
 8017968:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 801796c:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 801796e:	6001      	str	r1, [r0, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8017970:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8017972:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8017974:	6102      	str	r2, [r0, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8017976:	6081      	str	r1, [r0, #8]
 8017978:	e7e7      	b.n	801794a <USB_OTG_CoreInitDev+0xbe>
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801797a:	2300      	movs	r3, #0
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 801797c:	7860      	ldrb	r0, [r4, #1]
 801797e:	4283      	cmp	r3, r0
 8017980:	d214      	bcs.n	80179ac <USB_OTG_CoreInitDev+0x120>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8017982:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8017986:	3301      	adds	r3, #1
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8017988:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801798a:	6811      	ldr	r1, [r2, #0]
    if (depctl.b.epena)
 801798c:	f3c1 6007 	ubfx	r0, r1, #24, #8
 8017990:	f000 0180 	and.w	r1, r0, #128	; 0x80
 8017994:	b2c8      	uxtb	r0, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8017996:	2800      	cmp	r0, #0
 8017998:	bf14      	ite	ne
 801799a:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 801799e:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 80179a0:	6011      	str	r1, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 80179a2:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80179a4:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 80179a6:	6110      	str	r0, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80179a8:	6091      	str	r1, [r2, #8]
 80179aa:	e7e7      	b.n	801797c <USB_OTG_CoreInitDev+0xf0>
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 80179ac:	6923      	ldr	r3, [r4, #16]
 80179ae:	6919      	ldr	r1, [r3, #16]
 80179b0:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 80179b4:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80179b6:	78e0      	ldrb	r0, [r4, #3]
 80179b8:	2801      	cmp	r0, #1
 80179ba:	d104      	bne.n	80179c6 <USB_OTG_CoreInitDev+0x13a>
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 80179bc:	4a04      	ldr	r2, [pc, #16]	; (80179d0 <USB_OTG_CoreInitDev+0x144>)
    dthrctl.b.rx_thr_len = 64;
 80179be:	2140      	movs	r1, #64	; 0x40
 80179c0:	f361 4259 	bfi	r2, r1, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 80179c4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 80179c6:	4620      	mov	r0, r4
 80179c8:	f7ff ff42 	bl	8017850 <USB_OTG_EnableDevInt>
  return status;
}
 80179cc:	2000      	movs	r0, #0
 80179ce:	bd70      	pop	{r4, r5, r6, pc}
 80179d0:	00010103 	.word	0x00010103

080179d4 <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80179d4:	6903      	ldr	r3, [r0, #16]
 80179d6:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 80179d8:	f3c0 0141 	ubfx	r1, r0, #1, #2
 80179dc:	1e4b      	subs	r3, r1, #1
 80179de:	2b02      	cmp	r3, #2
 80179e0:	d802      	bhi.n	80179e8 <USB_OTG_GetDeviceSpeed+0x14>
 80179e2:	4a02      	ldr	r2, [pc, #8]	; (80179ec <USB_OTG_GetDeviceSpeed+0x18>)
 80179e4:	5cd0      	ldrb	r0, [r2, r3]
 80179e6:	4770      	bx	lr
 80179e8:	2003      	movs	r0, #3
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 80179ea:	4770      	bx	lr
 80179ec:	0801cc62 	.word	0x0801cc62

080179f0 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80179f0:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 80179f2:	6981      	ldr	r1, [r0, #24]
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 80179f4:	b510      	push	{r4, lr}
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80179f6:	689c      	ldr	r4, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 80179f8:	680a      	ldr	r2, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 80179fa:	f3c4 0041 	ubfx	r0, r4, #1, #2
 80179fe:	2802      	cmp	r0, #2
 8017a00:	d002      	beq.n	8017a08 <USB_OTG_EP0Activate+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8017a02:	f36f 020a 	bfc	r2, #0, #11
    break;
 8017a06:	e002      	b.n	8017a0e <USB_OTG_EP0Activate+0x1e>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8017a08:	2003      	movs	r0, #3
 8017a0a:	f360 020a 	bfi	r2, r0, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8017a0e:	600a      	str	r2, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8017a10:	6859      	ldr	r1, [r3, #4]
 8017a12:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8017a16:	605a      	str	r2, [r3, #4]
  return status;
}
 8017a18:	2000      	movs	r0, #0
 8017a1a:	bd10      	pop	{r4, pc}

08017a1c <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8017a1c:	b530      	push	{r4, r5, lr}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a1e:	784d      	ldrb	r5, [r1, #1]
 8017a20:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 8017a22:	2200      	movs	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a24:	2d01      	cmp	r5, #1
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8017a26:	eb00 0483 	add.w	r4, r0, r3, lsl #2
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a2a:	d105      	bne.n	8017a38 <USB_OTG_EPActivate+0x1c>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8017a2c:	fa05 f503 	lsl.w	r5, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8017a30:	69a4      	ldr	r4, [r4, #24]
    daintmsk.ep.in = 1 << ep->num;
 8017a32:	f365 020f 	bfi	r2, r5, #0, #16
 8017a36:	e005      	b.n	8017a44 <USB_OTG_EPActivate+0x28>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8017a38:	2501      	movs	r5, #1
 8017a3a:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8017a3e:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8017a40:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8017a44:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8017a46:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8017a4a:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8017a4e:	b2ed      	uxtb	r5, r5
 8017a50:	b96d      	cbnz	r5, 8017a6e <USB_OTG_EPActivate+0x52>
  {
    depctl.b.mps    = ep->maxpacket;
 8017a52:	688d      	ldr	r5, [r1, #8]
 8017a54:	f365 030a 	bfi	r3, r5, #0, #11
    depctl.b.eptype = ep->type;
 8017a58:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 8017a5a:	88c9      	ldrh	r1, [r1, #6]
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
  if (!depctl.b.usbactep)
  {
    depctl.b.mps    = ep->maxpacket;
    depctl.b.eptype = ep->type;
 8017a5c:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8017a60:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
 8017a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 8017a68:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8017a6c:	6021      	str	r1, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8017a6e:	6900      	ldr	r0, [r0, #16]
 8017a70:	69c3      	ldr	r3, [r0, #28]
 8017a72:	431a      	orrs	r2, r3
 8017a74:	61c2      	str	r2, [r0, #28]
  return status;
}
 8017a76:	2000      	movs	r0, #0
 8017a78:	bd30      	pop	{r4, r5, pc}

08017a7a <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8017a7a:	b530      	push	{r4, r5, lr}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a7c:	784d      	ldrb	r5, [r1, #1]
 8017a7e:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8017a80:	2400      	movs	r4, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a82:	2d01      	cmp	r5, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 8017a84:	4622      	mov	r2, r4
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8017a86:	eb00 0183 	add.w	r1, r0, r3, lsl #2
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8017a8a:	d105      	bne.n	8017a98 <USB_OTG_EPDeactivate+0x1e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8017a8c:	fa05 f303 	lsl.w	r3, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8017a90:	6989      	ldr	r1, [r1, #24]
    daintmsk.ep.in = 1 << ep->num;
 8017a92:	f363 020f 	bfi	r2, r3, #0, #16
 8017a96:	e005      	b.n	8017aa4 <USB_OTG_EPDeactivate+0x2a>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8017a98:	2501      	movs	r5, #1
 8017a9a:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8017a9e:	6d49      	ldr	r1, [r1, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8017aa0:	f363 421f 	bfi	r2, r3, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8017aa4:	6900      	ldr	r0, [r0, #16]
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
  }
  depctl.b.usbactep = 0;
 8017aa6:	f36f 34cf 	bfc	r4, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8017aaa:	600c      	str	r4, [r1, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8017aac:	69c1      	ldr	r1, [r0, #28]
 8017aae:	ea21 0202 	bic.w	r2, r1, r2
 8017ab2:	61c2      	str	r2, [r0, #28]
  return status;
}
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	bd30      	pop	{r4, r5, pc}

08017ab8 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8017ab8:	b570      	push	{r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8017aba:	784e      	ldrb	r6, [r1, #1]
 8017abc:	780a      	ldrb	r2, [r1, #0]
 8017abe:	2e01      	cmp	r6, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8017ac0:	460b      	mov	r3, r1
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8017ac2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8017ac6:	d148      	bne.n	8017b5a <USB_OTG_EPStartXfer+0xa2>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8017ac8:	698d      	ldr	r5, [r1, #24]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8017aca:	695c      	ldr	r4, [r3, #20]
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8017acc:	6829      	ldr	r1, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8017ace:	692a      	ldr	r2, [r5, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8017ad0:	f364 0212 	bfi	r2, r4, #0, #19
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8017ad4:	b914      	cbnz	r4, 8017adc <USB_OTG_EPStartXfer+0x24>
    {
      deptsiz.b.xfersize = 0;
      deptsiz.b.pktcnt = 1;
 8017ad6:	f366 42dc 	bfi	r2, r6, #19, #10
 8017ada:	e00b      	b.n	8017af4 <USB_OTG_EPStartXfer+0x3c>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8017adc:	689e      	ldr	r6, [r3, #8]
 8017ade:	19a4      	adds	r4, r4, r6
 8017ae0:	3c01      	subs	r4, #1
 8017ae2:	fbb4 f6f6 	udiv	r6, r4, r6
      
      if (ep->type == EP_TYPE_ISOC)
 8017ae6:	78dc      	ldrb	r4, [r3, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8017ae8:	f366 42dc 	bfi	r2, r6, #19, #10
      
      if (ep->type == EP_TYPE_ISOC)
 8017aec:	2c01      	cmp	r4, #1
      {
        deptsiz.b.mc = 1;
 8017aee:	bf08      	it	eq
 8017af0:	f364 725e 	bfieq	r2, r4, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8017af4:	612a      	str	r2, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8017af6:	78c2      	ldrb	r2, [r0, #3]
 8017af8:	2a01      	cmp	r2, #1
 8017afa:	d106      	bne.n	8017b0a <USB_OTG_EPStartXfer+0x52>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8017afc:	781a      	ldrb	r2, [r3, #0]
 8017afe:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8017b02:	691a      	ldr	r2, [r3, #16]
 8017b04:	69a4      	ldr	r4, [r4, #24]
 8017b06:	6162      	str	r2, [r4, #20]
 8017b08:	e00c      	b.n	8017b24 <USB_OTG_EPStartXfer+0x6c>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8017b0a:	78da      	ldrb	r2, [r3, #3]
 8017b0c:	2a01      	cmp	r2, #1
 8017b0e:	d009      	beq.n	8017b24 <USB_OTG_EPStartXfer+0x6c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8017b10:	695a      	ldr	r2, [r3, #20]
 8017b12:	b13a      	cbz	r2, 8017b24 <USB_OTG_EPStartXfer+0x6c>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017b14:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8017b16:	781c      	ldrb	r4, [r3, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017b18:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8017b1a:	2601      	movs	r6, #1
 8017b1c:	fa06 f404 	lsl.w	r4, r6, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017b20:	432c      	orrs	r4, r5
 8017b22:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8017b24:	78da      	ldrb	r2, [r3, #3]
 8017b26:	2a01      	cmp	r2, #1
 8017b28:	d107      	bne.n	8017b3a <USB_OTG_EPStartXfer+0x82>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8017b2a:	6902      	ldr	r2, [r0, #16]
 8017b2c:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8017b2e:	05d2      	lsls	r2, r2, #23
      {
        depctl.b.setd1pid = 1;
 8017b30:	bf54      	ite	pl
 8017b32:	f041 5100 	orrpl.w	r1, r1, #536870912	; 0x20000000
      }
      else
      {
        depctl.b.setd0pid = 1;
 8017b36:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8017b3a:	781a      	ldrb	r2, [r3, #0]
 8017b3c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8017b40:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8017b44:	6992      	ldr	r2, [r2, #24]
 8017b46:	6011      	str	r1, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8017b48:	78d9      	ldrb	r1, [r3, #3]
 8017b4a:	2901      	cmp	r1, #1
 8017b4c:	d137      	bne.n	8017bbe <USB_OTG_EPStartXfer+0x106>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8017b4e:	68d9      	ldr	r1, [r3, #12]
 8017b50:	781a      	ldrb	r2, [r3, #0]
 8017b52:	8a9b      	ldrh	r3, [r3, #20]
 8017b54:	f7ff fb1c 	bl	8017190 <USB_OTG_WritePacket>
 8017b58:	e031      	b.n	8017bbe <USB_OTG_EPStartXfer+0x106>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8017b5a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8017b5c:	695e      	ldr	r6, [r3, #20]
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8017b5e:	682a      	ldr	r2, [r5, #0]
 8017b60:	689c      	ldr	r4, [r3, #8]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8017b62:	6929      	ldr	r1, [r5, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8017b64:	b92e      	cbnz	r6, 8017b72 <USB_OTG_EPStartXfer+0xba>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8017b66:	f364 0112 	bfi	r1, r4, #0, #19
      deptsiz.b.pktcnt = 1;
 8017b6a:	2401      	movs	r4, #1
 8017b6c:	f364 41dc 	bfi	r1, r4, #19, #10
 8017b70:	e00a      	b.n	8017b88 <USB_OTG_EPStartXfer+0xd0>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8017b72:	1936      	adds	r6, r6, r4
 8017b74:	3e01      	subs	r6, #1
 8017b76:	fbb6 f6f4 	udiv	r6, r6, r4
 8017b7a:	f366 41dc 	bfi	r1, r6, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8017b7e:	05b6      	lsls	r6, r6, #22
 8017b80:	0db6      	lsrs	r6, r6, #22
 8017b82:	4374      	muls	r4, r6
 8017b84:	f364 0112 	bfi	r1, r4, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8017b88:	6129      	str	r1, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8017b8a:	78c1      	ldrb	r1, [r0, #3]
 8017b8c:	2901      	cmp	r1, #1
 8017b8e:	d105      	bne.n	8017b9c <USB_OTG_EPStartXfer+0xe4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8017b90:	781c      	ldrb	r4, [r3, #0]
 8017b92:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8017b96:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8017b98:	6919      	ldr	r1, [r3, #16]
 8017b9a:	6161      	str	r1, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8017b9c:	78d9      	ldrb	r1, [r3, #3]
 8017b9e:	2901      	cmp	r1, #1
 8017ba0:	d106      	bne.n	8017bb0 <USB_OTG_EPStartXfer+0xf8>
    {
      if (ep->even_odd_frame)
 8017ba2:	7959      	ldrb	r1, [r3, #5]
 8017ba4:	b111      	cbz	r1, 8017bac <USB_OTG_EPStartXfer+0xf4>
      {
        depctl.b.setd1pid = 1;
 8017ba6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8017baa:	e001      	b.n	8017bb0 <USB_OTG_EPStartXfer+0xf8>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8017bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8017bb6:	f042 4104 	orr.w	r1, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8017bba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8017bbc:	6011      	str	r1, [r2, #0]
  }
  return status;
}
 8017bbe:	2000      	movs	r0, #0
 8017bc0:	bd70      	pop	{r4, r5, r6, pc}

08017bc2 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8017bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8017bc4:	784d      	ldrb	r5, [r1, #1]
 8017bc6:	2d01      	cmp	r5, #1
 8017bc8:	d13d      	bne.n	8017c46 <USB_OTG_EP0StartXfer+0x84>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8017bca:	6983      	ldr	r3, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8017bcc:	694a      	ldr	r2, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8017bce:	681e      	ldr	r6, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8017bd0:	691c      	ldr	r4, [r3, #16]
 8017bd2:	9400      	str	r4, [sp, #0]
 8017bd4:	b2e4      	uxtb	r4, r4
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8017bd6:	b942      	cbnz	r2, 8017bea <USB_OTG_EP0StartXfer+0x28>
    {
      deptsiz.b.xfersize = 0;
 8017bd8:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8017bdc:	f89d 2002 	ldrb.w	r2, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8017be0:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8017be4:	f365 02c4 	bfi	r2, r5, #3, #2
 8017be8:	e00e      	b.n	8017c08 <USB_OTG_EP0StartXfer+0x46>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8017bea:	688d      	ldr	r5, [r1, #8]
 8017bec:	42aa      	cmp	r2, r5
      {
        ep->xfer_len = ep->maxpacket;
 8017bee:	bf8a      	itet	hi
 8017bf0:	614d      	strhi	r5, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8017bf2:	f362 0406 	bfils	r4, r2, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 8017bf6:	f365 0406 	bfihi	r4, r5, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 8017bfa:	f89d 2002 	ldrb.w	r2, [sp, #2]
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8017bfe:	f88d 4000 	strb.w	r4, [sp]
      }
      deptsiz.b.pktcnt = 1;
 8017c02:	2401      	movs	r4, #1
 8017c04:	f364 02c4 	bfi	r2, r4, #3, #2
 8017c08:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8017c0c:	9a00      	ldr	r2, [sp, #0]
 8017c0e:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8017c10:	78c2      	ldrb	r2, [r0, #3]
 8017c12:	2a01      	cmp	r2, #1
 8017c14:	d105      	bne.n	8017c22 <USB_OTG_EP0StartXfer+0x60>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8017c16:	780c      	ldrb	r4, [r1, #0]
 8017c18:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8017c1c:	6994      	ldr	r4, [r2, #24]
 8017c1e:	690a      	ldr	r2, [r1, #16]
 8017c20:	6162      	str	r2, [r4, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8017c22:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8017c26:	601e      	str	r6, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8017c28:	78c3      	ldrb	r3, [r0, #3]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d134      	bne.n	8017c98 <USB_OTG_EP0StartXfer+0xd6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8017c2e:	694a      	ldr	r2, [r1, #20]
 8017c30:	2a00      	cmp	r2, #0
 8017c32:	d031      	beq.n	8017c98 <USB_OTG_EP0StartXfer+0xd6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017c34:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8017c36:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017c38:	6b58      	ldr	r0, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8017c3a:	2101      	movs	r1, #1
 8017c3c:	fa01 f202 	lsl.w	r2, r1, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8017c40:	4302      	orrs	r2, r0
 8017c42:	635a      	str	r2, [r3, #52]	; 0x34
 8017c44:	e028      	b.n	8017c98 <USB_OTG_EP0StartXfer+0xd6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8017c46:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8017c48:	694e      	ldr	r6, [r1, #20]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8017c4a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8017c4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8017c50:	688a      	ldr	r2, [r1, #8]
 8017c52:	681d      	ldr	r5, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8017c54:	691c      	ldr	r4, [r3, #16]
 8017c56:	9400      	str	r4, [sp, #0]
 8017c58:	b2e4      	uxtb	r4, r4
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8017c5a:	b106      	cbz	r6, 8017c5e <USB_OTG_EP0StartXfer+0x9c>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8017c5c:	614a      	str	r2, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8017c5e:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8017c62:	f89d 2002 	ldrb.w	r2, [sp, #2]
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 8017c66:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8017c6a:	2401      	movs	r4, #1
 8017c6c:	f364 02c4 	bfi	r2, r4, #3, #2
 8017c70:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8017c74:	9a00      	ldr	r2, [sp, #0]
 8017c76:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8017c78:	78c3      	ldrb	r3, [r0, #3]
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d105      	bne.n	8017c8a <USB_OTG_EP0StartXfer+0xc8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8017c7e:	780a      	ldrb	r2, [r1, #0]
 8017c80:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8017c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c86:	690b      	ldr	r3, [r1, #16]
 8017c88:	6153      	str	r3, [r2, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8017c8a:	7809      	ldrb	r1, [r1, #0]
 8017c8c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8017c90:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8017c94:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8017c96:	6015      	str	r5, [r2, #0]
    
  }
  return status;
}
 8017c98:	2000      	movs	r0, #0
 8017c9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08017c9c <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8017c9c:	784b      	ldrb	r3, [r1, #1]
 8017c9e:	7809      	ldrb	r1, [r1, #0]
 8017ca0:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8017ca2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8017ca6:	d10d      	bne.n	8017cc4 <USB_OTG_EPSetStall+0x28>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8017ca8:	6980      	ldr	r0, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8017caa:	6803      	ldr	r3, [r0, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8017cac:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8017cb0:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8017cb4:	b2ca      	uxtb	r2, r1
 8017cb6:	b10a      	cbz	r2, 8017cbc <USB_OTG_EPSetStall+0x20>
    {
      depctl.b.epdis = 1;
 8017cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    }
    depctl.b.stall = 1;
 8017cbc:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8017cc0:	6001      	str	r1, [r0, #0]
 8017cc2:	e004      	b.n	8017cce <USB_OTG_EPSetStall+0x32>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8017cc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8017cc6:	681a      	ldr	r2, [r3, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8017cc8:	f442 1100 	orr.w	r1, r2, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8017ccc:	6019      	str	r1, [r3, #0]
  }
  return status;
}
 8017cce:	2000      	movs	r0, #0
 8017cd0:	4770      	bx	lr

08017cd2 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 8017cd2:	784b      	ldrb	r3, [r1, #1]
 8017cd4:	2b01      	cmp	r3, #1
 8017cd6:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8017cd8:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8017cda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017cde:	bf0c      	ite	eq
 8017ce0:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8017ce2:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8017ce4:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8017ce6:	1e88      	subs	r0, r1, #2
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 8017ce8:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8017cec:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8017cee:	bf98      	it	ls
 8017cf0:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8017cf4:	6013      	str	r3, [r2, #0]
  return status;
}
 8017cf6:	2000      	movs	r0, #0
 8017cf8:	4770      	bx	lr

08017cfa <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8017cfa:	6903      	ldr	r3, [r0, #16]
 8017cfc:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8017cfe:	69d8      	ldr	r0, [r3, #28]
 8017d00:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 8017d02:	0c00      	lsrs	r0, r0, #16
 8017d04:	4770      	bx	lr

08017d06 <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8017d06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8017d0a:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8017d0c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8017d0e:	6899      	ldr	r1, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8017d10:	6950      	ldr	r0, [r2, #20]
  return v;
}
 8017d12:	4008      	ands	r0, r1
 8017d14:	4770      	bx	lr

08017d16 <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8017d16:	6903      	ldr	r3, [r0, #16]
 8017d18:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8017d1a:	69d9      	ldr	r1, [r3, #28]
 8017d1c:	4008      	ands	r0, r1
  return (v & 0xffff);
}
 8017d1e:	b280      	uxth	r0, r0
 8017d20:	4770      	bx	lr

08017d22 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8017d22:	b082      	sub	sp, #8
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8017d24:	2300      	movs	r3, #0
 8017d26:	9300      	str	r3, [sp, #0]
  doeptsize0.b.supcnt = 3;
 8017d28:	21c0      	movs	r1, #192	; 0xc0
  doeptsize0.b.pktcnt = 1;
 8017d2a:	2201      	movs	r2, #1
 8017d2c:	2300      	movs	r3, #0
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 8017d2e:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
 8017d32:	f362 03c4 	bfi	r3, r2, #3, #2
  doeptsize0.b.xfersize = 8 * 3;
 8017d36:	2118      	movs	r1, #24
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 8017d38:	f88d 3002 	strb.w	r3, [sp, #2]
  doeptsize0.b.xfersize = 8 * 3;
 8017d3c:	f88d 1000 	strb.w	r1, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8017d40:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8017d42:	9a00      	ldr	r2, [sp, #0]
 8017d44:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8017d46:	78c1      	ldrb	r1, [r0, #3]
 8017d48:	2901      	cmp	r1, #1
 8017d4a:	d106      	bne.n	8017d5a <USB_OTG_EP0_OutStart+0x38>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8017d4c:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 8017d50:	6158      	str	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8017d52:	681a      	ldr	r2, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8017d54:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8017d58:	601a      	str	r2, [r3, #0]
  }
}
 8017d5a:	b002      	add	sp, #8
 8017d5c:	4770      	bx	lr

08017d5e <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8017d5e:	b510      	push	{r4, lr}
 8017d60:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8017d62:	f7ff fa39 	bl	80171d8 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8017d66:	2301      	movs	r3, #1
 8017d68:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8017d72:	7862      	ldrb	r2, [r4, #1]
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d213      	bcs.n	8017da0 <DCD_Init+0x42>
  {
    ep = &pdev->dev.in_ep[i];
 8017d78:	2228      	movs	r2, #40	; 0x28
 8017d7a:	fb02 4103 	mla	r1, r2, r3, r4
 8017d7e:	f501 728e 	add.w	r2, r1, #284	; 0x11c
    /* Init ep structure */
    ep->is_in = 1;
 8017d82:	2001      	movs	r0, #1
 8017d84:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    ep->num = i;
 8017d88:	f881 311c 	strb.w	r3, [r1, #284]	; 0x11c
    ep->tx_fifo_num = i;
 8017d8c:	f8a1 3122 	strh.w	r3, [r1, #290]	; 0x122
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8017d90:	2040      	movs	r0, #64	; 0x40
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 8017d92:	2100      	movs	r1, #0
 8017d94:	70d1      	strb	r1, [r2, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8017d96:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8017d98:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8017d9a:	6151      	str	r1, [r2, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	e7e8      	b.n	8017d72 <DCD_Init+0x14>
 8017da0:	2300      	movs	r3, #0
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017da2:	7860      	ldrb	r0, [r4, #1]
 8017da4:	4283      	cmp	r3, r0
 8017da6:	d213      	bcs.n	8017dd0 <DCD_Init+0x72>
  {
    ep = &pdev->dev.out_ep[i];
 8017da8:	2128      	movs	r1, #40	; 0x28
 8017daa:	fb01 4003 	mla	r0, r1, r3, r4
 8017dae:	f500 725d 	add.w	r2, r0, #884	; 0x374
    /* Init ep structure */
    ep->is_in = 0;
 8017db2:	2100      	movs	r1, #0
    ep->num = i;
 8017db4:	f880 3374 	strb.w	r3, [r0, #884]	; 0x374
    ep->tx_fifo_num = i;
 8017db8:	f8a0 337a 	strh.w	r3, [r0, #890]	; 0x37a
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 8017dbc:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8017dc0:	f880 1377 	strb.w	r1, [r0, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8017dc4:	2040      	movs	r0, #64	; 0x40
 8017dc6:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8017dc8:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8017dca:	6151      	str	r1, [r2, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017dcc:	3301      	adds	r3, #1
 8017dce:	e7e8      	b.n	8017da2 <DCD_Init+0x44>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f7ff face 	bl	8017372 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f7ff fa60 	bl	801729c <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8017ddc:	2100      	movs	r1, #0
 8017dde:	4620      	mov	r0, r4
 8017de0:	f7ff fb06 	bl	80173f0 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8017de4:	4620      	mov	r0, r4
 8017de6:	f7ff fd51 	bl	801788c <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8017dea:	4620      	mov	r0, r4
}
 8017dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8017df0:	f7ff bab8 	b.w	8017364 <USB_OTG_EnableGlobalInt>

08017df4 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8017df4:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8017df6:	b2cd      	uxtb	r5, r1
 8017df8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017dfc:	f04f 0628 	mov.w	r6, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017e00:	fb06 0404 	mla	r4, r6, r4, r0
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8017e04:	f015 0f80 	tst.w	r5, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017e08:	bf14      	ite	ne
 8017e0a:	f504 748e 	addne.w	r4, r4, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017e0e:	f504 745d 	addeq.w	r4, r4, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8017e12:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8017e16:	09ed      	lsrs	r5, r5, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8017e18:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8017e1a:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8017e1c:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8017e1e:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8017e20:	b105      	cbz	r5, 8017e24 <DCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8017e22:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8017e24:	2b02      	cmp	r3, #2
 8017e26:	d101      	bne.n	8017e2c <DCD_EP_Open+0x38>
  {
    ep->data_pid_start = 0;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	7123      	strb	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8017e2c:	4621      	mov	r1, r4
 8017e2e:	f7ff fdf5 	bl	8017a1c <USB_OTG_EPActivate>
  return 0;
}
 8017e32:	2000      	movs	r0, #0
 8017e34:	bd70      	pop	{r4, r5, r6, pc}

08017e36 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8017e36:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8017e38:	b2ca      	uxtb	r2, r1
 8017e3a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8017e3e:	f04f 0428 	mov.w	r4, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017e42:	fb04 0303 	mla	r3, r4, r3, r0
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8017e46:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017e4a:	bf14      	ite	ne
 8017e4c:	f503 738e 	addne.w	r3, r3, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017e50:	f503 735d 	addeq.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8017e54:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->is_in = (0x80 & ep_addr) != 0;
 8017e58:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8017e5a:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8017e5c:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8017e5e:	4619      	mov	r1, r3
 8017e60:	f7ff fe0b 	bl	8017a7a <USB_OTG_EPDeactivate>
  return 0;
}
 8017e64:	2000      	movs	r0, #0
 8017e66:	bd10      	pop	{r4, pc}

08017e68 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8017e68:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017e6a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017e6e:	2528      	movs	r5, #40	; 0x28
 8017e70:	fb05 0504 	mla	r5, r5, r4, r0
 8017e74:	f505 715d 	add.w	r1, r5, #884	; 0x374
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8017e78:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
 8017e7c:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 8017e7e:	2300      	movs	r3, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8017e80:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 8017e82:	618b      	str	r3, [r1, #24]
  ep->is_in = 0;
 8017e84:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
 8017e86:	78c3      	ldrb	r3, [r0, #3]
 8017e88:	2b01      	cmp	r3, #1
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017e8a:	f505 755c 	add.w	r5, r5, #880	; 0x370
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8017e8e:	bf08      	it	eq
 8017e90:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 8017e92:	b914      	cbnz	r4, 8017e9a <DCD_EP_PrepareRx+0x32>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8017e94:	f7ff fe95 	bl	8017bc2 <USB_OTG_EP0StartXfer>
 8017e98:	e001      	b.n	8017e9e <DCD_EP_PrepareRx+0x36>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8017e9a:	f7ff fe0d 	bl	8017ab8 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	bd38      	pop	{r3, r4, r5, pc}

08017ea2 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8017ea2:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017ea4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017ea8:	2528      	movs	r5, #40	; 0x28
 8017eaa:	fb05 0504 	mla	r5, r5, r4, r0
 8017eae:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8017eb2:	2601      	movs	r6, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
 8017eb4:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8017eb6:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
 8017eb8:	2200      	movs	r2, #0
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
 8017eba:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8017ebe:	704e      	strb	r6, [r1, #1]
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017ec0:	f505 758c 	add.w	r5, r5, #280	; 0x118
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 8017ec4:	618a      	str	r2, [r1, #24]
  ep->xfer_len  = buf_len;
 8017ec6:	614b      	str	r3, [r1, #20]
  
  if ( ep->num == 0 )
 8017ec8:	b914      	cbnz	r4, 8017ed0 <DCD_EP_Tx+0x2e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8017eca:	f7ff fe7a 	bl	8017bc2 <USB_OTG_EP0StartXfer>
 8017ece:	e001      	b.n	8017ed4 <DCD_EP_Tx+0x32>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8017ed0:	f7ff fdf2 	bl	8017ab8 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	bd70      	pop	{r4, r5, r6, pc}

08017ed8 <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017ed8:	b2ca      	uxtb	r2, r1
 8017eda:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8017ede:	b510      	push	{r4, lr}
 8017ee0:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017ee4:	d006      	beq.n	8017ef4 <DCD_EP_Stall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8017ee6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017eea:	fb03 0304 	mla	r3, r3, r4, r0
 8017eee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017ef2:	e003      	b.n	8017efc <DCD_EP_Stall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8017ef4:	fb03 0401 	mla	r4, r3, r1, r0
 8017ef8:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017efc:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8017efe:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 8017f00:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017f04:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8017f06:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017f08:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	f7ff fec6 	bl	8017c9c <USB_OTG_EPSetStall>
  return (0);
}
 8017f10:	2000      	movs	r0, #0
 8017f12:	bd10      	pop	{r4, pc}

08017f14 <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017f14:	b2ca      	uxtb	r2, r1
 8017f16:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8017f1a:	b510      	push	{r4, lr}
 8017f1c:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017f20:	d006      	beq.n	8017f30 <DCD_EP_ClrStall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8017f22:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017f26:	fb03 0304 	mla	r3, r3, r4, r0
 8017f2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017f2e:	e003      	b.n	8017f38 <DCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8017f30:	fb03 0401 	mla	r4, r3, r1, r0
 8017f34:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 8017f38:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017f3a:	09d2      	lsrs	r2, r2, #7
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
 8017f3c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017f40:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 8017f42:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017f44:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8017f46:	4619      	mov	r1, r3
 8017f48:	f7ff fec3 	bl	8017cd2 <USB_OTG_EPClearStall>
  return (0);
}
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	bd10      	pop	{r4, pc}

08017f50 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8017f50:	6902      	ldr	r2, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8017f52:	2300      	movs	r3, #0
  dcfg.b.devaddr = address;
 8017f54:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8017f58:	6811      	ldr	r1, [r2, #0]
 8017f5a:	430b      	orrs	r3, r1
 8017f5c:	6013      	str	r3, [r2, #0]
 8017f5e:	4770      	bx	lr

08017f60 <DCD_DevConnect>:
* @brief  Connect device (enable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
 8017f60:	4770      	bx	lr

08017f62 <DCD_DevDisconnect>:
* @brief  Disconnect device (disable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
 8017f62:	4770      	bx	lr

08017f64 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8017f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f68:	b085      	sub	sp, #20
 8017f6a:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8017f6c:	f7ff fa55 	bl	801741a <USB_OTG_IsDeviceMode>
 8017f70:	b908      	cbnz	r0, 8017f76 <USBD_OTG_ISR_Handler+0x12>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8017f72:	2000      	movs	r0, #0
 8017f74:	e23a      	b.n	80183ec <USBD_OTG_ISR_Handler+0x488>
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8017f76:	4620      	mov	r0, r4
 8017f78:	f7ff fa5b 	bl	8017432 <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8017f7c:	4607      	mov	r7, r0
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d0f7      	beq.n	8017f72 <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 8017f82:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 8017f86:	f00a 0008 	and.w	r0, sl, #8
 8017f8a:	b2c0      	uxtb	r0, r0
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	d056      	beq.n	801803e <USBD_OTG_ISR_Handler+0xda>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8017f90:	4620      	mov	r0, r4
 8017f92:	f7ff feb2 	bl	8017cfa <USB_OTG_ReadDevAllOutEp_itr>
 8017f96:	46a3      	mov	fp, r4
 8017f98:	4680      	mov	r8, r0
 8017f9a:	4626      	mov	r6, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8017f9c:	f04f 0900 	mov.w	r9, #0
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8017fa0:	f1b8 0f00 	cmp.w	r8, #0
 8017fa4:	d04a      	beq.n	801803c <USBD_OTG_ISR_Handler+0xd8>
  {
    if (ep_intr&0x1)
 8017fa6:	f018 0f01 	tst.w	r8, #1
 8017faa:	d03f      	beq.n	801802c <USBD_OTG_ISR_Handler+0xc8>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8017fac:	fa5f f389 	uxtb.w	r3, r9
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	9300      	str	r3, [sp, #0]
 8017fb6:	f7ff fea6 	bl	8017d06 <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8017fba:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8017fbe:	4605      	mov	r5, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8017fc0:	9b00      	ldr	r3, [sp, #0]
 8017fc2:	d020      	beq.n	8018006 <USBD_OTG_ISR_Handler+0xa2>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8017fc4:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8017fc6:	2501      	movs	r5, #1
 8017fc8:	6085      	str	r5, [r0, #8]
        if (pdev->cfg.dma_enable == 1)
 8017fca:	78e1      	ldrb	r1, [r4, #3]
 8017fcc:	42a9      	cmp	r1, r5
 8017fce:	d107      	bne.n	8017fe0 <USBD_OTG_ISR_Handler+0x7c>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8017fd0:	6902      	ldr	r2, [r0, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8017fd2:	f8db 137c 	ldr.w	r1, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 8017fd6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8017fda:	1a0a      	subs	r2, r1, r0
 8017fdc:	f8cb 238c 	str.w	r2, [fp, #908]	; 0x38c
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8017fe0:	4871      	ldr	r0, [pc, #452]	; (80181a8 <USBD_OTG_ISR_Handler+0x244>)
 8017fe2:	6801      	ldr	r1, [r0, #0]
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	680a      	ldr	r2, [r1, #0]
 8017fe8:	4619      	mov	r1, r3
 8017fea:	4790      	blx	r2
        
        if (pdev->cfg.dma_enable == 1)
 8017fec:	78e3      	ldrb	r3, [r4, #3]
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	d109      	bne.n	8018006 <USBD_OTG_ISR_Handler+0xa2>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8017ff2:	f1b9 0f00 	cmp.w	r9, #0
 8017ff6:	d106      	bne.n	8018006 <USBD_OTG_ISR_Handler+0xa2>
 8017ff8:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
 8017ffc:	2805      	cmp	r0, #5
 8017ffe:	d102      	bne.n	8018006 <USBD_OTG_ISR_Handler+0xa2>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8018000:	4620      	mov	r0, r4
 8018002:	f7ff fe8e 	bl	8017d22 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 8018006:	f005 0102 	and.w	r1, r5, #2
 801800a:	b2ca      	uxtb	r2, r1
 801800c:	b112      	cbz	r2, 8018014 <USBD_OTG_ISR_Handler+0xb0>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 801800e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8018010:	2502      	movs	r5, #2
 8018012:	609d      	str	r5, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8018014:	f005 0008 	and.w	r0, r5, #8
 8018018:	b2c1      	uxtb	r1, r0
 801801a:	b139      	cbz	r1, 801802c <USBD_OTG_ISR_Handler+0xc8>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 801801c:	4a62      	ldr	r2, [pc, #392]	; (80181a8 <USBD_OTG_ISR_Handler+0x244>)
 801801e:	6815      	ldr	r5, [r2, #0]
 8018020:	4620      	mov	r0, r4
 8018022:	68ab      	ldr	r3, [r5, #8]
 8018024:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 8018026:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8018028:	2108      	movs	r1, #8
 801802a:	6081      	str	r1, [r0, #8]
      }
    }
    epnum++;
 801802c:	f109 0901 	add.w	r9, r9, #1
    ep_intr >>= 1;
 8018030:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8018034:	3604      	adds	r6, #4
 8018036:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 801803a:	e7b1      	b.n	8017fa0 <USBD_OTG_ISR_Handler+0x3c>
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 801803c:	2001      	movs	r0, #1
    }    
    
    if (gintr_status.b.inepint)
 801803e:	f00a 0a04 	and.w	sl, sl, #4
 8018042:	fa5f f38a 	uxtb.w	r3, sl
 8018046:	2b00      	cmp	r3, #0
 8018048:	f000 80b1 	beq.w	80181ae <USBD_OTG_ISR_Handler+0x24a>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 801804c:	4620      	mov	r0, r4
 801804e:	f7ff fe62 	bl	8017d16 <USB_OTG_ReadDevAllInEPItr>
 8018052:	4626      	mov	r6, r4
 8018054:	4681      	mov	r9, r0
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8018056:	f04f 0800 	mov.w	r8, #0
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 801805a:	f1b9 0f00 	cmp.w	r9, #0
 801805e:	f000 80a5 	beq.w	80181ac <USBD_OTG_ISR_Handler+0x248>
  {
    if (ep_intr&0x1) /* In ITR */
 8018062:	f019 0f01 	tst.w	r9, #1
 8018066:	f000 8099 	beq.w	801819c <USBD_OTG_ISR_Handler+0x238>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 801806a:	fa5f fa88 	uxtb.w	sl, r8
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 801806e:	6923      	ldr	r3, [r4, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8018070:	eb04 008a 	add.w	r0, r4, sl, lsl #2
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8018074:	6919      	ldr	r1, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8018076:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8018078:	6982      	ldr	r2, [r0, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 801807a:	fa25 f50a 	lsr.w	r5, r5, sl
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801807e:	6890      	ldr	r0, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8018080:	01ea      	lsls	r2, r5, #7
 8018082:	b2d5      	uxtb	r5, r2
 8018084:	430d      	orrs	r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8018086:	4005      	ands	r5, r0
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 8018088:	07ea      	lsls	r2, r5, #31
 801808a:	d51b      	bpl.n	80180c4 <USBD_OTG_ISR_Handler+0x160>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801808c:	6b58      	ldr	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 801808e:	4a46      	ldr	r2, [pc, #280]	; (80181a8 <USBD_OTG_ISR_Handler+0x244>)
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 8018090:	2501      	movs	r5, #1
 8018092:	fa05 f108 	lsl.w	r1, r5, r8
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8018096:	ea20 0001 	bic.w	r0, r0, r1
 801809a:	6358      	str	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 801809c:	69b3      	ldr	r3, [r6, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 801809e:	6810      	ldr	r0, [r2, #0]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 80180a0:	609d      	str	r5, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 80180a2:	4651      	mov	r1, sl
 80180a4:	6843      	ldr	r3, [r0, #4]
 80180a6:	4620      	mov	r0, r4
 80180a8:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80180aa:	78e1      	ldrb	r1, [r4, #3]
 80180ac:	42a9      	cmp	r1, r5
 80180ae:	d109      	bne.n	80180c4 <USBD_OTG_ISR_Handler+0x160>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 80180b0:	f1b8 0f00 	cmp.w	r8, #0
 80180b4:	d106      	bne.n	80180c4 <USBD_OTG_ISR_Handler+0x160>
 80180b6:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
 80180ba:	2a04      	cmp	r2, #4
 80180bc:	d102      	bne.n	80180c4 <USBD_OTG_ISR_Handler+0x160>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80180be:	4620      	mov	r0, r4
 80180c0:	f7ff fe2f 	bl	8017d22 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 80180c4:	f005 0008 	and.w	r0, r5, #8
 80180c8:	b2c3      	uxtb	r3, r0
 80180ca:	b113      	cbz	r3, 80180d2 <USBD_OTG_ISR_Handler+0x16e>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 80180cc:	69b1      	ldr	r1, [r6, #24]
 80180ce:	2508      	movs	r5, #8
 80180d0:	608d      	str	r5, [r1, #8]
      }
      if (diepint.b.intktxfemp)
 80180d2:	f005 0210 	and.w	r2, r5, #16
 80180d6:	b2d0      	uxtb	r0, r2
 80180d8:	b110      	cbz	r0, 80180e0 <USBD_OTG_ISR_Handler+0x17c>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 80180da:	69b3      	ldr	r3, [r6, #24]
 80180dc:	2510      	movs	r5, #16
 80180de:	609d      	str	r5, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 80180e0:	f005 0140 	and.w	r1, r5, #64	; 0x40
 80180e4:	b2ca      	uxtb	r2, r1
 80180e6:	b112      	cbz	r2, 80180ee <USBD_OTG_ISR_Handler+0x18a>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 80180e8:	69b0      	ldr	r0, [r6, #24]
 80180ea:	2540      	movs	r5, #64	; 0x40
 80180ec:	6085      	str	r5, [r0, #8]
      }
      if ( diepint.b.epdisabled )
 80180ee:	f005 0302 	and.w	r3, r5, #2
 80180f2:	b2d9      	uxtb	r1, r3
 80180f4:	b111      	cbz	r1, 80180fc <USBD_OTG_ISR_Handler+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 80180f6:	69b2      	ldr	r2, [r6, #24]
 80180f8:	2502      	movs	r5, #2
 80180fa:	6095      	str	r5, [r2, #8]
      }       
      if (diepint.b.emptyintr)
 80180fc:	f025 007f 	bic.w	r0, r5, #127	; 0x7f
 8018100:	f010 0fff 	tst.w	r0, #255	; 0xff
 8018104:	d04a      	beq.n	801819c <USBD_OTG_ISR_Handler+0x238>
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 8018106:	2328      	movs	r3, #40	; 0x28
 8018108:	fb03 4108 	mla	r1, r3, r8, r4
 801810c:	f501 758c 	add.w	r5, r1, #280	; 0x118
 8018110:	9501      	str	r5, [sp, #4]
 8018112:	3504      	adds	r5, #4
  
  len = ep->xfer_len - ep->xfer_count;
 8018114:	6968      	ldr	r0, [r5, #20]
 8018116:	69ab      	ldr	r3, [r5, #24]
  
  if (len > ep->maxpacket)
 8018118:	68aa      	ldr	r2, [r5, #8]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 801811a:	1ac1      	subs	r1, r0, r3
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801811c:	69b0      	ldr	r0, [r6, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 801811e:	4291      	cmp	r1, r2
 8018120:	bf38      	it	cc
 8018122:	460a      	movcc	r2, r1
 8018124:	f102 0c03 	add.w	ip, r2, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8018128:	6982      	ldr	r2, [r0, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 801812a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 801812e:	b293      	uxth	r3, r2
 8018130:	4563      	cmp	r3, ip
 8018132:	d930      	bls.n	8018196 <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 8018134:	69a9      	ldr	r1, [r5, #24]
 8018136:	696a      	ldr	r2, [r5, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8018138:	4291      	cmp	r1, r2
 801813a:	d22c      	bcs.n	8018196 <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 801813c:	b35a      	cbz	r2, 8018196 <USBD_OTG_ISR_Handler+0x232>
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 801813e:	68a8      	ldr	r0, [r5, #8]
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8018140:	ebc1 0b02 	rsb	fp, r1, r2
 8018144:	4583      	cmp	fp, r0
 8018146:	bf28      	it	cs
 8018148:	4683      	movcs	fp, r0
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 801814a:	f10b 0e03 	add.w	lr, fp, #3
 801814e:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8018152:	68e9      	ldr	r1, [r5, #12]
 8018154:	f8cd c000 	str.w	ip, [sp]
 8018158:	4652      	mov	r2, sl
 801815a:	fa1f f38b 	uxth.w	r3, fp
 801815e:	4620      	mov	r0, r4
 8018160:	f7ff f816 	bl	8017190 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8018164:	68eb      	ldr	r3, [r5, #12]
    ep->xfer_count += len;
 8018166:	69aa      	ldr	r2, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8018168:	f8dd c000 	ldr.w	ip, [sp]
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 801816c:	eb03 010b 	add.w	r1, r3, fp
    ep->xfer_count += len;
 8018170:	eb0b 0002 	add.w	r0, fp, r2
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8018174:	60e9      	str	r1, [r5, #12]
    ep->xfer_count += len;
 8018176:	61a8      	str	r0, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8018178:	6969      	ldr	r1, [r5, #20]
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801817a:	69b3      	ldr	r3, [r6, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801817c:	4288      	cmp	r0, r1
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801817e:	699a      	ldr	r2, [r3, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8018180:	d3d5      	bcc.n	801812e <USBD_OTG_ISR_Handler+0x1ca>
      uint32_t fifoemptymsk = 1 << ep->num;
 8018182:	9801      	ldr	r0, [sp, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8018184:	6925      	ldr	r5, [r4, #16]
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 8018186:	7902      	ldrb	r2, [r0, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8018188:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801818a:	2101      	movs	r1, #1
 801818c:	fa01 f002 	lsl.w	r0, r1, r2
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8018190:	ea23 0300 	bic.w	r3, r3, r0
 8018194:	636b      	str	r3, [r5, #52]	; 0x34
      if (diepint.b.emptyintr)
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8018196:	69b5      	ldr	r5, [r6, #24]
 8018198:	2280      	movs	r2, #128	; 0x80
 801819a:	60aa      	str	r2, [r5, #8]
      }
    }
    epnum++;
 801819c:	f108 0801 	add.w	r8, r8, #1
    ep_intr >>= 1;
 80181a0:	ea4f 0959 	mov.w	r9, r9, lsr #1
 80181a4:	3604      	adds	r6, #4
 80181a6:	e758      	b.n	801805a <USBD_OTG_ISR_Handler+0xf6>
 80181a8:	20000088 	.word	0x20000088
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 80181ac:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.modemismatch)
 80181ae:	b2fd      	uxtb	r5, r7
 80181b0:	f005 0102 	and.w	r1, r5, #2
 80181b4:	b2ca      	uxtb	r2, r1
 80181b6:	b112      	cbz	r2, 80181be <USBD_OTG_ISR_Handler+0x25a>
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80181b8:	68e3      	ldr	r3, [r4, #12]
 80181ba:	2102      	movs	r1, #2
 80181bc:	6159      	str	r1, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 80181be:	f3c7 6207 	ubfx	r2, r7, #24, #8
 80181c2:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80181c6:	b2d9      	uxtb	r1, r3
 80181c8:	b1c9      	cbz	r1, 80181fe <USBD_OTG_ISR_Handler+0x29a>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 80181ca:	7aa0      	ldrb	r0, [r4, #10]
 80181cc:	b140      	cbz	r0, 80181e0 <USBD_OTG_ISR_Handler+0x27c>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 80181ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80181d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 80181d6:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 80181da:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80181de:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 80181e0:	6921      	ldr	r1, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 80181e2:	4a84      	ldr	r2, [pc, #528]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 80181e4:	6848      	ldr	r0, [r1, #4]
 80181e6:	f020 0301 	bic.w	r3, r0, #1
 80181ea:	604b      	str	r3, [r1, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 80181ec:	6811      	ldr	r1, [r2, #0]
 80181ee:	4620      	mov	r0, r4
 80181f0:	698b      	ldr	r3, [r1, #24]
 80181f2:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80181f4:	68e0      	ldr	r0, [r4, #12]
 80181f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80181fa:	6142      	str	r2, [r0, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 80181fc:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.usbsuspend)
 80181fe:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8018202:	f008 0108 	and.w	r1, r8, #8
 8018206:	b2cb      	uxtb	r3, r1
 8018208:	b36b      	cbz	r3, 8018266 <USBD_OTG_ISR_Handler+0x302>
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
 801820a:	497a      	ldr	r1, [pc, #488]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
 801820c:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 8018210:	680b      	ldr	r3, [r1, #0]
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 8018212:	2000      	movs	r0, #0
 8018214:	f88d 000f 	strb.w	r0, [sp, #15]
  
  prev_status = pdev->dev.device_status;
 8018218:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 801821c:	4620      	mov	r0, r4
 801821e:	695a      	ldr	r2, [r3, #20]
 8018220:	4790      	blx	r2
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018222:	6920      	ldr	r0, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018224:	68e3      	ldr	r3, [r4, #12]
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018226:	6882      	ldr	r2, [r0, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801822c:	6159      	str	r1, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 801822e:	7aa0      	ldrb	r0, [r4, #10]
 8018230:	b1c0      	cbz	r0, 8018264 <USBD_OTG_ISR_Handler+0x300>
 8018232:	07d3      	lsls	r3, r2, #31
 8018234:	d516      	bpl.n	8018264 <USBD_OTG_ISR_Handler+0x300>
 8018236:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
 801823a:	2a01      	cmp	r2, #1
 801823c:	d112      	bne.n	8018264 <USBD_OTG_ISR_Handler+0x300>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 801823e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 8018242:	2b03      	cmp	r3, #3
 8018244:	d10e      	bne.n	8018264 <USBD_OTG_ISR_Handler+0x300>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8018246:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 801824a:	6808      	ldr	r0, [r1, #0]
 801824c:	f040 0201 	orr.w	r2, r0, #1
 8018250:	600a      	str	r2, [r1, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8018252:	680b      	ldr	r3, [r1, #0]
 8018254:	f043 0003 	orr.w	r0, r3, #3
 8018258:	6008      	str	r0, [r1, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 801825a:	4967      	ldr	r1, [pc, #412]	; (80183f8 <USBD_OTG_ISR_Handler+0x494>)
 801825c:	690a      	ldr	r2, [r1, #16]
 801825e:	f042 0306 	orr.w	r3, r2, #6
 8018262:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8018264:	2001      	movs	r0, #1
    }
    if (gintr_status.b.sofintr)
 8018266:	f005 0108 	and.w	r1, r5, #8
 801826a:	b2ca      	uxtb	r2, r1
 801826c:	b142      	cbz	r2, 8018280 <USBD_OTG_ISR_Handler+0x31c>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 801826e:	4861      	ldr	r0, [pc, #388]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
 8018270:	6803      	ldr	r3, [r0, #0]
 8018272:	4620      	mov	r0, r4
 8018274:	68d9      	ldr	r1, [r3, #12]
 8018276:	4788      	blx	r1
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8018278:	68e0      	ldr	r0, [r4, #12]
 801827a:	2208      	movs	r2, #8
 801827c:	6142      	str	r2, [r0, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 801827e:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8018280:	f005 0510 	and.w	r5, r5, #16
 8018284:	b2ed      	uxtb	r5, r5
 8018286:	2d00      	cmp	r5, #0
 8018288:	d035      	beq.n	80182f6 <USBD_OTG_ISR_Handler+0x392>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 801828a:	68e6      	ldr	r6, [r4, #12]
 801828c:	69b3      	ldr	r3, [r6, #24]
 801828e:	f023 0110 	bic.w	r1, r3, #16
 8018292:	61b1      	str	r1, [r6, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8018294:	6a36      	ldr	r6, [r6, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8018296:	2228      	movs	r2, #40	; 0x28
 8018298:	f006 000f 	and.w	r0, r6, #15
  
  switch (status.b.pktsts)
 801829c:	f3c6 4343 	ubfx	r3, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80182a0:	fb02 4500 	mla	r5, r2, r0, r4
  
  switch (status.b.pktsts)
 80182a4:	2b02      	cmp	r3, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80182a6:	f505 755d 	add.w	r5, r5, #884	; 0x374
  
  switch (status.b.pktsts)
 80182aa:	d00d      	beq.n	80182c8 <USBD_OTG_ISR_Handler+0x364>
 80182ac:	2b06      	cmp	r3, #6
 80182ae:	d11c      	bne.n	80182ea <USBD_OTG_ISR_Handler+0x386>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 80182b0:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 80182b4:	4620      	mov	r0, r4
 80182b6:	2208      	movs	r2, #8
 80182b8:	f7fe ff7d 	bl	80171b6 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 80182bc:	69a9      	ldr	r1, [r5, #24]
 80182be:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80182c2:	1988      	adds	r0, r1, r6
 80182c4:	61a8      	str	r0, [r5, #24]
 80182c6:	e010      	b.n	80182ea <USBD_OTG_ISR_Handler+0x386>
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 80182c8:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80182cc:	4032      	ands	r2, r6
 80182ce:	b162      	cbz	r2, 80182ea <USBD_OTG_ISR_Handler+0x386>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 80182d0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80182d4:	68e9      	ldr	r1, [r5, #12]
 80182d6:	4632      	mov	r2, r6
 80182d8:	4620      	mov	r0, r4
 80182da:	f7fe ff6c 	bl	80171b6 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 80182de:	68eb      	ldr	r3, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 80182e0:	69a8      	ldr	r0, [r5, #24]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 80182e2:	1999      	adds	r1, r3, r6
      ep->xfer_count += status.b.bcnt;
 80182e4:	1986      	adds	r6, r0, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 80182e6:	60e9      	str	r1, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 80182e8:	61ae      	str	r6, [r5, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 80182ea:	68e3      	ldr	r3, [r4, #12]
 80182ec:	699a      	ldr	r2, [r3, #24]
 80182ee:	f042 0110 	orr.w	r1, r2, #16
 80182f2:	6199      	str	r1, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 80182f4:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.usbreset)
 80182f6:	f008 0310 	and.w	r3, r8, #16
 80182fa:	b2da      	uxtb	r2, r3
 80182fc:	2a00      	cmp	r2, #0
 80182fe:	d034      	beq.n	801836a <USBD_OTG_ISR_Handler+0x406>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8018300:	6926      	ldr	r6, [r4, #16]
 8018302:	6870      	ldr	r0, [r6, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8018304:	2500      	movs	r5, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8018306:	f020 0101 	bic.w	r1, r0, #1
 801830a:	6071      	str	r1, [r6, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 801830c:	4620      	mov	r0, r4
 801830e:	4629      	mov	r1, r5
 8018310:	f7ff f836 	bl	8017380 <USB_OTG_FlushTxFifo>
 8018314:	4623      	mov	r3, r4
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8018316:	462a      	mov	r2, r5
 8018318:	7866      	ldrb	r6, [r4, #1]
 801831a:	3304      	adds	r3, #4
 801831c:	42b2      	cmp	r2, r6
 801831e:	d206      	bcs.n	801832e <USBD_OTG_ISR_Handler+0x3ca>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8018320:	695e      	ldr	r6, [r3, #20]
 8018322:	21ff      	movs	r1, #255	; 0xff
 8018324:	60b1      	str	r1, [r6, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8018326:	6d18      	ldr	r0, [r3, #80]	; 0x50
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8018328:	3201      	adds	r2, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 801832a:	6081      	str	r1, [r0, #8]
 801832c:	e7f4      	b.n	8018318 <USBD_OTG_ISR_Handler+0x3b4>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 801832e:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8018330:	6920      	ldr	r0, [r4, #16]
  
  daintmsk.ep.in = 1;
 8018332:	f366 050f 	bfi	r5, r6, #0, #16
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 8018336:	210b      	movs	r1, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8018338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 801833c:	f366 451f 	bfi	r5, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8018340:	6182      	str	r2, [r0, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8018342:	61c5      	str	r5, [r0, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8018344:	6141      	str	r1, [r0, #20]
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8018346:	6101      	str	r1, [r0, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8018348:	6803      	ldr	r3, [r0, #0]
  dcfg.b.devaddr = 0;
 801834a:	f36f 130a 	bfc	r3, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 801834e:	6003      	str	r3, [r0, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8018350:	4620      	mov	r0, r4
 8018352:	f7ff fce6 	bl	8017d22 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8018356:	4927      	ldr	r1, [pc, #156]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018358:	68e0      	ldr	r0, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801835a:	680b      	ldr	r3, [r1, #0]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801835c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018360:	6142      	str	r2, [r0, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8018362:	691a      	ldr	r2, [r3, #16]
 8018364:	4620      	mov	r0, r4
 8018366:	4790      	blx	r2
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8018368:	4630      	mov	r0, r6
      
    }
    if (gintr_status.b.enumdone)
 801836a:	f008 0820 	and.w	r8, r8, #32
 801836e:	fa5f f188 	uxtb.w	r1, r8
 8018372:	b1e9      	cbz	r1, 80183b0 <USBD_OTG_ISR_Handler+0x44c>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8018374:	4620      	mov	r0, r4
 8018376:	f7ff fb3b 	bl	80179f0 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801837a:	68e5      	ldr	r5, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 801837c:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801837e:	68ed      	ldr	r5, [r5, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8018380:	f7ff fb28 	bl	80179d4 <USB_OTG_GetDeviceSpeed>
 8018384:	2803      	cmp	r0, #3
 8018386:	d106      	bne.n	8018396 <USBD_OTG_ISR_Handler+0x432>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8018388:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 801838a:	f44f 7000 	mov.w	r0, #512	; 0x200
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 801838e:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8018390:	80a0      	strh	r0, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 8018392:	2209      	movs	r2, #9
 8018394:	e004      	b.n	80183a0 <USBD_OTG_ISR_Handler+0x43c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8018396:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8018398:	2340      	movs	r3, #64	; 0x40
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801839a:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 801839c:	80a3      	strh	r3, [r4, #4]
    gusbcfg.b.usbtrdtim = 5;
 801839e:	2205      	movs	r2, #5
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80183a0:	68e3      	ldr	r3, [r4, #12]
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 80183a2:	f362 258d 	bfi	r5, r2, #10, #4
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 80183a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80183aa:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 80183ac:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80183ae:	615a      	str	r2, [r3, #20]
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 80183b0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80183b4:	f007 0110 	and.w	r1, r7, #16
 80183b8:	b2cb      	uxtb	r3, r1
 80183ba:	b14b      	cbz	r3, 80183d0 <USBD_OTG_ISR_Handler+0x46c>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80183bc:	480d      	ldr	r0, [pc, #52]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
 80183be:	6802      	ldr	r2, [r0, #0]
 80183c0:	4620      	mov	r0, r4
 80183c2:	69d1      	ldr	r1, [r2, #28]
 80183c4:	4788      	blx	r1
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80183c6:	68e3      	ldr	r3, [r4, #12]
 80183c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80183cc:	6158      	str	r0, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 80183ce:	2001      	movs	r0, #1
    }

    if (gintr_status.b.incomplisoout)
 80183d0:	f007 0720 	and.w	r7, r7, #32
 80183d4:	b2ff      	uxtb	r7, r7
 80183d6:	b14f      	cbz	r7, 80183ec <USBD_OTG_ISR_Handler+0x488>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 80183d8:	4a06      	ldr	r2, [pc, #24]	; (80183f4 <USBD_OTG_ISR_Handler+0x490>)
 80183da:	6811      	ldr	r1, [r2, #0]
 80183dc:	4620      	mov	r0, r4
 80183de:	6a0b      	ldr	r3, [r1, #32]
 80183e0:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80183e2:	68e0      	ldr	r0, [r4, #12]
 80183e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80183e8:	6142      	str	r2, [r0, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 80183ea:	2001      	movs	r0, #1
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 80183ec:	b005      	add	sp, #20
 80183ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f2:	bf00      	nop
 80183f4:	20000088 	.word	0x20000088
 80183f8:	e000ed00 	.word	0xe000ed00

080183fc <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 80183fc:	b538      	push	{r3, r4, r5, lr}
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 80183fe:	2300      	movs	r3, #0
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8018400:	4604      	mov	r4, r0
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 8018402:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
    pdev->host.ErrCnt[i]  = 0;
 8018406:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 801840a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 801840e:	2500      	movs	r5, #0
    pdev->host.XferCnt[i]   = 0;
 8018410:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
    pdev->host.ErrCnt[i]  = 0;
 8018414:	6085      	str	r5, [r0, #8]
    pdev->host.XferCnt[i]   = 0;
 8018416:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    pdev->host.HC_Status[i]   = HC_IDLE;
 801841a:	18e2      	adds	r2, r4, r3
 801841c:	3301      	adds	r3, #1
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 801841e:	2b0f      	cmp	r3, #15
  {
    pdev->host.ErrCnt[i]  = 0;
    pdev->host.XferCnt[i]   = 0;
 8018420:	6045      	str	r5, [r0, #4]
    pdev->host.HC_Status[i]   = HC_IDLE;
 8018422:	f882 5870 	strb.w	r5, [r2, #2160]	; 0x870
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8018426:	d1ee      	bne.n	8018406 <HCD_Init+0xa>
  {
    pdev->host.ErrCnt[i]  = 0;
    pdev->host.XferCnt[i]   = 0;
    pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8;
 8018428:	2008      	movs	r0, #8
 801842a:	f8a4 0896 	strh.w	r0, [r4, #2198]	; 0x896
  USB_OTG_SelectCore(pdev, coreID);
 801842e:	4620      	mov	r0, r4
 8018430:	f7fe fed2 	bl	80171d8 <USB_OTG_SelectCore>
  if(coreID == USB_OTG_FS_CORE_ID){
#ifndef DUAL_ROLE_MODE_ENABLED
    USB_OTG_DisableGlobalInt(pdev);
 8018434:	4620      	mov	r0, r4
 8018436:	f7fe ff9c 	bl	8017372 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInit(pdev);
 801843a:	4620      	mov	r0, r4
 801843c:	f7fe ff2e 	bl	801729c <USB_OTG_CoreInit>
    
    /* Force Host Mode*/
    USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 8018440:	2101      	movs	r1, #1
 8018442:	4620      	mov	r0, r4
 8018444:	f7fe ffd4 	bl	80173f0 <USB_OTG_SetCurrentMode>
    USB_OTG_CoreInitHost(pdev);
 8018448:	4620      	mov	r0, r4
 801844a:	f7ff f86a 	bl	8017522 <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 801844e:	4620      	mov	r0, r4
 8018450:	f7fe ff88 	bl	8017364 <USB_OTG_EnableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
  }
  
  return 0;
}
 8018454:	4628      	mov	r0, r5
 8018456:	bd38      	pop	{r3, r4, r5, pc}

08018458 <HCD_GetCurrentSpeed>:
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8018458:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 801845c:	6818      	ldr	r0, [r3, #0]
    
    return HPRT0.b.prtspd;
}
 801845e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8018462:	4770      	bx	lr

08018464 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8018464:	b508      	push	{r3, lr}
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 8018466:	f7ff f846 	bl	80174f6 <USB_OTG_ResetPort>
  return 0;
}
 801846a:	2000      	movs	r0, #0
 801846c:	bd08      	pop	{r3, pc}

0801846e <HCD_IsDeviceConnected>:
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
  return (pdev->host.ConnSts);
 801846e:	f8d0 07f4 	ldr.w	r0, [r0, #2036]	; 0x7f4
}
 8018472:	4770      	bx	lr

08018474 <HCD_GetCurrentFrame>:
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8018474:	6943      	ldr	r3, [r0, #20]
 8018476:	6898      	ldr	r0, [r3, #8]
}
 8018478:	b280      	uxth	r0, r0
 801847a:	4770      	bx	lr

0801847c <HCD_GetURB_State>:
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
  return pdev->host.URB_State[ch_num] ;
 801847c:	1841      	adds	r1, r0, r1
 801847e:	f891 087f 	ldrb.w	r0, [r1, #2175]	; 0x87f
}
 8018482:	4770      	bx	lr

08018484 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8018484:	b538      	push	{r3, r4, r5, lr}
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8018486:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 801848a:	1845      	adds	r5, r0, r1
 801848c:	2300      	movs	r3, #0
 801848e:	f885 387f 	strb.w	r3, [r5, #2175]	; 0x87f
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8018492:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8018496:	460c      	mov	r4, r1
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 8018498:	f7ff f919 	bl	80176ce <USB_OTG_HC_StartXfer>
}
 801849c:	bd38      	pop	{r3, r4, r5, pc}
	...

080184a0 <SB_OTG_USBH_handle_SessionRequest_ISR>:
  return retval;
}


static uint32_t SB_OTG_USBH_handle_SessionRequest_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b084      	sub	sp, #16
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DriveVbus (pdev, 1);
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f04f 0101 	mov.w	r1, #1
 80184ae:	f7fe fff9 	bl	80174a4 <USB_OTG_DriveVbus>
  //USBH_HCD_INT_fops->DevConnected (pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80184b2:	f04f 0300 	mov.w	r3, #0
 80184b6:	60fb      	str	r3, [r7, #12]
  gintsts.b.sessreqintr = 1;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80184be:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	68fa      	ldr	r2, [r7, #12]
 80184c6:	615a      	str	r2, [r3, #20]
  return 1;
 80184c8:	f04f 0301 	mov.w	r3, #1
}
 80184cc:	4618      	mov	r0, r3
 80184ce:	f107 0710 	add.w	r7, r7, #16
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop

080184d8 <SB_OTG_USBH_handle_ProtocoleEvent_ISR>:

static uint32_t SB_OTG_USBH_handle_ProtocoleEvent_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b084      	sub	sp, #16
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GOTGINT_TypeDef  gotgint;
  //USB_OTG_DriveVbus (&USB_OTG_HS_dev, 1);
  //USBH_HCD_INT_fops->DevConnected (pdev);
  gotgint.d32 = USB_OTG_ReadOtgItr (pdev);
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7fe ffab 	bl	801743c <USB_OTG_ReadOtgItr>
 80184e6:	4603      	mov	r3, r0
 80184e8:	60bb      	str	r3, [r7, #8]
  //DEBUG_MSG("gotgint: 0x%08x \n", gotgint.d32);
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	68db      	ldr	r3, [r3, #12]
 80184ee:	68ba      	ldr	r2, [r7, #8]
 80184f0:	605a      	str	r2, [r3, #4]
  /* Clear interrupt */
  gintsts.d32 = 0;
 80184f2:	f04f 0300 	mov.w	r3, #0
 80184f6:	60fb      	str	r3, [r7, #12]
  gintsts.b.otgintr = 1;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	f043 0304 	orr.w	r3, r3, #4
 80184fe:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	68db      	ldr	r3, [r3, #12]
 8018504:	68fa      	ldr	r2, [r7, #12]
 8018506:	615a      	str	r2, [r3, #20]
  return 1;
 8018508:	f04f 0301 	mov.w	r3, #1
}
 801850c:	4618      	mov	r0, r3
 801850e:	f107 0710 	add.w	r7, r7, #16
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}
 8018516:	bf00      	nop

08018518 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b084      	sub	sp, #16
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 8018520:	f04f 0300 	mov.w	r3, #0
 8018524:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8018526:	f240 03b8 	movw	r3, #184	; 0xb8
 801852a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	f043 0308 	orr.w	r3, r3, #8
 801853c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	68db      	ldr	r3, [r3, #12]
 8018542:	68fa      	ldr	r2, [r7, #12]
 8018544:	615a      	str	r2, [r3, #20]
  
  return 1;
 8018546:	f04f 0301 	mov.w	r3, #1
}
 801854a:	4618      	mov	r0, r3
 801854c:	f107 0710 	add.w	r7, r7, #16
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b084      	sub	sp, #16
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 801855c:	f04f 0300 	mov.w	r3, #0
 8018560:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 8018562:	f240 03b8 	movw	r3, #184	; 0xb8
 8018566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	689b      	ldr	r3, [r3, #8]
 801856e:	6878      	ldr	r0, [r7, #4]
 8018570:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018578:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	68fa      	ldr	r2, [r7, #12]
 8018580:	615a      	str	r2, [r3, #20]
  
  return 1;
 8018582:	f04f 0301 	mov.w	r3, #1
}
 8018586:	4618      	mov	r0, r3
 8018588:	f107 0710 	add.w	r7, r7, #16
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b088      	sub	sp, #32
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	68db      	ldr	r3, [r3, #12]
 801859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801859e:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 80185a0:	7c3b      	ldrb	r3, [r7, #16]
 80185a2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80185a6:	b2db      	uxtb	r3, r3
 80185a8:	687a      	ldr	r2, [r7, #4]
 80185aa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80185ae:	18d3      	adds	r3, r2, r3
 80185b0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	f103 0303 	add.w	r3, r3, #3
 80185ba:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80185be:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80185c0:	e0a4      	b.n	801870c <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 80185c2:	89bb      	ldrh	r3, [r7, #12]
 80185c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80185c8:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 80185ca:	8bba      	ldrh	r2, [r7, #28]
 80185cc:	7c3b      	ldrb	r3, [r7, #16]
 80185ce:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	6879      	ldr	r1, [r7, #4]
 80185d6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80185da:	18cb      	adds	r3, r1, r3
 80185dc:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d91c      	bls.n	8018620 <USB_OTG_USBH_handle_nptxfempty_ISR+0x90>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 80185e6:	7c3b      	ldrb	r3, [r7, #16]
 80185e8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80185f4:	18d3      	adds	r3, r2, r3
 80185f6:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 80185fe:	f04f 0300 	mov.w	r3, #0
 8018602:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8018604:	69bb      	ldr	r3, [r7, #24]
 8018606:	f043 0320 	orr.w	r3, r3, #32
 801860a:	61bb      	str	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	68db      	ldr	r3, [r3, #12]
 8018610:	687a      	ldr	r2, [r7, #4]
 8018612:	68d2      	ldr	r2, [r2, #12]
 8018614:	6991      	ldr	r1, [r2, #24]
 8018616:	69ba      	ldr	r2, [r7, #24]
 8018618:	ea6f 0202 	mvn.w	r2, r2
 801861c:	400a      	ands	r2, r1
 801861e:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8018620:	7c3b      	ldrb	r3, [r7, #16]
 8018622:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018626:	b2db      	uxtb	r3, r3
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801862e:	18d3      	adds	r3, r2, r3
 8018630:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	f103 0303 	add.w	r3, r3, #3
 801863a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801863e:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 8018640:	7c3b      	ldrb	r3, [r7, #16]
 8018642:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018646:	b2db      	uxtb	r3, r3
 8018648:	687a      	ldr	r2, [r7, #4]
 801864a:	f103 0315 	add.w	r3, r3, #21
 801864e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018652:	18d3      	adds	r3, r2, r3
 8018654:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018658:	6819      	ldr	r1, [r3, #0]
 801865a:	7c3b      	ldrb	r3, [r7, #16]
 801865c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018660:	b2db      	uxtb	r3, r3
 8018662:	461a      	mov	r2, r3
 8018664:	8bbb      	ldrh	r3, [r7, #28]
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f7fe fd92 	bl	8017190 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 801866c:	7c3b      	ldrb	r3, [r7, #16]
 801866e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018672:	b2db      	uxtb	r3, r3
 8018674:	7c3a      	ldrb	r2, [r7, #16]
 8018676:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801867a:	b2d2      	uxtb	r2, r2
 801867c:	6879      	ldr	r1, [r7, #4]
 801867e:	f102 0215 	add.w	r2, r2, #21
 8018682:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8018686:	188a      	adds	r2, r1, r2
 8018688:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 801868c:	6811      	ldr	r1, [r2, #0]
 801868e:	8bba      	ldrh	r2, [r7, #28]
 8018690:	188a      	adds	r2, r1, r2
 8018692:	6879      	ldr	r1, [r7, #4]
 8018694:	f103 0315 	add.w	r3, r3, #21
 8018698:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801869c:	18cb      	adds	r3, r1, r3
 801869e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80186a2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 80186a4:	7c3b      	ldrb	r3, [r7, #16]
 80186a6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	7c3a      	ldrb	r2, [r7, #16]
 80186ae:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80186b2:	b2d2      	uxtb	r2, r2
 80186b4:	6879      	ldr	r1, [r7, #4]
 80186b6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80186ba:	188a      	adds	r2, r1, r2
 80186bc:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 80186c0:	6811      	ldr	r1, [r2, #0]
 80186c2:	8bba      	ldrh	r2, [r7, #28]
 80186c4:	1a8a      	subs	r2, r1, r2
 80186c6:	6879      	ldr	r1, [r7, #4]
 80186c8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80186cc:	18cb      	adds	r3, r1, r3
 80186ce:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80186d2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 80186d4:	7c3b      	ldrb	r3, [r7, #16]
 80186d6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80186da:	b2db      	uxtb	r3, r3
 80186dc:	7c3a      	ldrb	r2, [r7, #16]
 80186de:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80186e2:	b2d2      	uxtb	r2, r2
 80186e4:	6879      	ldr	r1, [r7, #4]
 80186e6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80186ea:	188a      	adds	r2, r1, r2
 80186ec:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 80186f0:	6811      	ldr	r1, [r2, #0]
 80186f2:	8bba      	ldrh	r2, [r7, #28]
 80186f4:	188a      	adds	r2, r1, r2
 80186f6:	6879      	ldr	r1, [r7, #4]
 80186f8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80186fc:	18cb      	adds	r3, r1, r3
 80186fe:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8018702:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	68db      	ldr	r3, [r3, #12]
 8018708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801870a:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 801870c:	89bb      	ldrh	r3, [r7, #12]
 801870e:	8bfa      	ldrh	r2, [r7, #30]
 8018710:	429a      	cmp	r2, r3
 8018712:	d20d      	bcs.n	8018730 <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a0>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8018714:	7c3b      	ldrb	r3, [r7, #16]
 8018716:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801871a:	b2db      	uxtb	r3, r3
 801871c:	687a      	ldr	r2, [r7, #4]
 801871e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018722:	18d3      	adds	r3, r2, r3
 8018724:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8018728:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 801872a:	2b00      	cmp	r3, #0
 801872c:	f47f af49 	bne.w	80185c2 <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  
  
  return 1;
 8018730:	f04f 0301 	mov.w	r3, #1
}
 8018734:	4618      	mov	r0, r3
 8018736:	f107 0720 	add.w	r7, r7, #32
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
 801873e:	bf00      	nop

08018740 <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b086      	sub	sp, #24
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	695b      	ldr	r3, [r3, #20]
 801874c:	691b      	ldr	r3, [r3, #16]
 801874e:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8018750:	7b3b      	ldrb	r3, [r7, #12]
 8018752:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018756:	b2db      	uxtb	r3, r3
 8018758:	687a      	ldr	r2, [r7, #4]
 801875a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801875e:	18d3      	adds	r3, r2, r3
 8018760:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	f103 0303 	add.w	r3, r3, #3
 801876a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801876e:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8018770:	e0a4      	b.n	80188bc <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8018772:	893b      	ldrh	r3, [r7, #8]
 8018774:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018778:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 801877a:	8aba      	ldrh	r2, [r7, #20]
 801877c:	7b3b      	ldrb	r3, [r7, #12]
 801877e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018782:	b2db      	uxtb	r3, r3
 8018784:	6879      	ldr	r1, [r7, #4]
 8018786:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801878a:	18cb      	adds	r3, r1, r3
 801878c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	429a      	cmp	r2, r3
 8018794:	d91c      	bls.n	80187d0 <USB_OTG_USBH_handle_ptxfempty_ISR+0x90>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8018796:	7b3b      	ldrb	r3, [r7, #12]
 8018798:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801879c:	b2db      	uxtb	r3, r3
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80187a4:	18d3      	adds	r3, r2, r3
 80187a6:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 80187ae:	f04f 0300 	mov.w	r3, #0
 80187b2:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80187ba:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	68db      	ldr	r3, [r3, #12]
 80187c0:	687a      	ldr	r2, [r7, #4]
 80187c2:	68d2      	ldr	r2, [r2, #12]
 80187c4:	6991      	ldr	r1, [r2, #24]
 80187c6:	693a      	ldr	r2, [r7, #16]
 80187c8:	ea6f 0202 	mvn.w	r2, r2
 80187cc:	400a      	ands	r2, r1
 80187ce:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 80187d0:	7b3b      	ldrb	r3, [r7, #12]
 80187d2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80187d6:	b2db      	uxtb	r3, r3
 80187d8:	687a      	ldr	r2, [r7, #4]
 80187da:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80187de:	18d3      	adds	r3, r2, r3
 80187e0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f103 0303 	add.w	r3, r3, #3
 80187ea:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80187ee:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 80187f0:	7b3b      	ldrb	r3, [r7, #12]
 80187f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	f103 0315 	add.w	r3, r3, #21
 80187fe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018802:	18d3      	adds	r3, r2, r3
 8018804:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018808:	6819      	ldr	r1, [r3, #0]
 801880a:	7b3b      	ldrb	r3, [r7, #12]
 801880c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018810:	b2db      	uxtb	r3, r3
 8018812:	461a      	mov	r2, r3
 8018814:	8abb      	ldrh	r3, [r7, #20]
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f7fe fcba 	bl	8017190 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 801881c:	7b3b      	ldrb	r3, [r7, #12]
 801881e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8018822:	b2db      	uxtb	r3, r3
 8018824:	7b3a      	ldrb	r2, [r7, #12]
 8018826:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801882a:	b2d2      	uxtb	r2, r2
 801882c:	6879      	ldr	r1, [r7, #4]
 801882e:	f102 0215 	add.w	r2, r2, #21
 8018832:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8018836:	188a      	adds	r2, r1, r2
 8018838:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 801883c:	6811      	ldr	r1, [r2, #0]
 801883e:	8aba      	ldrh	r2, [r7, #20]
 8018840:	188a      	adds	r2, r1, r2
 8018842:	6879      	ldr	r1, [r7, #4]
 8018844:	f103 0315 	add.w	r3, r3, #21
 8018848:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801884c:	18cb      	adds	r3, r1, r3
 801884e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018852:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8018854:	7b3b      	ldrb	r3, [r7, #12]
 8018856:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801885a:	b2db      	uxtb	r3, r3
 801885c:	7b3a      	ldrb	r2, [r7, #12]
 801885e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8018862:	b2d2      	uxtb	r2, r2
 8018864:	6879      	ldr	r1, [r7, #4]
 8018866:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801886a:	188a      	adds	r2, r1, r2
 801886c:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8018870:	6811      	ldr	r1, [r2, #0]
 8018872:	8aba      	ldrh	r2, [r7, #20]
 8018874:	1a8a      	subs	r2, r1, r2
 8018876:	6879      	ldr	r1, [r7, #4]
 8018878:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801887c:	18cb      	adds	r3, r1, r3
 801887e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8018882:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 8018884:	7b3b      	ldrb	r3, [r7, #12]
 8018886:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801888a:	b2db      	uxtb	r3, r3
 801888c:	7b3a      	ldrb	r2, [r7, #12]
 801888e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8018892:	b2d2      	uxtb	r2, r2
 8018894:	6879      	ldr	r1, [r7, #4]
 8018896:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801889a:	188a      	adds	r2, r1, r2
 801889c:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 80188a0:	6811      	ldr	r1, [r2, #0]
 80188a2:	8aba      	ldrh	r2, [r7, #20]
 80188a4:	188a      	adds	r2, r1, r2
 80188a6:	6879      	ldr	r1, [r7, #4]
 80188a8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80188ac:	18cb      	adds	r3, r1, r3
 80188ae:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80188b2:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	695b      	ldr	r3, [r3, #20]
 80188b8:	691b      	ldr	r3, [r3, #16]
 80188ba:	60bb      	str	r3, [r7, #8]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80188bc:	893b      	ldrh	r3, [r7, #8]
 80188be:	8afa      	ldrh	r2, [r7, #22]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d20d      	bcs.n	80188e0 <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a0>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 80188c4:	7b3b      	ldrb	r3, [r7, #12]
 80188c6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80188ca:	b2db      	uxtb	r3, r3
 80188cc:	687a      	ldr	r2, [r7, #4]
 80188ce:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80188d2:	18d3      	adds	r3, r2, r3
 80188d4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80188d8:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80188da:	2b00      	cmp	r3, #0
 80188dc:	f47f af49 	bne.w	8018772 <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 80188e0:	f04f 0301 	mov.w	r3, #1
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	f107 0718 	add.w	r7, r7, #24
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop

080188f0 <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b088      	sub	sp, #32
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 80188f8:	f04f 0300 	mov.w	r3, #0
 80188fc:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 80188fe:	f04f 0300 	mov.w	r3, #0
 8018902:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8018904:	f04f 0300 	mov.w	r3, #0
 8018908:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 801890a:	f04f 0300 	mov.w	r3, #0
 801890e:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 8018910:	f04f 0300 	mov.w	r3, #0
 8018914:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	f36f 0382 	bfc	r3, #2, #1
 8018930:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8018932:	693b      	ldr	r3, [r7, #16]
 8018934:	f36f 0341 	bfc	r3, #1, #1
 8018938:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 801893a:	693b      	ldr	r3, [r7, #16]
 801893c:	f36f 03c3 	bfc	r3, #3, #1
 8018940:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8018942:	693b      	ldr	r3, [r7, #16]
 8018944:	f36f 1345 	bfc	r3, #5, #1
 8018948:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 801894a:	7d3b      	ldrb	r3, [r7, #20]
 801894c:	f003 0302 	and.w	r3, r3, #2
 8018950:	b2db      	uxtb	r3, r3
 8018952:	2b00      	cmp	r3, #0
 8018954:	d00f      	beq.n	8018976 <USB_OTG_USBH_handle_port_ISR+0x86>
  {

    hprt0_dup.b.prtconndet = 1;
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	f043 0302 	orr.w	r3, r3, #2
 801895c:	613b      	str	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 801895e:	f240 03b8 	movw	r3, #184	; 0xb8
 8018962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	4798      	blx	r3
    retval |= 1;
 801896e:	69bb      	ldr	r3, [r7, #24]
 8018970:	f043 0301 	orr.w	r3, r3, #1
 8018974:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8018976:	7d3b      	ldrb	r3, [r7, #20]
 8018978:	f003 0308 	and.w	r3, r3, #8
 801897c:	b2db      	uxtb	r3, r3
 801897e:	2b00      	cmp	r3, #0
 8018980:	d058      	beq.n	8018a34 <USB_OTG_USBH_handle_port_ISR+0x144>
  {
    hprt0_dup.b.prtenchng = 1;
 8018982:	693b      	ldr	r3, [r7, #16]
 8018984:	f043 0308 	orr.w	r3, r3, #8
 8018988:	613b      	str	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 801898a:	7d3b      	ldrb	r3, [r7, #20]
 801898c:	f003 0304 	and.w	r3, r3, #4
 8018990:	b2db      	uxtb	r3, r3
 8018992:	2b00      	cmp	r3, #0
 8018994:	d04e      	beq.n	8018a34 <USB_OTG_USBH_handle_port_ISR+0x144>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8018996:	f240 03b8 	movw	r3, #184	; 0xb8
 801899a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	685b      	ldr	r3, [r3, #4]
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80189a6:	7dbb      	ldrb	r3, [r7, #22]
 80189a8:	f003 0306 	and.w	r3, r3, #6
 80189ac:	b2db      	uxtb	r3, r3
 80189ae:	2b04      	cmp	r3, #4
 80189b0:	d005      	beq.n	80189be <USB_OTG_USBH_handle_port_ISR+0xce>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 80189b2:	7dbb      	ldrb	r3, [r7, #22]
 80189b4:	f003 0306 	and.w	r3, r3, #6
 80189b8:	b2db      	uxtb	r3, r3
    if (hprt0.b.prtena == 1)
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80189ba:	2b02      	cmp	r3, #2
 80189bc:	d135      	bne.n	8018a2a <USB_OTG_USBH_handle_port_ISR+0x13a>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	695b      	ldr	r3, [r3, #20]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80189c6:	7dbb      	ldrb	r3, [r7, #22]
 80189c8:	f003 0306 	and.w	r3, r3, #6
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	2b04      	cmp	r3, #4
 80189d0:	d117      	bne.n	8018a02 <USB_OTG_USBH_handle_port_ISR+0x112>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	695b      	ldr	r3, [r3, #20]
 80189d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80189da:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 80189dc:	7b3b      	ldrb	r3, [r7, #12]
 80189de:	f003 0303 	and.w	r3, r3, #3
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	2b02      	cmp	r3, #2
 80189e6:	d024      	beq.n	8018a32 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	7a1b      	ldrb	r3, [r3, #8]
 80189ec:	2b02      	cmp	r3, #2
 80189ee:	d104      	bne.n	80189fa <USB_OTG_USBH_handle_port_ISR+0x10a>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 80189f0:	6878      	ldr	r0, [r7, #4]
 80189f2:	f04f 0102 	mov.w	r1, #2
 80189f6:	f7fe fd49 	bl	801748c <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 80189fa:	f04f 0301 	mov.w	r3, #1
 80189fe:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8018a00:	e017      	b.n	8018a32 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	695b      	ldr	r3, [r3, #20]
 8018a06:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8018a0a:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8018a0c:	7b3b      	ldrb	r3, [r7, #12]
 8018a0e:	f003 0303 	and.w	r3, r3, #3
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	2b01      	cmp	r3, #1
 8018a16:	d00c      	beq.n	8018a32 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8018a18:	6878      	ldr	r0, [r7, #4]
 8018a1a:	f04f 0101 	mov.w	r1, #1
 8018a1e:	f7fe fd35 	bl	801748c <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8018a22:	f04f 0301 	mov.w	r3, #1
 8018a26:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8018a28:	e003      	b.n	8018a32 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
      }
      else
      {
        do_reset = 1;
 8018a2a:	f04f 0301 	mov.w	r3, #1
 8018a2e:	61fb      	str	r3, [r7, #28]
 8018a30:	e000      	b.n	8018a34 <USB_OTG_USBH_handle_port_ISR+0x144>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8018a32:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8018a34:	7d3b      	ldrb	r3, [r7, #20]
 8018a36:	f003 0320 	and.w	r3, r3, #32
 8018a3a:	b2db      	uxtb	r3, r3
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d007      	beq.n	8018a50 <USB_OTG_USBH_handle_port_ISR+0x160>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	f043 0320 	orr.w	r3, r3, #32
 8018a46:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8018a48:	69bb      	ldr	r3, [r7, #24]
 8018a4a:	f043 0301 	orr.w	r3, r3, #1
 8018a4e:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8018a50:	69fb      	ldr	r3, [r7, #28]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d002      	beq.n	8018a5c <USB_OTG_USBH_handle_port_ISR+0x16c>
  {
    USB_OTG_ResetPort(pdev);
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f7fe fd4d 	bl	80174f6 <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018a62:	693a      	ldr	r2, [r7, #16]
 8018a64:	601a      	str	r2, [r3, #0]
  
  return retval;
 8018a66:	69bb      	ldr	r3, [r7, #24]
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f107 0720 	add.w	r7, r7, #32
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop

08018a74 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b09a      	sub	sp, #104	; 0x68
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8018a7e:	687a      	ldr	r2, [r7, #4]
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018a8a:	18d3      	adds	r3, r2, r3
 8018a8c:	689b      	ldr	r3, [r3, #8]
 8018a8e:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8018a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018a92:	689b      	ldr	r3, [r3, #8]
 8018a94:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8018a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8018a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018aa0:	4013      	ands	r3, r2
 8018aa2:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018aac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018ab0:	18d3      	adds	r3, r2, r3
 8018ab2:	689b      	ldr	r3, [r3, #8]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 8018ab8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018abc:	f003 0304 	and.w	r3, r3, #4
 8018ac0:	b2db      	uxtb	r3, r3
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d022      	beq.n	8018b0c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8018ac6:	f04f 0300 	mov.w	r3, #0
 8018aca:	657b      	str	r3, [r7, #84]	; 0x54
 8018acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ace:	f043 0304 	orr.w	r3, r3, #4
 8018ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8018ad4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ad8:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018ada:	687a      	ldr	r2, [r7, #4]
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018ae2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018ae6:	18d3      	adds	r3, r2, r3
 8018ae8:	689b      	ldr	r3, [r3, #8]
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	653b      	str	r3, [r7, #80]	; 0x50
 8018aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018af0:	f043 0302 	orr.w	r3, r3, #2
 8018af4:	653b      	str	r3, [r7, #80]	; 0x50
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018afe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018b02:	18d3      	adds	r3, r2, r3
 8018b04:	689b      	ldr	r3, [r3, #8]
 8018b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018b08:	60da      	str	r2, [r3, #12]
 8018b0a:	e28c      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  } 
  else if (hcint.b.ack)
 8018b0c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018b10:	f003 0320 	and.w	r3, r3, #32
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d00a      	beq.n	8018b30 <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8018b1a:	f04f 0300 	mov.w	r3, #0
 8018b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b22:	f043 0320 	orr.w	r3, r3, #32
 8018b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018b2c:	609a      	str	r2, [r3, #8]
 8018b2e:	e27a      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.frmovrun)
 8018b30:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8018b34:	f003 0302 	and.w	r3, r3, #2
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d028      	beq.n	8018b90 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x11c>
  {
    UNMASK_HOST_INT_CHH (num);
 8018b3e:	687a      	ldr	r2, [r7, #4]
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018b46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018b4a:	18d3      	adds	r3, r2, r3
 8018b4c:	689b      	ldr	r3, [r3, #8]
 8018b4e:	68db      	ldr	r3, [r3, #12]
 8018b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8018b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018b54:	f043 0302 	orr.w	r3, r3, #2
 8018b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018b62:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018b66:	18d3      	adds	r3, r2, r3
 8018b68:	689b      	ldr	r3, [r3, #8]
 8018b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018b6c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	4619      	mov	r1, r3
 8018b76:	f7fe fe34 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8018b7a:	f04f 0300 	mov.w	r3, #0
 8018b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8018b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018b86:	647b      	str	r3, [r7, #68]	; 0x44
 8018b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018b8c:	609a      	str	r2, [r3, #8]
 8018b8e:	e24a      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.xfercompl)
 8018b90:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018b94:	f003 0301 	and.w	r3, r3, #1
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d03a      	beq.n	8018c14 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1a0>
  {
    pdev->host.ErrCnt[num] = 0;
 8018b9e:	687a      	ldr	r2, [r7, #4]
 8018ba0:	683b      	ldr	r3, [r7, #0]
 8018ba2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018ba6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018baa:	18d3      	adds	r3, r2, r3
 8018bac:	f04f 0200 	mov.w	r2, #0
 8018bb0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	683b      	ldr	r3, [r7, #0]
 8018bb6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018bba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018bbe:	18d3      	adds	r3, r2, r3
 8018bc0:	689b      	ldr	r3, [r3, #8]
 8018bc2:	68db      	ldr	r3, [r3, #12]
 8018bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8018bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bc8:	f043 0302 	orr.w	r3, r3, #2
 8018bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8018bce:	687a      	ldr	r2, [r7, #4]
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018bd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018bda:	18d3      	adds	r3, r2, r3
 8018bdc:	689b      	ldr	r3, [r3, #8]
 8018bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018be0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	6878      	ldr	r0, [r7, #4]
 8018be8:	4619      	mov	r1, r3
 8018bea:	f7fe fdfa 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8018bee:	f04f 0300 	mov.w	r3, #0
 8018bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bf6:	f043 0301 	orr.w	r3, r3, #1
 8018bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c00:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	18d3      	adds	r3, r2, r3
 8018c08:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018c0c:	f04f 0201 	mov.w	r2, #1
 8018c10:	721a      	strb	r2, [r3, #8]
 8018c12:	e208      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.stall)
 8018c14:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018c18:	f003 0308 	and.w	r3, r3, #8
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d030      	beq.n	8018c84 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x210>
  {
    CLEAR_HC_INT(hcreg , stall);
 8018c22:	f04f 0300 	mov.w	r3, #0
 8018c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8018c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c2a:	f043 0308 	orr.w	r3, r3, #8
 8018c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018c34:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018c3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c42:	18d3      	adds	r3, r2, r3
 8018c44:	689b      	ldr	r3, [r3, #8]
 8018c46:	68db      	ldr	r3, [r3, #12]
 8018c48:	637b      	str	r3, [r7, #52]	; 0x34
 8018c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c4c:	f043 0302 	orr.w	r3, r3, #2
 8018c50:	637b      	str	r3, [r7, #52]	; 0x34
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018c5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c5e:	18d3      	adds	r3, r2, r3
 8018c60:	689b      	ldr	r3, [r3, #8]
 8018c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018c64:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	4619      	mov	r1, r3
 8018c6e:	f7fe fdb8 	bl	80177e2 <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8018c72:	687a      	ldr	r2, [r7, #4]
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	18d3      	adds	r3, r2, r3
 8018c78:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018c7c:	f04f 0205 	mov.w	r2, #5
 8018c80:	721a      	strb	r2, [r3, #8]
 8018c82:	e1d0      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.nak)
 8018c84:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018c88:	f003 0310 	and.w	r3, r3, #16
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d03a      	beq.n	8018d08 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x294>
  {
    pdev->host.ErrCnt[num] = 0;
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018c9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c9e:	18d3      	adds	r3, r2, r3
 8018ca0:	f04f 0200 	mov.w	r2, #0
 8018ca4:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018ca6:	687a      	ldr	r2, [r7, #4]
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018cae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018cb2:	18d3      	adds	r3, r2, r3
 8018cb4:	689b      	ldr	r3, [r3, #8]
 8018cb6:	68db      	ldr	r3, [r3, #12]
 8018cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8018cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cbc:	f043 0302 	orr.w	r3, r3, #2
 8018cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8018cc2:	687a      	ldr	r2, [r7, #4]
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018cca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018cce:	18d3      	adds	r3, r2, r3
 8018cd0:	689b      	ldr	r3, [r3, #8]
 8018cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cd4:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018cd6:	683b      	ldr	r3, [r7, #0]
 8018cd8:	b2db      	uxtb	r3, r3
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	4619      	mov	r1, r3
 8018cde:	f7fe fd80 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 8018ce2:	f04f 0300 	mov.w	r3, #0
 8018ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cea:	f043 0310 	orr.w	r3, r3, #16
 8018cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018cf4:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	18d3      	adds	r3, r2, r3
 8018cfc:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018d00:	f04f 0203 	mov.w	r2, #3
 8018d04:	721a      	strb	r2, [r3, #8]
 8018d06:	e18e      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.xacterr)
 8018d08:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d042      	beq.n	8018d9c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x328>
  {
    UNMASK_HOST_INT_CHH (num);
 8018d16:	687a      	ldr	r2, [r7, #4]
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018d1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018d22:	18d3      	adds	r3, r2, r3
 8018d24:	689b      	ldr	r3, [r3, #8]
 8018d26:	68db      	ldr	r3, [r3, #12]
 8018d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2c:	f043 0302 	orr.w	r3, r3, #2
 8018d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d32:	687a      	ldr	r2, [r7, #4]
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018d3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018d3e:	18d3      	adds	r3, r2, r3
 8018d40:	689b      	ldr	r3, [r3, #8]
 8018d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d44:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	b2db      	uxtb	r3, r3
 8018d4a:	6878      	ldr	r0, [r7, #4]
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	f7fe fd48 	bl	80177e2 <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 8018d52:	687a      	ldr	r2, [r7, #4]
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018d5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018d5e:	18d3      	adds	r3, r2, r3
 8018d60:	689b      	ldr	r3, [r3, #8]
 8018d62:	f103 0201 	add.w	r2, r3, #1
 8018d66:	6879      	ldr	r1, [r7, #4]
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018d6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018d72:	18cb      	adds	r3, r1, r3
 8018d74:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	18d3      	adds	r3, r2, r3
 8018d7c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018d80:	f04f 0206 	mov.w	r2, #6
 8018d84:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xacterr);
 8018d86:	f04f 0300 	mov.w	r3, #0
 8018d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8018d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d92:	627b      	str	r3, [r7, #36]	; 0x24
 8018d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018d98:	609a      	str	r2, [r3, #8]
 8018d9a:	e144      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.nyet)
 8018d9c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018da4:	b2db      	uxtb	r3, r3
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d03a      	beq.n	8018e20 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3ac>
  {
    pdev->host.ErrCnt[num] = 0;
 8018daa:	687a      	ldr	r2, [r7, #4]
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018db2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018db6:	18d3      	adds	r3, r2, r3
 8018db8:	f04f 0200 	mov.w	r2, #0
 8018dbc:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018dbe:	687a      	ldr	r2, [r7, #4]
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018dc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018dca:	18d3      	adds	r3, r2, r3
 8018dcc:	689b      	ldr	r3, [r3, #8]
 8018dce:	68db      	ldr	r3, [r3, #12]
 8018dd0:	623b      	str	r3, [r7, #32]
 8018dd2:	6a3b      	ldr	r3, [r7, #32]
 8018dd4:	f043 0302 	orr.w	r3, r3, #2
 8018dd8:	623b      	str	r3, [r7, #32]
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018de2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018de6:	18d3      	adds	r3, r2, r3
 8018de8:	689b      	ldr	r3, [r3, #8]
 8018dea:	6a3a      	ldr	r2, [r7, #32]
 8018dec:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	6878      	ldr	r0, [r7, #4]
 8018df4:	4619      	mov	r1, r3
 8018df6:	f7fe fcf4 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 8018dfa:	f04f 0300 	mov.w	r3, #0
 8018dfe:	61fb      	str	r3, [r7, #28]
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e06:	61fb      	str	r3, [r7, #28]
 8018e08:	69fa      	ldr	r2, [r7, #28]
 8018e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018e0c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 8018e0e:	687a      	ldr	r2, [r7, #4]
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	18d3      	adds	r3, r2, r3
 8018e14:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018e18:	f04f 0204 	mov.w	r2, #4
 8018e1c:	721a      	strb	r2, [r3, #8]
 8018e1e:	e102      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.datatglerr)
 8018e20:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8018e24:	f003 0304 	and.w	r3, r3, #4
 8018e28:	b2db      	uxtb	r3, r3
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d03a      	beq.n	8018ea4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x430>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8018e2e:	687a      	ldr	r2, [r7, #4]
 8018e30:	683b      	ldr	r3, [r7, #0]
 8018e32:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018e36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018e3a:	18d3      	adds	r3, r2, r3
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	68db      	ldr	r3, [r3, #12]
 8018e40:	61bb      	str	r3, [r7, #24]
 8018e42:	69bb      	ldr	r3, [r7, #24]
 8018e44:	f043 0302 	orr.w	r3, r3, #2
 8018e48:	61bb      	str	r3, [r7, #24]
 8018e4a:	687a      	ldr	r2, [r7, #4]
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018e52:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018e56:	18d3      	adds	r3, r2, r3
 8018e58:	689b      	ldr	r3, [r3, #8]
 8018e5a:	69ba      	ldr	r2, [r7, #24]
 8018e5c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	4619      	mov	r1, r3
 8018e66:	f7fe fcbc 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8018e6a:	f04f 0300 	mov.w	r3, #0
 8018e6e:	617b      	str	r3, [r7, #20]
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	f043 0310 	orr.w	r3, r3, #16
 8018e76:	617b      	str	r3, [r7, #20]
 8018e78:	697a      	ldr	r2, [r7, #20]
 8018e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018e7c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 8018e7e:	687a      	ldr	r2, [r7, #4]
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	18d3      	adds	r3, r2, r3
 8018e84:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018e88:	f04f 0208 	mov.w	r2, #8
 8018e8c:	721a      	strb	r2, [r3, #8]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 8018e8e:	f04f 0300 	mov.w	r3, #0
 8018e92:	613b      	str	r3, [r7, #16]
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018e9a:	613b      	str	r3, [r7, #16]
 8018e9c:	693a      	ldr	r2, [r7, #16]
 8018e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ea0:	609a      	str	r2, [r3, #8]
 8018ea2:	e0c0      	b.n	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }  
  else if (hcint.b.chhltd)
 8018ea4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018ea8:	f003 0302 	and.w	r3, r3, #2
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	f000 80b9 	beq.w	8019026 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  {
    MASK_HOST_INT_CHH (num);
 8018eb4:	687a      	ldr	r2, [r7, #4]
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018ebc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018ec0:	18d3      	adds	r3, r2, r3
 8018ec2:	689b      	ldr	r3, [r3, #8]
 8018ec4:	68db      	ldr	r3, [r3, #12]
 8018ec6:	60fb      	str	r3, [r7, #12]
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f36f 0341 	bfc	r3, #1, #1
 8018ece:	60fb      	str	r3, [r7, #12]
 8018ed0:	687a      	ldr	r2, [r7, #4]
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018ed8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018edc:	18d3      	adds	r3, r2, r3
 8018ede:	689b      	ldr	r3, [r3, #8]
 8018ee0:	68fa      	ldr	r2, [r7, #12]
 8018ee2:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	18d3      	adds	r3, r2, r3
 8018eea:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018eee:	7a1b      	ldrb	r3, [r3, #8]
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	2b01      	cmp	r3, #1
 8018ef4:	d122      	bne.n	8018f3c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c8>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8018ef6:	687a      	ldr	r2, [r7, #4]
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	18d3      	adds	r3, r2, r3
 8018efc:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018f00:	f04f 0201 	mov.w	r2, #1
 8018f04:	71da      	strb	r2, [r3, #7]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8018f06:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8018f0a:	f003 030c 	and.w	r3, r3, #12
 8018f0e:	b2db      	uxtb	r3, r3
 8018f10:	2b08      	cmp	r3, #8
 8018f12:	d17e      	bne.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8018f1c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018f20:	18d3      	adds	r3, r2, r3
 8018f22:	7a5b      	ldrb	r3, [r3, #9]
 8018f24:	f083 0301 	eor.w	r3, r3, #1
 8018f28:	b2da      	uxtb	r2, r3
 8018f2a:	6879      	ldr	r1, [r7, #4]
 8018f2c:	683b      	ldr	r3, [r7, #0]
 8018f2e:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8018f32:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018f36:	18cb      	adds	r3, r1, r3
 8018f38:	725a      	strb	r2, [r3, #9]
 8018f3a:	e06a      	b.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	683b      	ldr	r3, [r7, #0]
 8018f40:	18d3      	adds	r3, r2, r3
 8018f42:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018f46:	7a1b      	ldrb	r3, [r3, #8]
 8018f48:	b2db      	uxtb	r3, r3
 8018f4a:	2b03      	cmp	r3, #3
 8018f4c:	d108      	bne.n	8018f60 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4ec>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	18d3      	adds	r3, r2, r3
 8018f54:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018f58:	f04f 0202 	mov.w	r2, #2
 8018f5c:	71da      	strb	r2, [r3, #7]
 8018f5e:	e058      	b.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8018f60:	687a      	ldr	r2, [r7, #4]
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	18d3      	adds	r3, r2, r3
 8018f66:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018f6a:	7a1b      	ldrb	r3, [r3, #8]
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	2b04      	cmp	r3, #4
 8018f70:	d118      	bne.n	8018fa4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x530>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018f7a:	18d3      	adds	r3, r2, r3
 8018f7c:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8018f80:	7b1b      	ldrb	r3, [r3, #12]
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d105      	bne.n	8018f92 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x51e>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	6878      	ldr	r0, [r7, #4]
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	f7fe fc45 	bl	801781c <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	683b      	ldr	r3, [r7, #0]
 8018f96:	18d3      	adds	r3, r2, r3
 8018f98:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018f9c:	f04f 0202 	mov.w	r2, #2
 8018fa0:	71da      	strb	r2, [r3, #7]
 8018fa2:	e036      	b.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	18d3      	adds	r3, r2, r3
 8018faa:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018fae:	7a1b      	ldrb	r3, [r3, #8]
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	2b05      	cmp	r3, #5
 8018fb4:	d108      	bne.n	8018fc8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x554>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	18d3      	adds	r3, r2, r3
 8018fbc:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018fc0:	f04f 0204 	mov.w	r2, #4
 8018fc4:	71da      	strb	r2, [r3, #7]
 8018fc6:	e024      	b.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8018fc8:	687a      	ldr	r2, [r7, #4]
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	18d3      	adds	r3, r2, r3
 8018fce:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018fd2:	7a1b      	ldrb	r3, [r3, #8]
 8018fd4:	b2db      	uxtb	r3, r3
 8018fd6:	2b06      	cmp	r3, #6
 8018fd8:	d11b      	bne.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8018fda:	687a      	ldr	r2, [r7, #4]
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018fe2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018fe6:	18d3      	adds	r3, r2, r3
 8018fe8:	689b      	ldr	r3, [r3, #8]
 8018fea:	2b03      	cmp	r3, #3
 8018fec:	d111      	bne.n	8019012 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 8018fee:	687a      	ldr	r2, [r7, #4]
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	18d3      	adds	r3, r2, r3
 8018ff4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018ff8:	f04f 0203 	mov.w	r2, #3
 8018ffc:	71da      	strb	r2, [r3, #7]
        pdev->host.ErrCnt[num] = 0;
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019006:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801900a:	18d3      	adds	r3, r2, r3
 801900c:	f04f 0200 	mov.w	r2, #0
 8019010:	609a      	str	r2, [r3, #8]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 8019012:	f04f 0300 	mov.w	r3, #0
 8019016:	60bb      	str	r3, [r7, #8]
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	f043 0302 	orr.w	r3, r3, #2
 801901e:	60bb      	str	r3, [r7, #8]
 8019020:	68ba      	ldr	r2, [r7, #8]
 8019022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019024:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8019026:	f04f 0301 	mov.w	r3, #1
}
 801902a:	4618      	mov	r0, r3
 801902c:	f107 0768 	add.w	r7, r7, #104	; 0x68
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}

08019034 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b09c      	sub	sp, #112	; 0x70
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 801903e:	687a      	ldr	r2, [r7, #4]
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019046:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801904a:	18d3      	adds	r3, r2, r3
 801904c:	689b      	ldr	r3, [r3, #8]
 801904e:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8019050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019052:	689b      	ldr	r3, [r3, #8]
 8019054:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8019056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019058:	68db      	ldr	r3, [r3, #12]
 801905a:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 801905c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801905e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019060:	4013      	ands	r3, r2
 8019062:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8019064:	687a      	ldr	r2, [r7, #4]
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801906c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019070:	18d3      	adds	r3, r2, r3
 8019072:	689b      	ldr	r3, [r3, #8]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 8019078:	f04f 0300 	mov.w	r3, #0
 801907c:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 801907e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019082:	f003 0304 	and.w	r3, r3, #4
 8019086:	b2db      	uxtb	r3, r3
 8019088:	2b00      	cmp	r3, #0
 801908a:	d022      	beq.n	80190d2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 801908c:	f04f 0300 	mov.w	r3, #0
 8019090:	65bb      	str	r3, [r7, #88]	; 0x58
 8019092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019094:	f043 0304 	orr.w	r3, r3, #4
 8019098:	65bb      	str	r3, [r7, #88]	; 0x58
 801909a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801909c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801909e:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80190a0:	687a      	ldr	r2, [r7, #4]
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80190a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80190ac:	18d3      	adds	r3, r2, r3
 80190ae:	689b      	ldr	r3, [r3, #8]
 80190b0:	68db      	ldr	r3, [r3, #12]
 80190b2:	657b      	str	r3, [r7, #84]	; 0x54
 80190b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80190b6:	f043 0302 	orr.w	r3, r3, #2
 80190ba:	657b      	str	r3, [r7, #84]	; 0x54
 80190bc:	687a      	ldr	r2, [r7, #4]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80190c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80190c8:	18d3      	adds	r3, r2, r3
 80190ca:	689b      	ldr	r3, [r3, #8]
 80190cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80190ce:	60da      	str	r2, [r3, #12]
 80190d0:	e098      	b.n	8019204 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 80190d2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80190d6:	f003 0320 	and.w	r3, r3, #32
 80190da:	b2db      	uxtb	r3, r3
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d00a      	beq.n	80190f6 <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 80190e0:	f04f 0300 	mov.w	r3, #0
 80190e4:	653b      	str	r3, [r7, #80]	; 0x50
 80190e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190e8:	f043 0320 	orr.w	r3, r3, #32
 80190ec:	653b      	str	r3, [r7, #80]	; 0x50
 80190ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80190f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190f2:	609a      	str	r2, [r3, #8]
 80190f4:	e086      	b.n	8019204 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 80190f6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80190fa:	f003 0308 	and.w	r3, r3, #8
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	2b00      	cmp	r3, #0
 8019102:	d03e      	beq.n	8019182 <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801910c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019110:	18d3      	adds	r3, r2, r3
 8019112:	689b      	ldr	r3, [r3, #8]
 8019114:	68db      	ldr	r3, [r3, #12]
 8019116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801911a:	f043 0302 	orr.w	r3, r3, #2
 801911e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019128:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801912c:	18d3      	adds	r3, r2, r3
 801912e:	689b      	ldr	r3, [r3, #8]
 8019130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019132:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8019134:	687a      	ldr	r2, [r7, #4]
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	18d3      	adds	r3, r2, r3
 801913a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801913e:	f04f 0205 	mov.w	r2, #5
 8019142:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8019144:	f04f 0300 	mov.w	r3, #0
 8019148:	64bb      	str	r3, [r7, #72]	; 0x48
 801914a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801914c:	f043 0310 	orr.w	r3, r3, #16
 8019150:	64bb      	str	r3, [r7, #72]	; 0x48
 8019152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019156:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8019158:	f04f 0300 	mov.w	r3, #0
 801915c:	647b      	str	r3, [r7, #68]	; 0x44
 801915e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019160:	f043 0308 	orr.w	r3, r3, #8
 8019164:	647b      	str	r3, [r7, #68]	; 0x44
 8019166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801916a:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 801916c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801916e:	f36f 1304 	bfc	r3, #4, #1
 8019172:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	b2db      	uxtb	r3, r3
 8019178:	6878      	ldr	r0, [r7, #4]
 801917a:	4619      	mov	r1, r3
 801917c:	f7fe fb31 	bl	80177e2 <USB_OTG_HC_Halt>
 8019180:	e040      	b.n	8019204 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 8019182:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8019186:	f003 0304 	and.w	r3, r3, #4
 801918a:	b2db      	uxtb	r3, r3
 801918c:	2b00      	cmp	r3, #0
 801918e:	d039      	beq.n	8019204 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8019190:	687a      	ldr	r2, [r7, #4]
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019198:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801919c:	18d3      	adds	r3, r2, r3
 801919e:	689b      	ldr	r3, [r3, #8]
 80191a0:	68db      	ldr	r3, [r3, #12]
 80191a2:	643b      	str	r3, [r7, #64]	; 0x40
 80191a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191a6:	f043 0302 	orr.w	r3, r3, #2
 80191aa:	643b      	str	r3, [r7, #64]	; 0x40
 80191ac:	687a      	ldr	r2, [r7, #4]
 80191ae:	683b      	ldr	r3, [r7, #0]
 80191b0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80191b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80191b8:	18d3      	adds	r3, r2, r3
 80191ba:	689b      	ldr	r3, [r3, #8]
 80191bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80191be:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	b2db      	uxtb	r3, r3
 80191c4:	6878      	ldr	r0, [r7, #4]
 80191c6:	4619      	mov	r1, r3
 80191c8:	f7fe fb0b 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80191cc:	f04f 0300 	mov.w	r3, #0
 80191d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80191d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191d4:	f043 0310 	orr.w	r3, r3, #16
 80191d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80191da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80191dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191de:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	683b      	ldr	r3, [r7, #0]
 80191e4:	18d3      	adds	r3, r2, r3
 80191e6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80191ea:	f04f 0208 	mov.w	r2, #8
 80191ee:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , datatglerr);
 80191f0:	f04f 0300 	mov.w	r3, #0
 80191f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80191f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80191fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80191fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019202:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8019204:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8019208:	f003 0302 	and.w	r3, r3, #2
 801920c:	b2db      	uxtb	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d028      	beq.n	8019264 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801921a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801921e:	18d3      	adds	r3, r2, r3
 8019220:	689b      	ldr	r3, [r3, #8]
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	637b      	str	r3, [r7, #52]	; 0x34
 8019226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019228:	f043 0302 	orr.w	r3, r3, #2
 801922c:	637b      	str	r3, [r7, #52]	; 0x34
 801922e:	687a      	ldr	r2, [r7, #4]
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019236:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801923a:	18d3      	adds	r3, r2, r3
 801923c:	689b      	ldr	r3, [r3, #8]
 801923e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019240:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	b2db      	uxtb	r3, r3
 8019246:	6878      	ldr	r0, [r7, #4]
 8019248:	4619      	mov	r1, r3
 801924a:	f7fe faca 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 801924e:	f04f 0300 	mov.w	r3, #0
 8019252:	633b      	str	r3, [r7, #48]	; 0x30
 8019254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801925a:	633b      	str	r3, [r7, #48]	; 0x30
 801925c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801925e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019260:	609a      	str	r2, [r3, #8]
 8019262:	e1e7      	b.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  }
  
  else if (hcint.b.xfercompl)
 8019264:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019268:	f003 0301 	and.w	r3, r3, #1
 801926c:	b2db      	uxtb	r3, r3
 801926e:	2b00      	cmp	r3, #0
 8019270:	f000 80a7 	beq.w	80193c2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x38e>
  {
    
    if (pdev->cfg.dma_enable == 1)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	78db      	ldrb	r3, [r3, #3]
 8019278:	2b01      	cmp	r3, #1
 801927a:	d11d      	bne.n	80192b8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x284>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 801927c:	687a      	ldr	r2, [r7, #4]
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019284:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019288:	18d3      	adds	r3, r2, r3
 801928a:	689b      	ldr	r3, [r3, #8]
 801928c:	691b      	ldr	r3, [r3, #16]
 801928e:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 8019290:	687a      	ldr	r2, [r7, #4]
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019298:	18d3      	adds	r3, r2, r3
 801929a:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80192a6:	1ad2      	subs	r2, r2, r3
 80192a8:	6879      	ldr	r1, [r7, #4]
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80192b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80192b4:	18cb      	adds	r3, r1, r3
 80192b6:	605a      	str	r2, [r3, #4]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 80192b8:	687a      	ldr	r2, [r7, #4]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	18d3      	adds	r3, r2, r3
 80192be:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80192c2:	f04f 0201 	mov.w	r2, #1
 80192c6:	721a      	strb	r2, [r3, #8]
    pdev->host.ErrCnt [num]= 0;
 80192c8:	687a      	ldr	r2, [r7, #4]
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80192d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80192d4:	18d3      	adds	r3, r2, r3
 80192d6:	f04f 0200 	mov.w	r2, #0
 80192da:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xfercompl);
 80192dc:	f04f 0300 	mov.w	r3, #0
 80192e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e4:	f043 0301 	orr.w	r3, r3, #1
 80192e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192ee:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80192f0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80192f4:	f003 030c 	and.w	r3, r3, #12
 80192f8:	b2db      	uxtb	r3, r3
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d006      	beq.n	801930c <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d8>
        (hcchar.b.eptype == EP_TYPE_BULK))
 80192fe:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8019302:	f003 030c 	and.w	r3, r3, #12
 8019306:	b2db      	uxtb	r3, r3
    
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8019308:	2b08      	cmp	r3, #8
 801930a:	d13b      	bne.n	8019384 <USB_OTG_USBH_handle_hc_n_In_ISR+0x350>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	683b      	ldr	r3, [r7, #0]
 8019310:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019314:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019318:	18d3      	adds	r3, r2, r3
 801931a:	689b      	ldr	r3, [r3, #8]
 801931c:	68db      	ldr	r3, [r3, #12]
 801931e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019322:	f043 0302 	orr.w	r3, r3, #2
 8019326:	62bb      	str	r3, [r7, #40]	; 0x28
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019330:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019334:	18d3      	adds	r3, r2, r3
 8019336:	689b      	ldr	r3, [r3, #8]
 8019338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801933a:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	b2db      	uxtb	r3, r3
 8019340:	6878      	ldr	r0, [r7, #4]
 8019342:	4619      	mov	r1, r3
 8019344:	f7fe fa4d 	bl	80177e2 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8019348:	f04f 0300 	mov.w	r3, #0
 801934c:	627b      	str	r3, [r7, #36]	; 0x24
 801934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019350:	f043 0310 	orr.w	r3, r3, #16
 8019354:	627b      	str	r3, [r7, #36]	; 0x24
 8019356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801935a:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8019364:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019368:	18d3      	adds	r3, r2, r3
 801936a:	7a1b      	ldrb	r3, [r3, #8]
 801936c:	f083 0301 	eor.w	r3, r3, #1
 8019370:	b2da      	uxtb	r2, r3
 8019372:	6879      	ldr	r1, [r7, #4]
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801937a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801937e:	18cb      	adds	r3, r1, r3
 8019380:	721a      	strb	r2, [r3, #8]
 8019382:	e157      	b.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8019384:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8019388:	f003 030c 	and.w	r3, r3, #12
 801938c:	b2db      	uxtb	r3, r3
 801938e:	2b0c      	cmp	r3, #12
 8019390:	f040 814f 	bne.w	8019632 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    {
      hcchar.b.oddfrm  = 1;
 8019394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801939a:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 801939c:	687a      	ldr	r2, [r7, #4]
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80193a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80193a8:	18d3      	adds	r3, r2, r3
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80193ae:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 80193b0:	687a      	ldr	r2, [r7, #4]
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	18d3      	adds	r3, r2, r3
 80193b6:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80193ba:	f04f 0201 	mov.w	r2, #1
 80193be:	71da      	strb	r2, [r3, #7]
 80193c0:	e137      	b.n	8019632 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    }
    
  }
  else if (hcint.b.chhltd)
 80193c2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80193c6:	f003 0302 	and.w	r3, r3, #2
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	f000 8086 	beq.w	80194de <USB_OTG_USBH_handle_hc_n_In_ISR+0x4aa>
  {
    MASK_HOST_INT_CHH (num);
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	683b      	ldr	r3, [r7, #0]
 80193d6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80193da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80193de:	18d3      	adds	r3, r2, r3
 80193e0:	689b      	ldr	r3, [r3, #8]
 80193e2:	68db      	ldr	r3, [r3, #12]
 80193e4:	623b      	str	r3, [r7, #32]
 80193e6:	6a3b      	ldr	r3, [r7, #32]
 80193e8:	f36f 0341 	bfc	r3, #1, #1
 80193ec:	623b      	str	r3, [r7, #32]
 80193ee:	687a      	ldr	r2, [r7, #4]
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80193f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80193fa:	18d3      	adds	r3, r2, r3
 80193fc:	689b      	ldr	r3, [r3, #8]
 80193fe:	6a3a      	ldr	r2, [r7, #32]
 8019400:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8019402:	687a      	ldr	r2, [r7, #4]
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	18d3      	adds	r3, r2, r3
 8019408:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801940c:	7a1b      	ldrb	r3, [r3, #8]
 801940e:	b2db      	uxtb	r3, r3
 8019410:	2b01      	cmp	r3, #1
 8019412:	d108      	bne.n	8019426 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3f2>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	683b      	ldr	r3, [r7, #0]
 8019418:	18d3      	adds	r3, r2, r3
 801941a:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801941e:	f04f 0201 	mov.w	r2, #1
 8019422:	71da      	strb	r2, [r3, #7]
 8019424:	e050      	b.n	80194c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	18d3      	adds	r3, r2, r3
 801942c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019430:	7a1b      	ldrb	r3, [r3, #8]
 8019432:	b2db      	uxtb	r3, r3
 8019434:	2b05      	cmp	r3, #5
 8019436:	d108      	bne.n	801944a <USB_OTG_USBH_handle_hc_n_In_ISR+0x416>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	18d3      	adds	r3, r2, r3
 801943e:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8019442:	f04f 0204 	mov.w	r2, #4
 8019446:	71da      	strb	r2, [r3, #7]
 8019448:	e03e      	b.n	80194c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	18d3      	adds	r3, r2, r3
 8019450:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019454:	7a1b      	ldrb	r3, [r3, #8]
 8019456:	b2db      	uxtb	r3, r3
 8019458:	2b06      	cmp	r3, #6
 801945a:	d008      	beq.n	801946e <USB_OTG_USBH_handle_hc_n_In_ISR+0x43a>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 801945c:	687a      	ldr	r2, [r7, #4]
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	18d3      	adds	r3, r2, r3
 8019462:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019466:	7a1b      	ldrb	r3, [r3, #8]
 8019468:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
      pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801946a:	2b08      	cmp	r3, #8
 801946c:	d112      	bne.n	8019494 <USB_OTG_USBH_handle_hc_n_In_ISR+0x460>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
      pdev->host.ErrCnt[num] = 0;
 801946e:	687a      	ldr	r2, [r7, #4]
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019476:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801947a:	18d3      	adds	r3, r2, r3
 801947c:	f04f 0200 	mov.w	r2, #0
 8019480:	609a      	str	r2, [r3, #8]
      pdev->host.URB_State[num] = URB_ERROR;  
 8019482:	687a      	ldr	r2, [r7, #4]
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	18d3      	adds	r3, r2, r3
 8019488:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801948c:	f04f 0203 	mov.w	r2, #3
 8019490:	71da      	strb	r2, [r3, #7]
 8019492:	e019      	b.n	80194c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8019494:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8019498:	f003 030c 	and.w	r3, r3, #12
 801949c:	b2db      	uxtb	r3, r3
 801949e:	2b0c      	cmp	r3, #12
 80194a0:	d112      	bne.n	80194c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	683b      	ldr	r3, [r7, #0]
 80194a6:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80194aa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80194ae:	18d3      	adds	r3, r2, r3
 80194b0:	7a1b      	ldrb	r3, [r3, #8]
 80194b2:	f083 0301 	eor.w	r3, r3, #1
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	6879      	ldr	r1, [r7, #4]
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80194c0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80194c4:	18cb      	adds	r3, r1, r3
 80194c6:	721a      	strb	r2, [r3, #8]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 80194c8:	f04f 0300 	mov.w	r3, #0
 80194cc:	61fb      	str	r3, [r7, #28]
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	f043 0302 	orr.w	r3, r3, #2
 80194d4:	61fb      	str	r3, [r7, #28]
 80194d6:	69fa      	ldr	r2, [r7, #28]
 80194d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194da:	609a      	str	r2, [r3, #8]
 80194dc:	e0aa      	b.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }    
  else if (hcint.b.xacterr)
 80194de:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80194e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d042      	beq.n	8019572 <USB_OTG_USBH_handle_hc_n_In_ISR+0x53e>
  {
    UNMASK_HOST_INT_CHH (num);
 80194ec:	687a      	ldr	r2, [r7, #4]
 80194ee:	683b      	ldr	r3, [r7, #0]
 80194f0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80194f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80194f8:	18d3      	adds	r3, r2, r3
 80194fa:	689b      	ldr	r3, [r3, #8]
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	61bb      	str	r3, [r7, #24]
 8019500:	69bb      	ldr	r3, [r7, #24]
 8019502:	f043 0302 	orr.w	r3, r3, #2
 8019506:	61bb      	str	r3, [r7, #24]
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	683b      	ldr	r3, [r7, #0]
 801950c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019510:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019514:	18d3      	adds	r3, r2, r3
 8019516:	689b      	ldr	r3, [r3, #8]
 8019518:	69ba      	ldr	r2, [r7, #24]
 801951a:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 801951c:	687a      	ldr	r2, [r7, #4]
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019524:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019528:	18d3      	adds	r3, r2, r3
 801952a:	689b      	ldr	r3, [r3, #8]
 801952c:	f103 0201 	add.w	r2, r3, #1
 8019530:	6879      	ldr	r1, [r7, #4]
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019538:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801953c:	18cb      	adds	r3, r1, r3
 801953e:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8019540:	687a      	ldr	r2, [r7, #4]
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	18d3      	adds	r3, r2, r3
 8019546:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801954a:	f04f 0206 	mov.w	r2, #6
 801954e:	721a      	strb	r2, [r3, #8]
    USB_OTG_HC_Halt(pdev, num);
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	b2db      	uxtb	r3, r3
 8019554:	6878      	ldr	r0, [r7, #4]
 8019556:	4619      	mov	r1, r3
 8019558:	f7fe f943 	bl	80177e2 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 801955c:	f04f 0300 	mov.w	r3, #0
 8019560:	617b      	str	r3, [r7, #20]
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019568:	617b      	str	r3, [r7, #20]
 801956a:	697a      	ldr	r2, [r7, #20]
 801956c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801956e:	609a      	str	r2, [r3, #8]
 8019570:	e060      	b.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }
  else if (hcint.b.nak)  
 8019572:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019576:	f003 0310 	and.w	r3, r3, #16
 801957a:	b2db      	uxtb	r3, r3
 801957c:	2b00      	cmp	r3, #0
 801957e:	d059      	beq.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 8019580:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8019584:	f003 030c 	and.w	r3, r3, #12
 8019588:	b2db      	uxtb	r3, r3
 801958a:	2b0c      	cmp	r3, #12
 801958c:	d11e      	bne.n	80195cc <USB_OTG_USBH_handle_hc_n_In_ISR+0x598>
    {
      UNMASK_HOST_INT_CHH (num);
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019596:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801959a:	18d3      	adds	r3, r2, r3
 801959c:	689b      	ldr	r3, [r3, #8]
 801959e:	68db      	ldr	r3, [r3, #12]
 80195a0:	613b      	str	r3, [r7, #16]
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	f043 0302 	orr.w	r3, r3, #2
 80195a8:	613b      	str	r3, [r7, #16]
 80195aa:	687a      	ldr	r2, [r7, #4]
 80195ac:	683b      	ldr	r3, [r7, #0]
 80195ae:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80195b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80195b6:	18d3      	adds	r3, r2, r3
 80195b8:	689b      	ldr	r3, [r3, #8]
 80195ba:	693a      	ldr	r2, [r7, #16]
 80195bc:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	b2db      	uxtb	r3, r3
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	4619      	mov	r1, r3
 80195c6:	f7fe f90c 	bl	80177e2 <USB_OTG_HC_Halt>
 80195ca:	e01f      	b.n	801960c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80195cc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80195d0:	f003 030c 	and.w	r3, r3, #12
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d006      	beq.n	80195e8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5b4>
              (hcchar.b.eptype == EP_TYPE_BULK))
 80195da:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80195de:	f003 030c 	and.w	r3, r3, #12
 80195e2:	b2db      	uxtb	r3, r3
    if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80195e4:	2b08      	cmp	r3, #8
 80195e6:	d111      	bne.n	801960c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
              (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 80195e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80195ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80195ee:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 80195f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80195f2:	f36f 739e 	bfc	r3, #30, #1
 80195f6:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80195f8:	687a      	ldr	r2, [r7, #4]
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019600:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019604:	18d3      	adds	r3, r2, r3
 8019606:	689b      	ldr	r3, [r3, #8]
 8019608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801960a:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 801960c:	687a      	ldr	r2, [r7, #4]
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	18d3      	adds	r3, r2, r3
 8019612:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019616:	f04f 0203 	mov.w	r2, #3
 801961a:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   
 801961c:	f04f 0300 	mov.w	r3, #0
 8019620:	60fb      	str	r3, [r7, #12]
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	f043 0310 	orr.w	r3, r3, #16
 8019628:	60fb      	str	r3, [r7, #12]
 801962a:	68fa      	ldr	r2, [r7, #12]
 801962c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801962e:	609a      	str	r2, [r3, #8]
 8019630:	e000      	b.n	8019634 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 8019632:	bf00      	nop
    pdev->host.HC_Status[num] = HC_NAK;
    CLEAR_HC_INT(hcreg , nak);   
  }
  
  
  return 1;
 8019634:	f04f 0301 	mov.w	r3, #1
  
}
 8019638:	4618      	mov	r0, r3
 801963a:	f107 0770 	add.w	r7, r7, #112	; 0x70
 801963e:	46bd      	mov	sp, r7
 8019640:	bd80      	pop	{r7, pc}
 8019642:	bf00      	nop

08019644 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 801964c:	f04f 0300 	mov.w	r3, #0
 8019650:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 8019652:	f04f 0300 	mov.w	r3, #0
 8019656:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8019658:	6878      	ldr	r0, [r7, #4]
 801965a:	f7fd ff49 	bl	80174f0 <USB_OTG_ReadHostAllChannels_intr>
 801965e:	4603      	mov	r3, r0
 8019660:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8019662:	f04f 0300 	mov.w	r3, #0
 8019666:	617b      	str	r3, [r7, #20]
 8019668:	e02d      	b.n	80196c6 <USB_OTG_USBH_handle_hc_ISR+0x82>
  {
    if (haint.b.chint & (1 << i))
 801966a:	89bb      	ldrh	r3, [r7, #12]
 801966c:	461a      	mov	r2, r3
 801966e:	697b      	ldr	r3, [r7, #20]
 8019670:	fa42 f303 	asr.w	r3, r2, r3
 8019674:	f003 0301 	and.w	r3, r3, #1
 8019678:	2b00      	cmp	r3, #0
 801967a:	d020      	beq.n	80196be <USB_OTG_USBH_handle_hc_ISR+0x7a>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 801967c:	687a      	ldr	r2, [r7, #4]
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019684:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019688:	18d3      	adds	r3, r2, r3
 801968a:	689b      	ldr	r3, [r3, #8]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 8019690:	7a7b      	ldrb	r3, [r7, #9]
 8019692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019696:	b2db      	uxtb	r3, r3
 8019698:	2b00      	cmp	r3, #0
 801969a:	d008      	beq.n	80196ae <USB_OTG_USBH_handle_hc_ISR+0x6a>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 801969c:	6878      	ldr	r0, [r7, #4]
 801969e:	6979      	ldr	r1, [r7, #20]
 80196a0:	f7ff fcc8 	bl	8019034 <USB_OTG_USBH_handle_hc_n_In_ISR>
 80196a4:	4603      	mov	r3, r0
 80196a6:	693a      	ldr	r2, [r7, #16]
 80196a8:	4313      	orrs	r3, r2
 80196aa:	613b      	str	r3, [r7, #16]
 80196ac:	e007      	b.n	80196be <USB_OTG_USBH_handle_hc_ISR+0x7a>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 80196ae:	6878      	ldr	r0, [r7, #4]
 80196b0:	6979      	ldr	r1, [r7, #20]
 80196b2:	f7ff f9df 	bl	8018a74 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 80196b6:	4603      	mov	r3, r0
 80196b8:	693a      	ldr	r2, [r7, #16]
 80196ba:	4313      	orrs	r3, r2
 80196bc:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	f103 0301 	add.w	r3, r3, #1
 80196c4:	617b      	str	r3, [r7, #20]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	781b      	ldrb	r3, [r3, #0]
 80196ca:	461a      	mov	r2, r3
 80196cc:	697b      	ldr	r3, [r7, #20]
 80196ce:	429a      	cmp	r2, r3
 80196d0:	d8cb      	bhi.n	801966a <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 80196d2:	693b      	ldr	r3, [r7, #16]
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	f107 0718 	add.w	r7, r7, #24
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}
 80196de:	bf00      	nop

080196e0 <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b088      	sub	sp, #32
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 80196e8:	f04f 0300 	mov.w	r3, #0
 80196ec:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 80196ee:	f04f 0300 	mov.w	r3, #0
 80196f2:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	f043 0310 	orr.w	r3, r3, #16
 80196fa:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	68db      	ldr	r3, [r3, #12]
 8019700:	687a      	ldr	r2, [r7, #4]
 8019702:	68d2      	ldr	r2, [r2, #12]
 8019704:	6991      	ldr	r1, [r2, #24]
 8019706:	697a      	ldr	r2, [r7, #20]
 8019708:	ea6f 0202 	mvn.w	r2, r2
 801970c:	400a      	ands	r2, r1
 801970e:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	68db      	ldr	r3, [r3, #12]
 8019714:	6a1b      	ldr	r3, [r3, #32]
 8019716:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8019718:	69bb      	ldr	r3, [r7, #24]
 801971a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801971e:	b2db      	uxtb	r3, r3
 8019720:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 8019722:	7afb      	ldrb	r3, [r7, #11]
 8019724:	b2db      	uxtb	r3, r3
 8019726:	687a      	ldr	r2, [r7, #4]
 8019728:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801972c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019730:	18d3      	adds	r3, r2, r3
 8019732:	689b      	ldr	r3, [r3, #8]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 8019738:	69bb      	ldr	r3, [r7, #24]
 801973a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801973e:	b2db      	uxtb	r3, r3
 8019740:	2b02      	cmp	r3, #2
 8019742:	f040 809c 	bne.w	801987e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 8019746:	69bb      	ldr	r3, [r7, #24]
 8019748:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801974c:	b29b      	uxth	r3, r3
 801974e:	2b00      	cmp	r3, #0
 8019750:	f340 8096 	ble.w	8019880 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 8019754:	7afb      	ldrb	r3, [r7, #11]
 8019756:	b2db      	uxtb	r3, r3
 8019758:	687a      	ldr	r2, [r7, #4]
 801975a:	f103 0315 	add.w	r3, r3, #21
 801975e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019762:	18d3      	adds	r3, r2, r3
 8019764:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	2b00      	cmp	r3, #0
 801976c:	f000 8088 	beq.w	8019880 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 8019770:	7afb      	ldrb	r3, [r7, #11]
 8019772:	b2db      	uxtb	r3, r3
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	f103 0315 	add.w	r3, r3, #21
 801977a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801977e:	18d3      	adds	r3, r2, r3
 8019780:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8019784:	681a      	ldr	r2, [r3, #0]
 8019786:	69bb      	ldr	r3, [r7, #24]
 8019788:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801978c:	b29b      	uxth	r3, r3
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	4611      	mov	r1, r2
 8019792:	461a      	mov	r2, r3
 8019794:	f7fd fd0f 	bl	80171b6 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8019798:	69bb      	ldr	r3, [r7, #24]
 801979a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801979e:	b2db      	uxtb	r3, r3
 80197a0:	69ba      	ldr	r2, [r7, #24]
 80197a2:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80197a6:	b2d2      	uxtb	r2, r2
 80197a8:	6879      	ldr	r1, [r7, #4]
 80197aa:	f102 0215 	add.w	r2, r2, #21
 80197ae:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80197b2:	188a      	adds	r2, r1, r2
 80197b4:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 80197b8:	6811      	ldr	r1, [r2, #0]
 80197ba:	69ba      	ldr	r2, [r7, #24]
 80197bc:	f3c2 120a 	ubfx	r2, r2, #4, #11
 80197c0:	b292      	uxth	r2, r2
 80197c2:	188a      	adds	r2, r1, r2
 80197c4:	6879      	ldr	r1, [r7, #4]
 80197c6:	f103 0315 	add.w	r3, r3, #21
 80197ca:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80197ce:	18cb      	adds	r3, r1, r3
 80197d0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80197d4:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 80197d6:	69bb      	ldr	r3, [r7, #24]
 80197d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	69ba      	ldr	r2, [r7, #24]
 80197e0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80197e4:	b2d2      	uxtb	r2, r2
 80197e6:	6879      	ldr	r1, [r7, #4]
 80197e8:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80197ec:	188a      	adds	r2, r1, r2
 80197ee:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 80197f2:	6811      	ldr	r1, [r2, #0]
 80197f4:	69ba      	ldr	r2, [r7, #24]
 80197f6:	f3c2 120a 	ubfx	r2, r2, #4, #11
 80197fa:	b292      	uxth	r2, r2
 80197fc:	188a      	adds	r2, r1, r2
 80197fe:	6879      	ldr	r1, [r7, #4]
 8019800:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019804:	18cb      	adds	r3, r1, r3
 8019806:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801980a:	601a      	str	r2, [r3, #0]
      
      
      count = pdev->host.hc[channelnum].xfer_count;
 801980c:	7afb      	ldrb	r3, [r7, #11]
 801980e:	b2db      	uxtb	r3, r3
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019816:	18d3      	adds	r3, r2, r3
 8019818:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 8019820:	7afb      	ldrb	r3, [r7, #11]
 8019822:	b2db      	uxtb	r3, r3
 8019824:	687a      	ldr	r2, [r7, #4]
 8019826:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 801982a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801982e:	18d3      	adds	r3, r2, r3
 8019830:	69fa      	ldr	r2, [r7, #28]
 8019832:	605a      	str	r2, [r3, #4]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8019834:	7afb      	ldrb	r3, [r7, #11]
 8019836:	b2db      	uxtb	r3, r3
 8019838:	687a      	ldr	r2, [r7, #4]
 801983a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801983e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019842:	18d3      	adds	r3, r2, r3
 8019844:	689b      	ldr	r3, [r3, #8]
 8019846:	691b      	ldr	r3, [r3, #16]
 8019848:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 801984a:	693b      	ldr	r3, [r7, #16]
 801984c:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8019850:	b29b      	uxth	r3, r3
 8019852:	2b00      	cmp	r3, #0
 8019854:	dd14      	ble.n	8019880 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801985c:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	f36f 739e 	bfc	r3, #30, #1
 8019864:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 8019866:	7afb      	ldrb	r3, [r7, #11]
 8019868:	b2db      	uxtb	r3, r3
 801986a:	687a      	ldr	r2, [r7, #4]
 801986c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019870:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019874:	18d3      	adds	r3, r2, r3
 8019876:	689b      	ldr	r3, [r3, #8]
 8019878:	68fa      	ldr	r2, [r7, #12]
 801987a:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 801987c:	e000      	b.n	8019880 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 801987e:	e000      	b.n	8019882 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 8019880:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 8019882:	697b      	ldr	r3, [r7, #20]
 8019884:	f043 0310 	orr.w	r3, r3, #16
 8019888:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	68db      	ldr	r3, [r3, #12]
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	68d2      	ldr	r2, [r2, #12]
 8019892:	6991      	ldr	r1, [r2, #24]
 8019894:	697a      	ldr	r2, [r7, #20]
 8019896:	430a      	orrs	r2, r1
 8019898:	619a      	str	r2, [r3, #24]
  return 1;
 801989a:	f04f 0301 	mov.w	r3, #1
}
 801989e:	4618      	mov	r0, r3
 80198a0:	f107 0720 	add.w	r7, r7, #32
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}

080198a8 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80198c0:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 80198c2:	68bb      	ldr	r3, [r7, #8]
 80198c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80198c8:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198d0:	68ba      	ldr	r2, [r7, #8]
 80198d2:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 80198d4:	f04f 0300 	mov.w	r3, #0
 80198d8:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80198e0:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	68db      	ldr	r3, [r3, #12]
 80198e6:	68fa      	ldr	r2, [r7, #12]
 80198e8:	615a      	str	r2, [r3, #20]
  
  return 1;
 80198ea:	f04f 0301 	mov.w	r3, #1
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	f107 0714 	add.w	r7, r7, #20
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bc80      	pop	{r7}
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop

080198fc <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8019904:	f04f 0300 	mov.w	r3, #0
 8019908:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 801990a:	f04f 0300 	mov.w	r3, #0
 801990e:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7fd fd89 	bl	8017428 <USB_OTG_IsHostMode>
 8019916:	4603      	mov	r3, r0
 8019918:	2b00      	cmp	r3, #0
 801991a:	f000 808d 	beq.w	8019a38 <USBH_OTG_ISR_Handler+0x13c>
  {
    
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 801991e:	6878      	ldr	r0, [r7, #4]
 8019920:	f7fd fd87 	bl	8017432 <USB_OTG_ReadCoreItr>
 8019924:	4603      	mov	r3, r0
 8019926:	60bb      	str	r3, [r7, #8]
    //DEBUG_MSG("gintsts: 0x%08x \n", gintsts.d32);
    if (!gintsts.d32)
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d102      	bne.n	8019934 <USBH_OTG_ISR_Handler+0x38>
    {
      
      return 0;
 801992e:	f04f 0300 	mov.w	r3, #0
 8019932:	e082      	b.n	8019a3a <USBH_OTG_ISR_Handler+0x13e>
    }
    
    if (gintsts.b.sofintr)
 8019934:	7a3b      	ldrb	r3, [r7, #8]
 8019936:	f003 0308 	and.w	r3, r3, #8
 801993a:	b2db      	uxtb	r3, r3
 801993c:	2b00      	cmp	r3, #0
 801993e:	d006      	beq.n	801994e <USBH_OTG_ISR_Handler+0x52>
    {
      
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 8019940:	6878      	ldr	r0, [r7, #4]
 8019942:	f7fe fde9 	bl	8018518 <USB_OTG_USBH_handle_sof_ISR>
 8019946:	4603      	mov	r3, r0
 8019948:	68fa      	ldr	r2, [r7, #12]
 801994a:	4313      	orrs	r3, r2
 801994c:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 801994e:	7a3b      	ldrb	r3, [r7, #8]
 8019950:	f003 0310 	and.w	r3, r3, #16
 8019954:	b2db      	uxtb	r3, r3
 8019956:	2b00      	cmp	r3, #0
 8019958:	d006      	beq.n	8019968 <USBH_OTG_ISR_Handler+0x6c>
    {
      
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f7ff fec0 	bl	80196e0 <USB_OTG_USBH_handle_rx_qlvl_ISR>
 8019960:	4603      	mov	r3, r0
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	4313      	orrs	r3, r2
 8019966:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 8019968:	7a3b      	ldrb	r3, [r7, #8]
 801996a:	f003 0320 	and.w	r3, r3, #32
 801996e:	b2db      	uxtb	r3, r3
 8019970:	2b00      	cmp	r3, #0
 8019972:	d006      	beq.n	8019982 <USBH_OTG_ISR_Handler+0x86>
    {
      
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7fe fe0b 	bl	8018590 <USB_OTG_USBH_handle_nptxfempty_ISR>
 801997a:	4603      	mov	r3, r0
 801997c:	68fa      	ldr	r2, [r7, #12]
 801997e:	4313      	orrs	r3, r2
 8019980:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 8019982:	7afb      	ldrb	r3, [r7, #11]
 8019984:	f003 0304 	and.w	r3, r3, #4
 8019988:	b2db      	uxtb	r3, r3
 801998a:	2b00      	cmp	r3, #0
 801998c:	d006      	beq.n	801999c <USBH_OTG_ISR_Handler+0xa0>
    {
      
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f7fe fed6 	bl	8018740 <USB_OTG_USBH_handle_ptxfempty_ISR>
 8019994:	4603      	mov	r3, r0
 8019996:	68fa      	ldr	r2, [r7, #12]
 8019998:	4313      	orrs	r3, r2
 801999a:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 801999c:	7afb      	ldrb	r3, [r7, #11]
 801999e:	f003 0302 	and.w	r3, r3, #2
 80199a2:	b2db      	uxtb	r3, r3
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d006      	beq.n	80199b6 <USBH_OTG_ISR_Handler+0xba>
    {
      
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f7ff fe4b 	bl	8019644 <USB_OTG_USBH_handle_hc_ISR>
 80199ae:	4603      	mov	r3, r0
 80199b0:	68fa      	ldr	r2, [r7, #12]
 80199b2:	4313      	orrs	r3, r2
 80199b4:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 80199b6:	7afb      	ldrb	r3, [r7, #11]
 80199b8:	f003 0301 	and.w	r3, r3, #1
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d006      	beq.n	80199d0 <USBH_OTG_ISR_Handler+0xd4>
    {
      
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f7fe ff94 	bl	80188f0 <USB_OTG_USBH_handle_port_ISR>
 80199c8:	4603      	mov	r3, r0
 80199ca:	68fa      	ldr	r2, [r7, #12]
 80199cc:	4313      	orrs	r3, r2
 80199ce:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 80199d0:	7afb      	ldrb	r3, [r7, #11]
 80199d2:	f003 0320 	and.w	r3, r3, #32
 80199d6:	b2db      	uxtb	r3, r3
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d006      	beq.n	80199ea <USBH_OTG_ISR_Handler+0xee>
    {
      
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7fe fdb9 	bl	8018554 <USB_OTG_USBH_handle_Disconnect_ISR>
 80199e2:	4603      	mov	r3, r0
 80199e4:	68fa      	ldr	r2, [r7, #12]
 80199e6:	4313      	orrs	r3, r2
 80199e8:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 80199ea:	7abb      	ldrb	r3, [r7, #10]
 80199ec:	f003 0320 	and.w	r3, r3, #32
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d006      	beq.n	8019a04 <USBH_OTG_ISR_Handler+0x108>
    {
      
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 80199f6:	6878      	ldr	r0, [r7, #4]
 80199f8:	f7ff ff56 	bl	80198a8 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 80199fc:	4603      	mov	r3, r0
 80199fe:	68fa      	ldr	r2, [r7, #12]
 8019a00:	4313      	orrs	r3, r2
 8019a02:	60fb      	str	r3, [r7, #12]
    }

    if (gintsts.b.sessreqintr)
 8019a04:	7afb      	ldrb	r3, [r7, #11]
 8019a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a0a:	b2db      	uxtb	r3, r3
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d006      	beq.n	8019a1e <USBH_OTG_ISR_Handler+0x122>
    {
      retval |= SB_OTG_USBH_handle_SessionRequest_ISR(pdev);
 8019a10:	6878      	ldr	r0, [r7, #4]
 8019a12:	f7fe fd45 	bl	80184a0 <SB_OTG_USBH_handle_SessionRequest_ISR>
 8019a16:	4603      	mov	r3, r0
 8019a18:	68fa      	ldr	r2, [r7, #12]
 8019a1a:	4313      	orrs	r3, r2
 8019a1c:	60fb      	str	r3, [r7, #12]
    }

    if (gintsts.b.otgintr)
 8019a1e:	7a3b      	ldrb	r3, [r7, #8]
 8019a20:	f003 0304 	and.w	r3, r3, #4
 8019a24:	b2db      	uxtb	r3, r3
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d006      	beq.n	8019a38 <USBH_OTG_ISR_Handler+0x13c>
    {
      retval |= SB_OTG_USBH_handle_ProtocoleEvent_ISR(pdev);
 8019a2a:	6878      	ldr	r0, [r7, #4]
 8019a2c:	f7fe fd54 	bl	80184d8 <SB_OTG_USBH_handle_ProtocoleEvent_ISR>
 8019a30:	4603      	mov	r3, r0
 8019a32:	68fa      	ldr	r2, [r7, #12]
 8019a34:	4313      	orrs	r3, r2
 8019a36:	60fb      	str	r3, [r7, #12]
    }

  }
  return retval;
 8019a38:	68fb      	ldr	r3, [r7, #12]
}
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f107 0710 	add.w	r7, r7, #16
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}

08019a44 <STM32_USBO_OTG_ISR_Handler>:
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8019a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8019a46:	68c3      	ldr	r3, [r0, #12]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8019a48:	4d45      	ldr	r5, [pc, #276]	; (8019b60 <STM32_USBO_OTG_ISR_Handler+0x11c>)
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8019a4a:	695a      	ldr	r2, [r3, #20]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8019a4c:	6999      	ldr	r1, [r3, #24]
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8019a4e:	400a      	ands	r2, r1
 8019a50:	4015      	ands	r5, r2
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8019a52:	4604      	mov	r4, r0
  uint32_t retval = 0;
  USB_OTG_GINTSTS_TypeDef  gintsts ;
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
 8019a54:	2d00      	cmp	r5, #0
 8019a56:	f000 8081 	beq.w	8019b5c <STM32_USBO_OTG_ISR_Handler+0x118>
  {
    return 0;
  }
  if (gintsts.b.otgintr)
 8019a5a:	f002 0204 	and.w	r2, r2, #4
 8019a5e:	b2d1      	uxtb	r1, r2
 8019a60:	2900      	cmp	r1, #0
 8019a62:	d040      	beq.n	8019ae6 <STM32_USBO_OTG_ISR_Handler+0xa2>
  
  
  gotgint.d32 = 0;
  gotgctl.d32 = 0;
  
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8019a64:	685e      	ldr	r6, [r3, #4]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8019a66:	681a      	ldr	r2, [r3, #0]
  
  if (gotgint.b.sesenddet)
 8019a68:	f006 0704 	and.w	r7, r6, #4
 8019a6c:	b2fa      	uxtb	r2, r7
 8019a6e:	b132      	cbz	r2, 8019a7e <STM32_USBO_OTG_ISR_Handler+0x3a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8019a70:	681b      	ldr	r3, [r3, #0]
    
    
    if (USB_OTG_IsDeviceMode(pdev))
 8019a72:	f7fd fcd2 	bl	801741a <USB_OTG_IsDeviceMode>
 8019a76:	b910      	cbnz	r0, 8019a7e <STM32_USBO_OTG_ISR_Handler+0x3a>
    {

    }
    else if (USB_OTG_IsHostMode(pdev))
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f7fd fcd5 	bl	8017428 <USB_OTG_IsHostMode>

    }
  }

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
 8019a7e:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8019a82:	07f8      	lsls	r0, r7, #31
 8019a84:	d50e      	bpl.n	8019aa4 <STM32_USBO_OTG_ISR_Handler+0x60>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8019a86:	68e0      	ldr	r0, [r4, #12]
 8019a88:	6803      	ldr	r3, [r0, #0]
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8019a8a:	07d9      	lsls	r1, r3, #31
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8019a8c:	4620      	mov	r0, r4

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8019a8e:	d507      	bpl.n	8019aa0 <STM32_USBO_OTG_ISR_Handler+0x5c>
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8019a90:	f7fd fcc3 	bl	801741a <USB_OTG_IsDeviceMode>

      }
      /* Clear Session Request */
      gotgctl.d32 = 0;
      gotgctl.b.sesreq = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
 8019a94:	68e1      	ldr	r1, [r4, #12]
 8019a96:	680a      	ldr	r2, [r1, #0]
 8019a98:	f022 0002 	bic.w	r0, r2, #2
 8019a9c:	6008      	str	r0, [r1, #0]
 8019a9e:	e001      	b.n	8019aa4 <STM32_USBO_OTG_ISR_Handler+0x60>
    }
    else /* Session request failure                                          */
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8019aa0:	f7fd fcbb 	bl	801741a <USB_OTG_IsDeviceMode>

      }
    }
  }
  /* ----> HNP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.hstnegsucstschng)
 8019aa4:	f007 0702 	and.w	r7, r7, #2
 8019aa8:	b2fb      	uxtb	r3, r7
 8019aaa:	b143      	cbz	r3, 8019abe <STM32_USBO_OTG_ISR_Handler+0x7a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8019aac:	68e1      	ldr	r1, [r4, #12]
 8019aae:	680a      	ldr	r2, [r1, #0]

    if (gotgctl.b.hstnegscs)                                    /* Host negotiation success                                         */
 8019ab0:	05d2      	lsls	r2, r2, #23
 8019ab2:	d502      	bpl.n	8019aba <STM32_USBO_OTG_ISR_Handler+0x76>
    {
      if (USB_OTG_IsHostMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	f7fd fcb7 	bl	8017428 <USB_OTG_IsHostMode>
    }
    else                                                        /* Host negotiation failure */
    {

    }
    gotgint.b.hstnegsucstschng = 1;                             /* Ack "Host Negotiation Success Status Change" interrupt.          */
 8019aba:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  }
  /* ----> HOST NEGOTIATION DETECTED INTERRUPT <---- */
  if (gotgint.b.hstnegdet)
 8019abe:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8019ac2:	f007 0002 	and.w	r0, r7, #2
 8019ac6:	b2c3      	uxtb	r3, r0
 8019ac8:	b113      	cbz	r3, 8019ad0 <STM32_USBO_OTG_ISR_Handler+0x8c>
  {
    if (USB_OTG_IsDeviceMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8019aca:	4620      	mov	r0, r4
 8019acc:	f7fd fca5 	bl	801741a <USB_OTG_IsDeviceMode>

    }
  }
  if (gotgint.b.adevtoutchng)
  {}
  if (gotgint.b.debdone)
 8019ad0:	f007 0108 	and.w	r1, r7, #8
 8019ad4:	b2cf      	uxtb	r7, r1
 8019ad6:	b117      	cbz	r7, 8019ade <STM32_USBO_OTG_ISR_Handler+0x9a>
  {
    USB_OTG_ResetPort(pdev);
 8019ad8:	4620      	mov	r0, r4
 8019ada:	f7fd fd0c 	bl	80174f6 <USB_OTG_ResetPort>
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8019ade:	68e2      	ldr	r2, [r4, #12]
  {
    return 0;
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
 8019ae0:	2001      	movs	r0, #1
  if (gotgint.b.debdone)
  {
    USB_OTG_ResetPort(pdev);
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8019ae2:	6056      	str	r6, [r2, #4]
 8019ae4:	e000      	b.n	8019ae8 <STM32_USBO_OTG_ISR_Handler+0xa4>
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t retval = 0;
 8019ae6:	4608      	mov	r0, r1
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
 8019ae8:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8019aec:	f003 0110 	and.w	r1, r3, #16
 8019af0:	b2ca      	uxtb	r2, r1
 8019af2:	b312      	cbz	r2, 8019b3a <STM32_USBO_OTG_ISR_Handler+0xf6>
  gintsts.d32 = 0 ;
  gintmsk.d32 = 0 ;
  gotgctl.d32 = 0 ;
  gintmsk.b.sofintr = 1;
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
 8019af4:	68e0      	ldr	r0, [r4, #12]
 8019af6:	6983      	ldr	r3, [r0, #24]
 8019af8:	f023 0108 	bic.w	r1, r3, #8
 8019afc:	6181      	str	r1, [r0, #24]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8019afe:	6802      	ldr	r2, [r0, #0]
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8019b00:	03d3      	lsls	r3, r2, #15
  {
    USB_OTG_DisableGlobalInt(pdev);
 8019b02:	4620      	mov	r0, r4
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8019b04:	d509      	bpl.n	8019b1a <STM32_USBO_OTG_ISR_Handler+0xd6>
  {
    USB_OTG_DisableGlobalInt(pdev);
 8019b06:	f7fd fc34 	bl	8017372 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitDev(pdev);
 8019b0a:	4620      	mov	r0, r4
 8019b0c:	f7fd febe 	bl	801788c <USB_OTG_CoreInitDev>
    USB_OTG_EnableGlobalInt(pdev);
 8019b10:	4620      	mov	r0, r4
 8019b12:	f7fd fc27 	bl	8017364 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = B_PERIPHERAL;
 8019b16:	2004      	movs	r0, #4
 8019b18:	e008      	b.n	8019b2c <STM32_USBO_OTG_ISR_Handler+0xe8>
  }
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
 8019b1a:	f7fd fc2a 	bl	8017372 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
 8019b1e:	4620      	mov	r0, r4
 8019b20:	f7fd fcff 	bl	8017522 <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 8019b24:	4620      	mov	r0, r4
 8019b26:	f7fd fc1d 	bl	8017364 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = A_HOST;
 8019b2a:	2001      	movs	r0, #1
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019b2c:	68e3      	ldr	r3, [r4, #12]
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
    pdev->otg.OTG_State = A_HOST;
 8019b2e:	f884 0a90 	strb.w	r0, [r4, #2704]	; 0xa90
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019b32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8019b36:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
 8019b38:	2001      	movs	r0, #1
  }
  if (gintsts.b.sessreqintr)
 8019b3a:	f3c5 6507 	ubfx	r5, r5, #24, #8
 8019b3e:	f005 0240 	and.w	r2, r5, #64	; 0x40
 8019b42:	b2d5      	uxtb	r5, r2
 8019b44:	b15d      	cbz	r5, 8019b5e <STM32_USBO_OTG_ISR_Handler+0x11a>


  gotgctl.d32 = 0;
  gintsts.d32 = 0;

  gotgctl.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GOTGCTL );
 8019b46:	68e0      	ldr	r0, [r4, #12]
 8019b48:	6803      	ldr	r3, [r0, #0]
  if (USB_OTG_IsDeviceMode(pdev) && (gotgctl.b.bsesvld))
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	f7fd fc65 	bl	801741a <USB_OTG_IsDeviceMode>
    
  }
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.sessreqintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019b50:	68e3      	ldr	r3, [r4, #12]
 8019b52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8019b56:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
  }
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
 8019b58:	2001      	movs	r0, #1
 8019b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
  {
    return 0;
 8019b5c:	4628      	mov	r0, r5
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
  }
  return retval;
}
 8019b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b60:	50000004 	.word	0x50000004

08019b64 <APP_LCD_ExtPort_PinSet>:
// set pin directly
inline static s32 APP_LCD_ExtPort_PinSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 8, value);
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 8, value);
 8019b64:	3008      	adds	r0, #8
 8019b66:	b2c0      	uxtb	r0, r0
 8019b68:	f7f9 bcf9 	b.w	801355e <MIOS32_BOARD_J10_PinSet>

08019b6c <APP_LCD_ExtPort_UpdateSRs>:
  return -1;
#endif
}

// pulse the RC line after a serial data shift
inline static s32 APP_LCD_ExtPort_UpdateSRs(void) {
 8019b6c:	b508      	push	{r3, lr}
#if defined(MIOS32_FAMILY_STM32F10x)
  APP_LCD_ExtPort_PinSet(2, 0); // J5C.A10
  APP_LCD_ExtPort_PinSet(2, 1); // J5C.A10
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  APP_LCD_ExtPort_PinSet(2, 0); // J10B.D10
 8019b6e:	2100      	movs	r1, #0
 8019b70:	2002      	movs	r0, #2
 8019b72:	f7ff fff7 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
  APP_LCD_ExtPort_PinSet(2, 1); // J10B.D10
 8019b76:	2002      	movs	r0, #2
 8019b78:	2101      	movs	r1, #1
 8019b7a:	f7ff fff3 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_UpdateSRs not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8019b7e:	2000      	movs	r0, #0
 8019b80:	bd08      	pop	{r3, pc}
	...

08019b84 <APP_LCD_GLCD_CS_Set>:
/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of GLCDs with parallel port depending on X cursor position
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
 8019b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
 8019b86:	4b14      	ldr	r3, [pc, #80]	; (8019bd8 <APP_LCD_GLCD_CS_Set+0x54>)
 8019b88:	7819      	ldrb	r1, [r3, #0]
 8019b8a:	f1b1 0281 	subs.w	r2, r1, #129	; 0x81
 8019b8e:	4255      	negs	r5, r2
 8019b90:	4155      	adcs	r5, r2
  u8 level_nonactive = level_active ? 0 : 1;
#if SED1520_POLLIN_WINTEK_WD_G1203T
  u8 segment_width = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520) ? 61 : 64;
 8019b92:	2986      	cmp	r1, #134	; 0x86
 8019b94:	bf14      	ite	ne
 8019b96:	2440      	movne	r4, #64	; 0x40
 8019b98:	243d      	moveq	r4, #61	; 0x3d
#else
  u8 segment_width = 64; // should be valid for KS0108 and SED1320 (although sometimes the controllers provide more columns)
#endif

  int cs;
  if( all ) {
 8019b9a:	b140      	cbz	r0, 8019bae <APP_LCD_GLCD_CS_Set+0x2a>
 8019b9c:	2400      	movs	r4, #0
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8019b9e:	b2e0      	uxtb	r0, r4
 8019ba0:	4629      	mov	r1, r5
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8019ba2:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8019ba4:	f7ff ffde 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8019ba8:	2c08      	cmp	r4, #8
 8019baa:	d1f8      	bne.n	8019b9e <APP_LCD_GLCD_CS_Set+0x1a>
 8019bac:	e011      	b.n	8019bd2 <APP_LCD_GLCD_CS_Set+0x4e>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8019bae:	4f0b      	ldr	r7, [pc, #44]	; (8019bdc <APP_LCD_GLCD_CS_Set+0x58>)
 8019bb0:	883b      	ldrh	r3, [r7, #0]
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
  u8 level_nonactive = level_active ? 0 : 1;
 8019bb2:	f085 0601 	eor.w	r6, r5, #1
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8019bb6:	fb93 f7f4 	sdiv	r7, r3, r4

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8019bba:	4604      	mov	r4, r0
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8019bbc:	b2f9      	uxtb	r1, r7
 8019bbe:	428c      	cmp	r4, r1
 8019bc0:	bf14      	ite	ne
 8019bc2:	4631      	movne	r1, r6
 8019bc4:	4629      	moveq	r1, r5
 8019bc6:	b2e0      	uxtb	r0, r4
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8019bc8:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8019bca:	f7ff ffcb 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8019bce:	2c08      	cmp	r4, #8
 8019bd0:	d1f4      	bne.n	8019bbc <APP_LCD_GLCD_CS_Set+0x38>
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
  }

  return 0; // no error
}
 8019bd2:	2000      	movs	r0, #0
 8019bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd6:	bf00      	nop
 8019bd8:	200035ca 	.word	0x200035ca
 8019bdc:	200035dc 	.word	0x200035dc

08019be0 <APP_LCD_ExtPort_Init>:
# warning "APP_LCD_NUM_EXT_PINS not adapted for this MIOS32_FAMILY"
# define APP_LCD_NUM_EXT_PINS 0
#endif

// pin initialisation
inline static s32 APP_LCD_ExtPort_Init(void) {
 8019be0:	b510      	push	{r4, lr}
 8019be2:	2408      	movs	r4, #8
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8019be4:	4620      	mov	r0, r4
 8019be6:	3401      	adds	r4, #1
 8019be8:	2105      	movs	r1, #5
 8019bea:	b2e4      	uxtb	r4, r4
 8019bec:	f7f9 fcb4 	bl	8013558 <MIOS32_BOARD_J10_PinInit>
    MIOS32_BOARD_J5_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
 8019bf0:	2c10      	cmp	r4, #16
 8019bf2:	d1f7      	bne.n	8019be4 <APP_LCD_ExtPort_Init+0x4>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_Init not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	bd10      	pop	{r4, pc}

08019bf8 <APP_LCD_SERGLCD_CS_Init>:
// - 8 CS lines are available at J15
// - additional lines are available at the extension IO port
//   (either directly, or via DOUT shift register)
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Init(void)
{
 8019bf8:	b510      	push	{r4, lr}
  int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 8019bfa:	4b0b      	ldr	r3, [pc, #44]	; (8019c28 <APP_LCD_SERGLCD_CS_Init+0x30>)
 8019bfc:	785c      	ldrb	r4, [r3, #1]
 8019bfe:	7898      	ldrb	r0, [r3, #2]
 8019c00:	fb14 f400 	smulbb	r4, r4, r0

  if( num_lcds > 8 ) {
 8019c04:	2c08      	cmp	r4, #8
 8019c06:	dd01      	ble.n	8019c0c <APP_LCD_SERGLCD_CS_Init+0x14>
    APP_LCD_ExtPort_Init();
 8019c08:	f7ff ffea 	bl	8019be0 <APP_LCD_ExtPort_Init>
  }

  display_available |= (1 << num_lcds)-1;
 8019c0c:	4907      	ldr	r1, [pc, #28]	; (8019c2c <APP_LCD_SERGLCD_CS_Init+0x34>)
 8019c0e:	2201      	movs	r2, #1
 8019c10:	fa02 f304 	lsl.w	r3, r2, r4
 8019c14:	1e5c      	subs	r4, r3, #1
 8019c16:	e9d1 2300 	ldrd	r2, r3, [r1]
 8019c1a:	4322      	orrs	r2, r4
 8019c1c:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
 8019c20:	e9c1 2300 	strd	r2, r3, [r1]

  return 0; // no error
}
 8019c24:	2000      	movs	r0, #0
 8019c26:	bd10      	pop	{r4, pc}
 8019c28:	200035ca 	.word	0x200035ca
 8019c2c:	200009b8 	.word	0x200009b8

08019c30 <APP_LCD_ExtPort_SerDataShift.part.0>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 8019c30:	2108      	movs	r1, #8
 8019c32:	4b0b      	ldr	r3, [pc, #44]	; (8019c60 <APP_LCD_ExtPort_SerDataShift.part.0+0x30>)
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
 8019c34:	f010 0f01 	tst.w	r0, #1
 8019c38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019c3c:	bf14      	ite	ne
 8019c3e:	831a      	strhne	r2, [r3, #24]
 8019c40:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8019c46:	0840      	lsrs	r0, r0, #1
 8019c48:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019c4a:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c4c:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c4e:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c50:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c52:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8019c54:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019c56:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019c58:	831a      	strh	r2, [r3, #24]
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8019c5a:	d1ea      	bne.n	8019c32 <APP_LCD_ExtPort_SerDataShift.part.0+0x2>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8019c5c:	4770      	bx	lr
 8019c5e:	bf00      	nop
 8019c60:	40020800 	.word	0x40020800

08019c64 <APP_LCD_ExtPort_SerDataShift>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 8019c64:	b510      	push	{r4, lr}
 8019c66:	4604      	mov	r4, r0
    }
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
 8019c68:	b111      	cbz	r1, 8019c70 <APP_LCD_ExtPort_SerDataShift+0xc>
 8019c6a:	f7ff ffe1 	bl	8019c30 <APP_LCD_ExtPort_SerDataShift.part.0>
 8019c6e:	e016      	b.n	8019c9e <APP_LCD_ExtPort_SerDataShift+0x3a>
 8019c70:	2108      	movs	r1, #8
 8019c72:	4b0c      	ldr	r3, [pc, #48]	; (8019ca4 <APP_LCD_ExtPort_SerDataShift+0x40>)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
 8019c74:	f014 0f80 	tst.w	r4, #128	; 0x80
 8019c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019c7c:	bf14      	ite	ne
 8019c7e:	831a      	strhne	r2, [r3, #24]
 8019c80:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019c82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019c86:	0064      	lsls	r4, r4, #1
 8019c88:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019c8a:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019c8c:	b2e4      	uxtb	r4, r4
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c8e:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c90:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c92:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019c94:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8019c96:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019c98:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019c9a:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019c9c:	d1e9      	bne.n	8019c72 <APP_LCD_ExtPort_SerDataShift+0xe>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8019c9e:	2000      	movs	r0, #0
 8019ca0:	bd10      	pop	{r4, pc}
 8019ca2:	bf00      	nop
 8019ca4:	40020800 	.word	0x40020800

08019ca8 <APP_LCD_E_Set>:

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8019ca8:	b570      	push	{r4, r5, r6, lr}
  if( mios32_lcd_device < 2 ) {
 8019caa:	4b1d      	ldr	r3, [pc, #116]	; (8019d20 <APP_LCD_E_Set+0x78>)

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8019cac:	4601      	mov	r1, r0
  if( mios32_lcd_device < 2 ) {
 8019cae:	7818      	ldrb	r0, [r3, #0]
 8019cb0:	2801      	cmp	r0, #1
 8019cb2:	d803      	bhi.n	8019cbc <APP_LCD_E_Set+0x14>
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 8019cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
 8019cb8:	f7f9 bcea 	b.w	8013690 <MIOS32_BOARD_J15_E_Set>
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
 8019cbc:	4a19      	ldr	r2, [pc, #100]	; (8019d24 <APP_LCD_E_Set+0x7c>)
 8019cbe:	7893      	ldrb	r3, [r2, #2]
 8019cc0:	7854      	ldrb	r4, [r2, #1]
 8019cc2:	fb14 f203 	smulbb	r2, r4, r3
  if( num_additional_lcds < 0 )
 8019cc6:	1e93      	subs	r3, r2, #2
 8019cc8:	d426      	bmi.n	8019d18 <APP_LCD_E_Set+0x70>
    return -2; // E line not configured

  if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8019cca:	2b08      	cmp	r3, #8
 8019ccc:	f1a0 0002 	sub.w	r0, r0, #2
 8019cd0:	dc03      	bgt.n	8019cda <APP_LCD_E_Set+0x32>
    // the extension pin lines are used as dedicated E pins
    APP_LCD_ExtPort_PinSet(mios32_lcd_device - 2, value);
 8019cd2:	b2c0      	uxtb	r0, r0
 8019cd4:	f7ff ff46 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
 8019cd8:	e01c      	b.n	8019d14 <APP_LCD_E_Set+0x6c>
  } else {
    if( num_additional_lcds >= (MAX_LCDS-2) )
      num_additional_lcds = MAX_LCDS-2; // saturate
 8019cda:	2b3e      	cmp	r3, #62	; 0x3e
 8019cdc:	bfa8      	it	ge
 8019cde:	233e      	movge	r3, #62	; 0x3e
    int num_shifts = num_additional_lcds / 8;
 8019ce0:	10dc      	asrs	r4, r3, #3
    if( num_additional_lcds % 8 )
 8019ce2:	075d      	lsls	r5, r3, #29
      ++num_shifts;
 8019ce4:	bf18      	it	ne
 8019ce6:	3401      	addne	r4, #1

    int selected_lcd = mios32_lcd_device - 2;
    int selected_lcd_sr = selected_lcd / 8;
 8019ce8:	10c6      	asrs	r6, r0, #3
    u8 selected_lcd_mask = value ? (1 << (selected_lcd % 8)) : 0;
 8019cea:	b131      	cbz	r1, 8019cfa <APP_LCD_E_Set+0x52>
 8019cec:	f000 0007 	and.w	r0, r0, #7
 8019cf0:	2501      	movs	r5, #1
 8019cf2:	fa05 f500 	lsl.w	r5, r5, r0
 8019cf6:	b2ed      	uxtb	r5, r5
 8019cf8:	e000      	b.n	8019cfc <APP_LCD_E_Set+0x54>
 8019cfa:	460d      	mov	r5, r1

    // shift data
    int i;
    for(i=num_shifts-1; i>=0; --i) {
 8019cfc:	3c01      	subs	r4, #1
 8019cfe:	42b4      	cmp	r4, r6
 8019d00:	bf0c      	ite	eq
 8019d02:	4628      	moveq	r0, r5
 8019d04:	2000      	movne	r0, #0
 8019d06:	f7ff ff93 	bl	8019c30 <APP_LCD_ExtPort_SerDataShift.part.0>
 8019d0a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8019d0e:	d2f6      	bcs.n	8019cfe <APP_LCD_E_Set+0x56>
      u8 data = (i == selected_lcd_sr) ? selected_lcd_mask : 0;
      APP_LCD_ExtPort_SerDataShift(data, 1);
    }

    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
 8019d10:	f7ff ff2c 	bl	8019b6c <APP_LCD_ExtPort_UpdateSRs>
  }

  return 0; // no error
 8019d14:	2000      	movs	r0, #0
 8019d16:	bd70      	pop	{r4, r5, r6, pc}
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
  if( num_additional_lcds < 0 )
    return -2; // E line not configured
 8019d18:	f06f 0001 	mvn.w	r0, #1
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 8019d1c:	bd70      	pop	{r4, r5, r6, pc}
 8019d1e:	bf00      	nop
 8019d20:	2000027c 	.word	0x2000027c
 8019d24:	200035ca 	.word	0x200035ca

08019d28 <APP_LCD_PollUnbusy>:

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8019d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( mios32_lcd_device < 2 ) {
 8019d2a:	4b1f      	ldr	r3, [pc, #124]	; (8019da8 <APP_LCD_PollUnbusy+0x80>)

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8019d2c:	4604      	mov	r4, r0
  if( mios32_lcd_device < 2 ) {
 8019d2e:	7818      	ldrb	r0, [r3, #0]
 8019d30:	2801      	cmp	r0, #1
 8019d32:	d804      	bhi.n	8019d3e <APP_LCD_PollUnbusy+0x16>
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8019d34:	4621      	mov	r1, r4
  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
}
 8019d36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8019d3a:	f7f9 bcb2 	b.w	80136a2 <MIOS32_BOARD_J15_PollUnbusy>
  }

  if( mios32_lcd_device >= MAX_LCDS )
 8019d3e:	283f      	cmp	r0, #63	; 0x3f
 8019d40:	d902      	bls.n	8019d48 <APP_LCD_PollUnbusy+0x20>
    return -1; // LCD not supported
 8019d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  u32 poll_ctr;
  u32 delay_ctr;

  // select command register (RS=0)
  MIOS32_BOARD_J15_RS_Set(0);
 8019d48:	2000      	movs	r0, #0
 8019d4a:	f7f9 fc8b 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

  // enable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(1);
 8019d4e:	2001      	movs	r0, #1
 8019d50:	f7f9 fca4 	bl	801369c <MIOS32_BOARD_J15_D7InPullUpEnable>

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);
 8019d54:	2001      	movs	r0, #1
 8019d56:	f7f9 fc8f 	bl	8013678 <MIOS32_BOARD_J15_RW_Set>

  // check if E pin is available
  if( APP_LCD_E_Set(1) < 0 )
 8019d5a:	2001      	movs	r0, #1
 8019d5c:	f7ff ffa4 	bl	8019ca8 <APP_LCD_E_Set>
 8019d60:	2800      	cmp	r0, #0
 8019d62:	dbee      	blt.n	8019d42 <APP_LCD_PollUnbusy+0x1a>
 8019d64:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8019d66:	b19c      	cbz	r4, 8019d90 <APP_LCD_PollUnbusy+0x68>
    APP_LCD_E_Set(1);
 8019d68:	2001      	movs	r0, #1
 8019d6a:	f7ff ff9d 	bl	8019ca8 <APP_LCD_E_Set>
 8019d6e:	250a      	movs	r5, #10

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);
 8019d70:	2001      	movs	r0, #1
 8019d72:	f7f9 fc81 	bl	8013678 <MIOS32_BOARD_J15_RW_Set>
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    APP_LCD_E_Set(1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 8019d76:	3d01      	subs	r5, #1
 8019d78:	d1fa      	bne.n	8019d70 <APP_LCD_PollUnbusy+0x48>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 8019d7a:	f7f9 fc8c 	bl	8013696 <MIOS32_BOARD_J15_GetD7In>
 8019d7e:	4607      	mov	r7, r0
    APP_LCD_E_Set(0);
 8019d80:	4628      	mov	r0, r5
 8019d82:	f7ff ff91 	bl	8019ca8 <APP_LCD_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 8019d86:	b90f      	cbnz	r7, 8019d8c <APP_LCD_PollUnbusy+0x64>
 8019d88:	b916      	cbnz	r6, 8019d90 <APP_LCD_PollUnbusy+0x68>
 8019d8a:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8019d8c:	3c01      	subs	r4, #1
 8019d8e:	e7ea      	b.n	8019d66 <APP_LCD_PollUnbusy+0x3e>
    // TODO: not understood yet: I've a particular LCD which sporadically flags unbusy on a STM32F4
    //       during the first poll, but busy on following polls until it's really unbusy
  }

  // disable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(0);
 8019d90:	2000      	movs	r0, #0
 8019d92:	f7f9 fc83 	bl	801369c <MIOS32_BOARD_J15_D7InPullUpEnable>

  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);
 8019d96:	2000      	movs	r0, #0
 8019d98:	f7f9 fc6e 	bl	8013678 <MIOS32_BOARD_J15_RW_Set>

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 8019d9c:	2c00      	cmp	r4, #0
 8019d9e:	bf14      	ite	ne
 8019da0:	2000      	movne	r0, #0
 8019da2:	f06f 0001 	mvneq.w	r0, #1

  return 0; // no error
}
 8019da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019da8:	2000027c 	.word	0x2000027c

08019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>:

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8019dac:	b570      	push	{r4, r5, r6, lr}
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 8019dae:	4b48      	ldr	r3, [pc, #288]	; (8019ed0 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x124>)
 8019db0:	781e      	ldrb	r6, [r3, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8019db2:	4605      	mov	r5, r0
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 8019db4:	b1fe      	cbz	r6, 8019df6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x4a>
    u8 level_active = 0;
    u8 level_nonactive = 1;

    int cs;
    if( all ) {
 8019db6:	b180      	cbz	r0, 8019dda <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8019db8:	2100      	movs	r1, #0
 8019dba:	200c      	movs	r0, #12
 8019dbc:	f7f9 fbcf 	bl	801355e <MIOS32_BOARD_J10_PinSet>
 8019dc0:	2100      	movs	r1, #0
 8019dc2:	200d      	movs	r0, #13
 8019dc4:	f7f9 fbcb 	bl	801355e <MIOS32_BOARD_J10_PinSet>
 8019dc8:	2100      	movs	r1, #0
 8019dca:	200e      	movs	r0, #14
 8019dcc:	f7f9 fbc7 	bl	801355e <MIOS32_BOARD_J10_PinSet>
 8019dd0:	200f      	movs	r0, #15
 8019dd2:	2100      	movs	r1, #0
 8019dd4:	f7f9 fbc3 	bl	801355e <MIOS32_BOARD_J10_PinSet>
 8019dd8:	e077      	b.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
 8019dda:	493e      	ldr	r1, [pc, #248]	; (8019ed4 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 8019ddc:	780a      	ldrb	r2, [r1, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8019dde:	f105 000c 	add.w	r0, r5, #12
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8019de2:	1aa9      	subs	r1, r5, r2
 8019de4:	bf18      	it	ne
 8019de6:	2101      	movne	r1, #1
 8019de8:	b2c0      	uxtb	r0, r0
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 8019dea:	3501      	adds	r5, #1
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8019dec:	f7f9 fbb7 	bl	801355e <MIOS32_BOARD_J10_PinSet>
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 8019df0:	2d04      	cmp	r5, #4
 8019df2:	d1f2      	bne.n	8019dda <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
 8019df4:	e069      	b.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
    }
  } else {

    int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 8;
 8019df6:	4838      	ldr	r0, [pc, #224]	; (8019ed8 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x12c>)
 8019df8:	4b38      	ldr	r3, [pc, #224]	; (8019edc <APP_LCD_SERGLCD_CS_Set.constprop.2+0x130>)
 8019dfa:	7844      	ldrb	r4, [r0, #1]
 8019dfc:	7881      	ldrb	r1, [r0, #2]
 8019dfe:	fb14 f401 	smulbb	r4, r4, r1
 8019e02:	3c08      	subs	r4, #8
    if( num_additional_lcds >= (MAX_LCDS-8) )
      num_additional_lcds = (MAX_LCDS-8);
 8019e04:	2c38      	cmp	r4, #56	; 0x38
 8019e06:	bfa8      	it	ge
 8019e08:	2438      	movge	r4, #56	; 0x38

    // Note: assume that CS lines are low-active!
    if( all ) {
 8019e0a:	b305      	cbz	r5, 8019e4e <APP_LCD_SERGLCD_CS_Set.constprop.2+0xa2>
      if( prev_glcd_selection != 0xff ) {
 8019e0c:	7818      	ldrb	r0, [r3, #0]
 8019e0e:	28ff      	cmp	r0, #255	; 0xff
 8019e10:	d05b      	beq.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = 0xff;
 8019e12:	22ff      	movs	r2, #255	; 0xff
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 8019e14:	4630      	mov	r0, r6
      num_additional_lcds = (MAX_LCDS-8);

    // Note: assume that CS lines are low-active!
    if( all ) {
      if( prev_glcd_selection != 0xff ) {
	prev_glcd_selection = 0xff;
 8019e16:	701a      	strb	r2, [r3, #0]
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 8019e18:	f7f9 fbe8 	bl	80135ec <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8019e1c:	2c08      	cmp	r4, #8
 8019e1e:	dc08      	bgt.n	8019e32 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x86>
 8019e20:	4635      	mov	r5, r6
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8019e22:	42a5      	cmp	r5, r4
 8019e24:	da51      	bge.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
 8019e26:	b2e8      	uxtb	r0, r5
 8019e28:	2100      	movs	r1, #0
 8019e2a:	f7ff fe9b 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
	prev_glcd_selection = 0xff;
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8019e2e:	3501      	adds	r5, #1
 8019e30:	e7f7      	b.n	8019e22 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x76>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 8019e32:	10e3      	asrs	r3, r4, #3
	  if( num_additional_lcds % 8 )
 8019e34:	0762      	lsls	r2, r4, #29
	    ++num_shifts;
 8019e36:	bf18      	it	ne
 8019e38:	3301      	addne	r3, #1

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8019e3a:	1e5c      	subs	r4, r3, #1
 8019e3c:	2000      	movs	r0, #0
 8019e3e:	f7ff fef7 	bl	8019c30 <APP_LCD_ExtPort_SerDataShift.part.0>
 8019e42:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8019e46:	d2f9      	bcs.n	8019e3c <APP_LCD_SERGLCD_CS_Set.constprop.2+0x90>
	    APP_LCD_ExtPort_SerDataShift(value ? 0x00 : 0xff, 1);
	  }

	  // update serial shift registers
	  APP_LCD_ExtPort_UpdateSRs();
 8019e48:	f7ff fe90 	bl	8019b6c <APP_LCD_ExtPort_UpdateSRs>
 8019e4c:	e03d      	b.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
 8019e4e:	4a21      	ldr	r2, [pc, #132]	; (8019ed4 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 8019e50:	7819      	ldrb	r1, [r3, #0]
 8019e52:	7810      	ldrb	r0, [r2, #0]
 8019e54:	4281      	cmp	r1, r0
 8019e56:	d038      	beq.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = mios32_lcd_device;
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8019e58:	2601      	movs	r6, #1
	  APP_LCD_ExtPort_UpdateSRs();
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
	prev_glcd_selection = mios32_lcd_device;
 8019e5a:	7018      	strb	r0, [r3, #0]
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8019e5c:	fa06 f300 	lsl.w	r3, r6, r0
 8019e60:	43de      	mvns	r6, r3

	MIOS32_BOARD_J15_DataSet(mask);
 8019e62:	b2f0      	uxtb	r0, r6
 8019e64:	f7f9 fbc2 	bl	80135ec <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8019e68:	2c08      	cmp	r4, #8
 8019e6a:	dc0c      	bgt.n	8019e86 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xda>
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8019e6c:	42a5      	cmp	r5, r4
 8019e6e:	da2c      	bge.n	8019eca <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8019e70:	f105 0208 	add.w	r2, r5, #8
	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
 8019e74:	fa26 f102 	lsr.w	r1, r6, r2
 8019e78:	b2e8      	uxtb	r0, r5
 8019e7a:	f001 0101 	and.w	r1, r1, #1
 8019e7e:	f7ff fe71 	bl	8019b64 <APP_LCD_ExtPort_PinSet>

	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8019e82:	3501      	adds	r5, #1
 8019e84:	e7f2      	b.n	8019e6c <APP_LCD_SERGLCD_CS_Set.constprop.2+0xc0>
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8019e86:	4d13      	ldr	r5, [pc, #76]	; (8019ed4 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 8019e88:	10e2      	asrs	r2, r4, #3
	  if( num_additional_lcds % 8 )
 8019e8a:	0766      	lsls	r6, r4, #29
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8019e8c:	782c      	ldrb	r4, [r5, #0]
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;
 8019e8e:	bf18      	it	ne
 8019e90:	3201      	addne	r2, #1

	  int selected_lcd = mios32_lcd_device - 8;
 8019e92:	3c08      	subs	r4, #8
	  int selected_lcd_sr = selected_lcd / 8;
 8019e94:	2008      	movs	r0, #8
 8019e96:	fb94 f6f0 	sdiv	r6, r4, r0
	  u8 selected_lcd_mask = value ? ~(1 << (selected_lcd % 8)) : 0xff;
 8019e9a:	4811      	ldr	r0, [pc, #68]	; (8019ee0 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x134>)
 8019e9c:	4020      	ands	r0, r4
 8019e9e:	2800      	cmp	r0, #0
 8019ea0:	da03      	bge.n	8019eaa <APP_LCD_SERGLCD_CS_Set.constprop.2+0xfe>
 8019ea2:	1e41      	subs	r1, r0, #1
 8019ea4:	f061 0307 	orn	r3, r1, #7
 8019ea8:	1c58      	adds	r0, r3, #1
 8019eaa:	2501      	movs	r5, #1
 8019eac:	fa05 f500 	lsl.w	r5, r5, r0
 8019eb0:	43ec      	mvns	r4, r5
 8019eb2:	b2e5      	uxtb	r5, r4

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8019eb4:	1e54      	subs	r4, r2, #1
 8019eb6:	42b4      	cmp	r4, r6
 8019eb8:	bf0c      	ite	eq
 8019eba:	4628      	moveq	r0, r5
 8019ebc:	20ff      	movne	r0, #255	; 0xff
 8019ebe:	f7ff feb7 	bl	8019c30 <APP_LCD_ExtPort_SerDataShift.part.0>
 8019ec2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8019ec6:	d2f6      	bcs.n	8019eb6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x10a>
 8019ec8:	e7be      	b.n	8019e48 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x9c>
      }
    }
  }

  return 0; // no error
}
 8019eca:	2000      	movs	r0, #0
 8019ecc:	bd70      	pop	{r4, r5, r6, pc}
 8019ece:	bf00      	nop
 8019ed0:	200009c0 	.word	0x200009c0
 8019ed4:	2000027c 	.word	0x2000027c
 8019ed8:	200035ca 	.word	0x200035ca
 8019edc:	200000c8 	.word	0x200000c8
 8019ee0:	80000007 	.word	0x80000007

08019ee4 <APP_LCD_Cmd>:
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 8019ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if( lcd_testmode )
 8019ee8:	4b46      	ldr	r3, [pc, #280]	; (801a004 <APP_LCD_Cmd+0x120>)
 8019eea:	781f      	ldrb	r7, [r3, #0]
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 8019eec:	4606      	mov	r6, r0
  if( lcd_testmode )
 8019eee:	2f00      	cmp	r7, #0
 8019ef0:	f040 8084 	bne.w	8019ffc <APP_LCD_Cmd+0x118>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 8019ef4:	4844      	ldr	r0, [pc, #272]	; (801a008 <APP_LCD_Cmd+0x124>)
 8019ef6:	4945      	ldr	r1, [pc, #276]	; (801a00c <APP_LCD_Cmd+0x128>)
 8019ef8:	f890 8000 	ldrb.w	r8, [r0]
 8019efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f00:	4642      	mov	r2, r8
 8019f02:	f001 f88d 	bl	801b020 <__aeabi_llsr>
 8019f06:	2401      	movs	r4, #1
 8019f08:	2500      	movs	r5, #0
 8019f0a:	4020      	ands	r0, r4
 8019f0c:	4029      	ands	r1, r5
 8019f0e:	ea50 0301 	orrs.w	r3, r0, r1
 8019f12:	d073      	beq.n	8019ffc <APP_LCD_Cmd+0x118>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 8019f14:	4a3e      	ldr	r2, [pc, #248]	; (801a010 <APP_LCD_Cmd+0x12c>)
 8019f16:	7813      	ldrb	r3, [r2, #0]
 8019f18:	337f      	adds	r3, #127	; 0x7f
 8019f1a:	b2d8      	uxtb	r0, r3
 8019f1c:	2805      	cmp	r0, #5
 8019f1e:	d845      	bhi.n	8019fac <APP_LCD_Cmd+0xc8>
 8019f20:	b25d      	sxtb	r5, r3
 8019f22:	2401      	movs	r4, #1
 8019f24:	fa04 f105 	lsl.w	r1, r4, r5
 8019f28:	f011 0523 	ands.w	r5, r1, #35	; 0x23
 8019f2c:	d10e      	bne.n	8019f4c <APP_LCD_Cmd+0x68>
 8019f2e:	f011 0718 	ands.w	r7, r1, #24
 8019f32:	d123      	bne.n	8019f7c <APP_LCD_Cmd+0x98>
 8019f34:	0749      	lsls	r1, r1, #29
 8019f36:	d539      	bpl.n	8019fac <APP_LCD_Cmd+0xc8>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8019f38:	4620      	mov	r0, r4
 8019f3a:	f7ff ff37 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control A0
 8019f3e:	4638      	mov	r0, r7
 8019f40:	f7f9 fb90 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

    // send command
    MIOS32_BOARD_J15_SerDataShift(cmd);
 8019f44:	4630      	mov	r0, r6
 8019f46:	f7f9 fb67 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>
 8019f4a:	e054      	b.n	8019ff6 <APP_LCD_Cmd+0x112>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 8019f4c:	f1b8 0f01 	cmp.w	r8, #1
 8019f50:	d854      	bhi.n	8019ffc <APP_LCD_Cmd+0x118>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 8019f52:	4638      	mov	r0, r7
 8019f54:	f7ff fe16 	bl	8019b84 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8019f58:	f242 7010 	movw	r0, #10000	; 0x2710
 8019f5c:	f7ff fee4 	bl	8019d28 <APP_LCD_PollUnbusy>
#endif
      //return -2; // timeout
    }

    // select all displays
    APP_LCD_GLCD_CS_Set(1);
 8019f60:	4620      	mov	r0, r4
 8019f62:	f7ff fe0f 	bl	8019b84 <APP_LCD_GLCD_CS_Set>

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 8019f66:	4630      	mov	r0, r6
 8019f68:	f7f9 fb40 	bl	80135ec <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 8019f6c:	4638      	mov	r0, r7
 8019f6e:	f7f9 fb79 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 8019f72:	4620      	mov	r0, r4
 8019f74:	f7ff fe98 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019f78:	4638      	mov	r0, r7
 8019f7a:	e03a      	b.n	8019ff2 <APP_LCD_Cmd+0x10e>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	f7ff ff15 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 8019f82:	4a24      	ldr	r2, [pc, #144]	; (801a014 <APP_LCD_Cmd+0x130>)
 8019f84:	7810      	ldrb	r0, [r2, #0]
 8019f86:	b140      	cbz	r0, 8019f9a <APP_LCD_Cmd+0xb6>
      APP_LCD_ExtPort_PinSet(2, 0); // DC
 8019f88:	4629      	mov	r1, r5
 8019f8a:	2002      	movs	r0, #2
 8019f8c:	f7ff fdea 	bl	8019b64 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(cmd, 0);
 8019f90:	4630      	mov	r0, r6
 8019f92:	4629      	mov	r1, r5
 8019f94:	f7ff fe66 	bl	8019c64 <APP_LCD_ExtPort_SerDataShift>
 8019f98:	e004      	b.n	8019fa4 <APP_LCD_Cmd+0xc0>
    } else {
      MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control DC
 8019f9a:	f7f9 fb63 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

      MIOS32_BOARD_J15_SerDataShift(cmd);
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7f9 fb3a 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>

    return 0; // no error
  }
  }

  return -3; // not supported
 8019fa4:	f06f 0002 	mvn.w	r0, #2
 8019fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8019fac:	f242 7010 	movw	r0, #10000	; 0x2710
 8019fb0:	f7ff feba 	bl	8019d28 <APP_LCD_PollUnbusy>
 8019fb4:	2800      	cmp	r0, #0
 8019fb6:	da12      	bge.n	8019fde <APP_LCD_Cmd+0xfa>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 8019fb8:	4b13      	ldr	r3, [pc, #76]	; (801a008 <APP_LCD_Cmd+0x124>)
 8019fba:	4c14      	ldr	r4, [pc, #80]	; (801a00c <APP_LCD_Cmd+0x128>)
 8019fbc:	781a      	ldrb	r2, [r3, #0]
 8019fbe:	2001      	movs	r0, #1
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	f001 f839 	bl	801b038 <__aeabi_llsl>
 8019fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019fca:	ea22 0000 	bic.w	r0, r2, r0
 8019fce:	ea23 0101 	bic.w	r1, r3, r1
 8019fd2:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Cmd] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 8019fd6:	f06f 0001 	mvn.w	r0, #1
 8019fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 8019fde:	4630      	mov	r0, r6
 8019fe0:	f7f9 fb04 	bl	80135ec <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 8019fe4:	2000      	movs	r0, #0
 8019fe6:	f7f9 fb3d 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 8019fea:	2001      	movs	r0, #1
 8019fec:	f7ff fe5c 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019ff0:	2000      	movs	r0, #0
 8019ff2:	f7ff fe59 	bl	8019ca8 <APP_LCD_E_Set>

    return 0; // no error
 8019ff6:	2000      	movs	r0, #0
 8019ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 8019ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a004:	200009b2 	.word	0x200009b2
 801a008:	2000027c 	.word	0x2000027c
 801a00c:	200009b8 	.word	0x200009b8
 801a010:	200035ca 	.word	0x200035ca
 801a014:	200009c0 	.word	0x200009c0

0801a018 <APP_LCD_Data>:
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 801a018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if( lcd_testmode )
 801a01c:	4b74      	ldr	r3, [pc, #464]	; (801a1f0 <APP_LCD_Data+0x1d8>)
 801a01e:	781d      	ldrb	r5, [r3, #0]
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 801a020:	4680      	mov	r8, r0
  if( lcd_testmode )
 801a022:	2d00      	cmp	r5, #0
 801a024:	f040 80df 	bne.w	801a1e6 <APP_LCD_Data+0x1ce>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 801a028:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801a204 <APP_LCD_Data+0x1ec>
 801a02c:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 801a208 <APP_LCD_Data+0x1f0>
 801a030:	f899 b000 	ldrb.w	fp, [r9]
 801a034:	e9da 0100 	ldrd	r0, r1, [sl]
 801a038:	465a      	mov	r2, fp
 801a03a:	f000 fff1 	bl	801b020 <__aeabi_llsr>
 801a03e:	2201      	movs	r2, #1
 801a040:	2300      	movs	r3, #0
 801a042:	4010      	ands	r0, r2
 801a044:	4019      	ands	r1, r3
 801a046:	ea50 0301 	orrs.w	r3, r0, r1
 801a04a:	f000 80cc 	beq.w	801a1e6 <APP_LCD_Data+0x1ce>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 801a04e:	4c69      	ldr	r4, [pc, #420]	; (801a1f4 <APP_LCD_Data+0x1dc>)
 801a050:	7820      	ldrb	r0, [r4, #0]
 801a052:	307f      	adds	r0, #127	; 0x7f
 801a054:	b2c1      	uxtb	r1, r0
 801a056:	2905      	cmp	r1, #5
 801a058:	f200 809d 	bhi.w	801a196 <APP_LCD_Data+0x17e>
 801a05c:	b247      	sxtb	r7, r0
 801a05e:	2601      	movs	r6, #1
 801a060:	fa06 f207 	lsl.w	r2, r6, r7
 801a064:	f012 0723 	ands.w	r7, r2, #35	; 0x23
 801a068:	d105      	bne.n	801a076 <APP_LCD_Data+0x5e>
 801a06a:	f012 0018 	ands.w	r0, r2, #24
 801a06e:	d169      	bne.n	801a144 <APP_LCD_Data+0x12c>
 801a070:	0753      	lsls	r3, r2, #29
 801a072:	d44a      	bmi.n	801a10a <APP_LCD_Data+0xf2>
 801a074:	e08f      	b.n	801a196 <APP_LCD_Data+0x17e>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 801a076:	f1bb 0f01 	cmp.w	fp, #1
 801a07a:	f200 80b4 	bhi.w	801a1e6 <APP_LCD_Data+0x1ce>
      return -1;

    // abort if max. width or height reached
    if( mios32_lcd_x >= mios32_lcd_parameters.width || mios32_lcd_y >= mios32_lcd_parameters.height )
 801a07e:	4f5e      	ldr	r7, [pc, #376]	; (801a1f8 <APP_LCD_Data+0x1e0>)
 801a080:	88a2      	ldrh	r2, [r4, #4]
 801a082:	8839      	ldrh	r1, [r7, #0]
 801a084:	4291      	cmp	r1, r2
 801a086:	f080 80ae 	bcs.w	801a1e6 <APP_LCD_Data+0x1ce>
 801a08a:	4b5c      	ldr	r3, [pc, #368]	; (801a1fc <APP_LCD_Data+0x1e4>)
 801a08c:	88e1      	ldrh	r1, [r4, #6]
 801a08e:	8818      	ldrh	r0, [r3, #0]
 801a090:	4288      	cmp	r0, r1
 801a092:	f080 80a8 	bcs.w	801a1e6 <APP_LCD_Data+0x1ce>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 801a096:	4628      	mov	r0, r5
 801a098:	f7ff fd74 	bl	8019b84 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 801a09c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801a0a0:	f7ff fe42 	bl	8019d28 <APP_LCD_PollUnbusy>
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	da0e      	bge.n	801a0c6 <APP_LCD_Data+0xae>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801a0a8:	f899 2000 	ldrb.w	r2, [r9]
 801a0ac:	2001      	movs	r0, #1
 801a0ae:	2100      	movs	r1, #0
 801a0b0:	f000 ffc2 	bl	801b038 <__aeabi_llsl>
 801a0b4:	e9da 2300 	ldrd	r2, r3, [sl]
 801a0b8:	ea22 0000 	bic.w	r0, r2, r0
 801a0bc:	ea23 0101 	bic.w	r1, r3, r1
 801a0c0:	e9ca 0100 	strd	r0, r1, [sl]
 801a0c4:	e07c      	b.n	801a1c0 <APP_LCD_Data+0x1a8>
#endif
      return -2; // timeout
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 801a0c6:	4640      	mov	r0, r8
 801a0c8:	f7f9 fa90 	bl	80135ec <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 801a0cc:	4630      	mov	r0, r6
 801a0ce:	f7f9 fac9 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801a0d2:	4630      	mov	r0, r6
 801a0d4:	f7ff fde8 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801a0d8:	4628      	mov	r0, r5
 801a0da:	f7ff fde5 	bl	8019ca8 <APP_LCD_E_Set>

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801a0de:	883b      	ldrh	r3, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801a0e0:	7822      	ldrb	r2, [r4, #0]
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801a0e2:	f103 0301 	add.w	r3, r3, #1
 801a0e6:	b298      	uxth	r0, r3
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801a0e8:	2a86      	cmp	r2, #134	; 0x86
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801a0ea:	8038      	strh	r0, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801a0ec:	d109      	bne.n	801a102 <APP_LCD_Data+0xea>
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801a0ee:	223d      	movs	r2, #61	; 0x3d
 801a0f0:	fbb0 f1f2 	udiv	r1, r0, r2
 801a0f4:	fb02 0311 	mls	r3, r2, r1, r0
 801a0f8:	b298      	uxth	r0, r3
 801a0fa:	2800      	cmp	r0, #0
 801a0fc:	d170      	bne.n	801a1e0 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x00 + 0);
 801a0fe:	2000      	movs	r0, #0
 801a100:	e01c      	b.n	801a13c <APP_LCD_Data+0x124>
#else
      if( (++mios32_lcd_x % 64) == 0 )
	return APP_LCD_Cmd(0x00 + 0);
#endif
    } else {
      if( (++mios32_lcd_x % 64) == 0 )
 801a102:	0680      	lsls	r0, r0, #26
 801a104:	d16c      	bne.n	801a1e0 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x40 + 0);
 801a106:	2040      	movs	r0, #64	; 0x40
 801a108:	e018      	b.n	801a13c <APP_LCD_Data+0x124>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 801a10a:	f7ff fe4f 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control A0
 801a10e:	4630      	mov	r0, r6
 801a110:	f7f9 faa8 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

    // send data
    MIOS32_BOARD_J15_SerDataShift(data);
 801a114:	4640      	mov	r0, r8
 801a116:	f7f9 fa7f 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>

    // increment graphical cursor
    ++mios32_lcd_x;
 801a11a:	4b37      	ldr	r3, [pc, #220]	; (801a1f8 <APP_LCD_Data+0x1e0>)
 801a11c:	8818      	ldrh	r0, [r3, #0]
 801a11e:	1c41      	adds	r1, r0, #1
 801a120:	b28a      	uxth	r2, r1
 801a122:	801a      	strh	r2, [r3, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801a124:	88a3      	ldrh	r3, [r4, #4]
 801a126:	fbb2 f4f3 	udiv	r4, r2, r3
 801a12a:	fb03 2014 	mls	r0, r3, r4, r2
 801a12e:	b284      	uxth	r4, r0
 801a130:	2c00      	cmp	r4, #0
 801a132:	d155      	bne.n	801a1e0 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
 801a134:	2010      	movs	r0, #16
 801a136:	f7ff fed5 	bl	8019ee4 <APP_LCD_Cmd>
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 801a13a:	4620      	mov	r0, r4
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801a13c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ++mios32_lcd_x;

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 801a140:	f7ff bed0 	b.w	8019ee4 <APP_LCD_Cmd>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 801a144:	4638      	mov	r0, r7
 801a146:	f7ff fe31 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 801a14a:	492d      	ldr	r1, [pc, #180]	; (801a200 <APP_LCD_Data+0x1e8>)
 801a14c:	780a      	ldrb	r2, [r1, #0]
 801a14e:	b142      	cbz	r2, 801a162 <APP_LCD_Data+0x14a>
      APP_LCD_ExtPort_PinSet(2, 1); // DC
 801a150:	4631      	mov	r1, r6
 801a152:	2002      	movs	r0, #2
 801a154:	f7ff fd06 	bl	8019b64 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(data, 0);
 801a158:	4640      	mov	r0, r8
 801a15a:	4639      	mov	r1, r7
 801a15c:	f7ff fd82 	bl	8019c64 <APP_LCD_ExtPort_SerDataShift>
 801a160:	e005      	b.n	801a16e <APP_LCD_Data+0x156>
    } else {
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801a162:	4630      	mov	r0, r6
 801a164:	f7f9 fa7e 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
 801a168:	4640      	mov	r0, r8
 801a16a:	f7f9 fa55 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801a16e:	4c22      	ldr	r4, [pc, #136]	; (801a1f8 <APP_LCD_Data+0x1e0>)

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801a170:	4a20      	ldr	r2, [pc, #128]	; (801a1f4 <APP_LCD_Data+0x1dc>)
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801a172:	8823      	ldrh	r3, [r4, #0]
 801a174:	1c58      	adds	r0, r3, #1

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801a176:	8893      	ldrh	r3, [r2, #4]
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801a178:	b281      	uxth	r1, r0
 801a17a:	8021      	strh	r1, [r4, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801a17c:	fbb1 f4f3 	udiv	r4, r1, r3
 801a180:	fb03 1014 	mls	r0, r3, r4, r1
 801a184:	b284      	uxth	r4, r0
 801a186:	bb5c      	cbnz	r4, 801a1e0 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x00); // set X=0
 801a188:	4620      	mov	r0, r4
 801a18a:	f7ff feab 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x10);
 801a18e:	2010      	movs	r0, #16
 801a190:	f7ff fea8 	bl	8019ee4 <APP_LCD_Cmd>
 801a194:	e024      	b.n	801a1e0 <APP_LCD_Data+0x1c8>
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 801a196:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801a19a:	f7ff fdc5 	bl	8019d28 <APP_LCD_PollUnbusy>
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	da12      	bge.n	801a1c8 <APP_LCD_Data+0x1b0>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801a1a2:	4a18      	ldr	r2, [pc, #96]	; (801a204 <APP_LCD_Data+0x1ec>)
 801a1a4:	4c18      	ldr	r4, [pc, #96]	; (801a208 <APP_LCD_Data+0x1f0>)
 801a1a6:	7812      	ldrb	r2, [r2, #0]
 801a1a8:	2001      	movs	r0, #1
 801a1aa:	2100      	movs	r1, #0
 801a1ac:	f000 ff44 	bl	801b038 <__aeabi_llsl>
 801a1b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a1b4:	ea22 0000 	bic.w	r0, r2, r0
 801a1b8:	ea23 0101 	bic.w	r1, r3, r1
 801a1bc:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Data] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 801a1c0:	f06f 0001 	mvn.w	r0, #1
 801a1c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 801a1c8:	4640      	mov	r0, r8
 801a1ca:	f7f9 fa0f 	bl	80135ec <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 801a1ce:	2001      	movs	r0, #1
 801a1d0:	f7f9 fa48 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801a1d4:	2001      	movs	r0, #1
 801a1d6:	f7ff fd67 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801a1da:	2000      	movs	r0, #0
 801a1dc:	f7ff fd64 	bl	8019ca8 <APP_LCD_E_Set>

    return 0; // no error
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801a1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801a1ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ee:	bf00      	nop
 801a1f0:	200009b2 	.word	0x200009b2
 801a1f4:	200035ca 	.word	0x200035ca
 801a1f8:	200035dc 	.word	0x200035dc
 801a1fc:	200035c8 	.word	0x200035c8
 801a200:	200009c0 	.word	0x200009c0
 801a204:	2000027c 	.word	0x2000027c
 801a208:	200009b8 	.word	0x200009b8

0801a20c <APP_LCD_Init>:
// Initializes application specific LCD driver
// IN: <mode>: optional configuration
// OUT: returns < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Init(u32 mode)
{
 801a20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if( lcd_testmode )
 801a210:	4b89      	ldr	r3, [pc, #548]	; (801a438 <APP_LCD_Init+0x22c>)
 801a212:	7819      	ldrb	r1, [r3, #0]
 801a214:	b111      	cbz	r1, 801a21c <APP_LCD_Init+0x10>
    return -1; // direct access disabled in testmode
 801a216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a21a:	e198      	b.n	801a54e <APP_LCD_Init+0x342>

  // currently only mode 0 supported
  if( mode != 0 )
 801a21c:	2800      	cmp	r0, #0
 801a21e:	d1fa      	bne.n	801a216 <APP_LCD_Init+0xa>
    return -1; // unsupported mode

  if( mios32_lcd_device >= MAX_LCDS )
 801a220:	4886      	ldr	r0, [pc, #536]	; (801a43c <APP_LCD_Init+0x230>)
 801a222:	f890 8000 	ldrb.w	r8, [r0]
 801a226:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 801a22a:	d902      	bls.n	801a232 <APP_LCD_Init+0x26>
    return -2; // unsupported LCD device number
 801a22c:	f06f 0001 	mvn.w	r0, #1
 801a230:	e18d      	b.n	801a54e <APP_LCD_Init+0x342>

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801a232:	4e83      	ldr	r6, [pc, #524]	; (801a440 <APP_LCD_Init+0x234>)
 801a234:	4642      	mov	r2, r8
 801a236:	2001      	movs	r0, #1
 801a238:	2100      	movs	r1, #0
 801a23a:	f000 fefd 	bl	801b038 <__aeabi_llsl>
 801a23e:	e9d6 4500 	ldrd	r4, r5, [r6]

  switch( mios32_lcd_parameters.lcd_type ) {
 801a242:	4a80      	ldr	r2, [pc, #512]	; (801a444 <APP_LCD_Init+0x238>)

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801a244:	4320      	orrs	r0, r4

  switch( mios32_lcd_parameters.lcd_type ) {
 801a246:	7814      	ldrb	r4, [r2, #0]

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801a248:	4329      	orrs	r1, r5

  switch( mios32_lcd_parameters.lcd_type ) {
 801a24a:	f1a4 0381 	sub.w	r3, r4, #129	; 0x81

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801a24e:	e9c6 0100 	strd	r0, r1, [r6]
 801a252:	46b1      	mov	r9, r6

  switch( mios32_lcd_parameters.lcd_type ) {
 801a254:	2b05      	cmp	r3, #5
 801a256:	f200 80ea 	bhi.w	801a42e <APP_LCD_Init+0x222>
 801a25a:	e8df f003 	tbb	[pc, r3]
 801a25e:	0303      	.short	0x0303
 801a260:	105f5f23 	.word	0x105f5f23
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801a264:	f1b8 0f01 	cmp.w	r8, #1
 801a268:	f200 8160 	bhi.w	801a52c <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801a26c:	2001      	movs	r0, #1
 801a26e:	f7f9 f979 	bl	8013564 <MIOS32_BOARD_J15_PortInit>
 801a272:	2800      	cmp	r0, #0
 801a274:	dbda      	blt.n	801a22c <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 801a276:	f7ff fcb3 	bl	8019be0 <APP_LCD_ExtPort_Init>

      // "Display On" command
      APP_LCD_Cmd(0x3e + 1);
 801a27a:	203f      	movs	r0, #63	; 0x3f
 801a27c:	e00e      	b.n	801a29c <APP_LCD_Init+0x90>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801a27e:	f1b8 0f01 	cmp.w	r8, #1
 801a282:	f200 8153 	bhi.w	801a52c <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801a286:	2001      	movs	r0, #1
 801a288:	f7f9 f96c 	bl	8013564 <MIOS32_BOARD_J15_PortInit>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	dbcd      	blt.n	801a22c <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 801a290:	f7ff fca6 	bl	8019be0 <APP_LCD_ExtPort_Init>

      // Reset command
      APP_LCD_Cmd(0xe2);
 801a294:	20e2      	movs	r0, #226	; 0xe2
 801a296:	f7ff fe25 	bl	8019ee4 <APP_LCD_Cmd>

      // "Display On" command
      APP_LCD_Cmd(0xae + 1);
 801a29a:	20af      	movs	r0, #175	; 0xaf
 801a29c:	f7ff fe22 	bl	8019ee4 <APP_LCD_Cmd>

      // Display start line
      APP_LCD_Cmd(0xc0 + 0);
 801a2a0:	20c0      	movs	r0, #192	; 0xc0
 801a2a2:	e141      	b.n	801a528 <APP_LCD_Init+0x31c>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 801a2a4:	f1b8 0f00 	cmp.w	r8, #0
 801a2a8:	f040 8140 	bne.w	801a52c <APP_LCD_Init+0x320>
      // DOGM128 works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801a2ac:	4640      	mov	r0, r8
 801a2ae:	f7f9 f959 	bl	8013564 <MIOS32_BOARD_J15_PortInit>
 801a2b2:	2800      	cmp	r0, #0
 801a2b4:	dbba      	blt.n	801a22c <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15

      display_available |= 0xff;
 801a2b6:	e9d6 4500 	ldrd	r4, r5, [r6]
 801a2ba:	2700      	movs	r7, #0
 801a2bc:	26ff      	movs	r6, #255	; 0xff
 801a2be:	4334      	orrs	r4, r6
 801a2c0:	433d      	orrs	r5, r7
 801a2c2:	e9c9 4500 	strd	r4, r5, [r9]

      APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 801a2c6:	f7ff fc97 	bl	8019bf8 <APP_LCD_SERGLCD_CS_Init>

      // initialisation sequence based on EA-DOGL/M datasheet
  
      APP_LCD_Cmd(0x40); //2 - Display start line = 0
 801a2ca:	2040      	movs	r0, #64	; 0x40
 801a2cc:	f7ff fe0a 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA1); //8 - ADC Normal mode = 0 
 801a2d0:	20a1      	movs	r0, #161	; 0xa1
 801a2d2:	f7ff fe07 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xC0); //15 - COMS normal = 1/65  duty
 801a2d6:	20c0      	movs	r0, #192	; 0xc0
 801a2d8:	f7ff fe04 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA6); //9 - Display  = normal  
 801a2dc:	20a6      	movs	r0, #166	; 0xa6
 801a2de:	f7ff fe01 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA2); //11 - 1/65 duty 1/9 bias for 65x132 display
 801a2e2:	20a2      	movs	r0, #162	; 0xa2
 801a2e4:	f7ff fdfe 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x2F); //16  - Power control set = B.,R,F all ON
 801a2e8:	202f      	movs	r0, #47	; 0x2f
 801a2ea:	f7ff fdfb 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xF8); //20-1 - select Booster ratio set
 801a2ee:	20f8      	movs	r0, #248	; 0xf8
 801a2f0:	f7ff fdf8 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //20-2 - Booster ratio register (must be preceeded by 20-1)
 801a2f4:	4640      	mov	r0, r8
 801a2f6:	f7ff fdf5 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x27); //17 - VO volt reg set 
 801a2fa:	2027      	movs	r0, #39	; 0x27
 801a2fc:	f7ff fdf2 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x81); //18-1 - Elect vol control - contrast
 801a300:	2081      	movs	r0, #129	; 0x81
 801a302:	f7ff fdef 	bl	8019ee4 <APP_LCD_Cmd>
#if 0
      APP_LCD_Cmd(0x16); //18-2 - Contrast level dec 22	
#else
      APP_LCD_Cmd(0x10); //18-2 - Contrast level dec 16
 801a306:	2010      	movs	r0, #16
 801a308:	f7ff fdec 	bl	8019ee4 <APP_LCD_Cmd>
#endif
      APP_LCD_Cmd(0xAC); //19-1 - Static Indicator - set off
 801a30c:	20ac      	movs	r0, #172	; 0xac
 801a30e:	f7ff fde9 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //19-2 - No Indicator
 801a312:	4640      	mov	r0, r8
 801a314:	f7ff fde6 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xAF); //20 - Display ON
 801a318:	20af      	movs	r0, #175	; 0xaf
 801a31a:	e105      	b.n	801a528 <APP_LCD_Init+0x31c>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    u8 rotated = mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED;

    // all OLEDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 801a31c:	f1b8 0f00 	cmp.w	r8, #0
 801a320:	f040 8104 	bne.w	801a52c <APP_LCD_Init+0x320>
      // ExtPort.3: RST#
      // J5A.A0/J10B.D12: CS of first display
      // J5A.A1/J10B.D13: CS of second display
      // J5A.A2/J10B.D14: CS of third display
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
 801a324:	4948      	ldr	r1, [pc, #288]	; (801a448 <APP_LCD_Init+0x23c>)
 801a326:	7808      	ldrb	r0, [r1, #0]
 801a328:	b330      	cbz	r0, 801a378 <APP_LCD_Init+0x16c>
	APP_LCD_ExtPort_Init();
 801a32a:	f7ff fc59 	bl	8019be0 <APP_LCD_ExtPort_Init>
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<4; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 801a32e:	2105      	movs	r1, #5
 801a330:	200c      	movs	r0, #12
 801a332:	f7f9 f911 	bl	8013558 <MIOS32_BOARD_J10_PinInit>
 801a336:	2105      	movs	r1, #5
 801a338:	200d      	movs	r0, #13
 801a33a:	f7f9 f90d 	bl	8013558 <MIOS32_BOARD_J10_PinInit>
 801a33e:	2105      	movs	r1, #5
 801a340:	200e      	movs	r0, #14
 801a342:	f7f9 f909 	bl	8013558 <MIOS32_BOARD_J10_PinInit>
 801a346:	2105      	movs	r1, #5
 801a348:	200f      	movs	r0, #15
 801a34a:	f7f9 f905 	bl	8013558 <MIOS32_BOARD_J10_PinInit>
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
 801a34e:	4641      	mov	r1, r8
 801a350:	2003      	movs	r0, #3
 801a352:	f7ff fc07 	bl	8019b64 <APP_LCD_ExtPort_PinSet>
	MIOS32_DELAY_Wait_uS(100);
	APP_LCD_ExtPort_PinSet(3, 1);

	display_available |= 0x0f;
 801a356:	4d3a      	ldr	r5, [pc, #232]	; (801a440 <APP_LCD_Init+0x234>)
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
	MIOS32_DELAY_Wait_uS(100);
 801a358:	2064      	movs	r0, #100	; 0x64
 801a35a:	f7f9 fa55 	bl	8013808 <MIOS32_DELAY_Wait_uS>
	APP_LCD_ExtPort_PinSet(3, 1);
 801a35e:	2101      	movs	r1, #1
 801a360:	2003      	movs	r0, #3
 801a362:	f7ff fbff 	bl	8019b64 <APP_LCD_ExtPort_PinSet>

	display_available |= 0x0f;
 801a366:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a36a:	200f      	movs	r0, #15
 801a36c:	2100      	movs	r1, #0
 801a36e:	4302      	orrs	r2, r0
 801a370:	430b      	orrs	r3, r1
 801a372:	e9c5 2300 	strd	r2, r3, [r5]
 801a376:	e018      	b.n	801a3aa <APP_LCD_Init+0x19e>
      } else {
	// the OLED works at 3.3V, level shifting (and open drain mode) not required
	if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801a378:	4640      	mov	r0, r8
 801a37a:	f7f9 f8f3 	bl	8013564 <MIOS32_BOARD_J15_PortInit>
 801a37e:	2800      	cmp	r0, #0
 801a380:	f6ff af54 	blt.w	801a22c <APP_LCD_Init+0x20>
	  return -2; // failed to initialize J15

	display_available |= 0xff;
 801a384:	4d2e      	ldr	r5, [pc, #184]	; (801a440 <APP_LCD_Init+0x234>)
 801a386:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a38a:	20ff      	movs	r0, #255	; 0xff
 801a38c:	2100      	movs	r1, #0
 801a38e:	4302      	orrs	r2, r0
 801a390:	430b      	orrs	r3, r1
 801a392:	e9c5 2300 	strd	r2, r3, [r5]

	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 801a396:	f7ff fc2f 	bl	8019bf8 <APP_LCD_SERGLCD_CS_Init>
 801a39a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
	    MIOS32_DELAY_Wait_uS(1000);
 801a39e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a3a2:	f7f9 fa31 	bl	8013808 <MIOS32_DELAY_Wait_uS>
	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
 801a3a6:	3d01      	subs	r5, #1
 801a3a8:	d1f9      	bne.n	801a39e <APP_LCD_Init+0x192>
	}
      }


      // initialize LCDs
      APP_LCD_Cmd(0xa8); // Set MUX Ratio
 801a3aa:	20a8      	movs	r0, #168	; 0xa8
 801a3ac:	f7ff fd9a 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x3f);
 801a3b0:	203f      	movs	r0, #63	; 0x3f
 801a3b2:	f7ff fd97 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd3); // Set Display Offset
 801a3b6:	20d3      	movs	r0, #211	; 0xd3
 801a3b8:	f7ff fd94 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00);
 801a3bc:	2000      	movs	r0, #0
 801a3be:	f7ff fd91 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x40); // Set Display Start Line
 801a3c2:	2040      	movs	r0, #64	; 0x40
 801a3c4:	f7ff fd8e 	bl	8019ee4 <APP_LCD_Cmd>

      if( !rotated ) {
 801a3c8:	2c85      	cmp	r4, #133	; 0x85
 801a3ca:	d004      	beq.n	801a3d6 <APP_LCD_Init+0x1ca>
	APP_LCD_Cmd(0xa0); // Set Segment re-map
 801a3cc:	20a0      	movs	r0, #160	; 0xa0
 801a3ce:	f7ff fd89 	bl	8019ee4 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc0); // Set COM Output Scan Direction
 801a3d2:	20c0      	movs	r0, #192	; 0xc0
 801a3d4:	e003      	b.n	801a3de <APP_LCD_Init+0x1d2>
      } else {
	APP_LCD_Cmd(0xa1); // Set Segment re-map: rotated
 801a3d6:	20a1      	movs	r0, #161	; 0xa1
 801a3d8:	f7ff fd84 	bl	8019ee4 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc8); // Set COM Output Scan Direction: rotated
 801a3dc:	20c8      	movs	r0, #200	; 0xc8
 801a3de:	f7ff fd81 	bl	8019ee4 <APP_LCD_Cmd>
      }

      APP_LCD_Cmd(0xda); // Set COM Pins hardware configuration
 801a3e2:	20da      	movs	r0, #218	; 0xda
 801a3e4:	f7ff fd7e 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x12);
 801a3e8:	2012      	movs	r0, #18
 801a3ea:	f7ff fd7b 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x81); // Set Contrast Control
 801a3ee:	2081      	movs	r0, #129	; 0x81
 801a3f0:	f7ff fd78 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7f); // middle
 801a3f4:	207f      	movs	r0, #127	; 0x7f
 801a3f6:	f7ff fd75 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa4); // Disable Entiere Display On
 801a3fa:	20a4      	movs	r0, #164	; 0xa4
 801a3fc:	f7ff fd72 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa6); // Set Normal Display
 801a400:	20a6      	movs	r0, #166	; 0xa6
 801a402:	f7ff fd6f 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd5); // Set OSC Frequency
 801a406:	20d5      	movs	r0, #213	; 0xd5
 801a408:	f7ff fd6c 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x80);
 801a40c:	2080      	movs	r0, #128	; 0x80
 801a40e:	f7ff fd69 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x8d); // Enable charge pump regulator
 801a412:	208d      	movs	r0, #141	; 0x8d
 801a414:	f7ff fd66 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x14);
 801a418:	2014      	movs	r0, #20
 801a41a:	f7ff fd63 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xaf); // Display On
 801a41e:	20af      	movs	r0, #175	; 0xaf
 801a420:	f7ff fd60 	bl	8019ee4 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x20); // Enable Page mode
 801a424:	2020      	movs	r0, #32
 801a426:	f7ff fd5d 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x02);
 801a42a:	2002      	movs	r0, #2
 801a42c:	e07c      	b.n	801a528 <APP_LCD_Init+0x31c>
    if( MIOS32_BOARD_J15_PortInit(0) < 0 )
      return -2; // failed to initialize J15
#else
    // 0: J15 pins are configured in Push Pull Mode (3.3V)
    // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ||
 801a42e:	3c01      	subs	r4, #1
 801a430:	2c01      	cmp	r4, #1
 801a432:	d80b      	bhi.n	801a44c <APP_LCD_Init+0x240>
	mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_PP ) {
      // DOG CLCD works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801a434:	2000      	movs	r0, #0
 801a436:	e00a      	b.n	801a44e <APP_LCD_Init+0x242>
 801a438:	200009b2 	.word	0x200009b2
 801a43c:	2000027c 	.word	0x2000027c
 801a440:	200009b8 	.word	0x200009b8
 801a444:	200035ca 	.word	0x200035ca
 801a448:	200009c0 	.word	0x200009c0
	return -2; // failed to initialize J15
    } else {
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801a44c:	2001      	movs	r0, #1
 801a44e:	f7f9 f889 	bl	8013564 <MIOS32_BOARD_J15_PortInit>
 801a452:	2800      	cmp	r0, #0
 801a454:	f6ff aeea 	blt.w	801a22c <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
    }
#endif

    // init extension port?
    int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 801a458:	4b3e      	ldr	r3, [pc, #248]	; (801a554 <APP_LCD_Init+0x348>)
 801a45a:	785a      	ldrb	r2, [r3, #1]
 801a45c:	7898      	ldrb	r0, [r3, #2]
 801a45e:	fb12 f100 	smulbb	r1, r2, r0
    if( num_lcds >= 2 ) {
 801a462:	2901      	cmp	r1, #1
 801a464:	dd01      	ble.n	801a46a <APP_LCD_Init+0x25e>
      APP_LCD_ExtPort_Init();
 801a466:	f7ff fbbb 	bl	8019be0 <APP_LCD_ExtPort_Init>
    }

    // initialize LCD
    MIOS32_BOARD_J15_DataSet(0x38);
 801a46a:	2038      	movs	r0, #56	; 0x38
 801a46c:	f7f9 f8be 	bl	80135ec <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801a470:	2000      	movs	r0, #0
 801a472:	f7f9 f8f7 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>
    MIOS32_BOARD_J15_RW_Set(0);
 801a476:	2000      	movs	r0, #0
 801a478:	f7f9 f8fe 	bl	8013678 <MIOS32_BOARD_J15_RW_Set>
    APP_LCD_E_Set(1);
 801a47c:	2001      	movs	r0, #1
 801a47e:	f7ff fc13 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801a482:	2000      	movs	r0, #0
 801a484:	f7ff fc10 	bl	8019ca8 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(5000); // according to the hitachi datasheet, this command takes 37 uS - take 1 mS to be at the secure side
 801a488:	f241 3088 	movw	r0, #5000	; 0x1388
 801a48c:	f7f9 f9bc 	bl	8013808 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 801a490:	2001      	movs	r0, #1
 801a492:	f7ff fc09 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801a496:	2000      	movs	r0, #0
 801a498:	f7ff fc06 	bl	8019ca8 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500); // and now only 500 uS anymore
 801a49c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a4a0:	f7f9 f9b2 	bl	8013808 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 801a4a4:	2001      	movs	r0, #1
 801a4a6:	f7ff fbff 	bl	8019ca8 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801a4aa:	2000      	movs	r0, #0
 801a4ac:	f7ff fbfc 	bl	8019ca8 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500);
 801a4b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a4b4:	f7f9 f9a8 	bl	8013808 <MIOS32_DELAY_Wait_uS>

    APP_LCD_Cmd(0x08); // Display Off
 801a4b8:	2008      	movs	r0, #8
 801a4ba:	f7ff fd13 	bl	8019ee4 <APP_LCD_Cmd>

    // display still available?
    // if not, we can already break here!
    if( !(display_available & (1ULL << mios32_lcd_device)) )
 801a4be:	4b26      	ldr	r3, [pc, #152]	; (801a558 <APP_LCD_Init+0x34c>)
 801a4c0:	4a26      	ldr	r2, [pc, #152]	; (801a55c <APP_LCD_Init+0x350>)
 801a4c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a4c6:	7812      	ldrb	r2, [r2, #0]
 801a4c8:	f000 fdaa 	bl	801b020 <__aeabi_llsr>
 801a4cc:	2201      	movs	r2, #1
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	4010      	ands	r0, r2
 801a4d2:	4019      	ands	r1, r3
 801a4d4:	ea50 0301 	orrs.w	r3, r0, r1
 801a4d8:	f43f ae9d 	beq.w	801a216 <APP_LCD_Init+0xa>
      return -1; // display not available

    APP_LCD_Cmd(0x0c); // Display On
 801a4dc:	200c      	movs	r0, #12
 801a4de:	f7ff fd01 	bl	8019ee4 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x06); // Entry Mode
 801a4e2:	2006      	movs	r0, #6
 801a4e4:	f7ff fcfe 	bl	8019ee4 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x01); // Clear Display
 801a4e8:	2001      	movs	r0, #1
 801a4ea:	f7ff fcfb 	bl	8019ee4 <APP_LCD_Cmd>

    // for DOG displays: perform additional display initialisation
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ) {
 801a4ee:	4819      	ldr	r0, [pc, #100]	; (801a554 <APP_LCD_Init+0x348>)
 801a4f0:	7801      	ldrb	r1, [r0, #0]
 801a4f2:	2901      	cmp	r1, #1
 801a4f4:	d114      	bne.n	801a520 <APP_LCD_Init+0x314>
      APP_LCD_Cmd(0x39); // 8bit interface, switch to instruction table 1
 801a4f6:	2039      	movs	r0, #57	; 0x39
 801a4f8:	f7ff fcf4 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x1d); // BS: 1/4, 3 line LCD
 801a4fc:	201d      	movs	r0, #29
 801a4fe:	f7ff fcf1 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x50); // Booster off, set contrast C5/C4
 801a502:	2050      	movs	r0, #80	; 0x50
 801a504:	f7ff fcee 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x6c); // set Voltage follower and amplifier
 801a508:	206c      	movs	r0, #108	; 0x6c
 801a50a:	f7ff fceb 	bl	8019ee4 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
 801a50e:	207c      	movs	r0, #124	; 0x7c
 801a510:	f7ff fce8 	bl	8019ee4 <APP_LCD_Cmd>
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 801a514:	4a12      	ldr	r2, [pc, #72]	; (801a560 <APP_LCD_Init+0x354>)
 801a516:	6813      	ldr	r3, [r2, #0]
      MIOS32_LCD_CursorMapSet(cursor_map);
 801a518:	a801      	add	r0, sp, #4
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 801a51a:	9301      	str	r3, [sp, #4]
      MIOS32_LCD_CursorMapSet(cursor_map);
 801a51c:	f7f7 f8c6 	bl	80116ac <MIOS32_LCD_CursorMapSet>
    }

    APP_LCD_Cmd(0x38); // experience from PIC based MIOS: without these lines
 801a520:	2038      	movs	r0, #56	; 0x38
 801a522:	f7ff fcdf 	bl	8019ee4 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x0c); // the LCD won't work correctly after a second APP_LCD_Init
 801a526:	200c      	movs	r0, #12
 801a528:	f7ff fcdc 	bl	8019ee4 <APP_LCD_Cmd>
  }
  }

  return (display_available & (1ULL << mios32_lcd_device)) ? 0 : -1; // return -1 if display not available
 801a52c:	480a      	ldr	r0, [pc, #40]	; (801a558 <APP_LCD_Init+0x34c>)
 801a52e:	4a0b      	ldr	r2, [pc, #44]	; (801a55c <APP_LCD_Init+0x350>)
 801a530:	e9d0 0100 	ldrd	r0, r1, [r0]
 801a534:	7812      	ldrb	r2, [r2, #0]
 801a536:	f000 fd73 	bl	801b020 <__aeabi_llsr>
 801a53a:	2201      	movs	r2, #1
 801a53c:	2300      	movs	r3, #0
 801a53e:	4010      	ands	r0, r2
 801a540:	4019      	ands	r1, r3
 801a542:	ea50 0201 	orrs.w	r2, r0, r1
 801a546:	bf0c      	ite	eq
 801a548:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 801a54c:	2000      	movne	r0, #0
}
 801a54e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 801a552:	bf00      	nop
 801a554:	200035ca 	.word	0x200035ca
 801a558:	200009b8 	.word	0x200009b8
 801a55c:	2000027c 	.word	0x2000027c
 801a560:	0801cc65 	.word	0x0801cc65

0801a564 <APP_LCD_Clear>:
// Clear Screen
// IN: -
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
 801a564:	b570      	push	{r4, r5, r6, lr}
  if( lcd_testmode )
 801a566:	4b4d      	ldr	r3, [pc, #308]	; (801a69c <APP_LCD_Clear+0x138>)
 801a568:	781d      	ldrb	r5, [r3, #0]
 801a56a:	2d00      	cmp	r5, #0
 801a56c:	f040 8093 	bne.w	801a696 <APP_LCD_Clear+0x132>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 801a570:	484b      	ldr	r0, [pc, #300]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a572:	7801      	ldrb	r1, [r0, #0]
 801a574:	317f      	adds	r1, #127	; 0x7f
 801a576:	b2ca      	uxtb	r2, r1
 801a578:	2a05      	cmp	r2, #5
 801a57a:	f200 8087 	bhi.w	801a68c <APP_LCD_Clear+0x128>
 801a57e:	b24c      	sxtb	r4, r1
 801a580:	2301      	movs	r3, #1
 801a582:	fa03 f004 	lsl.w	r0, r3, r4
 801a586:	f010 0423 	ands.w	r4, r0, #35	; 0x23
 801a58a:	d109      	bne.n	801a5a0 <APP_LCD_Clear+0x3c>
 801a58c:	f010 0518 	ands.w	r5, r0, #24
 801a590:	d143      	bne.n	801a61a <APP_LCD_Clear+0xb6>
 801a592:	0742      	lsls	r2, r0, #29
 801a594:	d57a      	bpl.n	801a68c <APP_LCD_Clear+0x128>
  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801a596:	4843      	ldr	r0, [pc, #268]	; (801a6a4 <APP_LCD_Clear+0x140>)
 801a598:	f7f7 f894 	bl	80116c4 <MIOS32_LCD_FontInit>

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a59c:	462c      	mov	r4, r5
 801a59e:	e021      	b.n	801a5e4 <APP_LCD_Clear+0x80>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801a5a0:	4840      	ldr	r0, [pc, #256]	; (801a6a4 <APP_LCD_Clear+0x140>)
 801a5a2:	f7f7 f88f 	bl	80116c4 <MIOS32_LCD_FontInit>

  switch( mios32_lcd_parameters.lcd_type ) {
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
 801a5a6:	462c      	mov	r4, r5
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a5a8:	493d      	ldr	r1, [pc, #244]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a5aa:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801a5ac:	2000      	movs	r0, #0
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a5ae:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
 801a5b2:	da10      	bge.n	801a5d6 <APP_LCD_Clear+0x72>
      error |= MIOS32_LCD_CursorSet(0, y);
 801a5b4:	b2a9      	uxth	r1, r5
 801a5b6:	f7f7 f84d 	bl	8011654 <MIOS32_LCD_CursorSet>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a5ba:	2600      	movs	r6, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
 801a5bc:	4304      	orrs	r4, r0
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a5be:	4b38      	ldr	r3, [pc, #224]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a5c0:	8898      	ldrh	r0, [r3, #4]
 801a5c2:	4286      	cmp	r6, r0
 801a5c4:	da05      	bge.n	801a5d2 <APP_LCD_Clear+0x6e>
	error |= APP_LCD_Data(0x00);
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	f7ff fd26 	bl	801a018 <APP_LCD_Data>
    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a5cc:	3601      	adds	r6, #1
	error |= APP_LCD_Data(0x00);
 801a5ce:	4304      	orrs	r4, r0
 801a5d0:	e7f5      	b.n	801a5be <APP_LCD_Clear+0x5a>
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a5d2:	3501      	adds	r5, #1
 801a5d4:	e7e8      	b.n	801a5a8 <APP_LCD_Clear+0x44>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
	error |= APP_LCD_Data(0x00);
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 801a5d6:	4601      	mov	r1, r0
 801a5d8:	f7f7 f83c 	bl	8011654 <MIOS32_LCD_CursorSet>
 801a5dc:	4320      	orrs	r0, r4

    return error;
 801a5de:	bd70      	pop	{r4, r5, r6, pc}

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a5e0:	3401      	adds	r4, #1
 801a5e2:	b2e4      	uxtb	r4, r4
 801a5e4:	492e      	ldr	r1, [pc, #184]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a5e6:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801a5e8:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801a5ea:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801a5ee:	d248      	bcs.n	801a682 <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 801a5f0:	4621      	mov	r1, r4
 801a5f2:	f7f7 f82f 	bl	8011654 <MIOS32_LCD_CursorSet>
 801a5f6:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 801a5f8:	2001      	movs	r0, #1
 801a5fa:	f7ff fbd7 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801a5fe:	2001      	movs	r0, #1
 801a600:	f7f9 f830 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a604:	2600      	movs	r6, #0
 801a606:	4b26      	ldr	r3, [pc, #152]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a608:	8898      	ldrh	r0, [r3, #4]
 801a60a:	42b0      	cmp	r0, r6
 801a60c:	d9e8      	bls.n	801a5e0 <APP_LCD_Clear+0x7c>
	MIOS32_BOARD_J15_SerDataShift(0x00);
 801a60e:	2000      	movs	r0, #0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a610:	3601      	adds	r6, #1
	MIOS32_BOARD_J15_SerDataShift(0x00);
 801a612:	f7f9 f801 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a616:	b2f6      	uxtb	r6, r6
 801a618:	e7f5      	b.n	801a606 <APP_LCD_Clear+0xa2>
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801a61a:	4822      	ldr	r0, [pc, #136]	; (801a6a4 <APP_LCD_Clear+0x140>)
 801a61c:	f7f7 f852 	bl	80116c4 <MIOS32_LCD_FontInit>
    return error;
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
 801a620:	4625      	mov	r5, r4

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801a622:	491f      	ldr	r1, [pc, #124]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a624:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801a626:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801a628:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801a62c:	d229      	bcs.n	801a682 <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 801a62e:	4621      	mov	r1, r4
 801a630:	f7f7 f810 	bl	8011654 <MIOS32_LCD_CursorSet>
 801a634:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 801a636:	2001      	movs	r0, #1
 801a638:	f7ff fbb8 	bl	8019dac <APP_LCD_SERGLCD_CS_Set.constprop.2>

      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
 801a63c:	4b1a      	ldr	r3, [pc, #104]	; (801a6a8 <APP_LCD_Clear+0x144>)
 801a63e:	781e      	ldrb	r6, [r3, #0]
 801a640:	b196      	cbz	r6, 801a668 <APP_LCD_Clear+0x104>
	APP_LCD_ExtPort_PinSet(2, 1); // DC
 801a642:	2002      	movs	r0, #2
 801a644:	2101      	movs	r1, #1
 801a646:	f7ff fa8d 	bl	8019b64 <APP_LCD_ExtPort_PinSet>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a64a:	2600      	movs	r6, #0
 801a64c:	4a14      	ldr	r2, [pc, #80]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a64e:	8893      	ldrh	r3, [r2, #4]
 801a650:	42b3      	cmp	r3, r6
 801a652:	d906      	bls.n	801a662 <APP_LCD_Clear+0xfe>
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
 801a654:	2000      	movs	r0, #0
 801a656:	4601      	mov	r1, r0
 801a658:	f7ff fb04 	bl	8019c64 <APP_LCD_ExtPort_SerDataShift>
      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_PinSet(2, 1); // DC

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a65c:	1c70      	adds	r0, r6, #1
 801a65e:	b2c6      	uxtb	r6, r0
 801a660:	e7f4      	b.n	801a64c <APP_LCD_Clear+0xe8>

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801a662:	3401      	adds	r4, #1
 801a664:	b2e4      	uxtb	r4, r4
 801a666:	e7dc      	b.n	801a622 <APP_LCD_Clear+0xbe>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801a668:	2001      	movs	r0, #1
 801a66a:	f7f8 fffb 	bl	8013664 <MIOS32_BOARD_J15_RS_Set>

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a66e:	480c      	ldr	r0, [pc, #48]	; (801a6a0 <APP_LCD_Clear+0x13c>)
 801a670:	8881      	ldrh	r1, [r0, #4]
 801a672:	42b1      	cmp	r1, r6
 801a674:	d9f5      	bls.n	801a662 <APP_LCD_Clear+0xfe>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 801a676:	2000      	movs	r0, #0
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a678:	3601      	adds	r6, #1
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 801a67a:	f7f8 ffcd 	bl	8013618 <MIOS32_BOARD_J15_SerDataShift>
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801a67e:	b2f6      	uxtb	r6, r6
 801a680:	e7f5      	b.n	801a66e <APP_LCD_Clear+0x10a>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
      }
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 801a682:	4601      	mov	r1, r0
 801a684:	f7f6 ffe6 	bl	8011654 <MIOS32_LCD_CursorSet>
 801a688:	4328      	orrs	r0, r5

    return error;
 801a68a:	bd70      	pop	{r4, r5, r6, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 801a68c:	2001      	movs	r0, #1
  }

  return -3; // not supported
}
 801a68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 801a692:	f7ff bc27 	b.w	8019ee4 <APP_LCD_Cmd>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801a696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // -> send clear command
    return APP_LCD_Cmd(0x01);
  }

  return -3; // not supported
}
 801a69a:	bd70      	pop	{r4, r5, r6, pc}
 801a69c:	200009b2 	.word	0x200009b2
 801a6a0:	200035ca 	.word	0x200035ca
 801a6a4:	0801cc69 	.word	0x0801cc69
 801a6a8:	200009c0 	.word	0x200009c0

0801a6ac <APP_LCD_GCursorSet>:
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( lcd_testmode )
 801a6ae:	4b32      	ldr	r3, [pc, #200]	; (801a778 <APP_LCD_GCursorSet+0xcc>)
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801a6b0:	4604      	mov	r4, r0
  if( lcd_testmode )
 801a6b2:	7818      	ldrb	r0, [r3, #0]
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801a6b4:	460d      	mov	r5, r1
  if( lcd_testmode )
 801a6b6:	2800      	cmp	r0, #0
 801a6b8:	d158      	bne.n	801a76c <APP_LCD_GCursorSet+0xc0>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 801a6ba:	4e30      	ldr	r6, [pc, #192]	; (801a77c <APP_LCD_GCursorSet+0xd0>)
 801a6bc:	7831      	ldrb	r1, [r6, #0]
 801a6be:	3981      	subs	r1, #129	; 0x81
 801a6c0:	2905      	cmp	r1, #5
 801a6c2:	d856      	bhi.n	801a772 <APP_LCD_GCursorSet+0xc6>
 801a6c4:	e8df f001 	tbb	[pc, r1]
 801a6c8:	3d1b0303 	.word	0x3d1b0303
 801a6cc:	0d3d      	.short	0x0d3d
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x40 | (x % 64));
 801a6ce:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 801a6d2:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 801a6d6:	f7ff fc05 	bl	8019ee4 <APP_LCD_Cmd>
 801a6da:	4604      	mov	r4, r0

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x7));
 801a6dc:	f3c5 00c2 	ubfx	r0, r5, #3, #3
 801a6e0:	e00a      	b.n	801a6f8 <APP_LCD_GCursorSet+0x4c>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;

    // set X position
#if SED1520_POLLIN_WINTEK_WD_G1203T
    error |= APP_LCD_Cmd(0x00 | (x % 61));
 801a6e2:	233d      	movs	r3, #61	; 0x3d
 801a6e4:	fbb4 f2f3 	udiv	r2, r4, r3
 801a6e8:	fb03 4412 	mls	r4, r3, r2, r4
 801a6ec:	b2e0      	uxtb	r0, r4
 801a6ee:	f7ff fbf9 	bl	8019ee4 <APP_LCD_Cmd>
 801a6f2:	4604      	mov	r4, r0
#else
    error |= APP_LCD_Cmd(0x00 | (x % 64));
#endif

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x3));
 801a6f4:	f3c5 00c1 	ubfx	r0, r5, #3, #2
 801a6f8:	f040 00b8 	orr.w	r0, r0, #184	; 0xb8
 801a6fc:	e032      	b.n	801a764 <APP_LCD_GCursorSet+0xb8>

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 801a6fe:	88b7      	ldrh	r7, [r6, #4]
 801a700:	fbb4 f2f7 	udiv	r2, r4, r7
 801a704:	fb07 4012 	mls	r0, r7, r2, r4
 801a708:	f3c0 1103 	ubfx	r1, r0, #4, #4
 801a70c:	f041 0010 	orr.w	r0, r1, #16
 801a710:	f7ff fbe8 	bl	8019ee4 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 801a714:	88b3      	ldrh	r3, [r6, #4]
 801a716:	fbb4 f2f3 	udiv	r2, r4, r3
 801a71a:	fb03 4412 	mls	r4, r3, r2, r4

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 801a71e:	4607      	mov	r7, r0
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 801a720:	f004 000f 	and.w	r0, r4, #15
 801a724:	f7ff fbde 	bl	8019ee4 <APP_LCD_Cmd>
 801a728:	ea40 0407 	orr.w	r4, r0, r7

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) % (mios32_lcd_parameters.height/8)));
 801a72c:	88f0      	ldrh	r0, [r6, #6]
 801a72e:	08ed      	lsrs	r5, r5, #3
 801a730:	08c1      	lsrs	r1, r0, #3
 801a732:	fb95 f3f1 	sdiv	r3, r5, r1
 801a736:	fb01 5513 	mls	r5, r1, r3, r5
 801a73a:	f065 024f 	orn	r2, r5, #79	; 0x4f
 801a73e:	b2d0      	uxtb	r0, r2
 801a740:	e010      	b.n	801a764 <APP_LCD_GCursorSet+0xb8>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 801a742:	f004 000f 	and.w	r0, r4, #15
 801a746:	f7ff fbcd 	bl	8019ee4 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801a74a:	f3c4 1103 	ubfx	r1, r4, #4, #4
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 801a74e:	4606      	mov	r6, r0
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801a750:	f041 0010 	orr.w	r0, r1, #16
 801a754:	f7ff fbc6 	bl	8019ee4 <APP_LCD_Cmd>

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 801a758:	f3c5 03c2 	ubfx	r3, r5, #3, #3
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801a75c:	ea40 0406 	orr.w	r4, r0, r6

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 801a760:	f043 00b0 	orr.w	r0, r3, #176	; 0xb0
 801a764:	f7ff fbbe 	bl	8019ee4 <APP_LCD_Cmd>
 801a768:	4320      	orrs	r0, r4

    return error;
 801a76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801a76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    return error;
  } break;
  }

  return -3; // not supported
 801a772:	f06f 0002 	mvn.w	r0, #2
}
 801a776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a778:	200009b2 	.word	0x200009b2
 801a77c:	200035ca 	.word	0x200035ca

0801a780 <APP_LCD_CursorSet>:
// IN: <column> and <line>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_CursorSet(u16 column, u16 line)
{
  if( lcd_testmode )
 801a780:	4b0d      	ldr	r3, [pc, #52]	; (801a7b8 <APP_LCD_CursorSet+0x38>)
 801a782:	781a      	ldrb	r2, [r3, #0]
 801a784:	2a00      	cmp	r2, #0
 801a786:	d114      	bne.n	801a7b2 <APP_LCD_CursorSet+0x32>
    return -1; // direct access disabled in testmode

  if( mios32_lcd_parameters.lcd_type >= 0x80 ) { // GLCD
 801a788:	4b0c      	ldr	r3, [pc, #48]	; (801a7bc <APP_LCD_CursorSet+0x3c>)
 801a78a:	f993 2000 	ldrsb.w	r2, [r3]
 801a78e:	2a00      	cmp	r2, #0
 801a790:	da05      	bge.n	801a79e <APP_LCD_CursorSet+0x1e>
    // mios32_lcd_x/y set by MIOS32_LCD_CursorSet() function
    return APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801a792:	4b0b      	ldr	r3, [pc, #44]	; (801a7c0 <APP_LCD_CursorSet+0x40>)
 801a794:	490b      	ldr	r1, [pc, #44]	; (801a7c4 <APP_LCD_CursorSet+0x44>)
 801a796:	8818      	ldrh	r0, [r3, #0]
 801a798:	8809      	ldrh	r1, [r1, #0]
 801a79a:	f7ff bf87 	b.w	801a6ac <APP_LCD_GCursorSet>
  } else { // CLCD
    // exit with error if line is not in allowed range
    if( line >= MIOS32_LCD_MAX_MAP_LINES )
 801a79e:	2903      	cmp	r1, #3
 801a7a0:	d807      	bhi.n	801a7b2 <APP_LCD_CursorSet+0x32>
      return -1;

    // -> set cursor address
    return APP_LCD_Cmd(0x80 | (mios32_lcd_cursor_map[line] + column));
 801a7a2:	4b09      	ldr	r3, [pc, #36]	; (801a7c8 <APP_LCD_CursorSet+0x48>)
 801a7a4:	5c59      	ldrb	r1, [r3, r1]
 801a7a6:	1808      	adds	r0, r1, r0
 801a7a8:	f060 027f 	orn	r2, r0, #127	; 0x7f
 801a7ac:	b2d0      	uxtb	r0, r2
 801a7ae:	f7ff bb99 	b.w	8019ee4 <APP_LCD_Cmd>
  }

  return -3; // not supported
}
 801a7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7b6:	4770      	bx	lr
 801a7b8:	200009b2 	.word	0x200009b2
 801a7bc:	200035ca 	.word	0x200035ca
 801a7c0:	200035dc 	.word	0x200035dc
 801a7c4:	200035c8 	.word	0x200035c8
 801a7c8:	200035d6 	.word	0x200035d6

0801a7cc <APP_LCD_BColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BColourSet(u32 rgb)
{
  return -3; // not supported
}
 801a7cc:	f06f 0002 	mvn.w	r0, #2
 801a7d0:	4770      	bx	lr

0801a7d2 <APP_LCD_FColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_FColourSet(u32 rgb)
{
  return -3; // not supported
}
 801a7d2:	f06f 0002 	mvn.w	r0, #2
 801a7d6:	4770      	bx	lr

0801a7d8 <APP_LCD_BitmapPrint>:
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 801a7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7dc:	b085      	sub	sp, #20
 801a7de:	ab04      	add	r3, sp, #16
 801a7e0:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if( lcd_testmode )
 801a7e4:	4823      	ldr	r0, [pc, #140]	; (801a874 <APP_LCD_BitmapPrint+0x9c>)
 801a7e6:	7804      	ldrb	r4, [r0, #0]
 801a7e8:	b114      	cbz	r4, 801a7f0 <APP_LCD_BitmapPrint+0x18>
    return -1; // direct access disabled in testmode
 801a7ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7ee:	e03d      	b.n	801a86c <APP_LCD_BitmapPrint+0x94>

  if( !MIOS32_LCD_TypeIsGLCD() )
 801a7f0:	f7f6 ff22 	bl	8011638 <MIOS32_LCD_TypeIsGLCD>
 801a7f4:	2800      	cmp	r0, #0
 801a7f6:	d0f8      	beq.n	801a7ea <APP_LCD_BitmapPrint+0x12>
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
 801a7f8:	491f      	ldr	r1, [pc, #124]	; (801a878 <APP_LCD_BitmapPrint+0xa0>)
 801a7fa:	4a20      	ldr	r2, [pc, #128]	; (801a87c <APP_LCD_BitmapPrint+0xa4>)
 801a7fc:	880f      	ldrh	r7, [r1, #0]
 801a7fe:	8893      	ldrh	r3, [r2, #4]
 801a800:	42bb      	cmp	r3, r7
 801a802:	d92f      	bls.n	801a864 <APP_LCD_BitmapPrint+0x8c>
  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 801a804:	481e      	ldr	r0, [pc, #120]	; (801a880 <APP_LCD_BitmapPrint+0xa8>)
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 801a806:	f8bd 600a 	ldrh.w	r6, [sp, #10]

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 801a80a:	f8b0 8000 	ldrh.w	r8, [r0]
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 801a80e:	08f6      	lsrs	r6, r6, #3

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 801a810:	42b4      	cmp	r4, r6
 801a812:	da1c      	bge.n	801a84e <APP_LCD_BitmapPrint+0x76>

    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;
 801a814:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a818:	9d01      	ldr	r5, [sp, #4]
 801a81a:	fb09 5904 	mla	r9, r9, r4, r5

    // set graphical cursor after second line has reached
    if( line > 0 ) {
 801a81e:	b14c      	cbz	r4, 801a834 <APP_LCD_BitmapPrint+0x5c>
      mios32_lcd_x = initial_x;
      mios32_lcd_y += 8;
 801a820:	4817      	ldr	r0, [pc, #92]	; (801a880 <APP_LCD_BitmapPrint+0xa8>)
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801a822:	4b15      	ldr	r3, [pc, #84]	; (801a878 <APP_LCD_BitmapPrint+0xa0>)
      mios32_lcd_y += 8;
 801a824:	8801      	ldrh	r1, [r0, #0]
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801a826:	801f      	strh	r7, [r3, #0]
      mios32_lcd_y += 8;
 801a828:	3108      	adds	r1, #8
 801a82a:	b289      	uxth	r1, r1
 801a82c:	8001      	strh	r1, [r0, #0]
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801a82e:	4638      	mov	r0, r7
 801a830:	f7ff ff3c 	bl	801a6ac <APP_LCD_GCursorSet>
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 801a834:	2500      	movs	r5, #0
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801a836:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a83a:	4295      	cmp	r5, r2
 801a83c:	da05      	bge.n	801a84a <APP_LCD_BitmapPrint+0x72>
      APP_LCD_Data(*memory_ptr++);
 801a83e:	f819 0005 	ldrb.w	r0, [r9, r5]
 801a842:	f7ff fbe9 	bl	801a018 <APP_LCD_Data>
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801a846:	3501      	adds	r5, #1
 801a848:	e7f5      	b.n	801a836 <APP_LCD_BitmapPrint+0x5e>
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 801a84a:	3401      	adds	r4, #1
 801a84c:	e7e0      	b.n	801a810 <APP_LCD_BitmapPrint+0x38>
    for(x=0; x<bitmap.width; ++x)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
 801a84e:	b166      	cbz	r6, 801a86a <APP_LCD_BitmapPrint+0x92>
    mios32_lcd_y = initial_y;
 801a850:	490b      	ldr	r1, [pc, #44]	; (801a880 <APP_LCD_BitmapPrint+0xa8>)
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801a852:	4a09      	ldr	r2, [pc, #36]	; (801a878 <APP_LCD_BitmapPrint+0xa0>)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
 801a854:	f8a1 8000 	strh.w	r8, [r1]
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801a858:	8810      	ldrh	r0, [r2, #0]
 801a85a:	4641      	mov	r1, r8
 801a85c:	f7ff ff26 	bl	801a6ac <APP_LCD_GCursorSet>
  }

  return 0; // no error
 801a860:	2000      	movs	r0, #0
 801a862:	e003      	b.n	801a86c <APP_LCD_BitmapPrint+0x94>
  if( !MIOS32_LCD_TypeIsGLCD() )
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;
 801a864:	f06f 0001 	mvn.w	r0, #1
 801a868:	e000      	b.n	801a86c <APP_LCD_BitmapPrint+0x94>
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
  }

  return 0; // no error
 801a86a:	4630      	mov	r0, r6
}
 801a86c:	b005      	add	sp, #20
 801a86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a872:	bf00      	nop
 801a874:	200009b2 	.word	0x200009b2
 801a878:	200035dc 	.word	0x200035dc
 801a87c:	200035ca 	.word	0x200035ca
 801a880:	200035c8 	.word	0x200035c8

0801a884 <get_on_off>:
/////////////////////////////////////////////////////////////////////////////
// help function which parses for on or off
// returns 0 if 'off', 1 if 'on', -1 if invalid
/////////////////////////////////////////////////////////////////////////////
static s32 get_on_off(char *word)
{
 801a884:	b510      	push	{r4, lr}
  if( strcmp(word, "on") == 0 || strcmp(word, "1") == 0 )
 801a886:	490d      	ldr	r1, [pc, #52]	; (801a8bc <get_on_off+0x38>)
/////////////////////////////////////////////////////////////////////////////
// help function which parses for on or off
// returns 0 if 'off', 1 if 'on', -1 if invalid
/////////////////////////////////////////////////////////////////////////////
static s32 get_on_off(char *word)
{
 801a888:	4604      	mov	r4, r0
  if( strcmp(word, "on") == 0 || strcmp(word, "1") == 0 )
 801a88a:	f001 fade 	bl	801be4a <strcmp>
 801a88e:	b198      	cbz	r0, 801a8b8 <get_on_off+0x34>
 801a890:	4620      	mov	r0, r4
 801a892:	490b      	ldr	r1, [pc, #44]	; (801a8c0 <get_on_off+0x3c>)
 801a894:	f001 fad9 	bl	801be4a <strcmp>
 801a898:	b170      	cbz	r0, 801a8b8 <get_on_off+0x34>
    return 1;

  if( strcmp(word, "off") == 0 || strcmp(word, "0") == 0 )
 801a89a:	4620      	mov	r0, r4
 801a89c:	4909      	ldr	r1, [pc, #36]	; (801a8c4 <get_on_off+0x40>)
 801a89e:	f001 fad4 	bl	801be4a <strcmp>
 801a8a2:	b150      	cbz	r0, 801a8ba <get_on_off+0x36>
 801a8a4:	4620      	mov	r0, r4
 801a8a6:	4908      	ldr	r1, [pc, #32]	; (801a8c8 <get_on_off+0x44>)
 801a8a8:	f001 facf 	bl	801be4a <strcmp>
    return 0;
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	bf14      	ite	ne
 801a8b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801a8b4:	2000      	moveq	r0, #0
 801a8b6:	bd10      	pop	{r4, pc}
// returns 0 if 'off', 1 if 'on', -1 if invalid
/////////////////////////////////////////////////////////////////////////////
static s32 get_on_off(char *word)
{
  if( strcmp(word, "on") == 0 || strcmp(word, "1") == 0 )
    return 1;
 801a8b8:	2001      	movs	r0, #1

  if( strcmp(word, "off") == 0 || strcmp(word, "0") == 0 )
    return 0;

  return -1;
}
 801a8ba:	bd10      	pop	{r4, pc}
 801a8bc:	0801d4e9 	.word	0x0801d4e9
 801a8c0:	0801cf6d 	.word	0x0801cf6d
 801a8c4:	0801cf6f 	.word	0x0801cf6f
 801a8c8:	0801c761 	.word	0x0801c761

0801a8cc <MIDIMON_Init>:

/////////////////////////////////////////////////////////////////////////////
// Initialize the monitor
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Init(u32 mode)
{
 801a8cc:	b530      	push	{r4, r5, lr}
  int tempo_port_ix;
  int i;

  if( mode > 0 )
 801a8ce:	b9e8      	cbnz	r0, 801a90c <MIDIMON_Init+0x40>
 801a8d0:	4a10      	ldr	r2, [pc, #64]	; (801a914 <MIDIMON_Init+0x48>)
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
 801a8d2:	4c11      	ldr	r4, [pc, #68]	; (801a918 <MIDIMON_Init+0x4c>)
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	00c1      	lsls	r1, r0, #3
 801a8d8:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
 801a8dc:	1864      	adds	r4, r4, r1
    midi_clk_pos[tempo_port_ix].subtick = -1;
 801a8de:	25ff      	movs	r5, #255	; 0xff

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
 801a8e0:	6063      	str	r3, [r4, #4]
    midi_clk_pos[tempo_port_ix].subtick = -1;
 801a8e2:	71a5      	strb	r5, [r4, #6]

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
    tempo_sample_pos[tempo_port_ix] = 0;
 801a8e4:	4c0d      	ldr	r4, [pc, #52]	; (801a91c <MIDIMON_Init+0x50>)
  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
    midi_clk_pos[tempo_port_ix].subtick = -1;

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
 801a8e6:	6013      	str	r3, [r2, #0]
    tempo_sample_pos[tempo_port_ix] = 0;
 801a8e8:	5503      	strb	r3, [r0, r4]

    mtc_pos[tempo_port_ix].ALL = 0;
 801a8ea:	4c0d      	ldr	r4, [pc, #52]	; (801a920 <MIDIMON_Init+0x54>)
  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
    midi_clk_pos[tempo_port_ix].subtick = -1;

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
 801a8ec:	6053      	str	r3, [r2, #4]
 801a8ee:	6093      	str	r3, [r2, #8]
 801a8f0:	60d3      	str	r3, [r2, #12]
 801a8f2:	6113      	str	r3, [r2, #16]
 801a8f4:	6153      	str	r3, [r2, #20]
 801a8f6:	6193      	str	r3, [r2, #24]
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
 801a8f8:	1861      	adds	r1, r4, r1
 801a8fa:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
 801a8fe:	3001      	adds	r0, #1
 801a900:	321c      	adds	r2, #28
 801a902:	2804      	cmp	r0, #4

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
 801a904:	604b      	str	r3, [r1, #4]
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
 801a906:	d1e4      	bne.n	801a8d2 <MIDIMON_Init+0x6>
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
  }

  return 0; // no error
 801a908:	4618      	mov	r0, r3
 801a90a:	bd30      	pop	{r4, r5, pc}
{
  int tempo_port_ix;
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet
 801a90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    mtc_pos[tempo_port_ix].ALL = 0;
  }

  return 0; // no error
}
 801a910:	bd30      	pop	{r4, r5, pc}
 801a912:	bf00      	nop
 801a914:	20000a10 	.word	0x20000a10
 801a918:	200009f0 	.word	0x200009f0
 801a91c:	200009e8 	.word	0x200009e8
 801a920:	200009c8 	.word	0x200009c8

0801a924 <MIDIMON_Print>:

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 801a924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a928:	b097      	sub	sp, #92	; 0x5c
 801a92a:	4682      	mov	sl, r0
 801a92c:	460e      	mov	r6, r1
 801a92e:	4690      	mov	r8, r2
 801a930:	9305      	str	r3, [sp, #20]
 801a932:	f002 0b0f 	and.w	fp, r2, #15
 801a936:	f3c2 2507 	ubfx	r5, r2, #8, #8
 801a93a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801a93e:	ea4f 6712 	mov.w	r7, r2, lsr #24
  char pre_str[64];
  u8 display_midi_clk = 0;
  //u8 display_mtc = 0;

  if( strlen(prefix_str) > 50 ) {
 801a942:	f001 fa8d 	bl	801be60 <strlen>
 801a946:	2832      	cmp	r0, #50	; 0x32

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 801a948:	f89d 9080 	ldrb.w	r9, [sp, #128]	; 0x80
  char pre_str[64];
  u8 display_midi_clk = 0;
  //u8 display_mtc = 0;

  if( strlen(prefix_str) > 50 ) {
 801a94c:	d902      	bls.n	801a954 <MIDIMON_Print+0x30>
    MSG("[ERROR:MIDIMON_PRINT] prefix_str shouldn't be longer than 50 chars!");
 801a94e:	489d      	ldr	r0, [pc, #628]	; (801abc4 <MIDIMON_Print+0x2a0>)
 801a950:	f7f7 f960 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
  }

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
 801a954:	f006 030f 	and.w	r3, r6, #15
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
 801a958:	2b08      	cmp	r3, #8
 801a95a:	d801      	bhi.n	801a960 <MIDIMON_Print+0x3c>
 801a95c:	3331      	adds	r3, #49	; 0x31
 801a95e:	e000      	b.n	801a962 <MIDIMON_Print+0x3e>
 801a960:	3338      	adds	r3, #56	; 0x38
  switch( port & 0xf0 ) {
 801a962:	f006 02f0 	and.w	r2, r6, #240	; 0xf0
 801a966:	2a30      	cmp	r2, #48	; 0x30
 801a968:	d011      	beq.n	801a98e <MIDIMON_Print+0x6a>
 801a96a:	d806      	bhi.n	801a97a <MIDIMON_Print+0x56>
 801a96c:	2a10      	cmp	r2, #16
 801a96e:	d00b      	beq.n	801a988 <MIDIMON_Print+0x64>
 801a970:	2a20      	cmp	r2, #32
 801a972:	d113      	bne.n	801a99c <MIDIMON_Print+0x78>
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
 801a974:	a806      	add	r0, sp, #24
 801a976:	4994      	ldr	r1, [pc, #592]	; (801abc8 <MIDIMON_Print+0x2a4>)
 801a978:	e00e      	b.n	801a998 <MIDIMON_Print+0x74>
  }

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
  switch( port & 0xf0 ) {
 801a97a:	2a40      	cmp	r2, #64	; 0x40
 801a97c:	d00a      	beq.n	801a994 <MIDIMON_Print+0x70>
 801a97e:	2a50      	cmp	r2, #80	; 0x50
 801a980:	d10c      	bne.n	801a99c <MIDIMON_Print+0x78>
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
    case IIC0:  sprintf(pre_str, "[%sIIC%c]", prefix_str, port_ix_name); break;
    case OSC0:  sprintf(pre_str, "[%sOSC%c]", prefix_str, port_ix_name); break;
    case SPIM0: sprintf(pre_str, "[%sSPI%c]", prefix_str, port_ix_name); break;
 801a982:	a806      	add	r0, sp, #24
 801a984:	4991      	ldr	r1, [pc, #580]	; (801abcc <MIDIMON_Print+0x2a8>)
 801a986:	e007      	b.n	801a998 <MIDIMON_Print+0x74>

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
  switch( port & 0xf0 ) {
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
 801a988:	a806      	add	r0, sp, #24
 801a98a:	4991      	ldr	r1, [pc, #580]	; (801abd0 <MIDIMON_Print+0x2ac>)
 801a98c:	e004      	b.n	801a998 <MIDIMON_Print+0x74>
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
    case IIC0:  sprintf(pre_str, "[%sIIC%c]", prefix_str, port_ix_name); break;
 801a98e:	a806      	add	r0, sp, #24
 801a990:	4990      	ldr	r1, [pc, #576]	; (801abd4 <MIDIMON_Print+0x2b0>)
 801a992:	e001      	b.n	801a998 <MIDIMON_Print+0x74>
    case OSC0:  sprintf(pre_str, "[%sOSC%c]", prefix_str, port_ix_name); break;
 801a994:	4990      	ldr	r1, [pc, #576]	; (801abd8 <MIDIMON_Print+0x2b4>)
 801a996:	a806      	add	r0, sp, #24
    case SPIM0: sprintf(pre_str, "[%sSPI%c]", prefix_str, port_ix_name); break;
 801a998:	4652      	mov	r2, sl
 801a99a:	e003      	b.n	801a9a4 <MIDIMON_Print+0x80>
    default:    sprintf(pre_str, "[%sP.%02X ]", prefix_str, port);
 801a99c:	498f      	ldr	r1, [pc, #572]	; (801abdc <MIDIMON_Print+0x2b8>)
 801a99e:	a806      	add	r0, sp, #24
 801a9a0:	4652      	mov	r2, sl
 801a9a2:	4633      	mov	r3, r6
 801a9a4:	3e10      	subs	r6, #16
 801a9a6:	b2f6      	uxtb	r6, r6
 801a9a8:	f7fa fe5a 	bl	8015660 <sprintf>
 801a9ac:	2e11      	cmp	r6, #17
  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Filters: %s", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Tempo Display: %s", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");

  return 0; // no error
}
 801a9ae:	bf98      	it	ls
 801a9b0:	4b8b      	ldrls	r3, [pc, #556]	; (801abe0 <MIDIMON_Print+0x2bc>)
    case UART1: tempo_port_ix = 3; break;
  }

  // branch depending on package type
  u8 msg_sent = 0;
  switch( package.type ) {
 801a9b2:	f1ab 0202 	sub.w	r2, fp, #2
  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Filters: %s", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Tempo Display: %s", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");

  return 0; // no error
}
 801a9b6:	bf94      	ite	ls
 801a9b8:	579e      	ldrsbls	r6, [r3, r6]

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 801a9ba:	f04f 36ff 	movhi.w	r6, #4294967295	; 0xffffffff
    case UART1: tempo_port_ix = 3; break;
  }

  // branch depending on package type
  u8 msg_sent = 0;
  switch( package.type ) {
 801a9be:	2a0d      	cmp	r2, #13
 801a9c0:	f200 8221 	bhi.w	801ae06 <MIDIMON_Print+0x4e2>
 801a9c4:	e8df f012 	tbh	[pc, r2, lsl #1]
 801a9c8:	004e000e 	.word	0x004e000e
 801a9cc:	0076006d 	.word	0x0076006d
 801a9d0:	006d00f5 	.word	0x006d00f5
 801a9d4:	01550148 	.word	0x01550148
 801a9d8:	01750162 	.word	0x01750162
 801a9dc:	0184017d 	.word	0x0184017d
 801a9e0:	00760196 	.word	0x00760196
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
 801a9e4:	2df1      	cmp	r5, #241	; 0xf1
 801a9e6:	d136      	bne.n	801aa56 <MIDIMON_Print+0x132>
	if( !filter_active ) {
 801a9e8:	4a7e      	ldr	r2, [pc, #504]	; (801abe4 <MIDIMON_Print+0x2c0>)
 801a9ea:	7810      	ldrb	r0, [r2, #0]
 801a9ec:	2800      	cmp	r0, #0
 801a9ee:	f040 8212 	bne.w	801ae16 <MIDIMON_Print+0x4f2>
	  switch( package.evnt1 & 0xf0 ) {
 801a9f2:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 801a9f6:	2b30      	cmp	r3, #48	; 0x30
 801a9f8:	a906      	add	r1, sp, #24
 801a9fa:	d021      	beq.n	801aa40 <MIDIMON_Print+0x11c>
 801a9fc:	460a      	mov	r2, r1
 801a9fe:	d806      	bhi.n	801aa0e <MIDIMON_Print+0xea>
 801aa00:	2b10      	cmp	r3, #16
 801aa02:	d015      	beq.n	801aa30 <MIDIMON_Print+0x10c>
 801aa04:	2b20      	cmp	r3, #32
 801aa06:	d019      	beq.n	801aa3c <MIDIMON_Print+0x118>
 801aa08:	bb03      	cbnz	r3, 801aa4c <MIDIMON_Print+0x128>
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa0a:	4877      	ldr	r0, [pc, #476]	; (801abe8 <MIDIMON_Print+0x2c4>)
 801aa0c:	e011      	b.n	801aa32 <MIDIMON_Print+0x10e>
  u8 msg_sent = 0;
  switch( package.type ) {
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
 801aa0e:	2b50      	cmp	r3, #80	; 0x50
 801aa10:	d018      	beq.n	801aa44 <MIDIMON_Print+0x120>
 801aa12:	d803      	bhi.n	801aa1c <MIDIMON_Print+0xf8>
 801aa14:	2b40      	cmp	r3, #64	; 0x40
 801aa16:	d119      	bne.n	801aa4c <MIDIMON_Print+0x128>
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x10: MSG("%s MTC Frame   High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa18:	4874      	ldr	r0, [pc, #464]	; (801abec <MIDIMON_Print+0x2c8>)
 801aa1a:	e00a      	b.n	801aa32 <MIDIMON_Print+0x10e>
  u8 msg_sent = 0;
  switch( package.type ) {
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
 801aa1c:	2b60      	cmp	r3, #96	; 0x60
 801aa1e:	d013      	beq.n	801aa48 <MIDIMON_Print+0x124>
 801aa20:	2b70      	cmp	r3, #112	; 0x70
 801aa22:	d113      	bne.n	801aa4c <MIDIMON_Print+0x128>
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x50: MSG("%s MTC Minutes High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x60: MSG("%s MTC Hours   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x70: MSG("%s MTC Hours   High: %X (SMPTE Type: %d)\n", 
 801aa24:	4872      	ldr	r0, [pc, #456]	; (801abf0 <MIDIMON_Print+0x2cc>)
 801aa26:	f004 0201 	and.w	r2, r4, #1
 801aa2a:	f3c4 0342 	ubfx	r3, r4, #1, #3
 801aa2e:	e168      	b.n	801ad02 <MIDIMON_Print+0x3de>
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x10: MSG("%s MTC Frame   High: %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa30:	4870      	ldr	r0, [pc, #448]	; (801abf4 <MIDIMON_Print+0x2d0>)
 801aa32:	f004 020f 	and.w	r2, r4, #15
 801aa36:	f7f7 f8ed 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 801aa3a:	e1ec      	b.n	801ae16 <MIDIMON_Print+0x4f2>
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa3c:	486e      	ldr	r0, [pc, #440]	; (801abf8 <MIDIMON_Print+0x2d4>)
 801aa3e:	e7f8      	b.n	801aa32 <MIDIMON_Print+0x10e>
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa40:	486e      	ldr	r0, [pc, #440]	; (801abfc <MIDIMON_Print+0x2d8>)
 801aa42:	e7f6      	b.n	801aa32 <MIDIMON_Print+0x10e>
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x50: MSG("%s MTC Minutes High: %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa44:	486e      	ldr	r0, [pc, #440]	; (801ac00 <MIDIMON_Print+0x2dc>)
 801aa46:	e7f4      	b.n	801aa32 <MIDIMON_Print+0x10e>
	    case 0x60: MSG("%s MTC Hours   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 801aa48:	486e      	ldr	r0, [pc, #440]	; (801ac04 <MIDIMON_Print+0x2e0>)
 801aa4a:	e7f2      	b.n	801aa32 <MIDIMON_Print+0x10e>
	    case 0x70: MSG("%s MTC Hours   High: %X (SMPTE Type: %d)\n", 
			   pre_str, package.evnt1 & 0x1, (package.evnt1>>1) & 0x7); break;
	    default:
	      MSG("%s MTC Invalid: %02X %02X %02X\n", pre_str, package.evnt0, package.evnt1, package.evnt2);
 801aa4c:	4611      	mov	r1, r2
 801aa4e:	9700      	str	r7, [sp, #0]
 801aa50:	486d      	ldr	r0, [pc, #436]	; (801ac08 <MIDIMON_Print+0x2e4>)
 801aa52:	22f1      	movs	r2, #241	; 0xf1
 801aa54:	e133      	b.n	801acbe <MIDIMON_Print+0x39a>
	  }
	}
	msg_sent = 1;
      } else if( package.evnt0 == 0xf3 ) {
 801aa56:	2df3      	cmp	r5, #243	; 0xf3
 801aa58:	f040 81d5 	bne.w	801ae06 <MIDIMON_Print+0x4e2>
	MSG("%s Song Number #%d\n", pre_str, package.evnt1);
 801aa5c:	486b      	ldr	r0, [pc, #428]	; (801ac0c <MIDIMON_Print+0x2e8>)
 801aa5e:	a906      	add	r1, sp, #24
 801aa60:	4622      	mov	r2, r4
 801aa62:	e7e8      	b.n	801aa36 <MIDIMON_Print+0x112>
	msg_sent = 1;
      }
      break;

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
 801aa64:	2df2      	cmp	r5, #242	; 0xf2
 801aa66:	f040 81ce 	bne.w	801ae06 <MIDIMON_Print+0x4e2>
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
 801aa6a:	ea44 14d7 	orr.w	r4, r4, r7, lsr #7
	u8 step = song_pos % 4;
 801aa6e:	f004 0703 	and.w	r7, r4, #3
	u8 beat = (song_pos / 4) % 4;
	u32 measure = song_pos / 16;

	MSG("%s Song Position %d.%d.%d\n", pre_str, measure+1, beat+1, step+1);
 801aa72:	1c7a      	adds	r2, r7, #1

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
	u8 step = song_pos % 4;
	u8 beat = (song_pos / 4) % 4;
 801aa74:	f3c4 0581 	ubfx	r5, r4, #2, #2
	u32 measure = song_pos / 16;
 801aa78:	0924      	lsrs	r4, r4, #4

	MSG("%s Song Position %d.%d.%d\n", pre_str, measure+1, beat+1, step+1);
 801aa7a:	9200      	str	r2, [sp, #0]
 801aa7c:	1c6b      	adds	r3, r5, #1
 801aa7e:	1c62      	adds	r2, r4, #1
 801aa80:	4863      	ldr	r0, [pc, #396]	; (801ac10 <MIDIMON_Print+0x2ec>)
 801aa82:	a906      	add	r1, sp, #24
 801aa84:	f7f7 f8c6 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	msg_sent = 1;

	if( tempo_port_ix >= 0 ) {
 801aa88:	2e00      	cmp	r6, #0
 801aa8a:	f2c0 81c4 	blt.w	801ae16 <MIDIMON_Print+0x4f2>
	  midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 801aa8e:	4861      	ldr	r0, [pc, #388]	; (801ac14 <MIDIMON_Print+0x2f0>)
 801aa90:	eb00 03c6 	add.w	r3, r0, r6, lsl #3

	  mcp->subtick = -1; // ensure that next clock starts with 0
 801aa94:	21ff      	movs	r1, #255	; 0xff
 801aa96:	7199      	strb	r1, [r3, #6]
	  mcp->step = step;
 801aa98:	715f      	strb	r7, [r3, #5]

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
	u8 step = song_pos % 4;
	u8 beat = (song_pos / 4) % 4;
 801aa9a:	711d      	strb	r5, [r3, #4]
	  midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];

	  mcp->subtick = -1; // ensure that next clock starts with 0
	  mcp->step = step;
	  mcp->beat = beat;
	  mcp->measure = measure;
 801aa9c:	f840 4036 	str.w	r4, [r0, r6, lsl #3]
 801aaa0:	e1b9      	b.n	801ae16 <MIDIMON_Print+0x4f2>
      }
      break;

    case 0x4:  // SysEx starts or continues (3 bytes)
    case 0x7:  // SysEx ends with following three bytes
      if( !filter_sysex_message )
 801aaa2:	f1b9 0f00 	cmp.w	r9, #0
 801aaa6:	f040 81b6 	bne.w	801ae16 <MIDIMON_Print+0x4f2>
	MSG("%s SysEx: %02X %02X %02X\n", pre_str, package.evnt0, package.evnt1, package.evnt2);
 801aaaa:	9700      	str	r7, [sp, #0]
 801aaac:	485a      	ldr	r0, [pc, #360]	; (801ac18 <MIDIMON_Print+0x2f4>)
 801aaae:	a906      	add	r1, sp, #24
 801aab0:	462a      	mov	r2, r5
 801aab2:	e104      	b.n	801acbe <MIDIMON_Print+0x39a>
      msg_sent = 1;
      break;

    case 0x5: // Single-byte System Common Message or SysEx ends with following single bytes
    case 0xf: // Single Byte
      switch( package.evnt0 ) {
 801aab4:	f1a5 01f6 	sub.w	r1, r5, #246	; 0xf6
 801aab8:	2909      	cmp	r1, #9
 801aaba:	d870      	bhi.n	801ab9e <MIDIMON_Print+0x27a>
 801aabc:	e8df f001 	tbb	[pc, r1]
 801aac0:	4a0d0705 	.word	0x4a0d0705
 801aac4:	615f5d4c 	.word	0x615f5d4c
 801aac8:	6a63      	.short	0x6a63
        case 0xf6: MSG("%s Tune Request (F6)\n", pre_str); break;
 801aaca:	4854      	ldr	r0, [pc, #336]	; (801ac1c <MIDIMON_Print+0x2f8>)
 801aacc:	e063      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xf7: if( !filter_sysex_message ) { MSG("%s SysEx End (F7)\n", pre_str); } break;
 801aace:	f1b9 0f00 	cmp.w	r9, #0
 801aad2:	f040 81a0 	bne.w	801ae16 <MIDIMON_Print+0x4f2>
 801aad6:	4852      	ldr	r0, [pc, #328]	; (801ac20 <MIDIMON_Print+0x2fc>)
 801aad8:	e05d      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xf8: 
	  if( !filter_active ) {
 801aada:	4942      	ldr	r1, [pc, #264]	; (801abe4 <MIDIMON_Print+0x2c0>)
 801aadc:	7808      	ldrb	r0, [r1, #0]
 801aade:	b918      	cbnz	r0, 801aae8 <MIDIMON_Print+0x1c4>
	    MSG("%s MIDI Clock (F8)\n", pre_str);
 801aae0:	4850      	ldr	r0, [pc, #320]	; (801ac24 <MIDIMON_Print+0x300>)
 801aae2:	a906      	add	r1, sp, #24
 801aae4:	f7f7 f896 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	  }

	  if( tempo_port_ix >= 0 ) {
 801aae8:	2e00      	cmp	r6, #0
 801aaea:	f2c0 8194 	blt.w	801ae16 <MIDIMON_Print+0x4f2>
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 801aaee:	4f49      	ldr	r7, [pc, #292]	; (801ac14 <MIDIMON_Print+0x2f0>)
 801aaf0:	00f5      	lsls	r5, r6, #3
 801aaf2:	197c      	adds	r4, r7, r5
	    if( ++mcp->subtick >= 6 ) {
 801aaf4:	79a2      	ldrb	r2, [r4, #6]
 801aaf6:	1c53      	adds	r3, r2, #1
 801aaf8:	b2d9      	uxtb	r1, r3
 801aafa:	b248      	sxtb	r0, r1
 801aafc:	2805      	cmp	r0, #5
 801aafe:	71a1      	strb	r1, [r4, #6]
 801ab00:	dd12      	ble.n	801ab28 <MIDIMON_Print+0x204>
	      mcp->subtick = 0;
	      if( ++mcp->step >= 4 ) {
 801ab02:	7962      	ldrb	r2, [r4, #5]
 801ab04:	1c51      	adds	r1, r2, #1
 801ab06:	b2c8      	uxtb	r0, r1
	  }

	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
 801ab08:	2300      	movs	r3, #0
	      if( ++mcp->step >= 4 ) {
 801ab0a:	2803      	cmp	r0, #3
	  }

	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
 801ab0c:	71a3      	strb	r3, [r4, #6]
	      if( ++mcp->step >= 4 ) {
 801ab0e:	7160      	strb	r0, [r4, #5]
 801ab10:	d90a      	bls.n	801ab28 <MIDIMON_Print+0x204>
		mcp->step = 0;
		if( ++mcp->beat >= 4 ) {
 801ab12:	7922      	ldrb	r2, [r4, #4]
	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
	      if( ++mcp->step >= 4 ) {
		mcp->step = 0;
 801ab14:	7163      	strb	r3, [r4, #5]
		if( ++mcp->beat >= 4 ) {
 801ab16:	1c51      	adds	r1, r2, #1
 801ab18:	b2c8      	uxtb	r0, r1
 801ab1a:	2803      	cmp	r0, #3
 801ab1c:	7120      	strb	r0, [r4, #4]
 801ab1e:	d903      	bls.n	801ab28 <MIDIMON_Print+0x204>
		  mcp->beat = 0;
 801ab20:	7123      	strb	r3, [r4, #4]
		  ++mcp->measure;
 801ab22:	597b      	ldr	r3, [r7, r5]
 801ab24:	1c5a      	adds	r2, r3, #1
 801ab26:	517a      	str	r2, [r7, r5]
		}
	      }
	    }

	    // for tempo measurements
	    tempo_samples[tempo_port_ix][tempo_sample_pos[tempo_port_ix]] = timestamp;
 801ab28:	4b3f      	ldr	r3, [pc, #252]	; (801ac28 <MIDIMON_Print+0x304>)
 801ab2a:	f8df c128 	ldr.w	ip, [pc, #296]	; 801ac54 <MIDIMON_Print+0x330>
 801ab2e:	5d9a      	ldrb	r2, [r3, r6]
 801ab30:	2107      	movs	r1, #7
 801ab32:	fb01 2006 	mla	r0, r1, r6, r2
 801ab36:	9905      	ldr	r1, [sp, #20]
	    if( ++tempo_sample_pos[tempo_port_ix] >= NUM_TEMPO_SAMPLES )
 801ab38:	3201      	adds	r2, #1
		}
	      }
	    }

	    // for tempo measurements
	    tempo_samples[tempo_port_ix][tempo_sample_pos[tempo_port_ix]] = timestamp;
 801ab3a:	f84c 1020 	str.w	r1, [ip, r0, lsl #2]
	    if( ++tempo_sample_pos[tempo_port_ix] >= NUM_TEMPO_SAMPLES )
 801ab3e:	b2d0      	uxtb	r0, r2
 801ab40:	2806      	cmp	r0, #6
	      tempo_sample_pos[tempo_port_ix] = 0;
 801ab42:	bf88      	it	hi
 801ab44:	2000      	movhi	r0, #0
 801ab46:	5598      	strb	r0, [r3, r6]
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
	pre_str, package.type, package.evnt0, package.evnt1, package.evnt2);
  }

  if( display_midi_clk && tempo_active && tempo_port_ix >= 0 ) {
 801ab48:	f994 3006 	ldrsb.w	r3, [r4, #6]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	f000 80db 	beq.w	801ad08 <MIDIMON_Print+0x3e4>
 801ab52:	e160      	b.n	801ae16 <MIDIMON_Print+0x4f2>
	      display_midi_clk = 1;
	  }

	  break;

        case 0xf9: MSG("%s MIDI Tick (F9)\n", pre_str); break;
 801ab54:	4835      	ldr	r0, [pc, #212]	; (801ac2c <MIDIMON_Print+0x308>)
 801ab56:	e01e      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xfa:
	  MSG("%s MIDI Clock Start (FA)\n", pre_str);
 801ab58:	4835      	ldr	r0, [pc, #212]	; (801ac30 <MIDIMON_Print+0x30c>)
 801ab5a:	a906      	add	r1, sp, #24
 801ab5c:	f7f7 f85a 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	  if( tempo_port_ix >= 0 ) {
 801ab60:	2e00      	cmp	r6, #0
 801ab62:	f2c0 8158 	blt.w	801ae16 <MIDIMON_Print+0x4f2>
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 801ab66:	492b      	ldr	r1, [pc, #172]	; (801ac14 <MIDIMON_Print+0x2f0>)
 801ab68:	eb01 00c6 	add.w	r0, r1, r6, lsl #3
	    mcp->ALL = 0;
 801ab6c:	2200      	movs	r2, #0
	    mcp->subtick = -1; // ensure that next clock starts with 0
 801ab6e:	23ff      	movs	r3, #255	; 0xff
        case 0xf9: MSG("%s MIDI Tick (F9)\n", pre_str); break;
        case 0xfa:
	  MSG("%s MIDI Clock Start (FA)\n", pre_str);
	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    mcp->ALL = 0;
 801ab70:	f841 2036 	str.w	r2, [r1, r6, lsl #3]
 801ab74:	6042      	str	r2, [r0, #4]
	    mcp->subtick = -1; // ensure that next clock starts with 0
 801ab76:	7183      	strb	r3, [r0, #6]
 801ab78:	e14d      	b.n	801ae16 <MIDIMON_Print+0x4f2>
	  }
	  break;
        case 0xfb: MSG("%s MIDI Clock Continue (FB)\n", pre_str); break;
 801ab7a:	482e      	ldr	r0, [pc, #184]	; (801ac34 <MIDIMON_Print+0x310>)
 801ab7c:	e00b      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xfc: MSG("%s MIDI Clock Stop (FC)\n", pre_str); break;
 801ab7e:	482e      	ldr	r0, [pc, #184]	; (801ac38 <MIDIMON_Print+0x314>)
 801ab80:	e009      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xfd: MSG("%s Inspecified Realtime Event (FD)\n", pre_str); break;
 801ab82:	482e      	ldr	r0, [pc, #184]	; (801ac3c <MIDIMON_Print+0x318>)
 801ab84:	e007      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xfe: if( !filter_active ) { MSG("%s Active Sense (FE)\n", pre_str); } break;
 801ab86:	4817      	ldr	r0, [pc, #92]	; (801abe4 <MIDIMON_Print+0x2c0>)
 801ab88:	7803      	ldrb	r3, [r0, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	f040 8143 	bne.w	801ae16 <MIDIMON_Print+0x4f2>
 801ab90:	482b      	ldr	r0, [pc, #172]	; (801ac40 <MIDIMON_Print+0x31c>)
 801ab92:	e000      	b.n	801ab96 <MIDIMON_Print+0x272>
        case 0xff: MSG("%s Reset (FF)\n", pre_str); break;
 801ab94:	482b      	ldr	r0, [pc, #172]	; (801ac44 <MIDIMON_Print+0x320>)
 801ab96:	a906      	add	r1, sp, #24
 801ab98:	f7f7 f83c 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 801ab9c:	e13b      	b.n	801ae16 <MIDIMON_Print+0x4f2>
        default:
	  if( package.type == 0xf )
 801ab9e:	f008 080f 	and.w	r8, r8, #15
 801aba2:	f1b8 0f0f 	cmp.w	r8, #15
	    MSG("%s Single-Byte Package: %02X\n", pre_str, package.evnt0);
 801aba6:	bf0c      	ite	eq
 801aba8:	4827      	ldreq	r0, [pc, #156]	; (801ac48 <MIDIMON_Print+0x324>)
	  else
	    MSG("%s Invalid SysEx Single-Byte Event (%02X)\n", pre_str, package.evnt0);
 801abaa:	4828      	ldrne	r0, [pc, #160]	; (801ac4c <MIDIMON_Print+0x328>)
 801abac:	a906      	add	r1, sp, #24
 801abae:	462a      	mov	r2, r5
 801abb0:	e741      	b.n	801aa36 <MIDIMON_Print+0x112>
      }
      msg_sent = 1;
      break;

    case 0x6:  // SysEx ends with following two bytes
      if( !filter_sysex_message )
 801abb2:	f1b9 0f00 	cmp.w	r9, #0
 801abb6:	f040 812e 	bne.w	801ae16 <MIDIMON_Print+0x4f2>
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
 801abba:	4825      	ldr	r0, [pc, #148]	; (801ac50 <MIDIMON_Print+0x32c>)
 801abbc:	a906      	add	r1, sp, #24
 801abbe:	462a      	mov	r2, r5
 801abc0:	e084      	b.n	801accc <MIDIMON_Print+0x3a8>
 801abc2:	bf00      	nop
 801abc4:	0801cf73 	.word	0x0801cf73
 801abc8:	0801cfc1 	.word	0x0801cfc1
 801abcc:	0801cfdf 	.word	0x0801cfdf
 801abd0:	0801cfb7 	.word	0x0801cfb7
 801abd4:	0801cfcb 	.word	0x0801cfcb
 801abd8:	0801cfd5 	.word	0x0801cfd5
 801abdc:	0801cfe9 	.word	0x0801cfe9
 801abe0:	0801d5d7 	.word	0x0801d5d7
 801abe4:	200000c9 	.word	0x200000c9
 801abe8:	0801cff5 	.word	0x0801cff5
 801abec:	0801d059 	.word	0x0801d059
 801abf0:	0801d0a4 	.word	0x0801d0a4
 801abf4:	0801d00e 	.word	0x0801d00e
 801abf8:	0801d027 	.word	0x0801d027
 801abfc:	0801d040 	.word	0x0801d040
 801ac00:	0801d072 	.word	0x0801d072
 801ac04:	0801d08b 	.word	0x0801d08b
 801ac08:	0801d0ce 	.word	0x0801d0ce
 801ac0c:	0801d0ee 	.word	0x0801d0ee
 801ac10:	0801d102 	.word	0x0801d102
 801ac14:	200009f0 	.word	0x200009f0
 801ac18:	0801d11d 	.word	0x0801d11d
 801ac1c:	0801d137 	.word	0x0801d137
 801ac20:	0801d14d 	.word	0x0801d14d
 801ac24:	0801d160 	.word	0x0801d160
 801ac28:	200009e8 	.word	0x200009e8
 801ac2c:	0801d174 	.word	0x0801d174
 801ac30:	0801d187 	.word	0x0801d187
 801ac34:	0801d1a1 	.word	0x0801d1a1
 801ac38:	0801d1be 	.word	0x0801d1be
 801ac3c:	0801d1d7 	.word	0x0801d1d7
 801ac40:	0801d1fb 	.word	0x0801d1fb
 801ac44:	0801d211 	.word	0x0801d211
 801ac48:	0801d220 	.word	0x0801d220
 801ac4c:	0801d23e 	.word	0x0801d23e
 801ac50:	0801d269 	.word	0x0801d269
 801ac54:	20000a10 	.word	0x20000a10
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac58:	230c      	movs	r3, #12
 801ac5a:	fbb4 f2f3 	udiv	r2, r4, r3
 801ac5e:	fb03 4412 	mls	r4, r3, r2, r4
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
 801ac62:	1e91      	subs	r1, r2, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac64:	f005 050f 	and.w	r5, r5, #15
 801ac68:	b2e3      	uxtb	r3, r4
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
 801ac6a:	e88d 0082 	stmia.w	sp, {r1, r7}
 801ac6e:	486c      	ldr	r0, [pc, #432]	; (801ae20 <MIDIMON_Print+0x4fc>)
 801ac70:	e018      	b.n	801aca4 <MIDIMON_Print+0x380>
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac72:	220c      	movs	r2, #12
 801ac74:	fbb4 f0f2 	udiv	r0, r4, r2
 801ac78:	fb02 4110 	mls	r1, r2, r0, r4
 801ac7c:	b2cb      	uxtb	r3, r1
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
 801ac7e:	1e81      	subs	r1, r0, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac80:	f005 050f 	and.w	r5, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
 801ac84:	e88d 0082 	stmia.w	sp, {r1, r7}
 801ac88:	4866      	ldr	r0, [pc, #408]	; (801ae24 <MIDIMON_Print+0x500>)
 801ac8a:	e00b      	b.n	801aca4 <MIDIMON_Print+0x380>
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac8c:	200c      	movs	r0, #12
 801ac8e:	fbb4 f1f0 	udiv	r1, r4, r0
 801ac92:	fb00 4411 	mls	r4, r0, r1, r4
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
 801ac96:	3902      	subs	r1, #2
 801ac98:	e88d 0082 	stmia.w	sp, {r1, r7}
 801ac9c:	4862      	ldr	r0, [pc, #392]	; (801ae28 <MIDIMON_Print+0x504>)
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 801ac9e:	f005 050f 	and.w	r5, r5, #15
 801aca2:	b2e3      	uxtb	r3, r4
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
 801aca4:	1c6a      	adds	r2, r5, #1
 801aca6:	4d61      	ldr	r5, [pc, #388]	; (801ae2c <MIDIMON_Print+0x508>)
 801aca8:	2403      	movs	r4, #3
 801acaa:	a906      	add	r1, sp, #24
 801acac:	fb04 5303 	mla	r3, r4, r3, r5
 801acb0:	e0af      	b.n	801ae12 <MIDIMON_Print+0x4ee>
      msg_sent = 1;
      break;
      
    case 0xb: // CC
      MSG("%s Chn%2d  CC#%3d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1, package.evnt2);
 801acb2:	f005 020f 	and.w	r2, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xb: // CC
      MSG("%s Chn%2d  CC#%3d  V:%3d\n",
 801acb6:	485e      	ldr	r0, [pc, #376]	; (801ae30 <MIDIMON_Print+0x50c>)
 801acb8:	9700      	str	r7, [sp, #0]
 801acba:	a906      	add	r1, sp, #24
 801acbc:	3201      	adds	r2, #1
 801acbe:	4623      	mov	r3, r4
 801acc0:	e061      	b.n	801ad86 <MIDIMON_Print+0x462>
      msg_sent = 1;
      break;
      
    case 0xc: // Program Change
      MSG("%s Chn%2d  Program Change #%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
 801acc2:	f005 030f 	and.w	r3, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xc: // Program Change
      MSG("%s Chn%2d  Program Change #%3d\n",
 801acc6:	485b      	ldr	r0, [pc, #364]	; (801ae34 <MIDIMON_Print+0x510>)
 801acc8:	a906      	add	r1, sp, #24
 801acca:	1c5a      	adds	r2, r3, #1
 801accc:	4623      	mov	r3, r4
 801acce:	e018      	b.n	801ad02 <MIDIMON_Print+0x3de>
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 801acd0:	200c      	movs	r0, #12
 801acd2:	fbb4 f1f0 	udiv	r1, r4, r0
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 801acd6:	1e8a      	subs	r2, r1, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 801acd8:	f005 050f 	and.w	r5, r5, #15
 801acdc:	fb00 4411 	mls	r4, r0, r1, r4
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 801ace0:	9200      	str	r2, [sp, #0]
 801ace2:	1c6a      	adds	r2, r5, #1
 801ace4:	4d51      	ldr	r5, [pc, #324]	; (801ae2c <MIDIMON_Print+0x508>)
 801ace6:	4854      	ldr	r0, [pc, #336]	; (801ae38 <MIDIMON_Print+0x514>)
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 801ace8:	b2e3      	uxtb	r3, r4
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 801acea:	2403      	movs	r4, #3
 801acec:	a906      	add	r1, sp, #24
 801acee:	fb04 5303 	mla	r3, r4, r3, r5
 801acf2:	e048      	b.n	801ad86 <MIDIMON_Print+0x462>
      msg_sent = 1;
      break;

    case 0xe: // PitchBend
      MSG("%s Chn%2d  PitchBend %5d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1 | ((u16)package.evnt2 << 7));
 801acf4:	f005 030f 	and.w	r3, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
      msg_sent = 1;
      break;

    case 0xe: // PitchBend
      MSG("%s Chn%2d  PitchBend %5d\n",
 801acf8:	4850      	ldr	r0, [pc, #320]	; (801ae3c <MIDIMON_Print+0x518>)
 801acfa:	1c5a      	adds	r2, r3, #1
 801acfc:	a906      	add	r1, sp, #24
 801acfe:	ea44 13c7 	orr.w	r3, r4, r7, lsl #7
 801ad02:	f7f6 ff87 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1 | ((u16)package.evnt2 << 7));
      msg_sent = 1;
      break;
 801ad06:	e086      	b.n	801ae16 <MIDIMON_Print+0x4f2>
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
	pre_str, package.type, package.evnt0, package.evnt1, package.evnt2);
  }

  if( display_midi_clk && tempo_active && tempo_port_ix >= 0 ) {
 801ad08:	494d      	ldr	r1, [pc, #308]	; (801ae40 <MIDIMON_Print+0x51c>)
 801ad0a:	780a      	ldrb	r2, [r1, #0]
 801ad0c:	2a00      	cmp	r2, #0
 801ad0e:	f000 8082 	beq.w	801ae16 <MIDIMON_Print+0x4f2>
    // calculate tempo based on last samples
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
 801ad12:	484c      	ldr	r0, [pc, #304]	; (801ae44 <MIDIMON_Print+0x520>)
 801ad14:	5d82      	ldrb	r2, [r0, r6]
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];
 801ad16:	2107      	movs	r1, #7
 801ad18:	fb01 2006 	mla	r0, r1, r6, r2
 801ad1c:	494a      	ldr	r1, [pc, #296]	; (801ae48 <MIDIMON_Print+0x524>)

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
 801ad1e:	4698      	mov	r8, r3
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];
 801ad20:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 801ad24:	f04f 0e06 	mov.w	lr, #6

    u32 filter_value = 0;
    int weight = 100;
 801ad28:	2364      	movs	r3, #100	; 0x64
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
 801ad2a:	4640      	mov	r0, r8
    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];

    // calculate tempo based on last samples
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;
 801ad2c:	2101      	movs	r1, #1

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
      if( ++pos >= NUM_TEMPO_SAMPLES )
 801ad2e:	3201      	adds	r2, #1
	pos = 0;      
 801ad30:	2a06      	cmp	r2, #6
 801ad32:	bfc8      	it	gt
 801ad34:	2200      	movgt	r2, #0

      u32 delta = tempo_samples[tempo_port_ix][pos] - sample_timestamp;
 801ad36:	f04f 0a07 	mov.w	sl, #7
 801ad3a:	fb0a 2a06 	mla	sl, sl, r6, r2
 801ad3e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801ae48 <MIDIMON_Print+0x524>
 801ad42:	f859 902a 	ldr.w	r9, [r9, sl, lsl #2]
 801ad46:	ebcc 0c09 	rsb	ip, ip, r9
#endif

      // more than 1000 mS between two ticks would result into 2.5 BPM
      // we assume that measuring results are invalid!
      if( delta >= 1000 )
	valid = 0;
 801ad4a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 801ad4e:	bf28      	it	cs
 801ad50:	2100      	movcs	r1, #0

      filter_value += weight * delta;
 801ad52:	fb03 000c 	mla	r0, r3, ip, r0
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
 801ad56:	f04f 0c64 	mov.w	ip, #100	; 0x64
      // we assume that measuring results are invalid!
      if( delta >= 1000 )
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
 801ad5a:	4498      	add	r8, r3
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
 801ad5c:	f1be 0e01 	subs.w	lr, lr, #1
      if( delta >= 1000 )
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
 801ad60:	fb0c f303 	mul.w	r3, ip, r3
 801ad64:	f04f 0c6e 	mov.w	ip, #110	; 0x6e
 801ad68:	fb93 f3fc 	sdiv	r3, r3, ip
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
 801ad6c:	d001      	beq.n	801ad72 <MIDIMON_Print+0x44e>
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
      sample_timestamp = tempo_samples[tempo_port_ix][pos];
 801ad6e:	46cc      	mov	ip, r9
 801ad70:	e7dd      	b.n	801ad2e <MIDIMON_Print+0x40a>
    }

    if( !valid ) {
 801ad72:	b959      	cbnz	r1, 801ad8c <MIDIMON_Print+0x468>
      MSG("%s MIDI Clock: %3d.%d.%d  (???.? BPM)\n", 
 801ad74:	7961      	ldrb	r1, [r4, #5]
 801ad76:	597a      	ldr	r2, [r7, r5]
 801ad78:	7923      	ldrb	r3, [r4, #4]
 801ad7a:	1c48      	adds	r0, r1, #1
 801ad7c:	9000      	str	r0, [sp, #0]
 801ad7e:	4833      	ldr	r0, [pc, #204]	; (801ae4c <MIDIMON_Print+0x528>)
 801ad80:	a906      	add	r1, sp, #24
 801ad82:	3201      	adds	r2, #1
 801ad84:	3301      	adds	r3, #1
 801ad86:	f7f6 ff45 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 801ad8a:	e044      	b.n	801ae16 <MIDIMON_Print+0x4f2>
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1);
    } else {
      float mean_value = (float)filter_value / (float)divisor;
 801ad8c:	f000 fe58 	bl	801ba40 <__aeabi_ui2f>
 801ad90:	4606      	mov	r6, r0
 801ad92:	4640      	mov	r0, r8
 801ad94:	f000 fe58 	bl	801ba48 <__aeabi_i2f>
 801ad98:	4601      	mov	r1, r0
 801ad9a:	4630      	mov	r0, r6
 801ad9c:	f000 ff5c 	bl	801bc58 <__aeabi_fdiv>
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);
 801ada0:	f000 faba 	bl	801b318 <__aeabi_f2d>
 801ada4:	2200      	movs	r2, #0
 801ada6:	4b2a      	ldr	r3, [pc, #168]	; (801ae50 <MIDIMON_Print+0x52c>)
 801ada8:	f000 fc34 	bl	801b614 <__aeabi_ddiv>
 801adac:	2200      	movs	r2, #0
 801adae:	4b29      	ldr	r3, [pc, #164]	; (801ae54 <MIDIMON_Print+0x530>)
 801adb0:	f000 fb06 	bl	801b3c0 <__aeabi_dmul>
 801adb4:	4602      	mov	r2, r0
 801adb6:	460b      	mov	r3, r1
 801adb8:	2000      	movs	r0, #0
 801adba:	4927      	ldr	r1, [pc, #156]	; (801ae58 <MIDIMON_Print+0x534>)
 801adbc:	f000 fc2a 	bl	801b614 <__aeabi_ddiv>
 801adc0:	f000 fd38 	bl	801b834 <__aeabi_d2f>

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 801adc4:	7962      	ldrb	r2, [r4, #5]
 801adc6:	7921      	ldrb	r1, [r4, #4]
 801adc8:	597d      	ldr	r5, [r7, r5]
 801adca:	1c53      	adds	r3, r2, #1
 801adcc:	9300      	str	r3, [sp, #0]
      MSG("%s MIDI Clock: %3d.%d.%d  (???.? BPM)\n", 
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1);
    } else {
      float mean_value = (float)filter_value / (float)divisor;
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);
 801adce:	4680      	mov	r8, r0

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 801add0:	1c6e      	adds	r6, r5, #1
 801add2:	1c4d      	adds	r5, r1, #1
 801add4:	f000 ffdc 	bl	801bd90 <__aeabi_f2iz>
 801add8:	9001      	str	r0, [sp, #4]
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1,
	  (int)bpm, (int)(10.0*bpm) % 10);
 801adda:	4640      	mov	r0, r8
 801addc:	f000 fa9c 	bl	801b318 <__aeabi_f2d>
 801ade0:	2200      	movs	r2, #0
 801ade2:	4b1e      	ldr	r3, [pc, #120]	; (801ae5c <MIDIMON_Print+0x538>)
 801ade4:	f000 faec 	bl	801b3c0 <__aeabi_dmul>
 801ade8:	f000 fcfc 	bl	801b7e4 <__aeabi_d2iz>
    } else {
      float mean_value = (float)filter_value / (float)divisor;
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 801adec:	210a      	movs	r1, #10
 801adee:	fb90 f2f1 	sdiv	r2, r0, r1
 801adf2:	fb02 0011 	mls	r0, r2, r1, r0
 801adf6:	9002      	str	r0, [sp, #8]
 801adf8:	a906      	add	r1, sp, #24
 801adfa:	4632      	mov	r2, r6
 801adfc:	462b      	mov	r3, r5
 801adfe:	4818      	ldr	r0, [pc, #96]	; (801ae60 <MIDIMON_Print+0x53c>)
 801ae00:	f7f6 ff08 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
 801ae04:	e007      	b.n	801ae16 <MIDIMON_Print+0x4f2>
      break;
  }

  // unspecified or invalid packages
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
 801ae06:	e88d 0090 	stmia.w	sp, {r4, r7}
 801ae0a:	4816      	ldr	r0, [pc, #88]	; (801ae64 <MIDIMON_Print+0x540>)
 801ae0c:	a906      	add	r1, sp, #24
 801ae0e:	465a      	mov	r2, fp
 801ae10:	462b      	mov	r3, r5
 801ae12:	f7f6 feff 	bl	8011c14 <MIOS32_MIDI_SendDebugMessage>
	  (int)bpm, (int)(10.0*bpm) % 10);
    }
  }

  return 0; // no error
}
 801ae16:	2000      	movs	r0, #0
 801ae18:	b017      	add	sp, #92	; 0x5c
 801ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae1e:	bf00      	nop
 801ae20:	0801d27e 	.word	0x0801d27e
 801ae24:	0801d29f 	.word	0x0801d29f
 801ae28:	0801d2c0 	.word	0x0801d2c0
 801ae2c:	0801d5b3 	.word	0x0801d5b3
 801ae30:	0801d2e8 	.word	0x0801d2e8
 801ae34:	0801d302 	.word	0x0801d302
 801ae38:	0801d322 	.word	0x0801d322
 801ae3c:	0801d346 	.word	0x0801d346
 801ae40:	20000a80 	.word	0x20000a80
 801ae44:	200009e8 	.word	0x200009e8
 801ae48:	20000a10 	.word	0x20000a10
 801ae4c:	0801d360 	.word	0x0801d360
 801ae50:	408f4000 	.word	0x408f4000
 801ae54:	40380000 	.word	0x40380000
 801ae58:	404e0000 	.word	0x404e0000
 801ae5c:	40240000 	.word	0x40240000
 801ae60:	0801d387 	.word	0x0801d387
 801ae64:	0801d3af 	.word	0x0801d3af

0801ae68 <MIDIMON_Receive>:

/////////////////////////////////////////////////////////////////////////////
// MIDI Packet Receiver function
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Receive(mios32_midi_port_t port, mios32_midi_package_t package, u8 filter_sysex_message)
{
 801ae68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if( !midimon_active )
 801ae6a:	4b08      	ldr	r3, [pc, #32]	; (801ae8c <MIDIMON_Receive+0x24>)

/////////////////////////////////////////////////////////////////////////////
// MIDI Packet Receiver function
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Receive(mios32_midi_port_t port, mios32_midi_package_t package, u8 filter_sysex_message)
{
 801ae6c:	4605      	mov	r5, r0
  if( !midimon_active )
 801ae6e:	7818      	ldrb	r0, [r3, #0]

/////////////////////////////////////////////////////////////////////////////
// MIDI Packet Receiver function
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Receive(mios32_midi_port_t port, mios32_midi_package_t package, u8 filter_sysex_message)
{
 801ae70:	460c      	mov	r4, r1
 801ae72:	4616      	mov	r6, r2
  if( !midimon_active )
 801ae74:	b148      	cbz	r0, 801ae8a <MIDIMON_Receive+0x22>
    return 0; // MIDImon mode not enabled

  return MIDIMON_Print("", port, package, MIOS32_TIMESTAMP_Get(), filter_sysex_message);
 801ae76:	f7f7 fcf3 	bl	8012860 <MIOS32_TIMESTAMP_Get>
 801ae7a:	9600      	str	r6, [sp, #0]
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	4629      	mov	r1, r5
 801ae80:	4622      	mov	r2, r4
 801ae82:	4803      	ldr	r0, [pc, #12]	; (801ae90 <MIDIMON_Receive+0x28>)
 801ae84:	f7ff fd4e 	bl	801a924 <MIDIMON_Print>
 801ae88:	e7ff      	b.n	801ae8a <MIDIMON_Receive+0x22>
}
 801ae8a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 801ae8c:	200009ec 	.word	0x200009ec
 801ae90:	0801bef9 	.word	0x0801bef9

0801ae94 <MIDIMON_TerminalHelp>:

/////////////////////////////////////////////////////////////////////////////
// Returns help page for implemented terminal commands of this module
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_TerminalHelp(void *_output_function)
{
 801ae94:	b510      	push	{r4, lr}
 801ae96:	4604      	mov	r4, r0
  void (*out)(char *format, ...) = _output_function;

  out("  set midimon <on|off>:             enables/disables the MIDI monitor");
 801ae98:	4803      	ldr	r0, [pc, #12]	; (801aea8 <MIDIMON_TerminalHelp+0x14>)
 801ae9a:	47a0      	blx	r4
  out("  set midimon_filter <on|off>:      enables/disables MIDI monitor filters");
 801ae9c:	4803      	ldr	r0, [pc, #12]	; (801aeac <MIDIMON_TerminalHelp+0x18>)
 801ae9e:	47a0      	blx	r4
  out("  set midimon_tempo <on|off>:       enables/disables the tempo display");
 801aea0:	4803      	ldr	r0, [pc, #12]	; (801aeb0 <MIDIMON_TerminalHelp+0x1c>)
 801aea2:	47a0      	blx	r4

  return 0; // no error
}
 801aea4:	2000      	movs	r0, #0
 801aea6:	bd10      	pop	{r4, pc}
 801aea8:	0801d3dd 	.word	0x0801d3dd
 801aeac:	0801d423 	.word	0x0801d423
 801aeb0:	0801d46d 	.word	0x0801d46d

0801aeb4 <MIDIMON_TerminalParseLine>:
/////////////////////////////////////////////////////////////////////////////
// Parser for a complete line
// Returns > 0 if command line matches with UIP terminal commands
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_TerminalParseLine(char *input, void *_output_function)
{
 801aeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	460c      	mov	r4, r1
  char *brkt;
  char *parameter;

  // since strtok_r works destructive (separators in *input replaced by NUL), we have to restore them
  // on an unsuccessful call (whenever this function returns < 1)
  int input_len = strlen(input);
 801aeba:	f000 ffd1 	bl	801be60 <strlen>

  if( (parameter = strtok_r(input, separators, &brkt)) ) {
 801aebe:	4932      	ldr	r1, [pc, #200]	; (801af88 <MIDIMON_TerminalParseLine+0xd4>)
  char *brkt;
  char *parameter;

  // since strtok_r works destructive (separators in *input replaced by NUL), we have to restore them
  // on an unsuccessful call (whenever this function returns < 1)
  int input_len = strlen(input);
 801aec0:	4607      	mov	r7, r0

  if( (parameter = strtok_r(input, separators, &brkt)) ) {
 801aec2:	aa01      	add	r2, sp, #4
 801aec4:	4628      	mov	r0, r5
 801aec6:	f001 f802 	bl	801bece <strtok_r>
 801aeca:	b908      	cbnz	r0, 801aed0 <MIDIMON_TerminalParseLine+0x1c>
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_TempoActiveSet(on_off);
	out("MIDI Monitor Tempo Display %s!", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");
 801aecc:	2300      	movs	r3, #0
 801aece:	e056      	b.n	801af7e <MIDIMON_TerminalParseLine+0xca>
  // since strtok_r works destructive (separators in *input replaced by NUL), we have to restore them
  // on an unsuccessful call (whenever this function returns < 1)
  int input_len = strlen(input);

  if( (parameter = strtok_r(input, separators, &brkt)) ) {
    if( strcmp(parameter, "set") == 0 ) {
 801aed0:	492e      	ldr	r1, [pc, #184]	; (801af8c <MIDIMON_TerminalParseLine+0xd8>)
 801aed2:	f000 ffba 	bl	801be4a <strcmp>
 801aed6:	2800      	cmp	r0, #0
 801aed8:	d1f8      	bne.n	801aecc <MIDIMON_TerminalParseLine+0x18>
      if( !(parameter = strtok_r(NULL, separators, &brkt)) ) {
 801aeda:	492b      	ldr	r1, [pc, #172]	; (801af88 <MIDIMON_TerminalParseLine+0xd4>)
 801aedc:	aa01      	add	r2, sp, #4
 801aede:	f000 fff6 	bl	801bece <strtok_r>
 801aee2:	4606      	mov	r6, r0
 801aee4:	b908      	cbnz	r0, 801aeea <MIDIMON_TerminalParseLine+0x36>
	out("Missing parameter after 'set'!");
 801aee6:	482a      	ldr	r0, [pc, #168]	; (801af90 <MIDIMON_TerminalParseLine+0xdc>)
 801aee8:	e00d      	b.n	801af06 <MIDIMON_TerminalParseLine+0x52>
	return 1; // command taken
      }

      if( strcmp(parameter, "midimon") == 0 ) {
 801aeea:	492a      	ldr	r1, [pc, #168]	; (801af94 <MIDIMON_TerminalParseLine+0xe0>)
 801aeec:	f000 ffad 	bl	801be4a <strcmp>
 801aef0:	b988      	cbnz	r0, 801af16 <MIDIMON_TerminalParseLine+0x62>
	s32 on_off = -1;
	if( (parameter = strtok_r(NULL, separators, &brkt)) )
 801aef2:	4925      	ldr	r1, [pc, #148]	; (801af88 <MIDIMON_TerminalParseLine+0xd4>)
 801aef4:	aa01      	add	r2, sp, #4
 801aef6:	f000 ffea 	bl	801bece <strtok_r>
 801aefa:	b118      	cbz	r0, 801af04 <MIDIMON_TerminalParseLine+0x50>
	  on_off = get_on_off(parameter);
 801aefc:	f7ff fcc2 	bl	801a884 <get_on_off>

	if( on_off < 0 ) {
 801af00:	2800      	cmp	r0, #0
 801af02:	da03      	bge.n	801af0c <MIDIMON_TerminalParseLine+0x58>
	  out("Expecting 'on' or 'off'!");
 801af04:	4824      	ldr	r0, [pc, #144]	; (801af98 <MIDIMON_TerminalParseLine+0xe4>)
 801af06:	47a0      	blx	r4
	  return 1; // command taken
 801af08:	2001      	movs	r0, #1
 801af0a:	e03b      	b.n	801af84 <MIDIMON_TerminalParseLine+0xd0>
	}

	MIDIMON_ActiveSet(on_off);
 801af0c:	b2c3      	uxtb	r3, r0
/////////////////////////////////////////////////////////////////////////////
// Get/Set functions
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_ActiveSet(u8 active)
{
  midimon_active = active;
 801af0e:	4823      	ldr	r0, [pc, #140]	; (801af9c <MIDIMON_TerminalParseLine+0xe8>)
 801af10:	7003      	strb	r3, [r0, #0]
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_ActiveSet(on_off);
	out("MIDI Monitor %s!", MIDIMON_ActiveGet() ? "enabled" : "disabled");
 801af12:	4823      	ldr	r0, [pc, #140]	; (801afa0 <MIDIMON_TerminalParseLine+0xec>)
 801af14:	e027      	b.n	801af66 <MIDIMON_TerminalParseLine+0xb2>
	return 1; // command taken

      } else if( strcmp(parameter, "midimon_filter") == 0 ) {
 801af16:	4630      	mov	r0, r6
 801af18:	4922      	ldr	r1, [pc, #136]	; (801afa4 <MIDIMON_TerminalParseLine+0xf0>)
 801af1a:	f000 ff96 	bl	801be4a <strcmp>
 801af1e:	b970      	cbnz	r0, 801af3e <MIDIMON_TerminalParseLine+0x8a>
	s32 on_off = -1;
	if( (parameter = strtok_r(NULL, separators, &brkt)) )
 801af20:	4919      	ldr	r1, [pc, #100]	; (801af88 <MIDIMON_TerminalParseLine+0xd4>)
 801af22:	aa01      	add	r2, sp, #4
 801af24:	f000 ffd3 	bl	801bece <strtok_r>
 801af28:	2800      	cmp	r0, #0
 801af2a:	d0eb      	beq.n	801af04 <MIDIMON_TerminalParseLine+0x50>
	  on_off = get_on_off(parameter);
 801af2c:	f7ff fcaa 	bl	801a884 <get_on_off>

	if( on_off < 0 ) {
 801af30:	2800      	cmp	r0, #0
 801af32:	dbe7      	blt.n	801af04 <MIDIMON_TerminalParseLine+0x50>
}


s32 MIDIMON_FilterActiveSet(u8 active)
{
  filter_active = active;
 801af34:	4a1c      	ldr	r2, [pc, #112]	; (801afa8 <MIDIMON_TerminalParseLine+0xf4>)
	if( on_off < 0 ) {
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_FilterActiveSet(on_off);
 801af36:	b2c3      	uxtb	r3, r0
}


s32 MIDIMON_FilterActiveSet(u8 active)
{
  filter_active = active;
 801af38:	7013      	strb	r3, [r2, #0]
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_FilterActiveSet(on_off);
	out("MIDI Monitor Filter %s!", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
 801af3a:	481c      	ldr	r0, [pc, #112]	; (801afac <MIDIMON_TerminalParseLine+0xf8>)
 801af3c:	e013      	b.n	801af66 <MIDIMON_TerminalParseLine+0xb2>
	return 1; // command taken

      } else if( strcmp(parameter, "midimon_tempo") == 0 ) {
 801af3e:	4630      	mov	r0, r6
 801af40:	491b      	ldr	r1, [pc, #108]	; (801afb0 <MIDIMON_TerminalParseLine+0xfc>)
 801af42:	f000 ff82 	bl	801be4a <strcmp>
 801af46:	2800      	cmp	r0, #0
 801af48:	d1c0      	bne.n	801aecc <MIDIMON_TerminalParseLine+0x18>
	s32 on_off = -1;
	if( (parameter = strtok_r(NULL, separators, &brkt)) )
 801af4a:	490f      	ldr	r1, [pc, #60]	; (801af88 <MIDIMON_TerminalParseLine+0xd4>)
 801af4c:	aa01      	add	r2, sp, #4
 801af4e:	f000 ffbe 	bl	801bece <strtok_r>
 801af52:	2800      	cmp	r0, #0
 801af54:	d0d6      	beq.n	801af04 <MIDIMON_TerminalParseLine+0x50>
	  on_off = get_on_off(parameter);
 801af56:	f7ff fc95 	bl	801a884 <get_on_off>

	if( on_off < 0 ) {
 801af5a:	2800      	cmp	r0, #0
 801af5c:	dbd2      	blt.n	801af04 <MIDIMON_TerminalParseLine+0x50>
}


s32 MIDIMON_TempoActiveSet(u8 active)
{
  tempo_active = active;
 801af5e:	4915      	ldr	r1, [pc, #84]	; (801afb4 <MIDIMON_TerminalParseLine+0x100>)
	if( on_off < 0 ) {
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_TempoActiveSet(on_off);
 801af60:	b2c3      	uxtb	r3, r0
	out("MIDI Monitor Tempo Display %s!", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");
 801af62:	4815      	ldr	r0, [pc, #84]	; (801afb8 <MIDIMON_TerminalParseLine+0x104>)
}


s32 MIDIMON_TempoActiveSet(u8 active)
{
  tempo_active = active;
 801af64:	700b      	strb	r3, [r1, #0]
	  out("Expecting 'on' or 'off'!");
	  return 1; // command taken
	}

	MIDIMON_TempoActiveSet(on_off);
	out("MIDI Monitor Tempo Display %s!", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");
 801af66:	4a15      	ldr	r2, [pc, #84]	; (801afbc <MIDIMON_TerminalParseLine+0x108>)
 801af68:	4915      	ldr	r1, [pc, #84]	; (801afc0 <MIDIMON_TerminalParseLine+0x10c>)
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	bf18      	it	ne
 801af6e:	4611      	movne	r1, r2
 801af70:	47a0      	blx	r4
 801af72:	e7c9      	b.n	801af08 <MIDIMON_TerminalParseLine+0x54>

  // restore input line (replace NUL characters by spaces)
  int i;
  char *input_ptr = input;
  for(i=0; i<input_len; ++i, ++input_ptr)
    if( !*input_ptr )
 801af74:	5cea      	ldrb	r2, [r5, r3]
 801af76:	b90a      	cbnz	r2, 801af7c <MIDIMON_TerminalParseLine+0xc8>
      *input_ptr = ' ';
 801af78:	2020      	movs	r0, #32
 801af7a:	54e8      	strb	r0, [r5, r3]
  }

  // restore input line (replace NUL characters by spaces)
  int i;
  char *input_ptr = input;
  for(i=0; i<input_len; ++i, ++input_ptr)
 801af7c:	3301      	adds	r3, #1
 801af7e:	42bb      	cmp	r3, r7
 801af80:	dbf8      	blt.n	801af74 <MIDIMON_TerminalParseLine+0xc0>
    if( !*input_ptr )
      *input_ptr = ' ';

  return 0; // command not taken
 801af82:	2000      	movs	r0, #0
}
 801af84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801af86:	bf00      	nop
 801af88:	0801bef7 	.word	0x0801bef7
 801af8c:	0801c00b 	.word	0x0801c00b
 801af90:	0801d4c5 	.word	0x0801d4c5
 801af94:	0801d4e4 	.word	0x0801d4e4
 801af98:	0801d4ec 	.word	0x0801d4ec
 801af9c:	200009ec 	.word	0x200009ec
 801afa0:	0801d505 	.word	0x0801d505
 801afa4:	0801d516 	.word	0x0801d516
 801afa8:	200000c9 	.word	0x200000c9
 801afac:	0801d525 	.word	0x0801d525
 801afb0:	0801d53d 	.word	0x0801d53d
 801afb4:	20000a80 	.word	0x20000a80
 801afb8:	0801d54b 	.word	0x0801d54b
 801afbc:	0801d4b4 	.word	0x0801d4b4
 801afc0:	0801d4bc 	.word	0x0801d4bc

0801afc4 <MIDIMON_TerminalPrintConfig>:

/////////////////////////////////////////////////////////////////////////////
// Keyboard Configuration (can also be called from external)
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_TerminalPrintConfig(void *_output_function)
{
 801afc4:	b570      	push	{r4, r5, r6, lr}
  void (*out)(char *format, ...) = _output_function;

  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
 801afc6:	4b0e      	ldr	r3, [pc, #56]	; (801b000 <MIDIMON_TerminalPrintConfig+0x3c>)
 801afc8:	4d0e      	ldr	r5, [pc, #56]	; (801b004 <MIDIMON_TerminalPrintConfig+0x40>)
 801afca:	7819      	ldrb	r1, [r3, #0]
 801afcc:	4c0e      	ldr	r4, [pc, #56]	; (801b008 <MIDIMON_TerminalPrintConfig+0x44>)

/////////////////////////////////////////////////////////////////////////////
// Keyboard Configuration (can also be called from external)
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_TerminalPrintConfig(void *_output_function)
{
 801afce:	4606      	mov	r6, r0
  void (*out)(char *format, ...) = _output_function;

  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
 801afd0:	2900      	cmp	r1, #0
 801afd2:	bf0c      	ite	eq
 801afd4:	4629      	moveq	r1, r5
 801afd6:	4621      	movne	r1, r4
 801afd8:	480c      	ldr	r0, [pc, #48]	; (801b00c <MIDIMON_TerminalPrintConfig+0x48>)
 801afda:	47b0      	blx	r6
  out("MIDI Monitor Filters: %s", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
 801afdc:	480c      	ldr	r0, [pc, #48]	; (801b010 <MIDIMON_TerminalPrintConfig+0x4c>)
 801afde:	7802      	ldrb	r2, [r0, #0]
 801afe0:	480c      	ldr	r0, [pc, #48]	; (801b014 <MIDIMON_TerminalPrintConfig+0x50>)
 801afe2:	2a00      	cmp	r2, #0
 801afe4:	bf0c      	ite	eq
 801afe6:	4629      	moveq	r1, r5
 801afe8:	4621      	movne	r1, r4
 801afea:	47b0      	blx	r6
  out("MIDI Monitor Tempo Display: %s", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");
 801afec:	4b0a      	ldr	r3, [pc, #40]	; (801b018 <MIDIMON_TerminalPrintConfig+0x54>)
 801afee:	480b      	ldr	r0, [pc, #44]	; (801b01c <MIDIMON_TerminalPrintConfig+0x58>)
 801aff0:	7819      	ldrb	r1, [r3, #0]
 801aff2:	2900      	cmp	r1, #0
 801aff4:	bf0c      	ite	eq
 801aff6:	4629      	moveq	r1, r5
 801aff8:	4621      	movne	r1, r4
 801affa:	47b0      	blx	r6

  return 0; // no error
}
 801affc:	2000      	movs	r0, #0
 801affe:	bd70      	pop	{r4, r5, r6, pc}
 801b000:	200009ec 	.word	0x200009ec
 801b004:	0801d4bc 	.word	0x0801d4bc
 801b008:	0801d4b4 	.word	0x0801d4b4
 801b00c:	0801d56a 	.word	0x0801d56a
 801b010:	200000c9 	.word	0x200000c9
 801b014:	0801d57b 	.word	0x0801d57b
 801b018:	20000a80 	.word	0x20000a80
 801b01c:	0801d594 	.word	0x0801d594

0801b020 <__aeabi_llsr>:
 801b020:	40d0      	lsrs	r0, r2
 801b022:	1c0b      	adds	r3, r1, #0
 801b024:	40d1      	lsrs	r1, r2
 801b026:	469c      	mov	ip, r3
 801b028:	3a20      	subs	r2, #32
 801b02a:	40d3      	lsrs	r3, r2
 801b02c:	4318      	orrs	r0, r3
 801b02e:	4252      	negs	r2, r2
 801b030:	4663      	mov	r3, ip
 801b032:	4093      	lsls	r3, r2
 801b034:	4318      	orrs	r0, r3
 801b036:	4770      	bx	lr

0801b038 <__aeabi_llsl>:
 801b038:	4091      	lsls	r1, r2
 801b03a:	1c03      	adds	r3, r0, #0
 801b03c:	4090      	lsls	r0, r2
 801b03e:	469c      	mov	ip, r3
 801b040:	3a20      	subs	r2, #32
 801b042:	4093      	lsls	r3, r2
 801b044:	4319      	orrs	r1, r3
 801b046:	4252      	negs	r2, r2
 801b048:	4663      	mov	r3, ip
 801b04a:	40d3      	lsrs	r3, r2
 801b04c:	4319      	orrs	r1, r3
 801b04e:	4770      	bx	lr

0801b050 <__aeabi_drsub>:
 801b050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801b054:	e002      	b.n	801b05c <__adddf3>
 801b056:	bf00      	nop

0801b058 <__aeabi_dsub>:
 801b058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801b05c <__adddf3>:
 801b05c:	b530      	push	{r4, r5, lr}
 801b05e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801b062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801b066:	ea94 0f05 	teq	r4, r5
 801b06a:	bf08      	it	eq
 801b06c:	ea90 0f02 	teqeq	r0, r2
 801b070:	bf1f      	itttt	ne
 801b072:	ea54 0c00 	orrsne.w	ip, r4, r0
 801b076:	ea55 0c02 	orrsne.w	ip, r5, r2
 801b07a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801b07e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801b082:	f000 80e2 	beq.w	801b24a <__adddf3+0x1ee>
 801b086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801b08a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801b08e:	bfb8      	it	lt
 801b090:	426d      	neglt	r5, r5
 801b092:	dd0c      	ble.n	801b0ae <__adddf3+0x52>
 801b094:	442c      	add	r4, r5
 801b096:	ea80 0202 	eor.w	r2, r0, r2
 801b09a:	ea81 0303 	eor.w	r3, r1, r3
 801b09e:	ea82 0000 	eor.w	r0, r2, r0
 801b0a2:	ea83 0101 	eor.w	r1, r3, r1
 801b0a6:	ea80 0202 	eor.w	r2, r0, r2
 801b0aa:	ea81 0303 	eor.w	r3, r1, r3
 801b0ae:	2d36      	cmp	r5, #54	; 0x36
 801b0b0:	bf88      	it	hi
 801b0b2:	bd30      	pophi	{r4, r5, pc}
 801b0b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801b0b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801b0bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 801b0c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801b0c4:	d002      	beq.n	801b0cc <__adddf3+0x70>
 801b0c6:	4240      	negs	r0, r0
 801b0c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b0cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 801b0d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801b0d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801b0d8:	d002      	beq.n	801b0e0 <__adddf3+0x84>
 801b0da:	4252      	negs	r2, r2
 801b0dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801b0e0:	ea94 0f05 	teq	r4, r5
 801b0e4:	f000 80a7 	beq.w	801b236 <__adddf3+0x1da>
 801b0e8:	f1a4 0401 	sub.w	r4, r4, #1
 801b0ec:	f1d5 0e20 	rsbs	lr, r5, #32
 801b0f0:	db0d      	blt.n	801b10e <__adddf3+0xb2>
 801b0f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 801b0f6:	fa22 f205 	lsr.w	r2, r2, r5
 801b0fa:	1880      	adds	r0, r0, r2
 801b0fc:	f141 0100 	adc.w	r1, r1, #0
 801b100:	fa03 f20e 	lsl.w	r2, r3, lr
 801b104:	1880      	adds	r0, r0, r2
 801b106:	fa43 f305 	asr.w	r3, r3, r5
 801b10a:	4159      	adcs	r1, r3
 801b10c:	e00e      	b.n	801b12c <__adddf3+0xd0>
 801b10e:	f1a5 0520 	sub.w	r5, r5, #32
 801b112:	f10e 0e20 	add.w	lr, lr, #32
 801b116:	2a01      	cmp	r2, #1
 801b118:	fa03 fc0e 	lsl.w	ip, r3, lr
 801b11c:	bf28      	it	cs
 801b11e:	f04c 0c02 	orrcs.w	ip, ip, #2
 801b122:	fa43 f305 	asr.w	r3, r3, r5
 801b126:	18c0      	adds	r0, r0, r3
 801b128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801b12c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b130:	d507      	bpl.n	801b142 <__adddf3+0xe6>
 801b132:	f04f 0e00 	mov.w	lr, #0
 801b136:	f1dc 0c00 	rsbs	ip, ip, #0
 801b13a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801b13e:	eb6e 0101 	sbc.w	r1, lr, r1
 801b142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801b146:	d31b      	bcc.n	801b180 <__adddf3+0x124>
 801b148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801b14c:	d30c      	bcc.n	801b168 <__adddf3+0x10c>
 801b14e:	0849      	lsrs	r1, r1, #1
 801b150:	ea5f 0030 	movs.w	r0, r0, rrx
 801b154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801b158:	f104 0401 	add.w	r4, r4, #1
 801b15c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 801b160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801b164:	f080 809a 	bcs.w	801b29c <__adddf3+0x240>
 801b168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801b16c:	bf08      	it	eq
 801b16e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801b172:	f150 0000 	adcs.w	r0, r0, #0
 801b176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801b17a:	ea41 0105 	orr.w	r1, r1, r5
 801b17e:	bd30      	pop	{r4, r5, pc}
 801b180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801b184:	4140      	adcs	r0, r0
 801b186:	eb41 0101 	adc.w	r1, r1, r1
 801b18a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b18e:	f1a4 0401 	sub.w	r4, r4, #1
 801b192:	d1e9      	bne.n	801b168 <__adddf3+0x10c>
 801b194:	f091 0f00 	teq	r1, #0
 801b198:	bf04      	itt	eq
 801b19a:	4601      	moveq	r1, r0
 801b19c:	2000      	moveq	r0, #0
 801b19e:	fab1 f381 	clz	r3, r1
 801b1a2:	bf08      	it	eq
 801b1a4:	3320      	addeq	r3, #32
 801b1a6:	f1a3 030b 	sub.w	r3, r3, #11
 801b1aa:	f1b3 0220 	subs.w	r2, r3, #32
 801b1ae:	da0c      	bge.n	801b1ca <__adddf3+0x16e>
 801b1b0:	320c      	adds	r2, #12
 801b1b2:	dd08      	ble.n	801b1c6 <__adddf3+0x16a>
 801b1b4:	f102 0c14 	add.w	ip, r2, #20
 801b1b8:	f1c2 020c 	rsb	r2, r2, #12
 801b1bc:	fa01 f00c 	lsl.w	r0, r1, ip
 801b1c0:	fa21 f102 	lsr.w	r1, r1, r2
 801b1c4:	e00c      	b.n	801b1e0 <__adddf3+0x184>
 801b1c6:	f102 0214 	add.w	r2, r2, #20
 801b1ca:	bfd8      	it	le
 801b1cc:	f1c2 0c20 	rsble	ip, r2, #32
 801b1d0:	fa01 f102 	lsl.w	r1, r1, r2
 801b1d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 801b1d8:	bfdc      	itt	le
 801b1da:	ea41 010c 	orrle.w	r1, r1, ip
 801b1de:	4090      	lslle	r0, r2
 801b1e0:	1ae4      	subs	r4, r4, r3
 801b1e2:	bfa2      	ittt	ge
 801b1e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801b1e8:	4329      	orrge	r1, r5
 801b1ea:	bd30      	popge	{r4, r5, pc}
 801b1ec:	ea6f 0404 	mvn.w	r4, r4
 801b1f0:	3c1f      	subs	r4, #31
 801b1f2:	da1c      	bge.n	801b22e <__adddf3+0x1d2>
 801b1f4:	340c      	adds	r4, #12
 801b1f6:	dc0e      	bgt.n	801b216 <__adddf3+0x1ba>
 801b1f8:	f104 0414 	add.w	r4, r4, #20
 801b1fc:	f1c4 0220 	rsb	r2, r4, #32
 801b200:	fa20 f004 	lsr.w	r0, r0, r4
 801b204:	fa01 f302 	lsl.w	r3, r1, r2
 801b208:	ea40 0003 	orr.w	r0, r0, r3
 801b20c:	fa21 f304 	lsr.w	r3, r1, r4
 801b210:	ea45 0103 	orr.w	r1, r5, r3
 801b214:	bd30      	pop	{r4, r5, pc}
 801b216:	f1c4 040c 	rsb	r4, r4, #12
 801b21a:	f1c4 0220 	rsb	r2, r4, #32
 801b21e:	fa20 f002 	lsr.w	r0, r0, r2
 801b222:	fa01 f304 	lsl.w	r3, r1, r4
 801b226:	ea40 0003 	orr.w	r0, r0, r3
 801b22a:	4629      	mov	r1, r5
 801b22c:	bd30      	pop	{r4, r5, pc}
 801b22e:	fa21 f004 	lsr.w	r0, r1, r4
 801b232:	4629      	mov	r1, r5
 801b234:	bd30      	pop	{r4, r5, pc}
 801b236:	f094 0f00 	teq	r4, #0
 801b23a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801b23e:	bf06      	itte	eq
 801b240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801b244:	3401      	addeq	r4, #1
 801b246:	3d01      	subne	r5, #1
 801b248:	e74e      	b.n	801b0e8 <__adddf3+0x8c>
 801b24a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801b24e:	bf18      	it	ne
 801b250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801b254:	d029      	beq.n	801b2aa <__adddf3+0x24e>
 801b256:	ea94 0f05 	teq	r4, r5
 801b25a:	bf08      	it	eq
 801b25c:	ea90 0f02 	teqeq	r0, r2
 801b260:	d005      	beq.n	801b26e <__adddf3+0x212>
 801b262:	ea54 0c00 	orrs.w	ip, r4, r0
 801b266:	bf04      	itt	eq
 801b268:	4619      	moveq	r1, r3
 801b26a:	4610      	moveq	r0, r2
 801b26c:	bd30      	pop	{r4, r5, pc}
 801b26e:	ea91 0f03 	teq	r1, r3
 801b272:	bf1e      	ittt	ne
 801b274:	2100      	movne	r1, #0
 801b276:	2000      	movne	r0, #0
 801b278:	bd30      	popne	{r4, r5, pc}
 801b27a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801b27e:	d105      	bne.n	801b28c <__adddf3+0x230>
 801b280:	0040      	lsls	r0, r0, #1
 801b282:	4149      	adcs	r1, r1
 801b284:	bf28      	it	cs
 801b286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801b28a:	bd30      	pop	{r4, r5, pc}
 801b28c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 801b290:	bf3c      	itt	cc
 801b292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801b296:	bd30      	popcc	{r4, r5, pc}
 801b298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b29c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 801b2a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b2a4:	f04f 0000 	mov.w	r0, #0
 801b2a8:	bd30      	pop	{r4, r5, pc}
 801b2aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801b2ae:	bf1a      	itte	ne
 801b2b0:	4619      	movne	r1, r3
 801b2b2:	4610      	movne	r0, r2
 801b2b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801b2b8:	bf1c      	itt	ne
 801b2ba:	460b      	movne	r3, r1
 801b2bc:	4602      	movne	r2, r0
 801b2be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801b2c2:	bf06      	itte	eq
 801b2c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801b2c8:	ea91 0f03 	teqeq	r1, r3
 801b2cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 801b2d0:	bd30      	pop	{r4, r5, pc}
 801b2d2:	bf00      	nop

0801b2d4 <__aeabi_ui2d>:
 801b2d4:	f090 0f00 	teq	r0, #0
 801b2d8:	bf04      	itt	eq
 801b2da:	2100      	moveq	r1, #0
 801b2dc:	4770      	bxeq	lr
 801b2de:	b530      	push	{r4, r5, lr}
 801b2e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b2e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b2e8:	f04f 0500 	mov.w	r5, #0
 801b2ec:	f04f 0100 	mov.w	r1, #0
 801b2f0:	e750      	b.n	801b194 <__adddf3+0x138>
 801b2f2:	bf00      	nop

0801b2f4 <__aeabi_i2d>:
 801b2f4:	f090 0f00 	teq	r0, #0
 801b2f8:	bf04      	itt	eq
 801b2fa:	2100      	moveq	r1, #0
 801b2fc:	4770      	bxeq	lr
 801b2fe:	b530      	push	{r4, r5, lr}
 801b300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801b30c:	bf48      	it	mi
 801b30e:	4240      	negmi	r0, r0
 801b310:	f04f 0100 	mov.w	r1, #0
 801b314:	e73e      	b.n	801b194 <__adddf3+0x138>
 801b316:	bf00      	nop

0801b318 <__aeabi_f2d>:
 801b318:	0042      	lsls	r2, r0, #1
 801b31a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801b31e:	ea4f 0131 	mov.w	r1, r1, rrx
 801b322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801b326:	bf1f      	itttt	ne
 801b328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801b32c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801b330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801b334:	4770      	bxne	lr
 801b336:	f092 0f00 	teq	r2, #0
 801b33a:	bf14      	ite	ne
 801b33c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801b340:	4770      	bxeq	lr
 801b342:	b530      	push	{r4, r5, lr}
 801b344:	f44f 7460 	mov.w	r4, #896	; 0x380
 801b348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b34c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b350:	e720      	b.n	801b194 <__adddf3+0x138>
 801b352:	bf00      	nop

0801b354 <__aeabi_ul2d>:
 801b354:	ea50 0201 	orrs.w	r2, r0, r1
 801b358:	bf08      	it	eq
 801b35a:	4770      	bxeq	lr
 801b35c:	b530      	push	{r4, r5, lr}
 801b35e:	f04f 0500 	mov.w	r5, #0
 801b362:	e00a      	b.n	801b37a <__aeabi_l2d+0x16>

0801b364 <__aeabi_l2d>:
 801b364:	ea50 0201 	orrs.w	r2, r0, r1
 801b368:	bf08      	it	eq
 801b36a:	4770      	bxeq	lr
 801b36c:	b530      	push	{r4, r5, lr}
 801b36e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801b372:	d502      	bpl.n	801b37a <__aeabi_l2d+0x16>
 801b374:	4240      	negs	r0, r0
 801b376:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b37a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801b37e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801b382:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801b386:	f43f aedc 	beq.w	801b142 <__adddf3+0xe6>
 801b38a:	f04f 0203 	mov.w	r2, #3
 801b38e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801b392:	bf18      	it	ne
 801b394:	3203      	addne	r2, #3
 801b396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801b39a:	bf18      	it	ne
 801b39c:	3203      	addne	r2, #3
 801b39e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801b3a2:	f1c2 0320 	rsb	r3, r2, #32
 801b3a6:	fa00 fc03 	lsl.w	ip, r0, r3
 801b3aa:	fa20 f002 	lsr.w	r0, r0, r2
 801b3ae:	fa01 fe03 	lsl.w	lr, r1, r3
 801b3b2:	ea40 000e 	orr.w	r0, r0, lr
 801b3b6:	fa21 f102 	lsr.w	r1, r1, r2
 801b3ba:	4414      	add	r4, r2
 801b3bc:	e6c1      	b.n	801b142 <__adddf3+0xe6>
 801b3be:	bf00      	nop

0801b3c0 <__aeabi_dmul>:
 801b3c0:	b570      	push	{r4, r5, r6, lr}
 801b3c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b3c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801b3ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801b3ce:	bf1d      	ittte	ne
 801b3d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801b3d4:	ea94 0f0c 	teqne	r4, ip
 801b3d8:	ea95 0f0c 	teqne	r5, ip
 801b3dc:	f000 f8de 	bleq	801b59c <__aeabi_dmul+0x1dc>
 801b3e0:	442c      	add	r4, r5
 801b3e2:	ea81 0603 	eor.w	r6, r1, r3
 801b3e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 801b3ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801b3ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801b3f2:	bf18      	it	ne
 801b3f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 801b3f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b3fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b400:	d038      	beq.n	801b474 <__aeabi_dmul+0xb4>
 801b402:	fba0 ce02 	umull	ip, lr, r0, r2
 801b406:	f04f 0500 	mov.w	r5, #0
 801b40a:	fbe1 e502 	umlal	lr, r5, r1, r2
 801b40e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801b412:	fbe0 e503 	umlal	lr, r5, r0, r3
 801b416:	f04f 0600 	mov.w	r6, #0
 801b41a:	fbe1 5603 	umlal	r5, r6, r1, r3
 801b41e:	f09c 0f00 	teq	ip, #0
 801b422:	bf18      	it	ne
 801b424:	f04e 0e01 	orrne.w	lr, lr, #1
 801b428:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 801b42c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801b430:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801b434:	d204      	bcs.n	801b440 <__aeabi_dmul+0x80>
 801b436:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801b43a:	416d      	adcs	r5, r5
 801b43c:	eb46 0606 	adc.w	r6, r6, r6
 801b440:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801b444:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 801b448:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801b44c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801b450:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801b454:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801b458:	bf88      	it	hi
 801b45a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801b45e:	d81e      	bhi.n	801b49e <__aeabi_dmul+0xde>
 801b460:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801b464:	bf08      	it	eq
 801b466:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801b46a:	f150 0000 	adcs.w	r0, r0, #0
 801b46e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801b472:	bd70      	pop	{r4, r5, r6, pc}
 801b474:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 801b478:	ea46 0101 	orr.w	r1, r6, r1
 801b47c:	ea40 0002 	orr.w	r0, r0, r2
 801b480:	ea81 0103 	eor.w	r1, r1, r3
 801b484:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 801b488:	bfc2      	ittt	gt
 801b48a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801b48e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801b492:	bd70      	popgt	{r4, r5, r6, pc}
 801b494:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b498:	f04f 0e00 	mov.w	lr, #0
 801b49c:	3c01      	subs	r4, #1
 801b49e:	f300 80ab 	bgt.w	801b5f8 <__aeabi_dmul+0x238>
 801b4a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801b4a6:	bfde      	ittt	le
 801b4a8:	2000      	movle	r0, #0
 801b4aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801b4ae:	bd70      	pople	{r4, r5, r6, pc}
 801b4b0:	f1c4 0400 	rsb	r4, r4, #0
 801b4b4:	3c20      	subs	r4, #32
 801b4b6:	da35      	bge.n	801b524 <__aeabi_dmul+0x164>
 801b4b8:	340c      	adds	r4, #12
 801b4ba:	dc1b      	bgt.n	801b4f4 <__aeabi_dmul+0x134>
 801b4bc:	f104 0414 	add.w	r4, r4, #20
 801b4c0:	f1c4 0520 	rsb	r5, r4, #32
 801b4c4:	fa00 f305 	lsl.w	r3, r0, r5
 801b4c8:	fa20 f004 	lsr.w	r0, r0, r4
 801b4cc:	fa01 f205 	lsl.w	r2, r1, r5
 801b4d0:	ea40 0002 	orr.w	r0, r0, r2
 801b4d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 801b4d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b4dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801b4e0:	fa21 f604 	lsr.w	r6, r1, r4
 801b4e4:	eb42 0106 	adc.w	r1, r2, r6
 801b4e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b4ec:	bf08      	it	eq
 801b4ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b4f2:	bd70      	pop	{r4, r5, r6, pc}
 801b4f4:	f1c4 040c 	rsb	r4, r4, #12
 801b4f8:	f1c4 0520 	rsb	r5, r4, #32
 801b4fc:	fa00 f304 	lsl.w	r3, r0, r4
 801b500:	fa20 f005 	lsr.w	r0, r0, r5
 801b504:	fa01 f204 	lsl.w	r2, r1, r4
 801b508:	ea40 0002 	orr.w	r0, r0, r2
 801b50c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801b514:	f141 0100 	adc.w	r1, r1, #0
 801b518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b51c:	bf08      	it	eq
 801b51e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b522:	bd70      	pop	{r4, r5, r6, pc}
 801b524:	f1c4 0520 	rsb	r5, r4, #32
 801b528:	fa00 f205 	lsl.w	r2, r0, r5
 801b52c:	ea4e 0e02 	orr.w	lr, lr, r2
 801b530:	fa20 f304 	lsr.w	r3, r0, r4
 801b534:	fa01 f205 	lsl.w	r2, r1, r5
 801b538:	ea43 0302 	orr.w	r3, r3, r2
 801b53c:	fa21 f004 	lsr.w	r0, r1, r4
 801b540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b544:	fa21 f204 	lsr.w	r2, r1, r4
 801b548:	ea20 0002 	bic.w	r0, r0, r2
 801b54c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801b550:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801b554:	bf08      	it	eq
 801b556:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801b55a:	bd70      	pop	{r4, r5, r6, pc}
 801b55c:	f094 0f00 	teq	r4, #0
 801b560:	d10f      	bne.n	801b582 <__aeabi_dmul+0x1c2>
 801b562:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801b566:	0040      	lsls	r0, r0, #1
 801b568:	eb41 0101 	adc.w	r1, r1, r1
 801b56c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b570:	bf08      	it	eq
 801b572:	3c01      	subeq	r4, #1
 801b574:	d0f7      	beq.n	801b566 <__aeabi_dmul+0x1a6>
 801b576:	ea41 0106 	orr.w	r1, r1, r6
 801b57a:	f095 0f00 	teq	r5, #0
 801b57e:	bf18      	it	ne
 801b580:	4770      	bxne	lr
 801b582:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801b586:	0052      	lsls	r2, r2, #1
 801b588:	eb43 0303 	adc.w	r3, r3, r3
 801b58c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801b590:	bf08      	it	eq
 801b592:	3d01      	subeq	r5, #1
 801b594:	d0f7      	beq.n	801b586 <__aeabi_dmul+0x1c6>
 801b596:	ea43 0306 	orr.w	r3, r3, r6
 801b59a:	4770      	bx	lr
 801b59c:	ea94 0f0c 	teq	r4, ip
 801b5a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801b5a4:	bf18      	it	ne
 801b5a6:	ea95 0f0c 	teqne	r5, ip
 801b5aa:	d00c      	beq.n	801b5c6 <__aeabi_dmul+0x206>
 801b5ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b5b0:	bf18      	it	ne
 801b5b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b5b6:	d1d1      	bne.n	801b55c <__aeabi_dmul+0x19c>
 801b5b8:	ea81 0103 	eor.w	r1, r1, r3
 801b5bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b5c0:	f04f 0000 	mov.w	r0, #0
 801b5c4:	bd70      	pop	{r4, r5, r6, pc}
 801b5c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b5ca:	bf06      	itte	eq
 801b5cc:	4610      	moveq	r0, r2
 801b5ce:	4619      	moveq	r1, r3
 801b5d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b5d4:	d019      	beq.n	801b60a <__aeabi_dmul+0x24a>
 801b5d6:	ea94 0f0c 	teq	r4, ip
 801b5da:	d102      	bne.n	801b5e2 <__aeabi_dmul+0x222>
 801b5dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801b5e0:	d113      	bne.n	801b60a <__aeabi_dmul+0x24a>
 801b5e2:	ea95 0f0c 	teq	r5, ip
 801b5e6:	d105      	bne.n	801b5f4 <__aeabi_dmul+0x234>
 801b5e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 801b5ec:	bf1c      	itt	ne
 801b5ee:	4610      	movne	r0, r2
 801b5f0:	4619      	movne	r1, r3
 801b5f2:	d10a      	bne.n	801b60a <__aeabi_dmul+0x24a>
 801b5f4:	ea81 0103 	eor.w	r1, r1, r3
 801b5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801b5fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801b600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b604:	f04f 0000 	mov.w	r0, #0
 801b608:	bd70      	pop	{r4, r5, r6, pc}
 801b60a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801b60e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801b612:	bd70      	pop	{r4, r5, r6, pc}

0801b614 <__aeabi_ddiv>:
 801b614:	b570      	push	{r4, r5, r6, lr}
 801b616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b61a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801b61e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801b622:	bf1d      	ittte	ne
 801b624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801b628:	ea94 0f0c 	teqne	r4, ip
 801b62c:	ea95 0f0c 	teqne	r5, ip
 801b630:	f000 f8a7 	bleq	801b782 <__aeabi_ddiv+0x16e>
 801b634:	eba4 0405 	sub.w	r4, r4, r5
 801b638:	ea81 0e03 	eor.w	lr, r1, r3
 801b63c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801b640:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801b644:	f000 8088 	beq.w	801b758 <__aeabi_ddiv+0x144>
 801b648:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801b64c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801b650:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801b654:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801b658:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801b65c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 801b660:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801b664:	ea4f 2600 	mov.w	r6, r0, lsl #8
 801b668:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 801b66c:	429d      	cmp	r5, r3
 801b66e:	bf08      	it	eq
 801b670:	4296      	cmpeq	r6, r2
 801b672:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801b676:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801b67a:	d202      	bcs.n	801b682 <__aeabi_ddiv+0x6e>
 801b67c:	085b      	lsrs	r3, r3, #1
 801b67e:	ea4f 0232 	mov.w	r2, r2, rrx
 801b682:	1ab6      	subs	r6, r6, r2
 801b684:	eb65 0503 	sbc.w	r5, r5, r3
 801b688:	085b      	lsrs	r3, r3, #1
 801b68a:	ea4f 0232 	mov.w	r2, r2, rrx
 801b68e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801b692:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801b696:	ebb6 0e02 	subs.w	lr, r6, r2
 801b69a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b69e:	bf22      	ittt	cs
 801b6a0:	1ab6      	subcs	r6, r6, r2
 801b6a2:	4675      	movcs	r5, lr
 801b6a4:	ea40 000c 	orrcs.w	r0, r0, ip
 801b6a8:	085b      	lsrs	r3, r3, #1
 801b6aa:	ea4f 0232 	mov.w	r2, r2, rrx
 801b6ae:	ebb6 0e02 	subs.w	lr, r6, r2
 801b6b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b6b6:	bf22      	ittt	cs
 801b6b8:	1ab6      	subcs	r6, r6, r2
 801b6ba:	4675      	movcs	r5, lr
 801b6bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801b6c0:	085b      	lsrs	r3, r3, #1
 801b6c2:	ea4f 0232 	mov.w	r2, r2, rrx
 801b6c6:	ebb6 0e02 	subs.w	lr, r6, r2
 801b6ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b6ce:	bf22      	ittt	cs
 801b6d0:	1ab6      	subcs	r6, r6, r2
 801b6d2:	4675      	movcs	r5, lr
 801b6d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801b6d8:	085b      	lsrs	r3, r3, #1
 801b6da:	ea4f 0232 	mov.w	r2, r2, rrx
 801b6de:	ebb6 0e02 	subs.w	lr, r6, r2
 801b6e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 801b6e6:	bf22      	ittt	cs
 801b6e8:	1ab6      	subcs	r6, r6, r2
 801b6ea:	4675      	movcs	r5, lr
 801b6ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801b6f0:	ea55 0e06 	orrs.w	lr, r5, r6
 801b6f4:	d018      	beq.n	801b728 <__aeabi_ddiv+0x114>
 801b6f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801b6fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801b6fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801b702:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801b706:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 801b70a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b70e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801b712:	d1c0      	bne.n	801b696 <__aeabi_ddiv+0x82>
 801b714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b718:	d10b      	bne.n	801b732 <__aeabi_ddiv+0x11e>
 801b71a:	ea41 0100 	orr.w	r1, r1, r0
 801b71e:	f04f 0000 	mov.w	r0, #0
 801b722:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801b726:	e7b6      	b.n	801b696 <__aeabi_ddiv+0x82>
 801b728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801b72c:	bf04      	itt	eq
 801b72e:	4301      	orreq	r1, r0
 801b730:	2000      	moveq	r0, #0
 801b732:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801b736:	bf88      	it	hi
 801b738:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801b73c:	f63f aeaf 	bhi.w	801b49e <__aeabi_dmul+0xde>
 801b740:	ebb5 0c03 	subs.w	ip, r5, r3
 801b744:	bf04      	itt	eq
 801b746:	ebb6 0c02 	subseq.w	ip, r6, r2
 801b74a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801b74e:	f150 0000 	adcs.w	r0, r0, #0
 801b752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801b756:	bd70      	pop	{r4, r5, r6, pc}
 801b758:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 801b75c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 801b760:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801b764:	bfc2      	ittt	gt
 801b766:	ebd4 050c 	rsbsgt	r5, r4, ip
 801b76a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801b76e:	bd70      	popgt	{r4, r5, r6, pc}
 801b770:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b774:	f04f 0e00 	mov.w	lr, #0
 801b778:	3c01      	subs	r4, #1
 801b77a:	e690      	b.n	801b49e <__aeabi_dmul+0xde>
 801b77c:	ea45 0e06 	orr.w	lr, r5, r6
 801b780:	e68d      	b.n	801b49e <__aeabi_dmul+0xde>
 801b782:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801b786:	ea94 0f0c 	teq	r4, ip
 801b78a:	bf08      	it	eq
 801b78c:	ea95 0f0c 	teqeq	r5, ip
 801b790:	f43f af3b 	beq.w	801b60a <__aeabi_dmul+0x24a>
 801b794:	ea94 0f0c 	teq	r4, ip
 801b798:	d10a      	bne.n	801b7b0 <__aeabi_ddiv+0x19c>
 801b79a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801b79e:	f47f af34 	bne.w	801b60a <__aeabi_dmul+0x24a>
 801b7a2:	ea95 0f0c 	teq	r5, ip
 801b7a6:	f47f af25 	bne.w	801b5f4 <__aeabi_dmul+0x234>
 801b7aa:	4610      	mov	r0, r2
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	e72c      	b.n	801b60a <__aeabi_dmul+0x24a>
 801b7b0:	ea95 0f0c 	teq	r5, ip
 801b7b4:	d106      	bne.n	801b7c4 <__aeabi_ddiv+0x1b0>
 801b7b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801b7ba:	f43f aefd 	beq.w	801b5b8 <__aeabi_dmul+0x1f8>
 801b7be:	4610      	mov	r0, r2
 801b7c0:	4619      	mov	r1, r3
 801b7c2:	e722      	b.n	801b60a <__aeabi_dmul+0x24a>
 801b7c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801b7c8:	bf18      	it	ne
 801b7ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801b7ce:	f47f aec5 	bne.w	801b55c <__aeabi_dmul+0x19c>
 801b7d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801b7d6:	f47f af0d 	bne.w	801b5f4 <__aeabi_dmul+0x234>
 801b7da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801b7de:	f47f aeeb 	bne.w	801b5b8 <__aeabi_dmul+0x1f8>
 801b7e2:	e712      	b.n	801b60a <__aeabi_dmul+0x24a>

0801b7e4 <__aeabi_d2iz>:
 801b7e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801b7e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801b7ec:	d215      	bcs.n	801b81a <__aeabi_d2iz+0x36>
 801b7ee:	d511      	bpl.n	801b814 <__aeabi_d2iz+0x30>
 801b7f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801b7f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801b7f8:	d912      	bls.n	801b820 <__aeabi_d2iz+0x3c>
 801b7fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801b7fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801b806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801b80a:	fa23 f002 	lsr.w	r0, r3, r2
 801b80e:	bf18      	it	ne
 801b810:	4240      	negne	r0, r0
 801b812:	4770      	bx	lr
 801b814:	f04f 0000 	mov.w	r0, #0
 801b818:	4770      	bx	lr
 801b81a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801b81e:	d105      	bne.n	801b82c <__aeabi_d2iz+0x48>
 801b820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801b824:	bf08      	it	eq
 801b826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801b82a:	4770      	bx	lr
 801b82c:	f04f 0000 	mov.w	r0, #0
 801b830:	4770      	bx	lr
 801b832:	bf00      	nop

0801b834 <__aeabi_d2f>:
 801b834:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801b838:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 801b83c:	bf24      	itt	cs
 801b83e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801b842:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801b846:	d90d      	bls.n	801b864 <__aeabi_d2f+0x30>
 801b848:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801b84c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801b850:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801b854:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801b858:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 801b85c:	bf08      	it	eq
 801b85e:	f020 0001 	biceq.w	r0, r0, #1
 801b862:	4770      	bx	lr
 801b864:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801b868:	d121      	bne.n	801b8ae <__aeabi_d2f+0x7a>
 801b86a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 801b86e:	bfbc      	itt	lt
 801b870:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801b874:	4770      	bxlt	lr
 801b876:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b87a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 801b87e:	f1c2 0218 	rsb	r2, r2, #24
 801b882:	f1c2 0c20 	rsb	ip, r2, #32
 801b886:	fa10 f30c 	lsls.w	r3, r0, ip
 801b88a:	fa20 f002 	lsr.w	r0, r0, r2
 801b88e:	bf18      	it	ne
 801b890:	f040 0001 	orrne.w	r0, r0, #1
 801b894:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801b898:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801b89c:	fa03 fc0c 	lsl.w	ip, r3, ip
 801b8a0:	ea40 000c 	orr.w	r0, r0, ip
 801b8a4:	fa23 f302 	lsr.w	r3, r3, r2
 801b8a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b8ac:	e7cc      	b.n	801b848 <__aeabi_d2f+0x14>
 801b8ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801b8b2:	d107      	bne.n	801b8c4 <__aeabi_d2f+0x90>
 801b8b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801b8b8:	bf1e      	ittt	ne
 801b8ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 801b8be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801b8c2:	4770      	bxne	lr
 801b8c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801b8c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801b8cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b8d0:	4770      	bx	lr
 801b8d2:	bf00      	nop

0801b8d4 <__aeabi_frsub>:
 801b8d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b8d8:	e002      	b.n	801b8e0 <__addsf3>
 801b8da:	bf00      	nop

0801b8dc <__aeabi_fsub>:
 801b8dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801b8e0 <__addsf3>:
 801b8e0:	0042      	lsls	r2, r0, #1
 801b8e2:	bf1f      	itttt	ne
 801b8e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 801b8e8:	ea92 0f03 	teqne	r2, r3
 801b8ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801b8f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801b8f4:	d06a      	beq.n	801b9cc <__addsf3+0xec>
 801b8f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801b8fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801b8fe:	bfc1      	itttt	gt
 801b900:	18d2      	addgt	r2, r2, r3
 801b902:	4041      	eorgt	r1, r0
 801b904:	4048      	eorgt	r0, r1
 801b906:	4041      	eorgt	r1, r0
 801b908:	bfb8      	it	lt
 801b90a:	425b      	neglt	r3, r3
 801b90c:	2b19      	cmp	r3, #25
 801b90e:	bf88      	it	hi
 801b910:	4770      	bxhi	lr
 801b912:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 801b916:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b91a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b91e:	bf18      	it	ne
 801b920:	4240      	negne	r0, r0
 801b922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801b926:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801b92a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801b92e:	bf18      	it	ne
 801b930:	4249      	negne	r1, r1
 801b932:	ea92 0f03 	teq	r2, r3
 801b936:	d03f      	beq.n	801b9b8 <__addsf3+0xd8>
 801b938:	f1a2 0201 	sub.w	r2, r2, #1
 801b93c:	fa41 fc03 	asr.w	ip, r1, r3
 801b940:	eb10 000c 	adds.w	r0, r0, ip
 801b944:	f1c3 0320 	rsb	r3, r3, #32
 801b948:	fa01 f103 	lsl.w	r1, r1, r3
 801b94c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b950:	d502      	bpl.n	801b958 <__addsf3+0x78>
 801b952:	4249      	negs	r1, r1
 801b954:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 801b958:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 801b95c:	d313      	bcc.n	801b986 <__addsf3+0xa6>
 801b95e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801b962:	d306      	bcc.n	801b972 <__addsf3+0x92>
 801b964:	0840      	lsrs	r0, r0, #1
 801b966:	ea4f 0131 	mov.w	r1, r1, rrx
 801b96a:	f102 0201 	add.w	r2, r2, #1
 801b96e:	2afe      	cmp	r2, #254	; 0xfe
 801b970:	d251      	bcs.n	801ba16 <__addsf3+0x136>
 801b972:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 801b976:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801b97a:	bf08      	it	eq
 801b97c:	f020 0001 	biceq.w	r0, r0, #1
 801b980:	ea40 0003 	orr.w	r0, r0, r3
 801b984:	4770      	bx	lr
 801b986:	0049      	lsls	r1, r1, #1
 801b988:	eb40 0000 	adc.w	r0, r0, r0
 801b98c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 801b990:	f1a2 0201 	sub.w	r2, r2, #1
 801b994:	d1ed      	bne.n	801b972 <__addsf3+0x92>
 801b996:	fab0 fc80 	clz	ip, r0
 801b99a:	f1ac 0c08 	sub.w	ip, ip, #8
 801b99e:	ebb2 020c 	subs.w	r2, r2, ip
 801b9a2:	fa00 f00c 	lsl.w	r0, r0, ip
 801b9a6:	bfaa      	itet	ge
 801b9a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 801b9ac:	4252      	neglt	r2, r2
 801b9ae:	4318      	orrge	r0, r3
 801b9b0:	bfbc      	itt	lt
 801b9b2:	40d0      	lsrlt	r0, r2
 801b9b4:	4318      	orrlt	r0, r3
 801b9b6:	4770      	bx	lr
 801b9b8:	f092 0f00 	teq	r2, #0
 801b9bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801b9c0:	bf06      	itte	eq
 801b9c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 801b9c6:	3201      	addeq	r2, #1
 801b9c8:	3b01      	subne	r3, #1
 801b9ca:	e7b5      	b.n	801b938 <__addsf3+0x58>
 801b9cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801b9d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801b9d4:	bf18      	it	ne
 801b9d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801b9da:	d021      	beq.n	801ba20 <__addsf3+0x140>
 801b9dc:	ea92 0f03 	teq	r2, r3
 801b9e0:	d004      	beq.n	801b9ec <__addsf3+0x10c>
 801b9e2:	f092 0f00 	teq	r2, #0
 801b9e6:	bf08      	it	eq
 801b9e8:	4608      	moveq	r0, r1
 801b9ea:	4770      	bx	lr
 801b9ec:	ea90 0f01 	teq	r0, r1
 801b9f0:	bf1c      	itt	ne
 801b9f2:	2000      	movne	r0, #0
 801b9f4:	4770      	bxne	lr
 801b9f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 801b9fa:	d104      	bne.n	801ba06 <__addsf3+0x126>
 801b9fc:	0040      	lsls	r0, r0, #1
 801b9fe:	bf28      	it	cs
 801ba00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 801ba04:	4770      	bx	lr
 801ba06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 801ba0a:	bf3c      	itt	cc
 801ba0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801ba10:	4770      	bxcc	lr
 801ba12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801ba16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 801ba1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ba1e:	4770      	bx	lr
 801ba20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 801ba24:	bf16      	itet	ne
 801ba26:	4608      	movne	r0, r1
 801ba28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 801ba2c:	4601      	movne	r1, r0
 801ba2e:	0242      	lsls	r2, r0, #9
 801ba30:	bf06      	itte	eq
 801ba32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 801ba36:	ea90 0f01 	teqeq	r0, r1
 801ba3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 801ba3e:	4770      	bx	lr

0801ba40 <__aeabi_ui2f>:
 801ba40:	f04f 0300 	mov.w	r3, #0
 801ba44:	e004      	b.n	801ba50 <__aeabi_i2f+0x8>
 801ba46:	bf00      	nop

0801ba48 <__aeabi_i2f>:
 801ba48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 801ba4c:	bf48      	it	mi
 801ba4e:	4240      	negmi	r0, r0
 801ba50:	ea5f 0c00 	movs.w	ip, r0
 801ba54:	bf08      	it	eq
 801ba56:	4770      	bxeq	lr
 801ba58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 801ba5c:	4601      	mov	r1, r0
 801ba5e:	f04f 0000 	mov.w	r0, #0
 801ba62:	e01c      	b.n	801ba9e <__aeabi_l2f+0x2a>

0801ba64 <__aeabi_ul2f>:
 801ba64:	ea50 0201 	orrs.w	r2, r0, r1
 801ba68:	bf08      	it	eq
 801ba6a:	4770      	bxeq	lr
 801ba6c:	f04f 0300 	mov.w	r3, #0
 801ba70:	e00a      	b.n	801ba88 <__aeabi_l2f+0x14>
 801ba72:	bf00      	nop

0801ba74 <__aeabi_l2f>:
 801ba74:	ea50 0201 	orrs.w	r2, r0, r1
 801ba78:	bf08      	it	eq
 801ba7a:	4770      	bxeq	lr
 801ba7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 801ba80:	d502      	bpl.n	801ba88 <__aeabi_l2f+0x14>
 801ba82:	4240      	negs	r0, r0
 801ba84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ba88:	ea5f 0c01 	movs.w	ip, r1
 801ba8c:	bf02      	ittt	eq
 801ba8e:	4684      	moveq	ip, r0
 801ba90:	4601      	moveq	r1, r0
 801ba92:	2000      	moveq	r0, #0
 801ba94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 801ba98:	bf08      	it	eq
 801ba9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 801ba9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801baa2:	fabc f28c 	clz	r2, ip
 801baa6:	3a08      	subs	r2, #8
 801baa8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 801baac:	db10      	blt.n	801bad0 <__aeabi_l2f+0x5c>
 801baae:	fa01 fc02 	lsl.w	ip, r1, r2
 801bab2:	4463      	add	r3, ip
 801bab4:	fa00 fc02 	lsl.w	ip, r0, r2
 801bab8:	f1c2 0220 	rsb	r2, r2, #32
 801babc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801bac0:	fa20 f202 	lsr.w	r2, r0, r2
 801bac4:	eb43 0002 	adc.w	r0, r3, r2
 801bac8:	bf08      	it	eq
 801baca:	f020 0001 	biceq.w	r0, r0, #1
 801bace:	4770      	bx	lr
 801bad0:	f102 0220 	add.w	r2, r2, #32
 801bad4:	fa01 fc02 	lsl.w	ip, r1, r2
 801bad8:	f1c2 0220 	rsb	r2, r2, #32
 801badc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801bae0:	fa21 f202 	lsr.w	r2, r1, r2
 801bae4:	eb43 0002 	adc.w	r0, r3, r2
 801bae8:	bf08      	it	eq
 801baea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801baee:	4770      	bx	lr

0801baf0 <__aeabi_fmul>:
 801baf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801baf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801baf8:	bf1e      	ittt	ne
 801bafa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801bafe:	ea92 0f0c 	teqne	r2, ip
 801bb02:	ea93 0f0c 	teqne	r3, ip
 801bb06:	d06f      	beq.n	801bbe8 <__aeabi_fmul+0xf8>
 801bb08:	441a      	add	r2, r3
 801bb0a:	ea80 0c01 	eor.w	ip, r0, r1
 801bb0e:	0240      	lsls	r0, r0, #9
 801bb10:	bf18      	it	ne
 801bb12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 801bb16:	d01e      	beq.n	801bb56 <__aeabi_fmul+0x66>
 801bb18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801bb1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801bb20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 801bb24:	fba0 3101 	umull	r3, r1, r0, r1
 801bb28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801bb2c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801bb30:	bf3e      	ittt	cc
 801bb32:	0049      	lslcc	r1, r1, #1
 801bb34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 801bb38:	005b      	lslcc	r3, r3, #1
 801bb3a:	ea40 0001 	orr.w	r0, r0, r1
 801bb3e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 801bb42:	2afd      	cmp	r2, #253	; 0xfd
 801bb44:	d81d      	bhi.n	801bb82 <__aeabi_fmul+0x92>
 801bb46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bb4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801bb4e:	bf08      	it	eq
 801bb50:	f020 0001 	biceq.w	r0, r0, #1
 801bb54:	4770      	bx	lr
 801bb56:	f090 0f00 	teq	r0, #0
 801bb5a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801bb5e:	bf08      	it	eq
 801bb60:	0249      	lsleq	r1, r1, #9
 801bb62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801bb66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 801bb6a:	3a7f      	subs	r2, #127	; 0x7f
 801bb6c:	bfc2      	ittt	gt
 801bb6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801bb72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801bb76:	4770      	bxgt	lr
 801bb78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bb7c:	f04f 0300 	mov.w	r3, #0
 801bb80:	3a01      	subs	r2, #1
 801bb82:	dc5d      	bgt.n	801bc40 <__aeabi_fmul+0x150>
 801bb84:	f112 0f19 	cmn.w	r2, #25
 801bb88:	bfdc      	itt	le
 801bb8a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 801bb8e:	4770      	bxle	lr
 801bb90:	f1c2 0200 	rsb	r2, r2, #0
 801bb94:	0041      	lsls	r1, r0, #1
 801bb96:	fa21 f102 	lsr.w	r1, r1, r2
 801bb9a:	f1c2 0220 	rsb	r2, r2, #32
 801bb9e:	fa00 fc02 	lsl.w	ip, r0, r2
 801bba2:	ea5f 0031 	movs.w	r0, r1, rrx
 801bba6:	f140 0000 	adc.w	r0, r0, #0
 801bbaa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 801bbae:	bf08      	it	eq
 801bbb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801bbb4:	4770      	bx	lr
 801bbb6:	f092 0f00 	teq	r2, #0
 801bbba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801bbbe:	bf02      	ittt	eq
 801bbc0:	0040      	lsleq	r0, r0, #1
 801bbc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801bbc6:	3a01      	subeq	r2, #1
 801bbc8:	d0f9      	beq.n	801bbbe <__aeabi_fmul+0xce>
 801bbca:	ea40 000c 	orr.w	r0, r0, ip
 801bbce:	f093 0f00 	teq	r3, #0
 801bbd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801bbd6:	bf02      	ittt	eq
 801bbd8:	0049      	lsleq	r1, r1, #1
 801bbda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801bbde:	3b01      	subeq	r3, #1
 801bbe0:	d0f9      	beq.n	801bbd6 <__aeabi_fmul+0xe6>
 801bbe2:	ea41 010c 	orr.w	r1, r1, ip
 801bbe6:	e78f      	b.n	801bb08 <__aeabi_fmul+0x18>
 801bbe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801bbec:	ea92 0f0c 	teq	r2, ip
 801bbf0:	bf18      	it	ne
 801bbf2:	ea93 0f0c 	teqne	r3, ip
 801bbf6:	d00a      	beq.n	801bc0e <__aeabi_fmul+0x11e>
 801bbf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801bbfc:	bf18      	it	ne
 801bbfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801bc02:	d1d8      	bne.n	801bbb6 <__aeabi_fmul+0xc6>
 801bc04:	ea80 0001 	eor.w	r0, r0, r1
 801bc08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801bc0c:	4770      	bx	lr
 801bc0e:	f090 0f00 	teq	r0, #0
 801bc12:	bf17      	itett	ne
 801bc14:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 801bc18:	4608      	moveq	r0, r1
 801bc1a:	f091 0f00 	teqne	r1, #0
 801bc1e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 801bc22:	d014      	beq.n	801bc4e <__aeabi_fmul+0x15e>
 801bc24:	ea92 0f0c 	teq	r2, ip
 801bc28:	d101      	bne.n	801bc2e <__aeabi_fmul+0x13e>
 801bc2a:	0242      	lsls	r2, r0, #9
 801bc2c:	d10f      	bne.n	801bc4e <__aeabi_fmul+0x15e>
 801bc2e:	ea93 0f0c 	teq	r3, ip
 801bc32:	d103      	bne.n	801bc3c <__aeabi_fmul+0x14c>
 801bc34:	024b      	lsls	r3, r1, #9
 801bc36:	bf18      	it	ne
 801bc38:	4608      	movne	r0, r1
 801bc3a:	d108      	bne.n	801bc4e <__aeabi_fmul+0x15e>
 801bc3c:	ea80 0001 	eor.w	r0, r0, r1
 801bc40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801bc44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801bc48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bc4c:	4770      	bx	lr
 801bc4e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801bc52:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 801bc56:	4770      	bx	lr

0801bc58 <__aeabi_fdiv>:
 801bc58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801bc5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801bc60:	bf1e      	ittt	ne
 801bc62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801bc66:	ea92 0f0c 	teqne	r2, ip
 801bc6a:	ea93 0f0c 	teqne	r3, ip
 801bc6e:	d069      	beq.n	801bd44 <__aeabi_fdiv+0xec>
 801bc70:	eba2 0203 	sub.w	r2, r2, r3
 801bc74:	ea80 0c01 	eor.w	ip, r0, r1
 801bc78:	0249      	lsls	r1, r1, #9
 801bc7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 801bc7e:	d037      	beq.n	801bcf0 <__aeabi_fdiv+0x98>
 801bc80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801bc84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 801bc88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 801bc8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801bc90:	428b      	cmp	r3, r1
 801bc92:	bf38      	it	cc
 801bc94:	005b      	lslcc	r3, r3, #1
 801bc96:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 801bc9a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 801bc9e:	428b      	cmp	r3, r1
 801bca0:	bf24      	itt	cs
 801bca2:	1a5b      	subcs	r3, r3, r1
 801bca4:	ea40 000c 	orrcs.w	r0, r0, ip
 801bca8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 801bcac:	bf24      	itt	cs
 801bcae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 801bcb2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801bcb6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 801bcba:	bf24      	itt	cs
 801bcbc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801bcc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801bcc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 801bcc8:	bf24      	itt	cs
 801bcca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801bcce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801bcd2:	011b      	lsls	r3, r3, #4
 801bcd4:	bf18      	it	ne
 801bcd6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 801bcda:	d1e0      	bne.n	801bc9e <__aeabi_fdiv+0x46>
 801bcdc:	2afd      	cmp	r2, #253	; 0xfd
 801bcde:	f63f af50 	bhi.w	801bb82 <__aeabi_fmul+0x92>
 801bce2:	428b      	cmp	r3, r1
 801bce4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801bce8:	bf08      	it	eq
 801bcea:	f020 0001 	biceq.w	r0, r0, #1
 801bcee:	4770      	bx	lr
 801bcf0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801bcf4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801bcf8:	327f      	adds	r2, #127	; 0x7f
 801bcfa:	bfc2      	ittt	gt
 801bcfc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801bd00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801bd04:	4770      	bxgt	lr
 801bd06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bd0a:	f04f 0300 	mov.w	r3, #0
 801bd0e:	3a01      	subs	r2, #1
 801bd10:	e737      	b.n	801bb82 <__aeabi_fmul+0x92>
 801bd12:	f092 0f00 	teq	r2, #0
 801bd16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801bd1a:	bf02      	ittt	eq
 801bd1c:	0040      	lsleq	r0, r0, #1
 801bd1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801bd22:	3a01      	subeq	r2, #1
 801bd24:	d0f9      	beq.n	801bd1a <__aeabi_fdiv+0xc2>
 801bd26:	ea40 000c 	orr.w	r0, r0, ip
 801bd2a:	f093 0f00 	teq	r3, #0
 801bd2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801bd32:	bf02      	ittt	eq
 801bd34:	0049      	lsleq	r1, r1, #1
 801bd36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801bd3a:	3b01      	subeq	r3, #1
 801bd3c:	d0f9      	beq.n	801bd32 <__aeabi_fdiv+0xda>
 801bd3e:	ea41 010c 	orr.w	r1, r1, ip
 801bd42:	e795      	b.n	801bc70 <__aeabi_fdiv+0x18>
 801bd44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801bd48:	ea92 0f0c 	teq	r2, ip
 801bd4c:	d108      	bne.n	801bd60 <__aeabi_fdiv+0x108>
 801bd4e:	0242      	lsls	r2, r0, #9
 801bd50:	f47f af7d 	bne.w	801bc4e <__aeabi_fmul+0x15e>
 801bd54:	ea93 0f0c 	teq	r3, ip
 801bd58:	f47f af70 	bne.w	801bc3c <__aeabi_fmul+0x14c>
 801bd5c:	4608      	mov	r0, r1
 801bd5e:	e776      	b.n	801bc4e <__aeabi_fmul+0x15e>
 801bd60:	ea93 0f0c 	teq	r3, ip
 801bd64:	d104      	bne.n	801bd70 <__aeabi_fdiv+0x118>
 801bd66:	024b      	lsls	r3, r1, #9
 801bd68:	f43f af4c 	beq.w	801bc04 <__aeabi_fmul+0x114>
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	e76e      	b.n	801bc4e <__aeabi_fmul+0x15e>
 801bd70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801bd74:	bf18      	it	ne
 801bd76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801bd7a:	d1ca      	bne.n	801bd12 <__aeabi_fdiv+0xba>
 801bd7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801bd80:	f47f af5c 	bne.w	801bc3c <__aeabi_fmul+0x14c>
 801bd84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 801bd88:	f47f af3c 	bne.w	801bc04 <__aeabi_fmul+0x114>
 801bd8c:	e75f      	b.n	801bc4e <__aeabi_fmul+0x15e>
 801bd8e:	bf00      	nop

0801bd90 <__aeabi_f2iz>:
 801bd90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 801bd94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801bd98:	d30f      	bcc.n	801bdba <__aeabi_f2iz+0x2a>
 801bd9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 801bd9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 801bda2:	d90d      	bls.n	801bdc0 <__aeabi_f2iz+0x30>
 801bda4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 801bda8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801bdac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 801bdb0:	fa23 f002 	lsr.w	r0, r3, r2
 801bdb4:	bf18      	it	ne
 801bdb6:	4240      	negne	r0, r0
 801bdb8:	4770      	bx	lr
 801bdba:	f04f 0000 	mov.w	r0, #0
 801bdbe:	4770      	bx	lr
 801bdc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 801bdc4:	d101      	bne.n	801bdca <__aeabi_f2iz+0x3a>
 801bdc6:	0242      	lsls	r2, r0, #9
 801bdc8:	d105      	bne.n	801bdd6 <__aeabi_f2iz+0x46>
 801bdca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 801bdce:	bf08      	it	eq
 801bdd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801bdd4:	4770      	bx	lr
 801bdd6:	f04f 0000 	mov.w	r0, #0
 801bdda:	4770      	bx	lr

0801bddc <__libc_init_array>:
 801bddc:	b538      	push	{r3, r4, r5, lr}
 801bdde:	4d0e      	ldr	r5, [pc, #56]	; (801be18 <__libc_init_array+0x3c>)
 801bde0:	4b0e      	ldr	r3, [pc, #56]	; (801be1c <__libc_init_array+0x40>)
 801bde2:	1ae8      	subs	r0, r5, r3
 801bde4:	1085      	asrs	r5, r0, #2
 801bde6:	2400      	movs	r4, #0
 801bde8:	42ac      	cmp	r4, r5
 801bdea:	d005      	beq.n	801bdf8 <__libc_init_array+0x1c>
 801bdec:	490b      	ldr	r1, [pc, #44]	; (801be1c <__libc_init_array+0x40>)
 801bdee:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 801bdf2:	4790      	blx	r2
 801bdf4:	3401      	adds	r4, #1
 801bdf6:	e7f7      	b.n	801bde8 <__libc_init_array+0xc>
 801bdf8:	f7f5 f906 	bl	8011008 <_init>
 801bdfc:	4908      	ldr	r1, [pc, #32]	; (801be20 <__libc_init_array+0x44>)
 801bdfe:	4a09      	ldr	r2, [pc, #36]	; (801be24 <__libc_init_array+0x48>)
 801be00:	1a54      	subs	r4, r2, r1
 801be02:	10a5      	asrs	r5, r4, #2
 801be04:	2400      	movs	r4, #0
 801be06:	42ac      	cmp	r4, r5
 801be08:	d005      	beq.n	801be16 <__libc_init_array+0x3a>
 801be0a:	4b05      	ldr	r3, [pc, #20]	; (801be20 <__libc_init_array+0x44>)
 801be0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801be10:	4780      	blx	r0
 801be12:	3401      	adds	r4, #1
 801be14:	e7f7      	b.n	801be06 <__libc_init_array+0x2a>
 801be16:	bd38      	pop	{r3, r4, r5, pc}
 801be18:	0801d5ec 	.word	0x0801d5ec
 801be1c:	0801d5ec 	.word	0x0801d5ec
 801be20:	0801d5ec 	.word	0x0801d5ec
 801be24:	0801d5ec 	.word	0x0801d5ec

0801be28 <memcpy>:
 801be28:	b510      	push	{r4, lr}
 801be2a:	2300      	movs	r3, #0
 801be2c:	4293      	cmp	r3, r2
 801be2e:	d003      	beq.n	801be38 <memcpy+0x10>
 801be30:	5ccc      	ldrb	r4, [r1, r3]
 801be32:	54c4      	strb	r4, [r0, r3]
 801be34:	3301      	adds	r3, #1
 801be36:	e7f9      	b.n	801be2c <memcpy+0x4>
 801be38:	bd10      	pop	{r4, pc}

0801be3a <memset>:
 801be3a:	1882      	adds	r2, r0, r2
 801be3c:	4603      	mov	r3, r0
 801be3e:	4293      	cmp	r3, r2
 801be40:	d002      	beq.n	801be48 <memset+0xe>
 801be42:	f803 1b01 	strb.w	r1, [r3], #1
 801be46:	e7fa      	b.n	801be3e <memset+0x4>
 801be48:	4770      	bx	lr

0801be4a <strcmp>:
 801be4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801be52:	2a01      	cmp	r2, #1
 801be54:	bf28      	it	cs
 801be56:	429a      	cmpcs	r2, r3
 801be58:	d0f7      	beq.n	801be4a <strcmp>
 801be5a:	eba2 0003 	sub.w	r0, r2, r3
 801be5e:	4770      	bx	lr

0801be60 <strlen>:
 801be60:	4603      	mov	r3, r0
 801be62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be66:	2a00      	cmp	r2, #0
 801be68:	d1fb      	bne.n	801be62 <strlen+0x2>
 801be6a:	1a18      	subs	r0, r3, r0
 801be6c:	3801      	subs	r0, #1
 801be6e:	4770      	bx	lr

0801be70 <__strtok_r>:
 801be70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be72:	b910      	cbnz	r0, 801be7a <__strtok_r+0xa>
 801be74:	6810      	ldr	r0, [r2, #0]
 801be76:	2800      	cmp	r0, #0
 801be78:	d028      	beq.n	801becc <__strtok_r+0x5c>
 801be7a:	4604      	mov	r4, r0
 801be7c:	4627      	mov	r7, r4
 801be7e:	460e      	mov	r6, r1
 801be80:	7838      	ldrb	r0, [r7, #0]
 801be82:	3401      	adds	r4, #1
 801be84:	f816 5b01 	ldrb.w	r5, [r6], #1
 801be88:	b145      	cbz	r5, 801be9c <__strtok_r+0x2c>
 801be8a:	42a8      	cmp	r0, r5
 801be8c:	d1fa      	bne.n	801be84 <__strtok_r+0x14>
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d1f4      	bne.n	801be7c <__strtok_r+0xc>
 801be92:	6014      	str	r4, [r2, #0]
 801be94:	4638      	mov	r0, r7
 801be96:	f804 3c01 	strb.w	r3, [r4, #-1]
 801be9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be9c:	4623      	mov	r3, r4
 801be9e:	b938      	cbnz	r0, 801beb0 <__strtok_r+0x40>
 801bea0:	6010      	str	r0, [r2, #0]
 801bea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bea4:	f817 5b01 	ldrb.w	r5, [r7], #1
 801bea8:	4285      	cmp	r5, r0
 801beaa:	d006      	beq.n	801beba <__strtok_r+0x4a>
 801beac:	2d00      	cmp	r5, #0
 801beae:	d1f9      	bne.n	801bea4 <__strtok_r+0x34>
 801beb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801beb4:	460f      	mov	r7, r1
 801beb6:	461e      	mov	r6, r3
 801beb8:	e7f4      	b.n	801bea4 <__strtok_r+0x34>
 801beba:	b118      	cbz	r0, 801bec4 <__strtok_r+0x54>
 801bebc:	2100      	movs	r1, #0
 801bebe:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bec2:	e000      	b.n	801bec6 <__strtok_r+0x56>
 801bec4:	4606      	mov	r6, r0
 801bec6:	6016      	str	r6, [r2, #0]
 801bec8:	1e60      	subs	r0, r4, #1
 801beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801becc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bece <strtok_r>:
 801bece:	2301      	movs	r3, #1
 801bed0:	f7ff bfce 	b.w	801be70 <__strtok_r>
