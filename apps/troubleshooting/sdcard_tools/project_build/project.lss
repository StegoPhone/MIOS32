
project_build/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .mios32_bsl   00004000  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08004000  08004000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e534  08010000  08010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0801e534  0801e534  0001e534  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rodata       00001f14  0801e53c  0801e53c  0001e53c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000070  20000000  08020450  00028000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004c78  20000070  080204c0  00028070  2**3  ALLOC
  7 ._usrstack    00000100  20004ce8  080204c0  0002cce8  2**0  ALLOC
  8 .comment      00000070  00000000  00000000  00028070  2**0  CONTENTS, READONLY
  9 .ARM.attributes 00000033  00000000  00000000  000280e0  2**0  CONTENTS, READONLY
 10 .debug_aranges 00002818  00000000  00000000  00028113  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00046efc  00000000  00000000  0002a92b  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a441  00000000  00000000  00071827  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013759  00000000  00000000  0007bc68  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006288  00000000  00000000  0008f3c4  2**2  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000e6a3  00000000  00000000  0009564c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020680  00000000  00000000  000a3cef  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002ca0  00000000  00000000  000c436f  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <APP_Init>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
{
 8010000:	b538      	push	{r3, r4, r5, lr}
  // initialize all LEDs
  MIOS32_BOARD_LED_Init(0xffffffff);
 8010002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010006:	f004 ff83 	bl	8014f10 <MIOS32_BOARD_LED_Init>
  xSDCardSemaphore = xSemaphoreCreateRecursiveMutex();
 801000a:	2004      	movs	r0, #4
 801000c:	f001 ff6f 	bl	8011eee <xQueueCreateMutex>
 8010010:	4b10      	ldr	r3, [pc, #64]	; (8010054 <APP_Init+0x54>)
  line_buffer[0] = 0;
  line_ix = 0;
  
#if DEBUG_VERBOSE_LEVEL >= 1
  // print welcome message on MIOS terminal
  DEBUG_MSG("\n");
 8010012:	4c11      	ldr	r4, [pc, #68]	; (8010058 <APP_Init+0x58>)
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
{
  // initialize all LEDs
  MIOS32_BOARD_LED_Init(0xffffffff);
  xSDCardSemaphore = xSemaphoreCreateRecursiveMutex();
 8010014:	6018      	str	r0, [r3, #0]

  MIOS32_SDCARD_Init(0);
 8010016:	2000      	movs	r0, #0
 8010018:	f003 fdd5 	bl	8013bc6 <MIOS32_SDCARD_Init>
  // install the callback function which is called on incoming characters
  // from MIOS Terminal
  MIOS32_MIDI_DebugCommandCallback_Init(APP_TERMINAL_Parse);
 801001c:	480f      	ldr	r0, [pc, #60]	; (801005c <APP_Init+0x5c>)
  line_ix = 0;
  
#if DEBUG_VERBOSE_LEVEL >= 1
  // print welcome message on MIOS terminal
  DEBUG_MSG("\n");
  DEBUG_MSG("====================\n");
 801001e:	4d10      	ldr	r5, [pc, #64]	; (8010060 <APP_Init+0x60>)
  xSDCardSemaphore = xSemaphoreCreateRecursiveMutex();

  MIOS32_SDCARD_Init(0);
  // install the callback function which is called on incoming characters
  // from MIOS Terminal
  MIOS32_MIDI_DebugCommandCallback_Init(APP_TERMINAL_Parse);
 8010020:	f003 fb74 	bl	801370c <MIOS32_MIDI_DebugCommandCallback_Init>
  
  // clear line buffer
  line_buffer[0] = 0;
 8010024:	4a0f      	ldr	r2, [pc, #60]	; (8010064 <APP_Init+0x64>)
  line_ix = 0;
 8010026:	4910      	ldr	r1, [pc, #64]	; (8010068 <APP_Init+0x68>)
  // install the callback function which is called on incoming characters
  // from MIOS Terminal
  MIOS32_MIDI_DebugCommandCallback_Init(APP_TERMINAL_Parse);
  
  // clear line buffer
  line_buffer[0] = 0;
 8010028:	2000      	movs	r0, #0
 801002a:	7010      	strb	r0, [r2, #0]
  line_ix = 0;
 801002c:	8008      	strh	r0, [r1, #0]
  
#if DEBUG_VERBOSE_LEVEL >= 1
  // print welcome message on MIOS terminal
  DEBUG_MSG("\n");
 801002e:	4620      	mov	r0, r4
 8010030:	f002 ffc8 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("====================\n");
 8010034:	4628      	mov	r0, r5
 8010036:	f002 ffc5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("%s\n", MIOS32_LCD_BOOT_MSG_LINE1);
 801003a:	490c      	ldr	r1, [pc, #48]	; (801006c <APP_Init+0x6c>)
 801003c:	480c      	ldr	r0, [pc, #48]	; (8010070 <APP_Init+0x70>)
 801003e:	f002 ffc1 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("====================\n");
 8010042:	4628      	mov	r0, r5
 8010044:	f002 ffbe 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("\n");
 8010048:	4620      	mov	r0, r4
#endif
}
 801004a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // print welcome message on MIOS terminal
  DEBUG_MSG("\n");
  DEBUG_MSG("====================\n");
  DEBUG_MSG("%s\n", MIOS32_LCD_BOOT_MSG_LINE1);
  DEBUG_MSG("====================\n");
  DEBUG_MSG("\n");
 801004e:	f002 bfb9 	b.w	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010052:	bf00      	nop
 8010054:	200013a8 	.word	0x200013a8
 8010058:	0801ed1f 	.word	0x0801ed1f
 801005c:	08010c71 	.word	0x08010c71
 8010060:	0801e53c 	.word	0x0801e53c
 8010064:	20000411 	.word	0x20000411
 8010068:	2000089c 	.word	0x2000089c
 801006c:	0801e552 	.word	0x0801e552
 8010070:	0801ec96 	.word	0x0801ec96

08010074 <SDCARD_Mount>:

/////////////////////////////////////////////////////////////////////////////
// This function prints some useful SD card informations
/////////////////////////////////////////////////////////////////////////////
s32 SDCARD_Mount(void)
{
 8010074:	b510      	push	{r4, lr}
  // mount SD Card
  FRESULT res;
  DIR dir;
  DEBUG_MSG("Mounting SD Card...\n");
 8010076:	481a      	ldr	r0, [pc, #104]	; (80100e0 <SDCARD_Mount+0x6c>)

/////////////////////////////////////////////////////////////////////////////
// This function prints some useful SD card informations
/////////////////////////////////////////////////////////////////////////////
s32 SDCARD_Mount(void)
{
 8010078:	b08a      	sub	sp, #40	; 0x28
  // mount SD Card
  FRESULT res;
  DIR dir;
  DEBUG_MSG("Mounting SD Card...\n");
 801007a:	f002 ffa3 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  if( (res=f_mount(0, &fs)) != FR_OK ) {
 801007e:	4919      	ldr	r1, [pc, #100]	; (80100e4 <SDCARD_Mount+0x70>)
 8010080:	2000      	movs	r0, #0
 8010082:	f00c fea3 	bl	801cdcc <f_mount>
 8010086:	4601      	mov	r1, r0
 8010088:	b118      	cbz	r0, 8010092 <SDCARD_Mount+0x1e>
    DEBUG_MSG("Failed to mount SD Card - error status: %d\n", res);
 801008a:	4817      	ldr	r0, [pc, #92]	; (80100e8 <SDCARD_Mount+0x74>)
 801008c:	f002 ff9a 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010090:	e00d      	b.n	80100ae <SDCARD_Mount+0x3a>
    return -1; // error
  }

    // Set dir_path to / as we have a new card.
  strcpy(dir_path, "/");
 8010092:	4916      	ldr	r1, [pc, #88]	; (80100ec <SDCARD_Mount+0x78>)
 8010094:	4816      	ldr	r0, [pc, #88]	; (80100f0 <SDCARD_Mount+0x7c>)
 8010096:	f00e f9df 	bl	801e458 <strcpy>
  if( (res=f_opendir(&dir, dir_path)) != FR_OK ) {
 801009a:	a801      	add	r0, sp, #4
 801009c:	4914      	ldr	r1, [pc, #80]	; (80100f0 <SDCARD_Mount+0x7c>)
 801009e:	f00d f941 	bl	801d324 <f_opendir>
 80100a2:	4602      	mov	r2, r0
 80100a4:	b130      	cbz	r0, 80100b4 <SDCARD_Mount+0x40>
    DEBUG_MSG("Failed to open directory %s - error status: %d\n",dir_path, res);
 80100a6:	4813      	ldr	r0, [pc, #76]	; (80100f4 <SDCARD_Mount+0x80>)
 80100a8:	4911      	ldr	r1, [pc, #68]	; (80100f0 <SDCARD_Mount+0x7c>)
 80100aa:	f002 ff8b 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    return -1; // error
 80100ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100b2:	e013      	b.n	80100dc <SDCARD_Mount+0x68>
  }

  // Get volume label from base sector  
  if(disk_read(0, &dir.fs->win, dir.fs->dirbase,  1) != 0){
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100bc:	2301      	movs	r3, #1
 80100be:	f00b fd47 	bl	801bb50 <disk_read>
 80100c2:	4604      	mov	r4, r0
 80100c4:	b118      	cbz	r0, 80100ce <SDCARD_Mount+0x5a>
    DEBUG_MSG("Couldn't read directory sector...\n");
 80100c6:	480c      	ldr	r0, [pc, #48]	; (80100f8 <SDCARD_Mount+0x84>)
 80100c8:	f002 ff7c 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 80100cc:	e7ef      	b.n	80100ae <SDCARD_Mount+0x3a>
    return -1;   
  }  
  strncpy( disk_label, dir.fs->win, 11 );
 80100ce:	9901      	ldr	r1, [sp, #4]
 80100d0:	480a      	ldr	r0, [pc, #40]	; (80100fc <SDCARD_Mount+0x88>)
 80100d2:	3130      	adds	r1, #48	; 0x30
 80100d4:	220b      	movs	r2, #11
 80100d6:	f00e f9e6 	bl	801e4a6 <strncpy>
  
  return 0;
 80100da:	4620      	mov	r0, r4
}  
 80100dc:	b00a      	add	sp, #40	; 0x28
 80100de:	bd10      	pop	{r4, pc}
 80100e0:	0801e560 	.word	0x0801e560
 80100e4:	2000007c 	.word	0x2000007c
 80100e8:	0801e575 	.word	0x0801e575
 80100ec:	0801e5a1 	.word	0x0801e5a1
 80100f0:	200002ac 	.word	0x200002ac
 80100f4:	0801e5a3 	.word	0x0801e5a3
 80100f8:	0801e5d3 	.word	0x0801e5d3
 80100fc:	20000070 	.word	0x20000070

08010100 <APP_Background>:

/////////////////////////////////////////////////////////////////////////////
// This task is running endless in background
/////////////////////////////////////////////////////////////////////////////
void APP_Background(void)
{
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static u8 sdcard_available = 0;

  // init LCD
  MIOS32_LCD_Clear();
 8010102:	f002 fce1 	bl	8012ac8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 8010106:	2000      	movs	r0, #0
 8010108:	4601      	mov	r1, r0
 801010a:	f002 fc93 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("see README.txt   ");
 801010e:	482f      	ldr	r0, [pc, #188]	; (80101cc <APP_Background+0xcc>)
 8010110:	f002 fd38 	bl	8012b84 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 8010114:	2101      	movs	r1, #1
 8010116:	2000      	movs	r0, #0
 8010118:	f002 fc8c 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("for details     ");
 801011c:	482c      	ldr	r0, [pc, #176]	; (80101d0 <APP_Background+0xd0>)
 801011e:	f002 fd31 	bl	8012b84 <MIOS32_LCD_PrintString>

  // turn off LED (will be turned on once SD card connected/detected)
  MIOS32_BOARD_LED_Set(0x1, 0x0);
 8010122:	2001      	movs	r0, #1
 8010124:	2100      	movs	r1, #0
 8010126:	f004 ff1f 	bl	8014f68 <MIOS32_BOARD_LED_Set>

  // endless loop
  while( 1 ) {
    // check if SD card is available
    // High-speed access if SD card was previously available
    u8 prev_sdcard_available = sdcard_available;
 801012a:	4b2a      	ldr	r3, [pc, #168]	; (80101d4 <APP_Background+0xd4>)
 801012c:	781c      	ldrb	r4, [r3, #0]
	MUTEX_SDCARD_TAKE
 801012e:	4e2a      	ldr	r6, [pc, #168]	; (80101d8 <APP_Background+0xd8>)
 8010130:	2101      	movs	r1, #1
 8010132:	6830      	ldr	r0, [r6, #0]
 8010134:	f001 ff84 	bl	8012040 <xQueueTakeMutexRecursive>
 8010138:	2801      	cmp	r0, #1
 801013a:	4605      	mov	r5, r0
 801013c:	d1f7      	bne.n	801012e <APP_Background+0x2e>
    sdcard_available = MIOS32_SDCARD_CheckAvailable(prev_sdcard_available);
 801013e:	4620      	mov	r0, r4
 8010140:	f003 fe56 	bl	8013df0 <MIOS32_SDCARD_CheckAvailable>
 8010144:	4f23      	ldr	r7, [pc, #140]	; (80101d4 <APP_Background+0xd4>)
 8010146:	7038      	strb	r0, [r7, #0]
	MUTEX_SDCARD_GIVE
 8010148:	6830      	ldr	r0, [r6, #0]
 801014a:	f001 febb 	bl	8011ec4 <xQueueGiveMutexRecursive>
    if( sdcard_available && !prev_sdcard_available ) {
 801014e:	783e      	ldrb	r6, [r7, #0]
 8010150:	b30e      	cbz	r6, 8010196 <APP_Background+0x96>
 8010152:	2c00      	cmp	r4, #0
 8010154:	d1e9      	bne.n	801012a <APP_Background+0x2a>
      MIOS32_BOARD_LED_Set(0x1, 0x1); // turn on LED
 8010156:	4629      	mov	r1, r5
 8010158:	4628      	mov	r0, r5
 801015a:	f004 ff05 	bl	8014f68 <MIOS32_BOARD_LED_Set>
#if DEBUG_VERBOSE_LEVEL >= 0
      // always print...
      DEBUG_MSG("SD Card has been connected!\n");
 801015e:	481f      	ldr	r0, [pc, #124]	; (80101dc <APP_Background+0xdc>)
 8010160:	f002 ff30 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif

      MIOS32_LCD_Clear();
 8010164:	f002 fcb0 	bl	8012ac8 <MIOS32_LCD_Clear>
      MIOS32_LCD_CursorSet(0, 0);
 8010168:	4621      	mov	r1, r4
 801016a:	4620      	mov	r0, r4
 801016c:	f002 fc62 	bl	8012a34 <MIOS32_LCD_CursorSet>
      MIOS32_LCD_PrintString("SD Card         ");
 8010170:	481b      	ldr	r0, [pc, #108]	; (80101e0 <APP_Background+0xe0>)
 8010172:	f002 fd07 	bl	8012b84 <MIOS32_LCD_PrintString>
      MIOS32_LCD_CursorSet(0, 1);
 8010176:	4629      	mov	r1, r5
 8010178:	4620      	mov	r0, r4
 801017a:	f002 fc5b 	bl	8012a34 <MIOS32_LCD_CursorSet>
      MIOS32_LCD_PrintString("connected       ");
 801017e:	4819      	ldr	r0, [pc, #100]	; (80101e4 <APP_Background+0xe4>)
 8010180:	f002 fd00 	bl	8012b84 <MIOS32_LCD_PrintString>

#if DEBUG_VERBOSE_LEVEL >= 1
      if( SDCARD_Mount() < 0 ) {
 8010184:	f7ff ff76 	bl	8010074 <SDCARD_Mount>
 8010188:	2800      	cmp	r0, #0
	DEBUG_MSG("ERROR while mounting SD Card!\n");
 801018a:	bfb4      	ite	lt
 801018c:	4816      	ldrlt	r0, [pc, #88]	; (80101e8 <APP_Background+0xe8>)
      } else {
	DEBUG_MSG("SUCCESS: SD Card mounted!\n");
 801018e:	4817      	ldrge	r0, [pc, #92]	; (80101ec <APP_Background+0xec>)
 8010190:	f002 ff18 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010194:	e7c9      	b.n	801012a <APP_Background+0x2a>
      }
#endif
    } else if( !sdcard_available && prev_sdcard_available ) {
 8010196:	2c00      	cmp	r4, #0
 8010198:	d0c7      	beq.n	801012a <APP_Background+0x2a>
      MIOS32_BOARD_LED_Set(0x1, 0x0); // turn off LED
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	f004 fee3 	bl	8014f68 <MIOS32_BOARD_LED_Set>
#if DEBUG_VERBOSE_LEVEL >= 0
      // always print...
      DEBUG_MSG("SD Card disconnected!\n");
 80101a2:	4813      	ldr	r0, [pc, #76]	; (80101f0 <APP_Background+0xf0>)
 80101a4:	f002 ff0e 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif

      MIOS32_LCD_Clear();
 80101a8:	f002 fc8e 	bl	8012ac8 <MIOS32_LCD_Clear>
      MIOS32_LCD_CursorSet(0, 0);
 80101ac:	4631      	mov	r1, r6
 80101ae:	4630      	mov	r0, r6
 80101b0:	f002 fc40 	bl	8012a34 <MIOS32_LCD_CursorSet>
      MIOS32_LCD_PrintString("SD Card         ");
 80101b4:	480a      	ldr	r0, [pc, #40]	; (80101e0 <APP_Background+0xe0>)
 80101b6:	f002 fce5 	bl	8012b84 <MIOS32_LCD_PrintString>
      MIOS32_LCD_CursorSet(0, 1);
 80101ba:	4630      	mov	r0, r6
 80101bc:	4629      	mov	r1, r5
 80101be:	f002 fc39 	bl	8012a34 <MIOS32_LCD_CursorSet>
      MIOS32_LCD_PrintString("disconnected    ");
 80101c2:	480c      	ldr	r0, [pc, #48]	; (80101f4 <APP_Background+0xf4>)
 80101c4:	f002 fcde 	bl	8012b84 <MIOS32_LCD_PrintString>
 80101c8:	e7af      	b.n	801012a <APP_Background+0x2a>
 80101ca:	bf00      	nop
 80101cc:	0801e5f6 	.word	0x0801e5f6
 80101d0:	0801e608 	.word	0x0801e608
 80101d4:	20000310 	.word	0x20000310
 80101d8:	200013a8 	.word	0x200013a8
 80101dc:	0801e619 	.word	0x0801e619
 80101e0:	0801e636 	.word	0x0801e636
 80101e4:	0801e647 	.word	0x0801e647
 80101e8:	0801e658 	.word	0x0801e658
 80101ec:	0801e677 	.word	0x0801e677
 80101f0:	0801e692 	.word	0x0801e692
 80101f4:	0801e6a9 	.word	0x0801e6a9

080101f8 <APP_MIDI_NotifyPackage>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a MIDI package has been received
/////////////////////////////////////////////////////////////////////////////
void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 80101f8:	4770      	bx	lr

080101fa <APP_SRIO_ServicePrepare>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called before the shift register chain is scanned
/////////////////////////////////////////////////////////////////////////////
void APP_SRIO_ServicePrepare(void)
{
 80101fa:	4770      	bx	lr

080101fc <APP_SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after the shift register chain has been scanned
/////////////////////////////////////////////////////////////////////////////
void APP_SRIO_ServiceFinish(void)
{
 80101fc:	4770      	bx	lr

080101fe <APP_DIN_NotifyToggle>:
/////////////////////////////////////////////////////////////////////////////
// This hook is called when a button has been toggled
// pin_value is 1 when button released, and 0 when button pressed
/////////////////////////////////////////////////////////////////////////////
void APP_DIN_NotifyToggle(u32 pin, u32 pin_value)
{
 80101fe:	4770      	bx	lr

08010200 <APP_ENC_NotifyChange>:
// This hook is called when an encoder has been moved
// incrementer is positive when encoder has been turned clockwise, else
// it is negative
/////////////////////////////////////////////////////////////////////////////
void APP_ENC_NotifyChange(u32 encoder, s32 incrementer)
{
 8010200:	4770      	bx	lr

08010202 <APP_AIN_NotifyChange>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a pot has been moved
/////////////////////////////////////////////////////////////////////////////
void APP_AIN_NotifyChange(u32 pin, u32 pin_value)
{
 8010202:	4770      	bx	lr

08010204 <SDCARD_Read_CID>:
}

void SDCARD_Read_CID(void)
{
 8010204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  int status = 0;
  // read CID data
  mios32_sdcard_cid_t cid;
  if( (status=MIOS32_SDCARD_CIDRead(&cid)) < 0 ) {
 8010206:	4668      	mov	r0, sp
 8010208:	f003 fedc 	bl	8013fc4 <MIOS32_SDCARD_CIDRead>
 801020c:	1e01      	subs	r1, r0, #0
 801020e:	da03      	bge.n	8010218 <SDCARD_Read_CID+0x14>
    DEBUG_MSG("ERROR: Reading CID failed with status %d!\n", status);
 8010210:	481c      	ldr	r0, [pc, #112]	; (8010284 <SDCARD_Read_CID+0x80>)
 8010212:	f002 fed7 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010216:	e033      	b.n	8010280 <SDCARD_Read_CID+0x7c>
  } else {
    DEBUG_MSG("--------------------\n");
 8010218:	481b      	ldr	r0, [pc, #108]	; (8010288 <SDCARD_Read_CID+0x84>)
 801021a:	f002 fed3 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("CID:\n");
 801021e:	481b      	ldr	r0, [pc, #108]	; (801028c <SDCARD_Read_CID+0x88>)
 8010220:	f002 fed0 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ManufacturerID:\n", cid.ManufacturerID);
 8010224:	f89d 1000 	ldrb.w	r1, [sp]
 8010228:	4819      	ldr	r0, [pc, #100]	; (8010290 <SDCARD_Read_CID+0x8c>)
 801022a:	f002 fecb 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- OEM AppliID:\n", cid.OEM_AppliID);
 801022e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8010232:	4818      	ldr	r0, [pc, #96]	; (8010294 <SDCARD_Read_CID+0x90>)
 8010234:	f002 fec6 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ProdName: %s\n", cid.ProdName);
 8010238:	a901      	add	r1, sp, #4
 801023a:	4817      	ldr	r0, [pc, #92]	; (8010298 <SDCARD_Read_CID+0x94>)
 801023c:	f002 fec2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ProdRev: %u\n", cid.ProdRev);
 8010240:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8010244:	4815      	ldr	r0, [pc, #84]	; (801029c <SDCARD_Read_CID+0x98>)
 8010246:	f002 febd 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ProdSN: 0x%08x\n", cid.ProdSN);
 801024a:	9903      	ldr	r1, [sp, #12]
 801024c:	4814      	ldr	r0, [pc, #80]	; (80102a0 <SDCARD_Read_CID+0x9c>)
 801024e:	f002 feb9 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved1: %u\n", cid.Reserved1);
 8010252:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8010256:	4813      	ldr	r0, [pc, #76]	; (80102a4 <SDCARD_Read_CID+0xa0>)
 8010258:	f002 feb4 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ManufactDate: %u\n", cid.ManufactDate);
 801025c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010260:	4811      	ldr	r0, [pc, #68]	; (80102a8 <SDCARD_Read_CID+0xa4>)
 8010262:	f002 feaf 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- msd_CRC: 0x%02x\n", cid.msd_CRC);
 8010266:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801026a:	4810      	ldr	r0, [pc, #64]	; (80102ac <SDCARD_Read_CID+0xa8>)
 801026c:	f002 feaa 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved2: %u\n", cid.Reserved2);
 8010270:	480f      	ldr	r0, [pc, #60]	; (80102b0 <SDCARD_Read_CID+0xac>)
 8010272:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8010276:	f002 fea5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("--------------------\n");
 801027a:	4803      	ldr	r0, [pc, #12]	; (8010288 <SDCARD_Read_CID+0x84>)
 801027c:	f002 fea2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  }
}
 8010280:	b007      	add	sp, #28
 8010282:	bd00      	pop	{pc}
 8010284:	0801e6ba 	.word	0x0801e6ba
 8010288:	0801e6e5 	.word	0x0801e6e5
 801028c:	0801e6fb 	.word	0x0801e6fb
 8010290:	0801e701 	.word	0x0801e701
 8010294:	0801e714 	.word	0x0801e714
 8010298:	0801e724 	.word	0x0801e724
 801029c:	0801e734 	.word	0x0801e734
 80102a0:	0801e743 	.word	0x0801e743
 80102a4:	0801e755 	.word	0x0801e755
 80102a8:	0801e766 	.word	0x0801e766
 80102ac:	0801e77a 	.word	0x0801e77a
 80102b0:	0801e78d 	.word	0x0801e78d

080102b4 <SDCARD_Read_CSD>:


void SDCARD_Read_CSD(void)
{
 80102b4:	b500      	push	{lr}
 80102b6:	b08d      	sub	sp, #52	; 0x34
  int status = 0;
  // read CSD data
  mios32_sdcard_csd_t csd;
  if( (status=MIOS32_SDCARD_CSDRead(&csd)) < 0 ) {
 80102b8:	a801      	add	r0, sp, #4
 80102ba:	f003 ff02 	bl	80140c2 <MIOS32_SDCARD_CSDRead>
 80102be:	1e01      	subs	r1, r0, #0
 80102c0:	da03      	bge.n	80102ca <SDCARD_Read_CSD+0x16>
    DEBUG_MSG("ERROR: Reading CSD failed with status %d!\n", status);
 80102c2:	4862      	ldr	r0, [pc, #392]	; (801044c <SDCARD_Read_CSD+0x198>)
 80102c4:	f002 fe7e 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 80102c8:	e0bd      	b.n	8010446 <SDCARD_Read_CSD+0x192>
  } else {
    DEBUG_MSG("--------------------\n");
 80102ca:	4861      	ldr	r0, [pc, #388]	; (8010450 <SDCARD_Read_CSD+0x19c>)
 80102cc:	f002 fe7a 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- CSDStruct: %u\n", csd.CSDStruct);
 80102d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80102d4:	485f      	ldr	r0, [pc, #380]	; (8010454 <SDCARD_Read_CSD+0x1a0>)
 80102d6:	f002 fe75 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- SysSpecVersion: %u\n", csd.SysSpecVersion);
 80102da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80102de:	485e      	ldr	r0, [pc, #376]	; (8010458 <SDCARD_Read_CSD+0x1a4>)
 80102e0:	f002 fe70 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved1: %u\n", csd.Reserved1);
 80102e4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80102e8:	485c      	ldr	r0, [pc, #368]	; (801045c <SDCARD_Read_CSD+0x1a8>)
 80102ea:	f002 fe6b 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- TAAC: %u\n", csd.TAAC);
 80102ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80102f2:	485b      	ldr	r0, [pc, #364]	; (8010460 <SDCARD_Read_CSD+0x1ac>)
 80102f4:	f002 fe66 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- NSAC: %u\n", csd.NSAC);
 80102f8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80102fc:	4859      	ldr	r0, [pc, #356]	; (8010464 <SDCARD_Read_CSD+0x1b0>)
 80102fe:	f002 fe61 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxBusClkFrec: %u\n", csd.MaxBusClkFrec);
 8010302:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8010306:	4858      	ldr	r0, [pc, #352]	; (8010468 <SDCARD_Read_CSD+0x1b4>)
 8010308:	f002 fe5c 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- CardComdClasses: %u\n", csd.CardComdClasses);
 801030c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010310:	4856      	ldr	r0, [pc, #344]	; (801046c <SDCARD_Read_CSD+0x1b8>)
 8010312:	f002 fe57 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- RdBlockLen: %u\n", csd.RdBlockLen);
 8010316:	f89d 100c 	ldrb.w	r1, [sp, #12]
 801031a:	4855      	ldr	r0, [pc, #340]	; (8010470 <SDCARD_Read_CSD+0x1bc>)
 801031c:	f002 fe52 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- PartBlockRead: %u\n", csd.PartBlockRead);
 8010320:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8010324:	4853      	ldr	r0, [pc, #332]	; (8010474 <SDCARD_Read_CSD+0x1c0>)
 8010326:	f002 fe4d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- WrBlockMisalign: %u\n", csd.WrBlockMisalign);
 801032a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801032e:	4852      	ldr	r0, [pc, #328]	; (8010478 <SDCARD_Read_CSD+0x1c4>)
 8010330:	f002 fe48 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- RdBlockMisalign: %u\n", csd.RdBlockMisalign);
 8010334:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8010338:	4850      	ldr	r0, [pc, #320]	; (801047c <SDCARD_Read_CSD+0x1c8>)
 801033a:	f002 fe43 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- DSRImpl: %u\n", csd.DSRImpl);
 801033e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8010342:	484f      	ldr	r0, [pc, #316]	; (8010480 <SDCARD_Read_CSD+0x1cc>)
 8010344:	f002 fe3e 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved2: %u\n", csd.Reserved2);
 8010348:	f89d 1011 	ldrb.w	r1, [sp, #17]
 801034c:	484d      	ldr	r0, [pc, #308]	; (8010484 <SDCARD_Read_CSD+0x1d0>)
 801034e:	f002 fe39 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- DeviceSize: %u\n", csd.DeviceSize);
 8010352:	9905      	ldr	r1, [sp, #20]
 8010354:	484c      	ldr	r0, [pc, #304]	; (8010488 <SDCARD_Read_CSD+0x1d4>)
 8010356:	f002 fe35 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxRdCurrentVDDMin: %u\n", csd.MaxRdCurrentVDDMin);
 801035a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801035e:	484b      	ldr	r0, [pc, #300]	; (801048c <SDCARD_Read_CSD+0x1d8>)
 8010360:	f002 fe30 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxRdCurrentVDDMax: %u\n", csd.MaxRdCurrentVDDMax);
 8010364:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8010368:	4849      	ldr	r0, [pc, #292]	; (8010490 <SDCARD_Read_CSD+0x1dc>)
 801036a:	f002 fe2b 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxWrCurrentVDDMin: %u\n", csd.MaxWrCurrentVDDMin);
 801036e:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8010372:	4848      	ldr	r0, [pc, #288]	; (8010494 <SDCARD_Read_CSD+0x1e0>)
 8010374:	f002 fe26 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxWrCurrentVDDMax: %u\n", csd.MaxWrCurrentVDDMax);
 8010378:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801037c:	4846      	ldr	r0, [pc, #280]	; (8010498 <SDCARD_Read_CSD+0x1e4>)
 801037e:	f002 fe21 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- DeviceSizeMul: %u\n", csd.DeviceSizeMul);
 8010382:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8010386:	4845      	ldr	r0, [pc, #276]	; (801049c <SDCARD_Read_CSD+0x1e8>)
 8010388:	f002 fe1c 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- EraseGrSize: %u\n", csd.EraseGrSize);
 801038c:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8010390:	4843      	ldr	r0, [pc, #268]	; (80104a0 <SDCARD_Read_CSD+0x1ec>)
 8010392:	f002 fe17 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- EraseGrMul: %u\n", csd.EraseGrMul);
 8010396:	f89d 101e 	ldrb.w	r1, [sp, #30]
 801039a:	4842      	ldr	r0, [pc, #264]	; (80104a4 <SDCARD_Read_CSD+0x1f0>)
 801039c:	f002 fe12 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- WrProtectGrSize: %u\n", csd.WrProtectGrSize);
 80103a0:	f89d 101f 	ldrb.w	r1, [sp, #31]
 80103a4:	4840      	ldr	r0, [pc, #256]	; (80104a8 <SDCARD_Read_CSD+0x1f4>)
 80103a6:	f002 fe0d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- WrProtectGrEnable: %u\n", csd.WrProtectGrEnable);
 80103aa:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80103ae:	483f      	ldr	r0, [pc, #252]	; (80104ac <SDCARD_Read_CSD+0x1f8>)
 80103b0:	f002 fe08 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ManDeflECC: %u\n", csd.ManDeflECC);
 80103b4:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80103b8:	483d      	ldr	r0, [pc, #244]	; (80104b0 <SDCARD_Read_CSD+0x1fc>)
 80103ba:	f002 fe03 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- WrSpeedFact: %u\n", csd.WrSpeedFact);
 80103be:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80103c2:	483c      	ldr	r0, [pc, #240]	; (80104b4 <SDCARD_Read_CSD+0x200>)
 80103c4:	f002 fdfe 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- MaxWrBlockLen: %u\n", csd.MaxWrBlockLen);
 80103c8:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 80103cc:	483a      	ldr	r0, [pc, #232]	; (80104b8 <SDCARD_Read_CSD+0x204>)
 80103ce:	f002 fdf9 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- WriteBlockPaPartial: %u\n", csd.WriteBlockPaPartial);
 80103d2:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80103d6:	4839      	ldr	r0, [pc, #228]	; (80104bc <SDCARD_Read_CSD+0x208>)
 80103d8:	f002 fdf4 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved3: %u\n", csd.Reserved3);
 80103dc:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 80103e0:	4837      	ldr	r0, [pc, #220]	; (80104c0 <SDCARD_Read_CSD+0x20c>)
 80103e2:	f002 fdef 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ContentProtectAppli: %u\n", csd.ContentProtectAppli);
 80103e6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 80103ea:	4836      	ldr	r0, [pc, #216]	; (80104c4 <SDCARD_Read_CSD+0x210>)
 80103ec:	f002 fdea 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- FileFormatGrouop: %u\n", csd.FileFormatGrouop);
 80103f0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 80103f4:	4834      	ldr	r0, [pc, #208]	; (80104c8 <SDCARD_Read_CSD+0x214>)
 80103f6:	f002 fde5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- CopyFlag: %u\n", csd.CopyFlag);
 80103fa:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 80103fe:	4833      	ldr	r0, [pc, #204]	; (80104cc <SDCARD_Read_CSD+0x218>)
 8010400:	f002 fde0 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- PermWrProtect: %u\n", csd.PermWrProtect);
 8010404:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8010408:	4831      	ldr	r0, [pc, #196]	; (80104d0 <SDCARD_Read_CSD+0x21c>)
 801040a:	f002 fddb 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- TempWrProtect: %u\n", csd.TempWrProtect);
 801040e:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8010412:	4830      	ldr	r0, [pc, #192]	; (80104d4 <SDCARD_Read_CSD+0x220>)
 8010414:	f002 fdd6 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- FileFormat: %u\n", csd.FileFormat);
 8010418:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 801041c:	482e      	ldr	r0, [pc, #184]	; (80104d8 <SDCARD_Read_CSD+0x224>)
 801041e:	f002 fdd1 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- ECC: %u\n", csd.ECC);
 8010422:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8010426:	482d      	ldr	r0, [pc, #180]	; (80104dc <SDCARD_Read_CSD+0x228>)
 8010428:	f002 fdcc 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- msd_CRC: 0x%02x\n", csd.msd_CRC);
 801042c:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8010430:	482b      	ldr	r0, [pc, #172]	; (80104e0 <SDCARD_Read_CSD+0x22c>)
 8010432:	f002 fdc7 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("- Reserved4: %u\n", csd.Reserved4);
 8010436:	482b      	ldr	r0, [pc, #172]	; (80104e4 <SDCARD_Read_CSD+0x230>)
 8010438:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
 801043c:	f002 fdc2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("--------------------\n");
 8010440:	4803      	ldr	r0, [pc, #12]	; (8010450 <SDCARD_Read_CSD+0x19c>)
 8010442:	f002 fdbf 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  }
}
 8010446:	b00d      	add	sp, #52	; 0x34
 8010448:	bd00      	pop	{pc}
 801044a:	bf00      	nop
 801044c:	0801e79e 	.word	0x0801e79e
 8010450:	0801e6e5 	.word	0x0801e6e5
 8010454:	0801e7c9 	.word	0x0801e7c9
 8010458:	0801e7da 	.word	0x0801e7da
 801045c:	0801e755 	.word	0x0801e755
 8010460:	0801e7f0 	.word	0x0801e7f0
 8010464:	0801e7fc 	.word	0x0801e7fc
 8010468:	0801e808 	.word	0x0801e808
 801046c:	0801e81d 	.word	0x0801e81d
 8010470:	0801e834 	.word	0x0801e834
 8010474:	0801e846 	.word	0x0801e846
 8010478:	0801e85b 	.word	0x0801e85b
 801047c:	0801e872 	.word	0x0801e872
 8010480:	0801e889 	.word	0x0801e889
 8010484:	0801e78d 	.word	0x0801e78d
 8010488:	0801e898 	.word	0x0801e898
 801048c:	0801e8aa 	.word	0x0801e8aa
 8010490:	0801e8c4 	.word	0x0801e8c4
 8010494:	0801e8de 	.word	0x0801e8de
 8010498:	0801e8f8 	.word	0x0801e8f8
 801049c:	0801e912 	.word	0x0801e912
 80104a0:	0801e927 	.word	0x0801e927
 80104a4:	0801e93a 	.word	0x0801e93a
 80104a8:	0801e94c 	.word	0x0801e94c
 80104ac:	0801e963 	.word	0x0801e963
 80104b0:	0801e97c 	.word	0x0801e97c
 80104b4:	0801e98e 	.word	0x0801e98e
 80104b8:	0801e9a1 	.word	0x0801e9a1
 80104bc:	0801e9b6 	.word	0x0801e9b6
 80104c0:	0801e9d1 	.word	0x0801e9d1
 80104c4:	0801e9e2 	.word	0x0801e9e2
 80104c8:	0801e9fd 	.word	0x0801e9fd
 80104cc:	0801ea15 	.word	0x0801ea15
 80104d0:	0801ea25 	.word	0x0801ea25
 80104d4:	0801ea3a 	.word	0x0801ea3a
 80104d8:	0801ea4f 	.word	0x0801ea4f
 80104dc:	0801ea61 	.word	0x0801ea61
 80104e0:	0801e77a 	.word	0x0801e77a
 80104e4:	0801ea6c 	.word	0x0801ea6c

080104e8 <SDCARD_Messages>:

void SDCARD_Messages(FRESULT res)
{
 switch (res){
 80104e8:	280e      	cmp	r0, #14
 80104ea:	d823      	bhi.n	8010534 <SDCARD_Messages+0x4c>
 80104ec:	e8df f000 	tbb	[pc, r0]
 80104f0:	0c1e1008 	.word	0x0c1e1008
 80104f4:	18161422 	.word	0x18161422
 80104f8:	0a1c221a 	.word	0x0a1c221a
 80104fc:	200e      	.short	0x200e
 80104fe:	12          	.byte	0x12
 80104ff:	00          	.byte	0x00
    case FR_OK: 			DEBUG_MSG("Operation completed successfully\n");break;
 8010500:	480e      	ldr	r0, [pc, #56]	; (801053c <SDCARD_Messages+0x54>)
 8010502:	e018      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_INVALID_DRIVE: 	DEBUG_MSG("Invalid Drive\n");break;
 8010504:	480e      	ldr	r0, [pc, #56]	; (8010540 <SDCARD_Messages+0x58>)
 8010506:	e016      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_NOT_READY: 		DEBUG_MSG("Drive not ready\n");break;
 8010508:	480e      	ldr	r0, [pc, #56]	; (8010544 <SDCARD_Messages+0x5c>)
 801050a:	e014      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_NOT_ENABLED:	DEBUG_MSG("Drive has no work area\n");break;
 801050c:	480e      	ldr	r0, [pc, #56]	; (8010548 <SDCARD_Messages+0x60>)
 801050e:	e012      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_DISK_ERR:		DEBUG_MSG("Disk Function Error\n");break;
 8010510:	480e      	ldr	r0, [pc, #56]	; (801054c <SDCARD_Messages+0x64>)
 8010512:	e010      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_MKFS_ABORTED:	DEBUG_MSG("Drive Format Aborted!\n");break;
 8010514:	480e      	ldr	r0, [pc, #56]	; (8010550 <SDCARD_Messages+0x68>)
 8010516:	e00e      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_NO_PATH: 		DEBUG_MSG("Could not find the path.\n");break;
 8010518:	480e      	ldr	r0, [pc, #56]	; (8010554 <SDCARD_Messages+0x6c>)
 801051a:	e00c      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_INVALID_NAME: 	DEBUG_MSG("The path name is invalid.\n");break;
 801051c:	480e      	ldr	r0, [pc, #56]	; (8010558 <SDCARD_Messages+0x70>)
 801051e:	e00a      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_DENIED: 		DEBUG_MSG("Directory table or disk full.\n");break;
 8010520:	480e      	ldr	r0, [pc, #56]	; (801055c <SDCARD_Messages+0x74>)
 8010522:	e008      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_EXIST: 			DEBUG_MSG("A file or directory with the same name already exists.\n");break;
 8010524:	480e      	ldr	r0, [pc, #56]	; (8010560 <SDCARD_Messages+0x78>)
 8010526:	e006      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_WRITE_PROTECTED:DEBUG_MSG("The drive is write protected.\n");break;
 8010528:	480e      	ldr	r0, [pc, #56]	; (8010564 <SDCARD_Messages+0x7c>)
 801052a:	e004      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_INT_ERR: 		DEBUG_MSG("FAR structure or internal error.\n");break;
 801052c:	480e      	ldr	r0, [pc, #56]	; (8010568 <SDCARD_Messages+0x80>)
 801052e:	e002      	b.n	8010536 <SDCARD_Messages+0x4e>
    case FR_NO_FILESYSTEM: 	DEBUG_MSG("The drive does not contain a valid FAT12/16/32 volume.\n");break;
 8010530:	480e      	ldr	r0, [pc, #56]	; (801056c <SDCARD_Messages+0x84>)
 8010532:	e000      	b.n	8010536 <SDCARD_Messages+0x4e>
    default: 				DEBUG_MSG("Unknown Error\n"); 
 8010534:	480e      	ldr	r0, [pc, #56]	; (8010570 <SDCARD_Messages+0x88>)
 8010536:	f002 bd45 	b.w	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 801053a:	bf00      	nop
 801053c:	0801ea7d 	.word	0x0801ea7d
 8010540:	0801ea9f 	.word	0x0801ea9f
 8010544:	0801eaae 	.word	0x0801eaae
 8010548:	0801eabf 	.word	0x0801eabf
 801054c:	0801ead7 	.word	0x0801ead7
 8010550:	0801eaec 	.word	0x0801eaec
 8010554:	0801eb03 	.word	0x0801eb03
 8010558:	0801eb1d 	.word	0x0801eb1d
 801055c:	0801eb38 	.word	0x0801eb38
 8010560:	0801eb57 	.word	0x0801eb57
 8010564:	0801eb8f 	.word	0x0801eb8f
 8010568:	0801ebae 	.word	0x0801ebae
 801056c:	0801ebd0 	.word	0x0801ebd0
 8010570:	0801ec08 	.word	0x0801ec08

08010574 <SDCARD_Format>:
  }
}  

void SDCARD_Format(void)
{
 8010574:	b508      	push	{r3, lr}
#if _USE_MKFS && !_FS_READONLY
  DEBUG_MSG("Formatting SDCARD....\n");
 8010576:	4806      	ldr	r0, [pc, #24]	; (8010590 <SDCARD_Format+0x1c>)
 8010578:	f002 fd24 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  SDCARD_Messages(f_mkfs(0,0,0));
 801057c:	2000      	movs	r0, #0
 801057e:	4601      	mov	r1, r0
 8010580:	4602      	mov	r2, r0
 8010582:	f00d f961 	bl	801d848 <f_mkfs>
#else
  DEBUG_MSG("Please set _MKFS=1 and _FS_READONLY=0 in ffconf.h\n"); 
#endif
}
 8010586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void SDCARD_Format(void)
{
#if _USE_MKFS && !_FS_READONLY
  DEBUG_MSG("Formatting SDCARD....\n");
  SDCARD_Messages(f_mkfs(0,0,0));
 801058a:	f7ff bfad 	b.w	80104e8 <SDCARD_Messages>
 801058e:	bf00      	nop
 8010590:	0801ec17 	.word	0x0801ec17

08010594 <ShowFatTime>:
{
   BYTE AM = 1;

   int Hour, Minute, Second;

   Hour = ThisTime >> 11;        // bits 15 through 11 hold Hour...
 8010594:	0ac2      	lsrs	r2, r0, #11
   Minute = ThisTime & 0x07E0;   // bits 10 through 5 hold Minute... 0000 0111 1110 0000
   Minute = Minute >> 5;
   Second = ThisTime & 0x001F;   //bits 4 through 0 hold Second...   0000 0000 0001 1111
   
   if( Hour > 11 )
 8010596:	2a0b      	cmp	r2, #11
///////////////////////////////////////////////////////////////////
// These time and date functions and other bits of following code were adapted from 
// Rickey's world of Microelectronics under the creative commons 2.5 license.
// http://www.8051projects.net/mmc-sd-interface-fat16/final-code.php
void ShowFatTime( WORD ThisTime, char* msg )
{
 8010598:	b573      	push	{r0, r1, r4, r5, r6, lr}

   int Hour, Minute, Second;

   Hour = ThisTime >> 11;        // bits 15 through 11 hold Hour...
   Minute = ThisTime & 0x07E0;   // bits 10 through 5 hold Minute... 0000 0111 1110 0000
   Minute = Minute >> 5;
 801059a:	f3c0 1345 	ubfx	r3, r0, #5, #6
   Second = ThisTime & 0x001F;   //bits 4 through 0 hold Second...   0000 0000 0001 1111
 801059e:	f000 001f 	and.w	r0, r0, #31
   
   if( Hour > 11 )
 80105a2:	dd03      	ble.n	80105ac <ShowFatTime+0x18>
   {
      AM = 0;
      if( Hour > 12 )
 80105a4:	2a0c      	cmp	r2, #12
 80105a6:	d003      	beq.n	80105b0 <ShowFatTime+0x1c>
         Hour -= 12;
 80105a8:	3a0c      	subs	r2, #12
 80105aa:	e001      	b.n	80105b0 <ShowFatTime+0x1c>
// These time and date functions and other bits of following code were adapted from 
// Rickey's world of Microelectronics under the creative commons 2.5 license.
// http://www.8051projects.net/mmc-sd-interface-fat16/final-code.php
void ShowFatTime( WORD ThisTime, char* msg )
{
   BYTE AM = 1;
 80105ac:	2401      	movs	r4, #1
 80105ae:	e000      	b.n	80105b2 <ShowFatTime+0x1e>
   Minute = Minute >> 5;
   Second = ThisTime & 0x001F;   //bits 4 through 0 hold Second...   0000 0000 0001 1111
   
   if( Hour > 11 )
   {
      AM = 0;
 80105b0:	2400      	movs	r4, #0
      if( Hour > 12 )
         Hour -= 12;
   }
     
   sprintf( msg, "%02d:%02d:%02d %s", Hour, Minute, Second*2,
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <ShowFatTime+0x3c>)
 80105b4:	4e07      	ldr	r6, [pc, #28]	; (80105d4 <ShowFatTime+0x40>)
 80105b6:	0040      	lsls	r0, r0, #1
 80105b8:	2c00      	cmp	r4, #0
 80105ba:	bf0c      	ite	eq
 80105bc:	4634      	moveq	r4, r6
 80105be:	462c      	movne	r4, r5
 80105c0:	e88d 0011 	stmia.w	sp, {r0, r4}
 80105c4:	4608      	mov	r0, r1
 80105c6:	4904      	ldr	r1, [pc, #16]	; (80105d8 <ShowFatTime+0x44>)
 80105c8:	f006 f9ea 	bl	80169a0 <sprintf>
         (AM)?"AM":"PM");
   return;
}
 80105cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80105ce:	bf00      	nop
 80105d0:	0801ec2e 	.word	0x0801ec2e
 80105d4:	0801ec31 	.word	0x0801ec31
 80105d8:	0801ec34 	.word	0x0801ec34

080105dc <ShowFatDate>:

void ShowFatDate( WORD ThisDate, char* msg )
{
 80105dc:	b507      	push	{r0, r1, r2, lr}

   int Year, Month, Day;

   Year = ThisDate >> 9;         // bits 15 through 9 hold year...
 80105de:	0a42      	lsrs	r2, r0, #9
         (AM)?"AM":"PM");
   return;
}

void ShowFatDate( WORD ThisDate, char* msg )
{
 80105e0:	4603      	mov	r3, r0

   Year = ThisDate >> 9;         // bits 15 through 9 hold year...
   Month = ThisDate & 0x01E0;    // bits 8 through 5 hold month... 0000 0001 1110 0000
   Month = Month >> 5;
   Day = ThisDate & 0x001F;      //bits 4 through 0 hold day...    0000 0000 0001 1111
   sprintf( msg, "%02d/%02d/%02d", Month, Day, Year-20);
 80105e2:	3a14      	subs	r2, #20
 80105e4:	9200      	str	r2, [sp, #0]
 80105e6:	4608      	mov	r0, r1
 80105e8:	f3c3 1243 	ubfx	r2, r3, #5, #4
 80105ec:	4902      	ldr	r1, [pc, #8]	; (80105f8 <ShowFatDate+0x1c>)
 80105ee:	f003 031f 	and.w	r3, r3, #31
 80105f2:	f006 f9d5 	bl	80169a0 <sprintf>
   return;
}
 80105f6:	bd0e      	pop	{r1, r2, r3, pc}
 80105f8:	0801ec46 	.word	0x0801ec46

080105fc <SDCARD_Dir>:

void SDCARD_Dir(void)
{
 80105fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
  fno.lfname = lfn;
  fno.lfsize = sizeof(lfn);
#endif

  if (disk_label[0]==' ')
 8010600:	4955      	ldr	r1, [pc, #340]	; (8010758 <SDCARD_Dir+0x15c>)
  DIR dir;
  char *fn;
  
#if _USE_LFN
  static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
  fno.lfname = lfn;
 8010602:	4b56      	ldr	r3, [pc, #344]	; (801075c <SDCARD_Dir+0x160>)
  fno.lfsize = sizeof(lfn);
#endif

  if (disk_label[0]==' ')
 8010604:	780a      	ldrb	r2, [r1, #0]
   sprintf( msg, "%02d/%02d/%02d", Month, Day, Year-20);
   return;
}

void SDCARD_Dir(void)
{
 8010606:	b0a3      	sub	sp, #140	; 0x8c
  char *fn;
  
#if _USE_LFN
  static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
  fno.lfname = lfn;
  fno.lfsize = sizeof(lfn);
 8010608:	f44f 7080 	mov.w	r0, #256	; 0x100
#endif

  if (disk_label[0]==' ')
 801060c:	2a20      	cmp	r2, #32
  DIR dir;
  char *fn;
  
#if _USE_LFN
  static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
  fno.lfname = lfn;
 801060e:	9317      	str	r3, [sp, #92]	; 0x5c
  fno.lfsize = sizeof(lfn);
 8010610:	9018      	str	r0, [sp, #96]	; 0x60
#endif

  if (disk_label[0]==' ')
 8010612:	d103      	bne.n	801061c <SDCARD_Dir+0x20>
	DEBUG_MSG("Volume in Drive 0 has no label.\n");
 8010614:	4852      	ldr	r0, [pc, #328]	; (8010760 <SDCARD_Dir+0x164>)
 8010616:	f002 fcd5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 801061a:	e002      	b.n	8010622 <SDCARD_Dir+0x26>
  else
	DEBUG_MSG("Volume in Drive 0 %s\n",disk_label);
 801061c:	4851      	ldr	r0, [pc, #324]	; (8010764 <SDCARD_Dir+0x168>)
 801061e:	f002 fcd1 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	
  DEBUG_MSG("Directory of 0:%s\n\n", dir_path);
 8010622:	4951      	ldr	r1, [pc, #324]	; (8010768 <SDCARD_Dir+0x16c>)
 8010624:	4851      	ldr	r0, [pc, #324]	; (801076c <SDCARD_Dir+0x170>)
 8010626:	f002 fccd 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>

  if( (res=f_opendir(&dir, dir_path)) != FR_OK ) {
 801062a:	a819      	add	r0, sp, #100	; 0x64
 801062c:	494e      	ldr	r1, [pc, #312]	; (8010768 <SDCARD_Dir+0x16c>)
 801062e:	f00c fe79 	bl	801d324 <f_opendir>
 8010632:	4602      	mov	r2, r0
 8010634:	2800      	cmp	r0, #0
 8010636:	d069      	beq.n	801070c <SDCARD_Dir+0x110>
    DEBUG_MSG("Failed to open directory %s - error status: %d\n",dir_path, res);
 8010638:	494b      	ldr	r1, [pc, #300]	; (8010768 <SDCARD_Dir+0x16c>)
 801063a:	484d      	ldr	r0, [pc, #308]	; (8010770 <SDCARD_Dir+0x174>)
 801063c:	f002 fcc2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010640:	e086      	b.n	8010750 <SDCARD_Dir+0x154>
    return; // error
  }
  
  while (( f_readdir(&dir,&fno) == FR_OK) && fno.fname[0]) {
 8010642:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
 8010646:	2900      	cmp	r1, #0
 8010648:	d066      	beq.n	8010718 <SDCARD_Dir+0x11c>

#if _USE_LFN
    fn = *fno.lfname ? fno.lfname : fno.fname;
 801064a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801064c:	782c      	ldrb	r4, [r5, #0]
 801064e:	b90c      	cbnz	r4, 8010654 <SDCARD_Dir+0x58>
 8010650:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
#else
    fn = fno.fname;
#endif
    char date[10];
	ShowFatDate(fno.fdate,(char*)&date);
 8010654:	af0b      	add	r7, sp, #44	; 0x2c
 8010656:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
	char time[12];
	ShowFatTime(fno.ftime,(char*)&time);
	DEBUG_MSG("[%s%s%s%s%s%s%s] %s  %s   %s %u %s\n",
 801065a:	4c46      	ldr	r4, [pc, #280]	; (8010774 <SDCARD_Dir+0x178>)
 801065c:	f8df b150 	ldr.w	fp, [pc, #336]	; 80107b0 <SDCARD_Dir+0x1b4>
    fn = *fno.lfname ? fno.lfname : fno.fname;
#else
    fn = fno.fname;
#endif
    char date[10];
	ShowFatDate(fno.fdate,(char*)&date);
 8010660:	4639      	mov	r1, r7
	char time[12];
	ShowFatTime(fno.ftime,(char*)&time);
 8010662:	ae0e      	add	r6, sp, #56	; 0x38
    fn = *fno.lfname ? fno.lfname : fno.fname;
#else
    fn = fno.fname;
#endif
    char date[10];
	ShowFatDate(fno.fdate,(char*)&date);
 8010664:	f7ff ffba 	bl	80105dc <ShowFatDate>
	char time[12];
	ShowFatTime(fno.ftime,(char*)&time);
 8010668:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
 801066c:	4631      	mov	r1, r6
 801066e:	f7ff ff91 	bl	8010594 <ShowFatTime>
	DEBUG_MSG("[%s%s%s%s%s%s%s] %s  %s   %s %u %s\n",
		(fno.fattrib & AM_RDO ) ? "r" : ".",
 8010672:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
#endif
    char date[10];
	ShowFatDate(fno.fdate,(char*)&date);
	char time[12];
	ShowFatTime(fno.ftime,(char*)&time);
	DEBUG_MSG("[%s%s%s%s%s%s%s] %s  %s   %s %u %s\n",
 8010676:	4940      	ldr	r1, [pc, #256]	; (8010778 <SDCARD_Dir+0x17c>)
 8010678:	9704      	str	r7, [sp, #16]
 801067a:	f000 0302 	and.w	r3, r0, #2
 801067e:	f000 0a08 	and.w	sl, r0, #8
 8010682:	b2da      	uxtb	r2, r3
 8010684:	4b3d      	ldr	r3, [pc, #244]	; (801077c <SDCARD_Dir+0x180>)
 8010686:	9605      	str	r6, [sp, #20]
 8010688:	f010 0f01 	tst.w	r0, #1
 801068c:	fa5f f88a 	uxtb.w	r8, sl
 8010690:	bf08      	it	eq
 8010692:	4621      	moveq	r1, r4
 8010694:	f1b8 0f00 	cmp.w	r8, #0
 8010698:	bf0c      	ite	eq
 801069a:	46a2      	moveq	sl, r4
 801069c:	469a      	movne	sl, r3
 801069e:	4b38      	ldr	r3, [pc, #224]	; (8010780 <SDCARD_Dir+0x184>)
 80106a0:	f8cd a000 	str.w	sl, [sp]
 80106a4:	f010 0f0f 	tst.w	r0, #15
 80106a8:	bf0c      	ite	eq
 80106aa:	46a1      	moveq	r9, r4
 80106ac:	4699      	movne	r9, r3
 80106ae:	4b35      	ldr	r3, [pc, #212]	; (8010784 <SDCARD_Dir+0x188>)
 80106b0:	f8cd 9004 	str.w	r9, [sp, #4]
		(fno.fattrib & AM_RDO ) ? "r" : ".",
		(fno.fattrib & AM_HID ) ? "h" : ".",
		(fno.fattrib & AM_SYS ) ? "s" : ".",
		(fno.fattrib & AM_VOL ) ? "v" : ".",
		(fno.fattrib & AM_LFN ) ? "l" : ".",
		(fno.fattrib & AM_DIR ) ? "d" : ".",
 80106b4:	f000 0e10 	and.w	lr, r0, #16
#endif
    char date[10];
	ShowFatDate(fno.fdate,(char*)&date);
	char time[12];
	ShowFatTime(fno.ftime,(char*)&time);
	DEBUG_MSG("[%s%s%s%s%s%s%s] %s  %s   %s %u %s\n",
 80106b8:	f000 0c04 	and.w	ip, r0, #4
 80106bc:	f1be 0f00 	cmp.w	lr, #0
 80106c0:	bf0c      	ite	eq
 80106c2:	46a0      	moveq	r8, r4
 80106c4:	4698      	movne	r8, r3
 80106c6:	f000 0020 	and.w	r0, r0, #32
 80106ca:	4b2f      	ldr	r3, [pc, #188]	; (8010788 <SDCARD_Dir+0x18c>)
 80106cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80106d0:	b2c0      	uxtb	r0, r0
 80106d2:	2800      	cmp	r0, #0
 80106d4:	bf0c      	ite	eq
 80106d6:	4620      	moveq	r0, r4
 80106d8:	4618      	movne	r0, r3
 80106da:	4b2c      	ldr	r3, [pc, #176]	; (801078c <SDCARD_Dir+0x190>)
 80106dc:	9003      	str	r0, [sp, #12]
 80106de:	f1be 0f00 	cmp.w	lr, #0
 80106e2:	bf08      	it	eq
 80106e4:	465b      	moveq	r3, fp
 80106e6:	9306      	str	r3, [sp, #24]
 80106e8:	4b29      	ldr	r3, [pc, #164]	; (8010790 <SDCARD_Dir+0x194>)
 80106ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80106ec:	9508      	str	r5, [sp, #32]
 80106ee:	2a00      	cmp	r2, #0
 80106f0:	bf0c      	ite	eq
 80106f2:	4622      	moveq	r2, r4
 80106f4:	461a      	movne	r2, r3
 80106f6:	4b27      	ldr	r3, [pc, #156]	; (8010794 <SDCARD_Dir+0x198>)
 80106f8:	9007      	str	r0, [sp, #28]
 80106fa:	fa5f fc8c 	uxtb.w	ip, ip
 80106fe:	4826      	ldr	r0, [pc, #152]	; (8010798 <SDCARD_Dir+0x19c>)
 8010700:	f1bc 0f00 	cmp.w	ip, #0
 8010704:	bf08      	it	eq
 8010706:	4623      	moveq	r3, r4
 8010708:	f002 fc5c 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  if( (res=f_opendir(&dir, dir_path)) != FR_OK ) {
    DEBUG_MSG("Failed to open directory %s - error status: %d\n",dir_path, res);
    return; // error
  }
  
  while (( f_readdir(&dir,&fno) == FR_OK) && fno.fname[0]) {
 801070c:	a819      	add	r0, sp, #100	; 0x64
 801070e:	a911      	add	r1, sp, #68	; 0x44
 8010710:	f00c fe3e 	bl	801d390 <f_readdir>
 8010714:	2800      	cmp	r0, #0
 8010716:	d094      	beq.n	8010642 <SDCARD_Dir+0x46>
		(fno.fattrib & AM_ARC ) ? "a" : ".",
		date,time,
		(fno.fattrib & AM_DIR) ? "<DIR>" : " ",
		fno.fsize,fn);
  }
  if (f_getfree("", &free_clust, &dir.fs))
 8010718:	4820      	ldr	r0, [pc, #128]	; (801079c <SDCARD_Dir+0x1a0>)
 801071a:	a90a      	add	r1, sp, #40	; 0x28
 801071c:	aa19      	add	r2, sp, #100	; 0x64
 801071e:	f00c fe65 	bl	801d3ec <f_getfree>
 8010722:	b118      	cbz	r0, 801072c <SDCARD_Dir+0x130>
  {
	DEBUG_MSG("f_getfree() failed...\n");
 8010724:	481e      	ldr	r0, [pc, #120]	; (80107a0 <SDCARD_Dir+0x1a4>)
 8010726:	f002 fc4d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 801072a:	e011      	b.n	8010750 <SDCARD_Dir+0x154>
	return;
  }
  DEBUG_MSG("%u KB total disk space.\n",(DWORD)(fs.max_clust-2)*fs.csize/2);
 801072c:	4c1d      	ldr	r4, [pc, #116]	; (80107a4 <SDCARD_Dir+0x1a8>)
 801072e:	69e3      	ldr	r3, [r4, #28]
 8010730:	78a0      	ldrb	r0, [r4, #2]
 8010732:	1e9a      	subs	r2, r3, #2
 8010734:	fb02 f100 	mul.w	r1, r2, r0
 8010738:	0849      	lsrs	r1, r1, #1
 801073a:	481b      	ldr	r0, [pc, #108]	; (80107a8 <SDCARD_Dir+0x1ac>)
 801073c:	f002 fc42 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  DEBUG_MSG("%u KB available on the disk.\n\n",free_clust*fs.csize/2);
 8010740:	78a0      	ldrb	r0, [r4, #2]
 8010742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010744:	fb03 f200 	mul.w	r2, r3, r0
 8010748:	0851      	lsrs	r1, r2, #1
 801074a:	4818      	ldr	r0, [pc, #96]	; (80107ac <SDCARD_Dir+0x1b0>)
 801074c:	f002 fc3a 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  return; 
}
 8010750:	b023      	add	sp, #140	; 0x8c
 8010752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010756:	bf00      	nop
 8010758:	20000070 	.word	0x20000070
 801075c:	20000311 	.word	0x20000311
 8010760:	0801ec63 	.word	0x0801ec63
 8010764:	0801ec84 	.word	0x0801ec84
 8010768:	200002ac 	.word	0x200002ac
 801076c:	0801ec9a 	.word	0x0801ec9a
 8010770:	0801e5a3 	.word	0x0801e5a3
 8010774:	0801ee59 	.word	0x0801ee59
 8010778:	0801f2e7 	.word	0x0801f2e7
 801077c:	0801ec57 	.word	0x0801ec57
 8010780:	0801ec59 	.word	0x0801ec59
 8010784:	0801f6d3 	.word	0x0801f6d3
 8010788:	0801ec5b 	.word	0x0801ec5b
 801078c:	0801ec5d 	.word	0x0801ec5d
 8010790:	0801ec55 	.word	0x0801ec55
 8010794:	0801ec44 	.word	0x0801ec44
 8010798:	0801ecae 	.word	0x0801ecae
 801079c:	0801f029 	.word	0x0801f029
 80107a0:	0801ecd2 	.word	0x0801ecd2
 80107a4:	2000007c 	.word	0x2000007c
 80107a8:	0801ece9 	.word	0x0801ece9
 80107ac:	0801ed02 	.word	0x0801ed02
 80107b0:	0801e645 	.word	0x0801e645

080107b4 <SDCARD_FileSystem>:


void SDCARD_FileSystem(void)
{
 80107b4:	b510      	push	{r4, lr}
 80107b6:	b08e      	sub	sp, #56	; 0x38
	DIR dir;
	FRESULT res;
    if( (res=f_opendir(&dir, "/")) != FR_OK ) {
 80107b8:	a805      	add	r0, sp, #20
 80107ba:	4919      	ldr	r1, [pc, #100]	; (8010820 <SDCARD_FileSystem+0x6c>)
 80107bc:	f00c fdb2 	bl	801d324 <f_opendir>
 80107c0:	4602      	mov	r2, r0
 80107c2:	b110      	cbz	r0, 80107ca <SDCARD_FileSystem+0x16>
      DEBUG_MSG("Failed to open directory %s - error status: %d\n",dir_path, res);
 80107c4:	4817      	ldr	r0, [pc, #92]	; (8010824 <SDCARD_FileSystem+0x70>)
 80107c6:	4918      	ldr	r1, [pc, #96]	; (8010828 <SDCARD_FileSystem+0x74>)
 80107c8:	e025      	b.n	8010816 <SDCARD_FileSystem+0x62>
      return; // error
    }

    DEBUG_MSG("%u sector/s per cluster, %u clusters.\n", dir.fs->csize, dir.fs->max_clust);
 80107ca:	9b05      	ldr	r3, [sp, #20]
 80107cc:	4817      	ldr	r0, [pc, #92]	; (801082c <SDCARD_FileSystem+0x78>)
 80107ce:	7899      	ldrb	r1, [r3, #2]
 80107d0:	69da      	ldr	r2, [r3, #28]
 80107d2:	f002 fbf7 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("%u sectors per FAT, first FAT at sector #%u, root dir at #%u.\n", dir.fs->sects_fat, dir.fs->fatbase, dir.fs->dirbase);
 80107d6:	9c05      	ldr	r4, [sp, #20]
 80107d8:	4815      	ldr	r0, [pc, #84]	; (8010830 <SDCARD_FileSystem+0x7c>)
 80107da:	6a22      	ldr	r2, [r4, #32]
 80107dc:	69a1      	ldr	r1, [r4, #24]
 80107de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107e0:	f002 fbf0 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    DEBUG_MSG("%u root dir entries (not valid for FAT32)\n", dir.fs->n_rootdir);
 80107e4:	9905      	ldr	r1, [sp, #20]
 80107e6:	4813      	ldr	r0, [pc, #76]	; (8010834 <SDCARD_FileSystem+0x80>)
 80107e8:	8909      	ldrh	r1, [r1, #8]
 80107ea:	f002 fbeb 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
    char file_system[20];
    if( dir.fs->fs_type == FS_FAT12 )
 80107ee:	9c05      	ldr	r4, [sp, #20]
 80107f0:	7822      	ldrb	r2, [r4, #0]
 80107f2:	2a01      	cmp	r2, #1
      strcpy(file_system, "FAT12");
 80107f4:	4668      	mov	r0, sp

    DEBUG_MSG("%u sector/s per cluster, %u clusters.\n", dir.fs->csize, dir.fs->max_clust);
    DEBUG_MSG("%u sectors per FAT, first FAT at sector #%u, root dir at #%u.\n", dir.fs->sects_fat, dir.fs->fatbase, dir.fs->dirbase);
    DEBUG_MSG("%u root dir entries (not valid for FAT32)\n", dir.fs->n_rootdir);
    char file_system[20];
    if( dir.fs->fs_type == FS_FAT12 )
 80107f6:	d101      	bne.n	80107fc <SDCARD_FileSystem+0x48>
      strcpy(file_system, "FAT12");
 80107f8:	490f      	ldr	r1, [pc, #60]	; (8010838 <SDCARD_FileSystem+0x84>)
 80107fa:	e007      	b.n	801080c <SDCARD_FileSystem+0x58>
    else if( dir.fs->fs_type == FS_FAT16 )
 80107fc:	2a02      	cmp	r2, #2
 80107fe:	d101      	bne.n	8010804 <SDCARD_FileSystem+0x50>
      strcpy(file_system, "FAT16");
 8010800:	490e      	ldr	r1, [pc, #56]	; (801083c <SDCARD_FileSystem+0x88>)
 8010802:	e003      	b.n	801080c <SDCARD_FileSystem+0x58>
    else if( dir.fs->fs_type == FS_FAT32 )
 8010804:	2a03      	cmp	r2, #3
      strcpy(file_system, "FAT32");
 8010806:	bf0c      	ite	eq
 8010808:	490d      	ldreq	r1, [pc, #52]	; (8010840 <SDCARD_FileSystem+0x8c>)
    else
      strcpy(file_system, "unknown FS");
 801080a:	490e      	ldrne	r1, [pc, #56]	; (8010844 <SDCARD_FileSystem+0x90>)
 801080c:	f00d fe24 	bl	801e458 <strcpy>
    DEBUG_MSG("Filesystem: 0x%02x (%s)\n", dir.fs->fs_type, file_system);
 8010810:	480d      	ldr	r0, [pc, #52]	; (8010848 <SDCARD_FileSystem+0x94>)
 8010812:	7821      	ldrb	r1, [r4, #0]
 8010814:	466a      	mov	r2, sp
 8010816:	f002 fbd5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>

}
 801081a:	b00e      	add	sp, #56	; 0x38
 801081c:	bd10      	pop	{r4, pc}
 801081e:	bf00      	nop
 8010820:	0801e5a1 	.word	0x0801e5a1
 8010824:	0801e5a3 	.word	0x0801e5a3
 8010828:	200002ac 	.word	0x200002ac
 801082c:	0801ed21 	.word	0x0801ed21
 8010830:	0801ed48 	.word	0x0801ed48
 8010834:	0801ed87 	.word	0x0801ed87
 8010838:	0801edb2 	.word	0x0801edb2
 801083c:	0801edb8 	.word	0x0801edb8
 8010840:	0801edbe 	.word	0x0801edbe
 8010844:	0801edc4 	.word	0x0801edc4
 8010848:	0801edcf 	.word	0x0801edcf

0801084c <fullpath>:

void fullpath(char *source, char*dest)
{
 801084c:	b538      	push	{r3, r4, r5, lr}
  if (source[0]=='/') {
 801084e:	7803      	ldrb	r3, [r0, #0]
 8010850:	2b2f      	cmp	r3, #47	; 0x2f
    DEBUG_MSG("Filesystem: 0x%02x (%s)\n", dir.fs->fs_type, file_system);

}

void fullpath(char *source, char*dest)
{
 8010852:	4605      	mov	r5, r0
 8010854:	460c      	mov	r4, r1
  if (source[0]=='/') {
    strcpy(dest, source);
 8010856:	4608      	mov	r0, r1

}

void fullpath(char *source, char*dest)
{
  if (source[0]=='/') {
 8010858:	d104      	bne.n	8010864 <fullpath+0x18>
    strcpy(dest, source);
 801085a:	4629      	mov	r1, r5
    strcpy(dest,dir_path);
	if (dest[1]!='\0')
	  strcat(dest,"/");
    strcat(dest,source);
  }
}
 801085c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void fullpath(char *source, char*dest)
{
  if (source[0]=='/') {
    strcpy(dest, source);
 8010860:	f00d bdfa 	b.w	801e458 <strcpy>
  } else {	
    strcpy(dest,dir_path);
 8010864:	4907      	ldr	r1, [pc, #28]	; (8010884 <fullpath+0x38>)
 8010866:	f00d fdf7 	bl	801e458 <strcpy>
	if (dest[1]!='\0')
 801086a:	7860      	ldrb	r0, [r4, #1]
 801086c:	b118      	cbz	r0, 8010876 <fullpath+0x2a>
	  strcat(dest,"/");
 801086e:	4620      	mov	r0, r4
 8010870:	4905      	ldr	r1, [pc, #20]	; (8010888 <fullpath+0x3c>)
 8010872:	f00d fde4 	bl	801e43e <strcat>
    strcat(dest,source);
 8010876:	4620      	mov	r0, r4
 8010878:	4629      	mov	r1, r5
  }
}
 801087a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    strcpy(dest, source);
  } else {	
    strcpy(dest,dir_path);
	if (dest[1]!='\0')
	  strcat(dest,"/");
    strcat(dest,source);
 801087e:	f00d bdde 	b.w	801e43e <strcat>
 8010882:	bf00      	nop
 8010884:	200002ac 	.word	0x200002ac
 8010888:	0801e5a1 	.word	0x0801e5a1

0801088c <SDCARD_CD>:
  }
}

void SDCARD_CD(char *directory)
{
 801088c:	b500      	push	{lr}
 801088e:	b0a3      	sub	sp, #140	; 0x8c
  char new_path[MAX_PATH];
  DIR dir;
  fullpath(directory,(char *)&new_path);
 8010890:	a909      	add	r1, sp, #36	; 0x24
 8010892:	f7ff ffdb 	bl	801084c <fullpath>
  if((f_opendir(&dir, new_path)) != FR_OK ) {
 8010896:	4668      	mov	r0, sp
 8010898:	a909      	add	r1, sp, #36	; 0x24
 801089a:	f00c fd43 	bl	801d324 <f_opendir>
 801089e:	b118      	cbz	r0, 80108a8 <SDCARD_CD+0x1c>
    DEBUG_MSG("The system cannot find the path specified");
 80108a0:	4804      	ldr	r0, [pc, #16]	; (80108b4 <SDCARD_CD+0x28>)
 80108a2:	f002 fb8f 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 80108a6:	e003      	b.n	80108b0 <SDCARD_CD+0x24>
  } else {
    strcpy(dir_path,new_path);
 80108a8:	4803      	ldr	r0, [pc, #12]	; (80108b8 <SDCARD_CD+0x2c>)
 80108aa:	a909      	add	r1, sp, #36	; 0x24
 80108ac:	f00d fdd4 	bl	801e458 <strcpy>
  }
  return;
}
 80108b0:	b023      	add	sp, #140	; 0x8c
 80108b2:	bd00      	pop	{pc}
 80108b4:	0801ede8 	.word	0x0801ede8
 80108b8:	200002ac 	.word	0x200002ac

080108bc <SDCARD_Delete>:

void SDCARD_Delete(char *directory)
{
 80108bc:	b500      	push	{lr}
 80108be:	b09b      	sub	sp, #108	; 0x6c
  char new_path[MAX_PATH];
  fullpath(directory,(char *)&new_path);
 80108c0:	a901      	add	r1, sp, #4
 80108c2:	f7ff ffc3 	bl	801084c <fullpath>
  if((f_unlink(new_path)) != FR_OK ) {
 80108c6:	a801      	add	r0, sp, #4
 80108c8:	f00c fe04 	bl	801d4d4 <f_unlink>
 80108cc:	b108      	cbz	r0, 80108d2 <SDCARD_Delete+0x16>
    DEBUG_MSG("The system cannot find the file/dir specified");
 80108ce:	4803      	ldr	r0, [pc, #12]	; (80108dc <SDCARD_Delete+0x20>)
 80108d0:	e000      	b.n	80108d4 <SDCARD_Delete+0x18>
  } else {
    DEBUG_MSG("File or Directory deleted.");
 80108d2:	4803      	ldr	r0, [pc, #12]	; (80108e0 <SDCARD_Delete+0x24>)
 80108d4:	f002 fb76 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  }
  return;
}
 80108d8:	b01b      	add	sp, #108	; 0x6c
 80108da:	bd00      	pop	{pc}
 80108dc:	0801ee12 	.word	0x0801ee12
 80108e0:	0801ee40 	.word	0x0801ee40

080108e4 <SDCARD_Mkdir>:

void SDCARD_Mkdir(char *directory)
{
 80108e4:	b500      	push	{lr}
 80108e6:	b09b      	sub	sp, #108	; 0x6c
  char new_path[MAX_PATH];
  fullpath(directory,(char *)&new_path);
 80108e8:	a901      	add	r1, sp, #4
 80108ea:	f7ff ffaf 	bl	801084c <fullpath>
  SDCARD_Messages(f_mkdir(new_path));
 80108ee:	a801      	add	r0, sp, #4
 80108f0:	f00c fe48 	bl	801d584 <f_mkdir>
 80108f4:	f7ff fdf8 	bl	80104e8 <SDCARD_Messages>
  return;
}
 80108f8:	b01b      	add	sp, #108	; 0x6c
 80108fa:	bd00      	pop	{pc}

080108fc <SDCARD_Pwd>:

void SDCARD_Pwd(void)
{
  DEBUG_MSG("%s\n",dir_path);
 80108fc:	4801      	ldr	r0, [pc, #4]	; (8010904 <SDCARD_Pwd+0x8>)
 80108fe:	4902      	ldr	r1, [pc, #8]	; (8010908 <SDCARD_Pwd+0xc>)
 8010900:	f002 bb60 	b.w	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010904:	0801ec96 	.word	0x0801ec96
 8010908:	200002ac 	.word	0x200002ac

0801090c <SDCARD_Rename>:
  return;
}


void SDCARD_Rename(char* source, char* dest)
{  
 801090c:	b510      	push	{r4, lr}
 801090e:	b0b2      	sub	sp, #200	; 0xc8
 8010910:	460c      	mov	r4, r1
  char new_source[MAX_PATH];
  char new_dest[MAX_PATH];

  fullpath(source,(char *)&new_source);
 8010912:	4669      	mov	r1, sp
 8010914:	f7ff ff9a 	bl	801084c <fullpath>
  fullpath(dest,(char *)&new_dest);
 8010918:	4620      	mov	r0, r4
 801091a:	a919      	add	r1, sp, #100	; 0x64
 801091c:	f7ff ff96 	bl	801084c <fullpath>

  DEBUG_MSG("Renaming/Moving from: %s to %s",new_source,new_dest);
 8010920:	4669      	mov	r1, sp
 8010922:	aa19      	add	r2, sp, #100	; 0x64
 8010924:	4805      	ldr	r0, [pc, #20]	; (801093c <SDCARD_Rename+0x30>)
 8010926:	f002 fb4d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  SDCARD_Messages(f_rename(new_source,new_dest));
 801092a:	a919      	add	r1, sp, #100	; 0x64
 801092c:	4668      	mov	r0, sp
 801092e:	f00c ff03 	bl	801d738 <f_rename>
 8010932:	f7ff fdd9 	bl	80104e8 <SDCARD_Messages>
  return;
}
 8010936:	b032      	add	sp, #200	; 0xc8
 8010938:	bd10      	pop	{r4, pc}
 801093a:	bf00      	nop
 801093c:	0801ee5b 	.word	0x0801ee5b

08010940 <SDCARD_Copy>:

void SDCARD_Copy(char* source, char* dest)
{
 8010940:	b570      	push	{r4, r5, r6, lr}
 8010942:	b0ba      	sub	sp, #232	; 0xe8
 8010944:	460c      	mov	r4, r1
  FRESULT res;
  s32 status = 0;
  char new_source[MAX_PATH];
  char new_dest[MAX_PATH];
  
  fullpath(source,(char *)&new_source);
 8010946:	a908      	add	r1, sp, #32
  SDCARD_Messages(f_rename(new_source,new_dest));
  return;
}

void SDCARD_Copy(char* source, char* dest)
{
 8010948:	4605      	mov	r5, r0
  FRESULT res;
  s32 status = 0;
  char new_source[MAX_PATH];
  char new_dest[MAX_PATH];
  
  fullpath(source,(char *)&new_source);
 801094a:	f7ff ff7f 	bl	801084c <fullpath>
  fullpath(dest,(char *)&new_dest);
 801094e:	4620      	mov	r0, r4
 8010950:	a921      	add	r1, sp, #132	; 0x84
 8010952:	f7ff ff7b 	bl	801084c <fullpath>

  if( (res=f_open(&fsrc, new_source, FA_OPEN_EXISTING | FA_READ)) != FR_OK ) {
 8010956:	4831      	ldr	r0, [pc, #196]	; (8010a1c <SDCARD_Copy+0xdc>)
 8010958:	a908      	add	r1, sp, #32
 801095a:	2201      	movs	r2, #1
 801095c:	f00c fa46 	bl	801cdec <f_open>
 8010960:	b120      	cbz	r0, 801096c <SDCARD_Copy+0x2c>
    DEBUG_MSG("%s doesn't exist!\n", source);
 8010962:	4629      	mov	r1, r5
 8010964:	482e      	ldr	r0, [pc, #184]	; (8010a20 <SDCARD_Copy+0xe0>)
 8010966:	f002 fb2d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 801096a:	e00a      	b.n	8010982 <SDCARD_Copy+0x42>
  } else {
    if( (res=f_open(&fdst, new_dest, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK ) {
 801096c:	482d      	ldr	r0, [pc, #180]	; (8010a24 <SDCARD_Copy+0xe4>)
 801096e:	a921      	add	r1, sp, #132	; 0x84
 8010970:	220a      	movs	r2, #10
 8010972:	f00c fa3b 	bl	801cdec <f_open>
 8010976:	b120      	cbz	r0, 8010982 <SDCARD_Copy+0x42>
      DEBUG_MSG("Cannot create %s - file exists or invalid path\n", dest);
 8010978:	4621      	mov	r1, r4
 801097a:	482b      	ldr	r0, [pc, #172]	; (8010a28 <SDCARD_Copy+0xe8>)
 801097c:	f002 fb22 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010980:	e04a      	b.n	8010a18 <SDCARD_Copy+0xd8>
      return;
    }
  }
  DEBUG_MSG("Copying %s to %s\n",new_source,new_dest);
 8010982:	a908      	add	r1, sp, #32

  mios32_sys_time_t t;
  t.seconds=0;
 8010984:	2400      	movs	r4, #0
    if( (res=f_open(&fdst, new_dest, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK ) {
      DEBUG_MSG("Cannot create %s - file exists or invalid path\n", dest);
      return;
    }
  }
  DEBUG_MSG("Copying %s to %s\n",new_source,new_dest);
 8010986:	4829      	ldr	r0, [pc, #164]	; (8010a2c <SDCARD_Copy+0xec>)
 8010988:	aa21      	add	r2, sp, #132	; 0x84
 801098a:	f002 fb1b 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>

  mios32_sys_time_t t;
  t.seconds=0;
 801098e:	9404      	str	r4, [sp, #16]
  t.fraction_ms=0;
 8010990:	9405      	str	r4, [sp, #20]

  MIOS32_SYS_TimeSet(t);
 8010992:	ab04      	add	r3, sp, #16
 8010994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010998:	f003 fd1c 	bl	80143d4 <MIOS32_SYS_TimeSet>

  UINT successcount;
  UINT successcount_wr;
  u32 num_bytes = 0;
  do {
    if( (res=f_read(&fsrc, tmp_buffer, _MAX_SS, &successcount)) != FR_OK ) {
 801099c:	4e1f      	ldr	r6, [pc, #124]	; (8010a1c <SDCARD_Copy+0xdc>)
 801099e:	4924      	ldr	r1, [pc, #144]	; (8010a30 <SDCARD_Copy+0xf0>)
 80109a0:	4630      	mov	r0, r6
 80109a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109a6:	ab02      	add	r3, sp, #8
 80109a8:	f00c fada 	bl	801cf60 <f_read>
 80109ac:	4605      	mov	r5, r0
 80109ae:	b138      	cbz	r0, 80109c0 <SDCARD_Copy+0x80>
          DEBUG_MSG("Failed to read sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
 80109b0:	462a      	mov	r2, r5
 80109b2:	4820      	ldr	r0, [pc, #128]	; (8010a34 <SDCARD_Copy+0xf4>)
 80109b4:	68b1      	ldr	r1, [r6, #8]
 80109b6:	f002 fb05 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
          successcount=0;
 80109ba:	2200      	movs	r2, #0
 80109bc:	9202      	str	r2, [sp, #8]
 80109be:	e012      	b.n	80109e6 <SDCARD_Copy+0xa6>
          status=-1;
    } else if( f_write(&fdst, tmp_buffer, successcount, &successcount_wr) != FR_OK ) {
 80109c0:	4e18      	ldr	r6, [pc, #96]	; (8010a24 <SDCARD_Copy+0xe4>)
 80109c2:	491b      	ldr	r1, [pc, #108]	; (8010a30 <SDCARD_Copy+0xf0>)
 80109c4:	9a02      	ldr	r2, [sp, #8]
 80109c6:	4630      	mov	r0, r6
 80109c8:	ab03      	add	r3, sp, #12
 80109ca:	f00c fb7f 	bl	801d0cc <f_write>
 80109ce:	b128      	cbz	r0, 80109dc <SDCARD_Copy+0x9c>
          DEBUG_MSG("Failed to write sector at position 0x%08x, status: %u\n", fdst.fptr, res);
 80109d0:	68b1      	ldr	r1, [r6, #8]
 80109d2:	4819      	ldr	r0, [pc, #100]	; (8010a38 <SDCARD_Copy+0xf8>)
 80109d4:	462a      	mov	r2, r5
 80109d6:	f002 faf5 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 80109da:	e004      	b.n	80109e6 <SDCARD_Copy+0xa6>
          status=-1;
    } else {
        num_bytes += successcount_wr;
 80109dc:	9803      	ldr	r0, [sp, #12]
    }
  } while( status==0 && successcount > 0 );
 80109de:	9902      	ldr	r1, [sp, #8]
          status=-1;
    } else if( f_write(&fdst, tmp_buffer, successcount, &successcount_wr) != FR_OK ) {
          DEBUG_MSG("Failed to write sector at position 0x%08x, status: %u\n", fdst.fptr, res);
          status=-1;
    } else {
        num_bytes += successcount_wr;
 80109e0:	1824      	adds	r4, r4, r0
    }
  } while( status==0 && successcount > 0 );
 80109e2:	2900      	cmp	r1, #0
 80109e4:	d1da      	bne.n	801099c <SDCARD_Copy+0x5c>
  mios32_sys_time_t t1=MIOS32_SYS_TimeGet();
 80109e6:	a806      	add	r0, sp, #24
 80109e8:	f003 fdca 	bl	8014580 <MIOS32_SYS_TimeGet>
  
  DEBUG_MSG("Copied: %d bytes in %d.%d seconds (%d KB/s)\n",num_bytes,t1.seconds,t1.fraction_ms,
		(long long)((((long long)num_bytes*1000)/((t1.seconds*1000)+t1.fraction_ms))/1000));
 80109ec:	9e06      	ldr	r6, [sp, #24]
 80109ee:	9d07      	ldr	r5, [sp, #28]
        num_bytes += successcount_wr;
    }
  } while( status==0 && successcount > 0 );
  mios32_sys_time_t t1=MIOS32_SYS_TimeGet();
  
  DEBUG_MSG("Copied: %d bytes in %d.%d seconds (%d KB/s)\n",num_bytes,t1.seconds,t1.fraction_ms,
 80109f0:	2100      	movs	r1, #0
 80109f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80109f6:	fb03 5206 	mla	r2, r3, r6, r5
 80109fa:	4620      	mov	r0, r4
 80109fc:	460b      	mov	r3, r1
 80109fe:	f00d f9fb 	bl	801ddf8 <__aeabi_ldivmod>
 8010a02:	4632      	mov	r2, r6
 8010a04:	e9cd 0100 	strd	r0, r1, [sp]
 8010a08:	462b      	mov	r3, r5
 8010a0a:	480c      	ldr	r0, [pc, #48]	; (8010a3c <SDCARD_Copy+0xfc>)
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	f002 fad9 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
		(long long)((((long long)num_bytes*1000)/((t1.seconds*1000)+t1.fraction_ms))/1000));

  f_close(&fdst);
 8010a12:	4804      	ldr	r0, [pc, #16]	; (8010a24 <SDCARD_Copy+0xe4>)
 8010a14:	f00c fc7f 	bl	801d316 <f_close>
}
 8010a18:	b03a      	add	sp, #232	; 0xe8
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	200008a0 	.word	0x200008a0
 8010a20:	0801ee7a 	.word	0x0801ee7a
 8010a24:	20000678 	.word	0x20000678
 8010a28:	0801ef75 	.word	0x0801ef75
 8010a2c:	0801ee8d 	.word	0x0801ee8d
 8010a30:	20000475 	.word	0x20000475
 8010a34:	0801ee9f 	.word	0x0801ee9f
 8010a38:	0801eed5 	.word	0x0801eed5
 8010a3c:	0801ef0c 	.word	0x0801ef0c

08010a40 <SDCARD_Benchmark>:


void SDCARD_Benchmark(num_sectors)
{
 8010a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a44:	b0ba      	sub	sp, #232	; 0xe8

  FRESULT res;
  s32 status = 0;
  char source[MAX_PATH];
  char dest[MAX_PATH];
  strcpy(source,"/benchmrk.tmp");
 8010a46:	497c      	ldr	r1, [pc, #496]	; (8010c38 <SDCARD_Benchmark+0x1f8>)
  f_close(&fdst);
}


void SDCARD_Benchmark(num_sectors)
{
 8010a48:	4607      	mov	r7, r0

  FRESULT res;
  s32 status = 0;
  char source[MAX_PATH];
  char dest[MAX_PATH];
  strcpy(source,"/benchmrk.tmp");
 8010a4a:	a808      	add	r0, sp, #32
 8010a4c:	f00d fd04 	bl	801e458 <strcpy>
  strcpy(dest,"/benchmrk.cpy");
 8010a50:	a821      	add	r0, sp, #132	; 0x84
 8010a52:	497a      	ldr	r1, [pc, #488]	; (8010c3c <SDCARD_Benchmark+0x1fc>)
 8010a54:	f00d fd00 	bl	801e458 <strcpy>
  int f;

  for(f=0;f<_MAX_SS;f++)
 8010a58:	2300      	movs	r3, #0
	tmp_buffer[f]='X';
 8010a5a:	4a79      	ldr	r2, [pc, #484]	; (8010c40 <SDCARD_Benchmark+0x200>)
 8010a5c:	2158      	movs	r1, #88	; 0x58
 8010a5e:	5499      	strb	r1, [r3, r2]
  char dest[MAX_PATH];
  strcpy(source,"/benchmrk.tmp");
  strcpy(dest,"/benchmrk.cpy");
  int f;

  for(f=0;f<_MAX_SS;f++)
 8010a60:	3301      	adds	r3, #1
 8010a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a66:	d1f8      	bne.n	8010a5a <SDCARD_Benchmark+0x1a>
	tmp_buffer[f]='X';

  DEBUG_MSG("benchmark: Starting\n");
 8010a68:	4876      	ldr	r0, [pc, #472]	; (8010c44 <SDCARD_Benchmark+0x204>)
 8010a6a:	f002 faab 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>

  mios32_sys_time_t t;
  t.seconds=0;
 8010a6e:	2000      	movs	r0, #0
 8010a70:	9004      	str	r0, [sp, #16]
  t.fraction_ms=0;
 8010a72:	9005      	str	r0, [sp, #20]
  
  if( (res=f_open(&fsrc, source, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK ) {
 8010a74:	a908      	add	r1, sp, #32
 8010a76:	4874      	ldr	r0, [pc, #464]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010a78:	220a      	movs	r2, #10
 8010a7a:	f00c f9b7 	bl	801cdec <f_open>
 8010a7e:	4604      	mov	r4, r0
 8010a80:	b108      	cbz	r0, 8010a86 <SDCARD_Benchmark+0x46>
    DEBUG_MSG("benchmark: Cannot create %s - file exists or invalid path\n", source);
 8010a82:	4872      	ldr	r0, [pc, #456]	; (8010c4c <SDCARD_Benchmark+0x20c>)
 8010a84:	e03e      	b.n	8010b04 <SDCARD_Benchmark+0xc4>

  UINT successcount;
  UINT successcount_wr;
  u32 num_bytes = 0;

  MIOS32_SYS_TimeSet(t);
 8010a86:	ad04      	add	r5, sp, #16
 8010a88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a8c:	f003 fca2 	bl	80143d4 <MIOS32_SYS_TimeSet>

  for (f=0;f<num_sectors;f++) {
 8010a90:	4625      	mov	r5, r4
 8010a92:	42bd      	cmp	r5, r7
 8010a94:	da14      	bge.n	8010ac0 <SDCARD_Benchmark+0x80>
    if( f_write(&fsrc, tmp_buffer, _MAX_SS, &successcount_wr) != FR_OK ) {
 8010a96:	4e6c      	ldr	r6, [pc, #432]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010a98:	4969      	ldr	r1, [pc, #420]	; (8010c40 <SDCARD_Benchmark+0x200>)
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010aa0:	ab03      	add	r3, sp, #12
 8010aa2:	f00c fb13 	bl	801d0cc <f_write>
 8010aa6:	b138      	cbz	r0, 8010ab8 <SDCARD_Benchmark+0x78>
	  DEBUG_MSG("Failed to write sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
 8010aa8:	68b1      	ldr	r1, [r6, #8]
 8010aaa:	4869      	ldr	r0, [pc, #420]	; (8010c50 <SDCARD_Benchmark+0x210>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	f002 fa89 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	  status=-1;
 8010ab2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	  break;
 8010ab6:	e004      	b.n	8010ac2 <SDCARD_Benchmark+0x82>
	} else {
		num_bytes += successcount_wr;
 8010ab8:	9903      	ldr	r1, [sp, #12]
  UINT successcount_wr;
  u32 num_bytes = 0;

  MIOS32_SYS_TimeSet(t);

  for (f=0;f<num_sectors;f++) {
 8010aba:	3501      	adds	r5, #1
    if( f_write(&fsrc, tmp_buffer, _MAX_SS, &successcount_wr) != FR_OK ) {
	  DEBUG_MSG("Failed to write sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
	  status=-1;
	  break;
	} else {
		num_bytes += successcount_wr;
 8010abc:	1864      	adds	r4, r4, r1
 8010abe:	e7e8      	b.n	8010a92 <SDCARD_Benchmark+0x52>

void SDCARD_Benchmark(num_sectors)
{

  FRESULT res;
  s32 status = 0;
 8010ac0:	2600      	movs	r6, #0
	  break;
	} else {
		num_bytes += successcount_wr;
	}
  }
  f_close(&fsrc);
 8010ac2:	4861      	ldr	r0, [pc, #388]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010ac4:	f00c fc27 	bl	801d316 <f_close>

  mios32_sys_time_t t1=MIOS32_SYS_TimeGet();
 8010ac8:	a806      	add	r0, sp, #24
 8010aca:	f003 fd59 	bl	8014580 <MIOS32_SYS_TimeGet>
 8010ace:	9f06      	ldr	r7, [sp, #24]
 8010ad0:	9d07      	ldr	r5, [sp, #28]

  DEBUG_MSG("Write: %d bytes in %d.%d seconds (%d KB/s)\n", (num_bytes), t1.seconds,t1.fraction_ms,
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ad8:	4620      	mov	r0, r4
 8010ada:	fb02 5207 	mla	r2, r2, r7, r5
 8010ade:	460b      	mov	r3, r1
 8010ae0:	f00d f98a 	bl	801ddf8 <__aeabi_ldivmod>
 8010ae4:	463a      	mov	r2, r7
 8010ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8010aea:	462b      	mov	r3, r5
 8010aec:	4621      	mov	r1, r4
 8010aee:	4859      	ldr	r0, [pc, #356]	; (8010c54 <SDCARD_Benchmark+0x214>)
 8010af0:	f002 fa68 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
		(long long)((((long long)num_bytes*1000)/((t1.seconds*1000)+t1.fraction_ms))/1000));
  

  if( (res=f_open(&fsrc, source, FA_OPEN_EXISTING | FA_READ)) != FR_OK ) {
 8010af4:	4854      	ldr	r0, [pc, #336]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010af6:	a908      	add	r1, sp, #32
 8010af8:	2201      	movs	r2, #1
 8010afa:	f00c f977 	bl	801cdec <f_open>
 8010afe:	4604      	mov	r4, r0
 8010b00:	b110      	cbz	r0, 8010b08 <SDCARD_Benchmark+0xc8>
    DEBUG_MSG("%s doesn't exist!\n", source);
 8010b02:	4855      	ldr	r0, [pc, #340]	; (8010c58 <SDCARD_Benchmark+0x218>)
 8010b04:	a908      	add	r1, sp, #32
 8010b06:	e046      	b.n	8010b96 <SDCARD_Benchmark+0x156>
	return;
  }

  num_bytes = 0;

  MIOS32_SYS_TimeSet(t);
 8010b08:	af04      	add	r7, sp, #16
 8010b0a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010b0e:	f003 fc61 	bl	80143d4 <MIOS32_SYS_TimeSet>

  do {
    if( (res=f_read(&fsrc, tmp_buffer, _MAX_SS, &successcount)) != FR_OK ) {
 8010b12:	4d4d      	ldr	r5, [pc, #308]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010b14:	494a      	ldr	r1, [pc, #296]	; (8010c40 <SDCARD_Benchmark+0x200>)
 8010b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	ab02      	add	r3, sp, #8
 8010b1e:	f00c fa1f 	bl	801cf60 <f_read>
 8010b22:	4602      	mov	r2, r0
 8010b24:	b120      	cbz	r0, 8010b30 <SDCARD_Benchmark+0xf0>
	  DEBUG_MSG("Failed to read sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
 8010b26:	68a9      	ldr	r1, [r5, #8]
 8010b28:	484c      	ldr	r0, [pc, #304]	; (8010c5c <SDCARD_Benchmark+0x21c>)
 8010b2a:	f002 fa4b 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010b2e:	e001      	b.n	8010b34 <SDCARD_Benchmark+0xf4>
	} else {
	num_bytes += successcount;
 8010b30:	9b02      	ldr	r3, [sp, #8]
 8010b32:	18e4      	adds	r4, r4, r3
    }
  } while( successcount > 0 );
 8010b34:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b38:	f1b8 0f00 	cmp.w	r8, #0
 8010b3c:	d1e9      	bne.n	8010b12 <SDCARD_Benchmark+0xd2>

  t1 = MIOS32_SYS_TimeGet();
 8010b3e:	a806      	add	r0, sp, #24
 8010b40:	f003 fd1e 	bl	8014580 <MIOS32_SYS_TimeGet>
 8010b44:	9f06      	ldr	r7, [sp, #24]
 8010b46:	9d07      	ldr	r5, [sp, #28]
  
  DEBUG_MSG("Read: %d bytes in %d.%d seconds (%d KB/s)\n",num_bytes,t1.seconds,t1.fraction_ms,
 8010b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010b4c:	fb02 5207 	mla	r2, r2, r7, r5
 8010b50:	4643      	mov	r3, r8
 8010b52:	4620      	mov	r0, r4
 8010b54:	4641      	mov	r1, r8
 8010b56:	f00d f94f 	bl	801ddf8 <__aeabi_ldivmod>
 8010b5a:	463a      	mov	r2, r7
 8010b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8010b60:	462b      	mov	r3, r5
 8010b62:	4621      	mov	r1, r4
 8010b64:	483e      	ldr	r0, [pc, #248]	; (8010c60 <SDCARD_Benchmark+0x220>)
 8010b66:	f002 fa2d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
		(long long)((((long long)num_bytes*1000)/((t1.seconds*1000)+t1.fraction_ms))/1000));

  f_close(&fsrc);
 8010b6a:	4837      	ldr	r0, [pc, #220]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010b6c:	f00c fbd3 	bl	801d316 <f_close>

  if( (res=f_open(&fsrc, source, FA_OPEN_EXISTING | FA_READ)) != FR_OK ) {
 8010b70:	4835      	ldr	r0, [pc, #212]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010b72:	a908      	add	r1, sp, #32
 8010b74:	2201      	movs	r2, #1
 8010b76:	f00c f939 	bl	801cdec <f_open>
 8010b7a:	b120      	cbz	r0, 8010b86 <SDCARD_Benchmark+0x146>
    DEBUG_MSG("%s doesn't exist!\n", source);
 8010b7c:	a908      	add	r1, sp, #32
 8010b7e:	4836      	ldr	r0, [pc, #216]	; (8010c58 <SDCARD_Benchmark+0x218>)
 8010b80:	f002 fa20 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010b84:	e00a      	b.n	8010b9c <SDCARD_Benchmark+0x15c>
  } else {
    if( (res=f_open(&fdst, dest, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK ) {
 8010b86:	4837      	ldr	r0, [pc, #220]	; (8010c64 <SDCARD_Benchmark+0x224>)
 8010b88:	a921      	add	r1, sp, #132	; 0x84
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	f00c f92e 	bl	801cdec <f_open>
 8010b90:	b120      	cbz	r0, 8010b9c <SDCARD_Benchmark+0x15c>
      DEBUG_MSG("Cannot create %s - file exists or invalid path\n", dest);
 8010b92:	4835      	ldr	r0, [pc, #212]	; (8010c68 <SDCARD_Benchmark+0x228>)
 8010b94:	a921      	add	r1, sp, #132	; 0x84
 8010b96:	f002 fa15 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010b9a:	e04a      	b.n	8010c32 <SDCARD_Benchmark+0x1f2>
	  return;
    }
  }

  MIOS32_SYS_TimeSet(t);
 8010b9c:	ac04      	add	r4, sp, #16
 8010b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010ba2:	f003 fc17 	bl	80143d4 <MIOS32_SYS_TimeSet>

  num_bytes = 0;
 8010ba6:	2400      	movs	r4, #0
  do {
    if( (res=f_read(&fsrc, tmp_buffer, _MAX_SS, &successcount)) != FR_OK ) {
 8010ba8:	4f27      	ldr	r7, [pc, #156]	; (8010c48 <SDCARD_Benchmark+0x208>)
 8010baa:	4925      	ldr	r1, [pc, #148]	; (8010c40 <SDCARD_Benchmark+0x200>)
 8010bac:	4638      	mov	r0, r7
 8010bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bb2:	ab02      	add	r3, sp, #8
 8010bb4:	f00c f9d4 	bl	801cf60 <f_read>
 8010bb8:	4605      	mov	r5, r0
 8010bba:	b138      	cbz	r0, 8010bcc <SDCARD_Benchmark+0x18c>
	  DEBUG_MSG("Failed to read sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
 8010bbc:	4827      	ldr	r0, [pc, #156]	; (8010c5c <SDCARD_Benchmark+0x21c>)
 8010bbe:	68b9      	ldr	r1, [r7, #8]
 8010bc0:	462a      	mov	r2, r5
	  successcount=0;
 8010bc2:	2600      	movs	r6, #0
  MIOS32_SYS_TimeSet(t);

  num_bytes = 0;
  do {
    if( (res=f_read(&fsrc, tmp_buffer, _MAX_SS, &successcount)) != FR_OK ) {
	  DEBUG_MSG("Failed to read sector at position 0x%08x, status: %u\n", fsrc.fptr, res);
 8010bc4:	f002 f9fe 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	  successcount=0;
 8010bc8:	9602      	str	r6, [sp, #8]
 8010bca:	e013      	b.n	8010bf4 <SDCARD_Benchmark+0x1b4>
	  status=-1;
    } else if( f_write(&fdst, tmp_buffer, successcount, &successcount_wr) != FR_OK ) {
 8010bcc:	4f25      	ldr	r7, [pc, #148]	; (8010c64 <SDCARD_Benchmark+0x224>)
 8010bce:	491c      	ldr	r1, [pc, #112]	; (8010c40 <SDCARD_Benchmark+0x200>)
 8010bd0:	9a02      	ldr	r2, [sp, #8]
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	ab03      	add	r3, sp, #12
 8010bd6:	f00c fa79 	bl	801d0cc <f_write>
 8010bda:	b128      	cbz	r0, 8010be8 <SDCARD_Benchmark+0x1a8>
	  DEBUG_MSG("Failed to write sector at position 0x%08x, status: %u\n", fdst.fptr, res);
 8010bdc:	68b9      	ldr	r1, [r7, #8]
 8010bde:	481c      	ldr	r0, [pc, #112]	; (8010c50 <SDCARD_Benchmark+0x210>)
 8010be0:	462a      	mov	r2, r5
 8010be2:	f002 f9ef 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
 8010be6:	e005      	b.n	8010bf4 <SDCARD_Benchmark+0x1b4>
	  status=-1;
    } else {
	num_bytes += successcount_wr;
 8010be8:	9803      	ldr	r0, [sp, #12]
 8010bea:	1824      	adds	r4, r4, r0
    }
  } while( status==0 && successcount > 0 );
 8010bec:	b916      	cbnz	r6, 8010bf4 <SDCARD_Benchmark+0x1b4>
 8010bee:	9902      	ldr	r1, [sp, #8]
 8010bf0:	2900      	cmp	r1, #0
 8010bf2:	d1d9      	bne.n	8010ba8 <SDCARD_Benchmark+0x168>

  t1 = MIOS32_SYS_TimeGet();
 8010bf4:	a806      	add	r0, sp, #24
 8010bf6:	f003 fcc3 	bl	8014580 <MIOS32_SYS_TimeGet>
 8010bfa:	9e06      	ldr	r6, [sp, #24]
 8010bfc:	9d07      	ldr	r5, [sp, #28]
  
  DEBUG_MSG("Copy: %d bytes in %d.%d seconds (%d KB/s)\n",num_bytes,t1.seconds,t1.fraction_ms,
 8010bfe:	2100      	movs	r1, #0
 8010c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c04:	fb03 5206 	mla	r2, r3, r6, r5
 8010c08:	4620      	mov	r0, r4
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	f00d f8f4 	bl	801ddf8 <__aeabi_ldivmod>
 8010c10:	4632      	mov	r2, r6
 8010c12:	e9cd 0100 	strd	r0, r1, [sp]
 8010c16:	462b      	mov	r3, r5
 8010c18:	4621      	mov	r1, r4
 8010c1a:	4814      	ldr	r0, [pc, #80]	; (8010c6c <SDCARD_Benchmark+0x22c>)
 8010c1c:	f002 f9d2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
		(long long)((((long long)num_bytes*1000)/((t1.seconds*1000)+t1.fraction_ms))/1000));

  f_close(&fdst);
 8010c20:	4810      	ldr	r0, [pc, #64]	; (8010c64 <SDCARD_Benchmark+0x224>)
 8010c22:	f00c fb78 	bl	801d316 <f_close>
  f_unlink(source);
 8010c26:	a808      	add	r0, sp, #32
 8010c28:	f00c fc54 	bl	801d4d4 <f_unlink>
  f_unlink(dest);
 8010c2c:	a821      	add	r0, sp, #132	; 0x84
 8010c2e:	f00c fc51 	bl	801d4d4 <f_unlink>
}
 8010c32:	b03a      	add	sp, #232	; 0xe8
 8010c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c38:	0801ef39 	.word	0x0801ef39
 8010c3c:	0801ef47 	.word	0x0801ef47
 8010c40:	20000475 	.word	0x20000475
 8010c44:	0801ef55 	.word	0x0801ef55
 8010c48:	200008a0 	.word	0x200008a0
 8010c4c:	0801ef6a 	.word	0x0801ef6a
 8010c50:	0801eed5 	.word	0x0801eed5
 8010c54:	0801efa5 	.word	0x0801efa5
 8010c58:	0801ee7a 	.word	0x0801ee7a
 8010c5c:	0801ee9f 	.word	0x0801ee9f
 8010c60:	0801efd1 	.word	0x0801efd1
 8010c64:	20000678 	.word	0x20000678
 8010c68:	0801ef75 	.word	0x0801ef75
 8010c6c:	0801effc 	.word	0x0801effc

08010c70 <APP_TERMINAL_Parse>:

/////////////////////////////////////////////////////////////////////////////
// Parser
/////////////////////////////////////////////////////////////////////////////
void APP_TERMINAL_Parse(mios32_midi_port_t port, u8 byte)
{
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	b08c      	sub	sp, #48	; 0x30
 8010c74:	460c      	mov	r4, r1
 8010c76:	4606      	mov	r6, r0
  // temporary change debug port (will be restored at the end of this function)
  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
 8010c78:	f002 fd42 	bl	8013700 <MIOS32_MIDI_DebugPortGet>
 8010c7c:	4605      	mov	r5, r0
  MIOS32_MIDI_DebugPortSet(port);
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f002 fa3c 	bl	80130fc <MIOS32_MIDI_DebugPortSet>

  if( byte == '\r' ) {
 8010c84:	2c0d      	cmp	r4, #13
 8010c86:	f000 80ee 	beq.w	8010e66 <APP_TERMINAL_Parse+0x1f6>
    // ignore
  } else if( byte == '\n' ) {
 8010c8a:	2c0a      	cmp	r4, #10
 8010c8c:	f040 80e0 	bne.w	8010e50 <APP_TERMINAL_Parse+0x1e0>
    // example for parsing the command:
    char *separators = " \t";
    char *brkt;
    char *parameter[10];
    if( (parameter[0] = strtok_r(line_buffer, separators, &brkt)) ) {
 8010c90:	4877      	ldr	r0, [pc, #476]	; (8010e70 <APP_TERMINAL_Parse+0x200>)
 8010c92:	4978      	ldr	r1, [pc, #480]	; (8010e74 <APP_TERMINAL_Parse+0x204>)
 8010c94:	aa01      	add	r2, sp, #4
 8010c96:	f00d fc4a 	bl	801e52e <strtok_r>
 8010c9a:	9002      	str	r0, [sp, #8]
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	f000 80d3 	beq.w	8010e48 <APP_TERMINAL_Parse+0x1d8>
 8010ca2:	2400      	movs	r4, #0
	  u8 f;
	  for(f=1;f<10;f++) {
	    if( (parameter[f] = strtok_r(NULL, separators, &brkt)) == NULL) 
 8010ca4:	aa01      	add	r2, sp, #4
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	4972      	ldr	r1, [pc, #456]	; (8010e74 <APP_TERMINAL_Parse+0x204>)
 8010caa:	f00d fc40 	bl	801e52e <strtok_r>


/////////////////////////////////////////////////////////////////////////////
// Parser
/////////////////////////////////////////////////////////////////////////////
void APP_TERMINAL_Parse(mios32_midi_port_t port, u8 byte)
 8010cae:	aa0c      	add	r2, sp, #48	; 0x30
 8010cb0:	1913      	adds	r3, r2, r4
    char *brkt;
    char *parameter[10];
    if( (parameter[0] = strtok_r(line_buffer, separators, &brkt)) ) {
	  u8 f;
	  for(f=1;f<10;f++) {
	    if( (parameter[f] = strtok_r(NULL, separators, &brkt)) == NULL) 
 8010cb2:	f843 0c24 	str.w	r0, [r3, #-36]
 8010cb6:	b110      	cbz	r0, 8010cbe <APP_TERMINAL_Parse+0x4e>
 8010cb8:	3404      	adds	r4, #4
    char *separators = " \t";
    char *brkt;
    char *parameter[10];
    if( (parameter[0] = strtok_r(line_buffer, separators, &brkt)) ) {
	  u8 f;
	  for(f=1;f<10;f++) {
 8010cba:	2c24      	cmp	r4, #36	; 0x24
 8010cbc:	d1f2      	bne.n	8010ca4 <APP_TERMINAL_Parse+0x34>
	    if( (parameter[f] = strtok_r(NULL, separators, &brkt)) == NULL) 
		  break;
	  }
      MUTEX_SDCARD_TAKE
 8010cbe:	486e      	ldr	r0, [pc, #440]	; (8010e78 <APP_TERMINAL_Parse+0x208>)
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	6800      	ldr	r0, [r0, #0]
 8010cc4:	f001 f9bc 	bl	8012040 <xQueueTakeMutexRecursive>
 8010cc8:	2801      	cmp	r0, #1
 8010cca:	d1f8      	bne.n	8010cbe <APP_TERMINAL_Parse+0x4e>
      if( strncmp(parameter[0], "help", 4) == 0 ) {
 8010ccc:	9c02      	ldr	r4, [sp, #8]
 8010cce:	496b      	ldr	r1, [pc, #428]	; (8010e7c <APP_TERMINAL_Parse+0x20c>)
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	2204      	movs	r2, #4
 8010cd4:	f00d fbd0 	bl	801e478 <strncmp>
 8010cd8:	bb10      	cbnz	r0, 8010d20 <APP_TERMINAL_Parse+0xb0>
	DEBUG_MSG("Following commands are available:");
 8010cda:	4869      	ldr	r0, [pc, #420]	; (8010e80 <APP_TERMINAL_Parse+0x210>)
 8010cdc:	f002 f972 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  cid:                  Display CID structure\n");
 8010ce0:	4868      	ldr	r0, [pc, #416]	; (8010e84 <APP_TERMINAL_Parse+0x214>)
 8010ce2:	f002 f96f 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  csd:                  Display CSD structure\n");
 8010ce6:	4868      	ldr	r0, [pc, #416]	; (8010e88 <APP_TERMINAL_Parse+0x218>)
 8010ce8:	f002 f96c 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  filesys:              Display filesystem info\n");
 8010cec:	4867      	ldr	r0, [pc, #412]	; (8010e8c <APP_TERMINAL_Parse+0x21c>)
 8010cee:	f002 f969 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  dir:                  Display files in current directory\n");
 8010cf2:	4867      	ldr	r0, [pc, #412]	; (8010e90 <APP_TERMINAL_Parse+0x220>)
 8010cf4:	f002 f966 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  cd <dir>:             Print or Change current directory\n");
 8010cf8:	4866      	ldr	r0, [pc, #408]	; (8010e94 <APP_TERMINAL_Parse+0x224>)
 8010cfa:	f002 f963 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  mkdir <dir>:          Create new directory\n");
 8010cfe:	4866      	ldr	r0, [pc, #408]	; (8010e98 <APP_TERMINAL_Parse+0x228>)
 8010d00:	f002 f960 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  rename <src> <dest>:  Rename/Move file or directory\n");
 8010d04:	4865      	ldr	r0, [pc, #404]	; (8010e9c <APP_TERMINAL_Parse+0x22c>)
 8010d06:	f002 f95d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  copy <src> <dest>:    Copy file\n");
 8010d0a:	4865      	ldr	r0, [pc, #404]	; (8010ea0 <APP_TERMINAL_Parse+0x230>)
 8010d0c:	f002 f95a 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  delete <file/dir>:    Delete file or directory\n");
 8010d10:	4864      	ldr	r0, [pc, #400]	; (8010ea4 <APP_TERMINAL_Parse+0x234>)
 8010d12:	f002 f957 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  benchmark <x>:        Benchmark (read/write/copy xMB file)\n");
 8010d16:	4864      	ldr	r0, [pc, #400]	; (8010ea8 <APP_TERMINAL_Parse+0x238>)
 8010d18:	f002 f954 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
	DEBUG_MSG("  format <yes>:         Format sdcard *destroys all contents of card*\n");
 8010d1c:	4863      	ldr	r0, [pc, #396]	; (8010eac <APP_TERMINAL_Parse+0x23c>)
 8010d1e:	e08d      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "format", 6) == 0 ) {
 8010d20:	4620      	mov	r0, r4
 8010d22:	4963      	ldr	r1, [pc, #396]	; (8010eb0 <APP_TERMINAL_Parse+0x240>)
 8010d24:	2206      	movs	r2, #6
 8010d26:	f00d fba7 	bl	801e478 <strncmp>
 8010d2a:	b950      	cbnz	r0, 8010d42 <APP_TERMINAL_Parse+0xd2>
		  if( strncmp(parameter[1], "yes", 3) == 0 ) 
 8010d2c:	9803      	ldr	r0, [sp, #12]
 8010d2e:	4961      	ldr	r1, [pc, #388]	; (8010eb4 <APP_TERMINAL_Parse+0x244>)
 8010d30:	2203      	movs	r2, #3
 8010d32:	f00d fba1 	bl	801e478 <strncmp>
 8010d36:	b910      	cbnz	r0, 8010d3e <APP_TERMINAL_Parse+0xce>
			SDCARD_Format();
 8010d38:	f7ff fc1c 	bl	8010574 <SDCARD_Format>
 8010d3c:	e080      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
		  else
		    DEBUG_MSG("Please type \"format yes\" to format sd/mmc card");
 8010d3e:	485e      	ldr	r0, [pc, #376]	; (8010eb8 <APP_TERMINAL_Parse+0x248>)
 8010d40:	e07c      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "cid", 3) == 0 ) {
 8010d42:	4620      	mov	r0, r4
 8010d44:	495d      	ldr	r1, [pc, #372]	; (8010ebc <APP_TERMINAL_Parse+0x24c>)
 8010d46:	2203      	movs	r2, #3
 8010d48:	f00d fb96 	bl	801e478 <strncmp>
 8010d4c:	b910      	cbnz	r0, 8010d54 <APP_TERMINAL_Parse+0xe4>
		SDCARD_Read_CID();
 8010d4e:	f7ff fa59 	bl	8010204 <SDCARD_Read_CID>
 8010d52:	e075      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else if( strncmp(parameter[0], "csd", 3) == 0 ) {
 8010d54:	4620      	mov	r0, r4
 8010d56:	495a      	ldr	r1, [pc, #360]	; (8010ec0 <APP_TERMINAL_Parse+0x250>)
 8010d58:	2203      	movs	r2, #3
 8010d5a:	f00d fb8d 	bl	801e478 <strncmp>
 8010d5e:	b910      	cbnz	r0, 8010d66 <APP_TERMINAL_Parse+0xf6>
		SDCARD_Read_CSD();
 8010d60:	f7ff faa8 	bl	80102b4 <SDCARD_Read_CSD>
 8010d64:	e06c      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else if( strncmp(parameter[0], "filesys", 7) == 0 ) {
 8010d66:	4620      	mov	r0, r4
 8010d68:	4956      	ldr	r1, [pc, #344]	; (8010ec4 <APP_TERMINAL_Parse+0x254>)
 8010d6a:	2207      	movs	r2, #7
 8010d6c:	f00d fb84 	bl	801e478 <strncmp>
 8010d70:	b910      	cbnz	r0, 8010d78 <APP_TERMINAL_Parse+0x108>
		SDCARD_FileSystem();
 8010d72:	f7ff fd1f 	bl	80107b4 <SDCARD_FileSystem>
 8010d76:	e063      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else if( strncmp(parameter[0], "dir", 3) == 0 ) {
 8010d78:	4620      	mov	r0, r4
 8010d7a:	4953      	ldr	r1, [pc, #332]	; (8010ec8 <APP_TERMINAL_Parse+0x258>)
 8010d7c:	2203      	movs	r2, #3
 8010d7e:	f00d fb7b 	bl	801e478 <strncmp>
 8010d82:	b910      	cbnz	r0, 8010d8a <APP_TERMINAL_Parse+0x11a>
		SDCARD_Dir();
 8010d84:	f7ff fc3a 	bl	80105fc <SDCARD_Dir>
 8010d88:	e05a      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else if( strncmp(parameter[0], "cd", 2) == 0 ) {
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	494f      	ldr	r1, [pc, #316]	; (8010ecc <APP_TERMINAL_Parse+0x25c>)
 8010d8e:	2202      	movs	r2, #2
 8010d90:	f00d fb72 	bl	801e478 <strncmp>
 8010d94:	b938      	cbnz	r0, 8010da6 <APP_TERMINAL_Parse+0x136>
	    if(parameter[1]) 
 8010d96:	9803      	ldr	r0, [sp, #12]
 8010d98:	b110      	cbz	r0, 8010da0 <APP_TERMINAL_Parse+0x130>
	      SDCARD_CD(parameter[1]);
 8010d9a:	f7ff fd77 	bl	801088c <SDCARD_CD>
 8010d9e:	e04f      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
		else
	      SDCARD_Pwd();
 8010da0:	f7ff fdac 	bl	80108fc <SDCARD_Pwd>
 8010da4:	e04c      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else if( strncmp(parameter[0], "mkdir", 5) == 0 ) {
 8010da6:	4620      	mov	r0, r4
 8010da8:	4949      	ldr	r1, [pc, #292]	; (8010ed0 <APP_TERMINAL_Parse+0x260>)
 8010daa:	2205      	movs	r2, #5
 8010dac:	f00d fb64 	bl	801e478 <strncmp>
 8010db0:	b930      	cbnz	r0, 8010dc0 <APP_TERMINAL_Parse+0x150>
	    if(parameter[1]) 
 8010db2:	9803      	ldr	r0, [sp, #12]
 8010db4:	b110      	cbz	r0, 8010dbc <APP_TERMINAL_Parse+0x14c>
	      SDCARD_Mkdir(parameter[1]);
 8010db6:	f7ff fd95 	bl	80108e4 <SDCARD_Mkdir>
 8010dba:	e041      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
	    else
	      DEBUG_MSG("mkdir: No directory specified");
 8010dbc:	4845      	ldr	r0, [pc, #276]	; (8010ed4 <APP_TERMINAL_Parse+0x264>)
 8010dbe:	e03d      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "delete", 6) == 0 ) {
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4945      	ldr	r1, [pc, #276]	; (8010ed8 <APP_TERMINAL_Parse+0x268>)
 8010dc4:	2206      	movs	r2, #6
 8010dc6:	f00d fb57 	bl	801e478 <strncmp>
 8010dca:	b930      	cbnz	r0, 8010dda <APP_TERMINAL_Parse+0x16a>
	    if(parameter[1]) 
 8010dcc:	9803      	ldr	r0, [sp, #12]
 8010dce:	b110      	cbz	r0, 8010dd6 <APP_TERMINAL_Parse+0x166>
	      SDCARD_Delete(parameter[1]);
 8010dd0:	f7ff fd74 	bl	80108bc <SDCARD_Delete>
 8010dd4:	e034      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
	    else
	      DEBUG_MSG("delete: No file/directory specified");
 8010dd6:	4841      	ldr	r0, [pc, #260]	; (8010edc <APP_TERMINAL_Parse+0x26c>)
 8010dd8:	e030      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "rename", 6) == 0 ) {
 8010dda:	4620      	mov	r0, r4
 8010ddc:	4940      	ldr	r1, [pc, #256]	; (8010ee0 <APP_TERMINAL_Parse+0x270>)
 8010dde:	2206      	movs	r2, #6
 8010de0:	f00d fb4a 	bl	801e478 <strncmp>
 8010de4:	b940      	cbnz	r0, 8010df8 <APP_TERMINAL_Parse+0x188>
	    if(parameter[1] && parameter[2]) 
 8010de6:	9803      	ldr	r0, [sp, #12]
 8010de8:	b120      	cbz	r0, 8010df4 <APP_TERMINAL_Parse+0x184>
 8010dea:	9904      	ldr	r1, [sp, #16]
 8010dec:	b111      	cbz	r1, 8010df4 <APP_TERMINAL_Parse+0x184>
	      SDCARD_Rename(parameter[1],parameter[2]);
 8010dee:	f7ff fd8d 	bl	801090c <SDCARD_Rename>
 8010df2:	e025      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
	    else
	      DEBUG_MSG("rename: <source> and <destination> filenames required");
 8010df4:	483b      	ldr	r0, [pc, #236]	; (8010ee4 <APP_TERMINAL_Parse+0x274>)
 8010df6:	e021      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "copy", 4) == 0 ) {
 8010df8:	4620      	mov	r0, r4
 8010dfa:	493b      	ldr	r1, [pc, #236]	; (8010ee8 <APP_TERMINAL_Parse+0x278>)
 8010dfc:	2204      	movs	r2, #4
 8010dfe:	f00d fb3b 	bl	801e478 <strncmp>
 8010e02:	b940      	cbnz	r0, 8010e16 <APP_TERMINAL_Parse+0x1a6>
	    if(parameter[1] && parameter[2]) 
 8010e04:	9803      	ldr	r0, [sp, #12]
 8010e06:	b120      	cbz	r0, 8010e12 <APP_TERMINAL_Parse+0x1a2>
 8010e08:	9904      	ldr	r1, [sp, #16]
 8010e0a:	b111      	cbz	r1, 8010e12 <APP_TERMINAL_Parse+0x1a2>
	      SDCARD_Copy(parameter[1],parameter[2]);
 8010e0c:	f7ff fd98 	bl	8010940 <SDCARD_Copy>
 8010e10:	e016      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
	    else
	      DEBUG_MSG("copy: <source> and <destination> filenames required");
 8010e12:	4836      	ldr	r0, [pc, #216]	; (8010eec <APP_TERMINAL_Parse+0x27c>)
 8010e14:	e012      	b.n	8010e3c <APP_TERMINAL_Parse+0x1cc>
      } else if( strncmp(parameter[0], "benchmark", 9) == 0 ) {
 8010e16:	2209      	movs	r2, #9
 8010e18:	4620      	mov	r0, r4
 8010e1a:	4935      	ldr	r1, [pc, #212]	; (8010ef0 <APP_TERMINAL_Parse+0x280>)
 8010e1c:	f00d fb2c 	bl	801e478 <strncmp>
 8010e20:	4602      	mov	r2, r0
 8010e22:	b950      	cbnz	r0, 8010e3a <APP_TERMINAL_Parse+0x1ca>
		int bench=strtol(parameter[1],&parameter[2],0);
 8010e24:	9803      	ldr	r0, [sp, #12]
 8010e26:	a904      	add	r1, sp, #16
 8010e28:	f000 faa0 	bl	801136c <strtol>
		if (bench<1)
	      bench=1;
 8010e2c:	2801      	cmp	r0, #1
 8010e2e:	bfb8      	it	lt
 8010e30:	2001      	movlt	r0, #1
		SDCARD_Benchmark(bench*2048);
 8010e32:	02c0      	lsls	r0, r0, #11
 8010e34:	f7ff fe04 	bl	8010a40 <SDCARD_Benchmark>
 8010e38:	e002      	b.n	8010e40 <APP_TERMINAL_Parse+0x1d0>
      } else {
	DEBUG_MSG("Unknown command - type 'help' to list available commands!\n");
 8010e3a:	482e      	ldr	r0, [pc, #184]	; (8010ef4 <APP_TERMINAL_Parse+0x284>)
 8010e3c:	f002 f8c2 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
      }
	  MUTEX_SDCARD_GIVE
 8010e40:	490d      	ldr	r1, [pc, #52]	; (8010e78 <APP_TERMINAL_Parse+0x208>)
 8010e42:	6808      	ldr	r0, [r1, #0]
 8010e44:	f001 f83e 	bl	8011ec4 <xQueueGiveMutexRecursive>
    }

    line_ix = 0;
 8010e48:	4b2b      	ldr	r3, [pc, #172]	; (8010ef8 <APP_TERMINAL_Parse+0x288>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	801a      	strh	r2, [r3, #0]
 8010e4e:	e00a      	b.n	8010e66 <APP_TERMINAL_Parse+0x1f6>

  } else if( line_ix < (100-1) ) {
 8010e50:	4929      	ldr	r1, [pc, #164]	; (8010ef8 <APP_TERMINAL_Parse+0x288>)
 8010e52:	880b      	ldrh	r3, [r1, #0]
 8010e54:	2b62      	cmp	r3, #98	; 0x62
 8010e56:	d806      	bhi.n	8010e66 <APP_TERMINAL_Parse+0x1f6>
    line_buffer[line_ix++] = byte;
 8010e58:	4a05      	ldr	r2, [pc, #20]	; (8010e70 <APP_TERMINAL_Parse+0x200>)
 8010e5a:	1c58      	adds	r0, r3, #1
 8010e5c:	54d4      	strb	r4, [r2, r3]
 8010e5e:	b283      	uxth	r3, r0
 8010e60:	800b      	strh	r3, [r1, #0]
    line_buffer[line_ix] = 0;
 8010e62:	2100      	movs	r1, #0
 8010e64:	54d1      	strb	r1, [r2, r3]
  }

  // restore debug port
  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8010e66:	4628      	mov	r0, r5
 8010e68:	f002 f948 	bl	80130fc <MIOS32_MIDI_DebugPortSet>

  return;
}
 8010e6c:	b00c      	add	sp, #48	; 0x30
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}
 8010e70:	20000411 	.word	0x20000411
 8010e74:	0801f027 	.word	0x0801f027
 8010e78:	200013a8 	.word	0x200013a8
 8010e7c:	0801f02a 	.word	0x0801f02a
 8010e80:	0801f02f 	.word	0x0801f02f
 8010e84:	0801f051 	.word	0x0801f051
 8010e88:	0801f080 	.word	0x0801f080
 8010e8c:	0801f0af 	.word	0x0801f0af
 8010e90:	0801f0e0 	.word	0x0801f0e0
 8010e94:	0801f11c 	.word	0x0801f11c
 8010e98:	0801f157 	.word	0x0801f157
 8010e9c:	0801f185 	.word	0x0801f185
 8010ea0:	0801f1bc 	.word	0x0801f1bc
 8010ea4:	0801f1df 	.word	0x0801f1df
 8010ea8:	0801f211 	.word	0x0801f211
 8010eac:	0801f24f 	.word	0x0801f24f
 8010eb0:	0801f296 	.word	0x0801f296
 8010eb4:	0801f29d 	.word	0x0801f29d
 8010eb8:	0801f2a1 	.word	0x0801f2a1
 8010ebc:	0801f2d0 	.word	0x0801f2d0
 8010ec0:	0801f2d4 	.word	0x0801f2d4
 8010ec4:	0801f2d8 	.word	0x0801f2d8
 8010ec8:	0801f2e5 	.word	0x0801f2e5
 8010ecc:	0801f2e0 	.word	0x0801f2e0
 8010ed0:	0801f2e3 	.word	0x0801f2e3
 8010ed4:	0801f2e9 	.word	0x0801f2e9
 8010ed8:	0801f307 	.word	0x0801f307
 8010edc:	0801f30e 	.word	0x0801f30e
 8010ee0:	0801f332 	.word	0x0801f332
 8010ee4:	0801f339 	.word	0x0801f339
 8010ee8:	0801f36f 	.word	0x0801f36f
 8010eec:	0801f374 	.word	0x0801f374
 8010ef0:	0801f3a8 	.word	0x0801f3a8
 8010ef4:	0801f3b2 	.word	0x0801f3b2
 8010ef8:	2000089c 	.word	0x2000089c

08010efc <SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// Application Tick Hook (called by FreeRTOS each mS)
/////////////////////////////////////////////////////////////////////////////
void SRIO_ServiceFinish(void)
{
 8010efc:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_SRIO

# ifndef MIOS32_DONT_USE_ENC
  // update encoder states
  MIOS32_ENC_UpdateStates();
 8010efe:	f001 fc01 	bl	8012704 <MIOS32_ENC_UpdateStates>
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
#endif
}
 8010f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // update encoder states
  MIOS32_ENC_UpdateStates();
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
 8010f06:	f7ff b979 	b.w	80101fc <APP_SRIO_ServiceFinish>

08010f0a <APP_Tick>:
/////////////////////////////////////////////////////////////////////////////
// Dummies for APP_Tick and APP_MIDI_Tick (if not used in app.c)
/////////////////////////////////////////////////////////////////////////////

__attribute__ ((weak)) void APP_Tick(void)
{
 8010f0a:	4770      	bx	lr

08010f0c <TASK_Hooks>:

/////////////////////////////////////////////////////////////////////////////
// Remaining application hooks
/////////////////////////////////////////////////////////////////////////////
static void TASK_Hooks(void *pvParameters)
{
 8010f0c:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010f0e:	f000 fba7 	bl	8011660 <xTaskGetTickCount>
 8010f12:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010f14:	2101      	movs	r1, #1
 8010f16:	a801      	add	r0, sp, #4
 8010f18:	f000 fcce 	bl	80118b8 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 8010f1c:	f000 fba0 	bl	8011660 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 8010f20:	9b01      	ldr	r3, [sp, #4]
 8010f22:	1f42      	subs	r2, r0, #5
 8010f24:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 8010f26:	bf38      	it	cc
 8010f28:	9001      	strcc	r0, [sp, #4]

#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
    // check for DIN pin changes, call APP_DIN_NotifyToggle on each toggled pin
    MIOS32_DIN_Handler(APP_DIN_NotifyToggle);
 8010f2a:	4807      	ldr	r0, [pc, #28]	; (8010f48 <TASK_Hooks+0x3c>)
 8010f2c:	f001 fb74 	bl	8012618 <MIOS32_DIN_Handler>

    // check for encoder changes, call APP_ENC_NotifyChanged on each change
# ifndef MIOS32_DONT_USE_ENC
    MIOS32_ENC_Handler(APP_ENC_NotifyChange);
 8010f30:	4806      	ldr	r0, [pc, #24]	; (8010f4c <TASK_Hooks+0x40>)
 8010f32:	f001 fd1d 	bl	8012970 <MIOS32_ENC_Handler>
# endif
#endif

#if !defined(MIOS32_DONT_USE_AIN) && !defined(MIOS32_DONT_SERVICE_AIN)
    // check for AIN pin changes, call APP_AIN_NotifyChange on each pin change
    MIOS32_AIN_Handler(APP_AIN_NotifyChange);
 8010f36:	4806      	ldr	r0, [pc, #24]	; (8010f50 <TASK_Hooks+0x44>)
 8010f38:	f004 fa3b 	bl	80153b2 <MIOS32_AIN_Handler>
#endif

#if !defined(MIOS32_DONT_USE_COM)
    // check for incoming COM messages
    MIOS32_COM_Receive_Handler();
 8010f3c:	f002 fc24 	bl	8013788 <MIOS32_COM_Receive_Handler>
#endif

    // optional APP_Tick() hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_Tick();
 8010f40:	f7ff ffe3 	bl	8010f0a <APP_Tick>
  }
 8010f44:	e7e6      	b.n	8010f14 <TASK_Hooks+0x8>
 8010f46:	bf00      	nop
 8010f48:	080101ff 	.word	0x080101ff
 8010f4c:	08010201 	.word	0x08010201
 8010f50:	08010203 	.word	0x08010203

08010f54 <APP_MIDI_Tick>:
__attribute__ ((weak)) void APP_Tick(void)
{
}

__attribute__ ((weak)) void APP_MIDI_Tick(void)
{
 8010f54:	4770      	bx	lr
	...

08010f58 <TASK_MIDI_Hooks>:
// MIDI task (separated from TASK_Hooks() to ensure parallel handling of
// MIDI events if a hook in TASK_Hooks() blocks)
/////////////////////////////////////////////////////////////////////////////
#if !defined(MIOS32_DONT_USE_MIDI)
static void TASK_MIDI_Hooks(void *pvParameters)
{
 8010f58:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010f5a:	f000 fb81 	bl	8011660 <xTaskGetTickCount>
 8010f5e:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010f60:	2101      	movs	r1, #1
 8010f62:	a801      	add	r0, sp, #4
 8010f64:	f000 fca8 	bl	80118b8 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 8010f68:	f000 fb7a 	bl	8011660 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 8010f6c:	9b01      	ldr	r3, [sp, #4]
 8010f6e:	1f42      	subs	r2, r0, #5
 8010f70:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 8010f72:	bf38      	it	cc
 8010f74:	9001      	strcc	r0, [sp, #4]

    // handle timeout/expire counters and USB packages
    MIOS32_MIDI_Periodic_mS();
 8010f76:	f002 f875 	bl	8013064 <MIOS32_MIDI_Periodic_mS>

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 8010f7a:	4803      	ldr	r0, [pc, #12]	; (8010f88 <TASK_MIDI_Hooks+0x30>)
 8010f7c:	f002 fb24 	bl	80135c8 <MIOS32_MIDI_Receive_Handler>

    // optional application specific hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_MIDI_Tick();
 8010f80:	f7ff ffe8 	bl	8010f54 <APP_MIDI_Tick>
  }
 8010f84:	e7ec      	b.n	8010f60 <TASK_MIDI_Hooks+0x8>
 8010f86:	bf00      	nop
 8010f88:	080101f9 	.word	0x080101f9

08010f8c <main>:

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8010f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 8010f8e:	2000      	movs	r0, #0
 8010f90:	f003 fa5e 	bl	8014450 <MIOS32_SYS_Init>
#endif
#ifndef MIOS32_DONT_USE_DELAY
  MIOS32_DELAY_Init(0);
 8010f94:	2000      	movs	r0, #0
 8010f96:	f004 f9db 	bl	8015350 <MIOS32_DELAY_Init>
#endif
#ifndef MIOS32_DONT_USE_TIMESTAMP
  MIOS32_TIMESTAMP_Init(0);
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	f003 f986 	bl	80142ac <MIOS32_TIMESTAMP_Init>
#endif
#ifndef MIOS32_DONT_USE_BOARD
  MIOS32_BOARD_Init(0);
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	f003 ffa7 	bl	8014ef4 <MIOS32_BOARD_Init>
#endif
#ifndef MIOS32_DONT_USE_SPI
  MIOS32_SPI_Init(0);
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	f003 fd7a 	bl	8014aa0 <MIOS32_SPI_Init>
#endif
#ifndef MIOS32_DONT_USE_SRIO
  MIOS32_SRIO_Init(0);
 8010fac:	2000      	movs	r0, #0
 8010fae:	f001 fa73 	bl	8012498 <MIOS32_SRIO_Init>
#endif
#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DIN_Init(0);
 8010fb2:	2000      	movs	r0, #0
 8010fb4:	f001 fb04 	bl	80125c0 <MIOS32_DIN_Init>
#endif
#if !defined(MIOS32_DONT_USE_DOUT) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DOUT_Init(0);
 8010fb8:	2000      	movs	r0, #0
 8010fba:	f001 fb5f 	bl	801267c <MIOS32_DOUT_Init>
#endif
#if !defined(MIOS32_DONT_USE_ENC) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_ENC_Init(0);
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	f001 fb6a 	bl	8012698 <MIOS32_ENC_Init>
#endif
#if !defined(MIOS32_DONT_USE_MF)
  MIOS32_MF_Init(0);
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	f002 fdfb 	bl	8013bc0 <MIOS32_MF_Init>
#endif
#if !defined(MIOS32_DONT_USE_AIN)
  MIOS32_AIN_Init(0);
 8010fca:	2000      	movs	r0, #0
 8010fcc:	f004 f9ee 	bl	80153ac <MIOS32_AIN_Init>
#endif
#ifndef MIOS32_DONT_USE_IIC_BS
  MIOS32_IIC_BS_Init(0);
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	f002 fdf2 	bl	8013bba <MIOS32_IIC_BS_Init>
#endif
#ifndef MIOS32_DONT_USE_MIDI
  MIOS32_MIDI_Init(0);
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	f001 fe14 	bl	8012c04 <MIOS32_MIDI_Init>
#endif
#ifndef MIOS32_DONT_USE_USB
  MIOS32_USB_Init(0);
 8010fdc:	2000      	movs	r0, #0
 8010fde:	f004 fb8d 	bl	80156fc <MIOS32_USB_Init>
#endif
#ifndef MIOS32_DONT_USE_OSC
  MIOS32_OSC_Init(0);
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	f002 fb98 	bl	8013718 <MIOS32_OSC_Init>
#endif
#ifndef MIOS32_DONT_USE_COM
  MIOS32_COM_Init(0);
 8010fe8:	2000      	movs	r0, #0
 8010fea:	f002 fb9b 	bl	8013724 <MIOS32_COM_Init>
#endif
#ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_Init(0);
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f001 fd6c 	bl	8012acc <MIOS32_LCD_Init>

# if defined(MIOS32_BOARD_MBHP_CORE_STM32) || defined(MIOS32_BOARD_MBHP_CORE_LPC17) || defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
  // init second LCD as well (if available)
  MIOS32_LCD_DeviceSet(1);
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	f001 fd17 	bl	8012a28 <MIOS32_LCD_DeviceSet>
  APP_LCD_Init(0);
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	f00a fa4e 	bl	801b49c <APP_LCD_Init>
  MIOS32_LCD_DeviceSet(0);
 8011000:	2000      	movs	r0, #0
 8011002:	f001 fd11 	bl	8012a28 <MIOS32_LCD_DeviceSet>
#ifdef MIOS32_USE_I2S
  MIOS32_I2S_Init(0);
#endif

  // call C++ constructors
  __libc_init_array();
 8011006:	f00d f9e3 	bl	801e3d0 <__libc_init_array>

  // initialize application
  APP_Init();
 801100a:	f7fe fff9 	bl	8010000 <APP_Init>

#if MIOS32_LCD_BOOT_MSG_DELAY
  // print boot message
# ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_PrintBootMessage();
 801100e:	f001 fdc5 	bl	8012b9c <MIOS32_LCD_PrintBootMessage>
 8011012:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
    MIOS32_DELAY_Wait_uS(1000);
 8011016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801101a:	f004 f9bb 	bl	8015394 <MIOS32_DELAY_Wait_uS>
# endif

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
 801101e:	3c01      	subs	r4, #1
 8011020:	d1f9      	bne.n	8011016 <main+0x8a>
    MIOS32_DELAY_Wait_uS(1000);
# endif
#endif

  // start the task which calls the application hooks
  xTaskCreate(TASK_Hooks, "Hooks", (MIOS32_TASK_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 8011022:	2503      	movs	r5, #3
 8011024:	4623      	mov	r3, r4
 8011026:	9500      	str	r5, [sp, #0]
 8011028:	9401      	str	r4, [sp, #4]
 801102a:	4909      	ldr	r1, [pc, #36]	; (8011050 <main+0xc4>)
 801102c:	4809      	ldr	r0, [pc, #36]	; (8011054 <main+0xc8>)
 801102e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011032:	f000 fa05 	bl	8011440 <xTaskCreate>
#if !defined(MIOS32_DONT_USE_MIDI)
  xTaskCreate(TASK_MIDI_Hooks, "MIDI_Hooks", (MIOS32_TASK_MIDI_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 8011036:	4908      	ldr	r1, [pc, #32]	; (8011058 <main+0xcc>)
 8011038:	9500      	str	r5, [sp, #0]
 801103a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801103e:	4623      	mov	r3, r4
 8011040:	9401      	str	r4, [sp, #4]
 8011042:	4806      	ldr	r0, [pc, #24]	; (801105c <main+0xd0>)
 8011044:	f000 f9fc 	bl	8011440 <xTaskCreate>
#endif

  // start the scheduler
  vTaskStartScheduler();
 8011048:	f000 fad0 	bl	80115ec <vTaskStartScheduler>

  // Will only get here if there was not enough heap space to create the idle task
  return 0;
}
 801104c:	4620      	mov	r0, r4
 801104e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8011050:	0801f3f2 	.word	0x0801f3f2
 8011054:	08010f0d 	.word	0x08010f0d
 8011058:	0801f3ed 	.word	0x0801f3ed
 801105c:	08010f59 	.word	0x08010f59

08011060 <vApplicationTickHook>:
  APP_SRIO_ServiceFinish();
#endif
}

void vApplicationTickHook(void)
{
 8011060:	b508      	push	{r3, lr}
#if !defined(MIOS32_DONT_USE_TIMESTAMP)
  MIOS32_TIMESTAMP_Inc();
 8011062:	f003 f92d 	bl	80142c0 <MIOS32_TIMESTAMP_Inc>
#endif

#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();
 8011066:	f7ff f8c8 	bl	80101fa <APP_SRIO_ServicePrepare>

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 801106a:	4802      	ldr	r0, [pc, #8]	; (8011074 <vApplicationTickHook+0x14>)
#endif
}
 801106c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 8011070:	f001 ba6a 	b.w	8012548 <MIOS32_SRIO_ScanStart>
 8011074:	08010efd 	.word	0x08010efd

08011078 <vApplicationIdleHook>:
/////////////////////////////////////////////////////////////////////////////
// Idle Hook (called by FreeRTOS when nothing else to do)
/////////////////////////////////////////////////////////////////////////////
void vApplicationIdleHook(void)
{
  APP_Background();
 8011078:	f7ff b842 	b.w	8010100 <APP_Background>

0801107c <_abort>:
// This function aborts any operations, but keeps MIDI alive (for uploading
// a new firmware)
// If MIDI isn't enabled, the status LED will be flashed
/////////////////////////////////////////////////////////////////////////////
void _abort(void)
{
 801107c:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_MIDI
  // keep MIDI alive, so that program code can be updated
  u32 delay_ctr = 0;
 801107e:	2400      	movs	r4, #0
  while( 1 ) {
    ++delay_ctr;
 8011080:	3401      	adds	r4, #1

    if( (delay_ctr % 100) == 0 ) {
 8011082:	2364      	movs	r3, #100	; 0x64
 8011084:	fbb4 f2f3 	udiv	r2, r4, r3
 8011088:	fb03 4012 	mls	r0, r3, r2, r4
 801108c:	b908      	cbnz	r0, 8011092 <_abort+0x16>
      // handle timeout/expire counters and USB packages
      MIOS32_MIDI_Periodic_mS();
 801108e:	f001 ffe9 	bl	8013064 <MIOS32_MIDI_Periodic_mS>
    }

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 8011092:	4809      	ldr	r0, [pc, #36]	; (80110b8 <_abort+0x3c>)
 8011094:	f002 fa98 	bl	80135c8 <MIOS32_MIDI_Receive_Handler>

    if( (delay_ctr % 10000) == 0 ) {
 8011098:	f242 7110 	movw	r1, #10000	; 0x2710
 801109c:	fbb4 f3f1 	udiv	r3, r4, r1
 80110a0:	fb01 4213 	mls	r2, r1, r3, r4
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	d1eb      	bne.n	8011080 <_abort+0x4>
      // toggle board LED
      MIOS32_BOARD_LED_Set(1, ~MIOS32_BOARD_LED_Get());
 80110a8:	f003 ff90 	bl	8014fcc <MIOS32_BOARD_LED_Get>
 80110ac:	43c1      	mvns	r1, r0
 80110ae:	2001      	movs	r0, #1
 80110b0:	f003 ff5a 	bl	8014f68 <MIOS32_BOARD_LED_Set>
 80110b4:	e7e4      	b.n	8011080 <_abort+0x4>
 80110b6:	bf00      	nop
 80110b8:	080101f9 	.word	0x080101f9

080110bc <vApplicationMallocFailedHook>:

/////////////////////////////////////////////////////////////////////////////
// enabled in FreeRTOSConfig.h
/////////////////////////////////////////////////////////////////////////////
void vApplicationMallocFailedHook(void)
{
 80110bc:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80110be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80110c2:	f001 fd9b 	bl	8012bfc <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80110c6:	2000      	movs	r0, #0
 80110c8:	f001 fd9a 	bl	8012c00 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80110cc:	2000      	movs	r0, #0
 80110ce:	f001 fcab 	bl	8012a28 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80110d2:	f001 fcf9 	bl	8012ac8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80110d6:	2000      	movs	r0, #0
 80110d8:	4601      	mov	r1, r0
 80110da:	f001 fcab 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("FATAL: FreeRTOS "); // 16 chars
 80110de:	4807      	ldr	r0, [pc, #28]	; (80110fc <vApplicationMallocFailedHook+0x40>)
 80110e0:	f001 fd50 	bl	8012b84 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80110e4:	2101      	movs	r1, #1
 80110e6:	2000      	movs	r0, #0
 80110e8:	f001 fca4 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Malloc Error!!! "); // 16 chars
 80110ec:	4804      	ldr	r0, [pc, #16]	; (8011100 <vApplicationMallocFailedHook+0x44>)
 80110ee:	f001 fd49 	bl	8012b84 <MIOS32_LCD_PrintString>
#endif

#ifndef MIOS32_DONT_USE_MIDI
  // Note: message won't be sent if MIDI task cannot be created!
  MIOS32_MIDI_SendDebugMessage("FATAL: FreeRTOS Malloc Error!!!\n");
 80110f2:	4804      	ldr	r0, [pc, #16]	; (8011104 <vApplicationMallocFailedHook+0x48>)
 80110f4:	f001 ff66 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif

  _abort();
 80110f8:	f7ff ffc0 	bl	801107c <_abort>
 80110fc:	0801f3f8 	.word	0x0801f3f8
 8011100:	0801f409 	.word	0x0801f409
 8011104:	0801f41a 	.word	0x0801f41a

08011108 <HardFault_Handler_c>:

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 8011108:	b510      	push	{r4, lr}
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 801110a:	6803      	ldr	r3, [r0, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 801110c:	6841      	ldr	r1, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 801110e:	6882      	ldr	r2, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 8011110:	68c4      	ldr	r4, [r0, #12]

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 8011112:	b088      	sub	sp, #32
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 8011114:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 8011116:	6903      	ldr	r3, [r0, #16]
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 8011118:	9101      	str	r1, [sp, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 801111a:	9202      	str	r2, [sp, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 801111c:	6941      	ldr	r1, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 801111e:	6982      	ldr	r2, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 8011120:	69c0      	ldr	r0, [r0, #28]
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 8011122:	9403      	str	r4, [sp, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 8011124:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
 8011126:	4c33      	ldr	r4, [pc, #204]	; (80111f4 <HardFault_Handler_c+0xec>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 8011128:	9105      	str	r1, [sp, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 801112a:	9206      	str	r2, [sp, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 801112c:	9007      	str	r0, [sp, #28]
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
 801112e:	9906      	ldr	r1, [sp, #24]
 8011130:	4831      	ldr	r0, [pc, #196]	; (80111f8 <HardFault_Handler_c+0xf0>)
 8011132:	f001 ff47 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 8011136:	4620      	mov	r0, r4
 8011138:	f001 ff44 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
 801113c:	482f      	ldr	r0, [pc, #188]	; (80111fc <HardFault_Handler_c+0xf4>)
 801113e:	f001 ff41 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 8011142:	4620      	mov	r0, r4
 8011144:	f001 ff3e 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8011148:	9900      	ldr	r1, [sp, #0]
 801114a:	482d      	ldr	r0, [pc, #180]	; (8011200 <HardFault_Handler_c+0xf8>)
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 801114c:	4c2d      	ldr	r4, [pc, #180]	; (8011204 <HardFault_Handler_c+0xfc>)
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 801114e:	f001 ff39 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R1 = %08x\n", stacked_r1);
 8011152:	9901      	ldr	r1, [sp, #4]
 8011154:	482c      	ldr	r0, [pc, #176]	; (8011208 <HardFault_Handler_c+0x100>)
 8011156:	f001 ff35 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R2 = %08x\n", stacked_r2);
 801115a:	9902      	ldr	r1, [sp, #8]
 801115c:	482b      	ldr	r0, [pc, #172]	; (801120c <HardFault_Handler_c+0x104>)
 801115e:	f001 ff31 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R3 = %08x\n", stacked_r3);
 8011162:	9903      	ldr	r1, [sp, #12]
 8011164:	482a      	ldr	r0, [pc, #168]	; (8011210 <HardFault_Handler_c+0x108>)
 8011166:	f001 ff2d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R12 = %08x\n", stacked_r12);
 801116a:	9904      	ldr	r1, [sp, #16]
 801116c:	4829      	ldr	r0, [pc, #164]	; (8011214 <HardFault_Handler_c+0x10c>)
 801116e:	f001 ff29 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("LR = %08x\n", stacked_lr);
 8011172:	9905      	ldr	r1, [sp, #20]
 8011174:	4828      	ldr	r0, [pc, #160]	; (8011218 <HardFault_Handler_c+0x110>)
 8011176:	f001 ff25 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PC = %08x\n", stacked_pc);
 801117a:	9906      	ldr	r1, [sp, #24]
 801117c:	4827      	ldr	r0, [pc, #156]	; (801121c <HardFault_Handler_c+0x114>)
 801117e:	f001 ff21 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
 8011182:	9907      	ldr	r1, [sp, #28]
 8011184:	4826      	ldr	r0, [pc, #152]	; (8011220 <HardFault_Handler_c+0x118>)
 8011186:	f001 ff1d 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
 801118a:	4b26      	ldr	r3, [pc, #152]	; (8011224 <HardFault_Handler_c+0x11c>)
 801118c:	4826      	ldr	r0, [pc, #152]	; (8011228 <HardFault_Handler_c+0x120>)
 801118e:	6819      	ldr	r1, [r3, #0]
 8011190:	f001 ff18 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
 8011194:	4925      	ldr	r1, [pc, #148]	; (801122c <HardFault_Handler_c+0x124>)
 8011196:	4826      	ldr	r0, [pc, #152]	; (8011230 <HardFault_Handler_c+0x128>)
 8011198:	6809      	ldr	r1, [r1, #0]
 801119a:	f001 ff13 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
 801119e:	4a25      	ldr	r2, [pc, #148]	; (8011234 <HardFault_Handler_c+0x12c>)
 80111a0:	4825      	ldr	r0, [pc, #148]	; (8011238 <HardFault_Handler_c+0x130>)
 80111a2:	6811      	ldr	r1, [r2, #0]
 80111a4:	f001 ff0e 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
 80111a8:	4824      	ldr	r0, [pc, #144]	; (801123c <HardFault_Handler_c+0x134>)
 80111aa:	6801      	ldr	r1, [r0, #0]
 80111ac:	4824      	ldr	r0, [pc, #144]	; (8011240 <HardFault_Handler_c+0x138>)
 80111ae:	f001 ff09 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 80111b2:	6821      	ldr	r1, [r4, #0]
 80111b4:	4823      	ldr	r0, [pc, #140]	; (8011244 <HardFault_Handler_c+0x13c>)
 80111b6:	f001 ff05 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>

#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80111ba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80111be:	f001 fd1d 	bl	8012bfc <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80111c2:	2000      	movs	r0, #0
 80111c4:	f001 fd1c 	bl	8012c00 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80111c8:	2000      	movs	r0, #0
 80111ca:	f001 fc2d 	bl	8012a28 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80111ce:	f001 fc7b 	bl	8012ac8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80111d2:	2000      	movs	r0, #0
 80111d4:	4601      	mov	r1, r0
 80111d6:	f001 fc2d 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("!! HARD FAULT !!");
 80111da:	481b      	ldr	r0, [pc, #108]	; (8011248 <HardFault_Handler_c+0x140>)
 80111dc:	f001 fcd2 	bl	8012b84 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80111e0:	2101      	movs	r1, #1
 80111e2:	2000      	movs	r0, #0
 80111e4:	f001 fc26 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintFormattedString("at PC=0x%08x", stacked_pc);
 80111e8:	9906      	ldr	r1, [sp, #24]
 80111ea:	4818      	ldr	r0, [pc, #96]	; (801124c <HardFault_Handler_c+0x144>)
 80111ec:	f001 fcf4 	bl	8012bd8 <MIOS32_LCD_PrintFormattedString>
#endif

  _abort();
 80111f0:	f7ff ff44 	bl	801107c <_abort>
 80111f4:	0801e53e 	.word	0x0801e53e
 80111f8:	0801f44e 	.word	0x0801f44e
 80111fc:	0801f464 	.word	0x0801f464
 8011200:	0801f478 	.word	0x0801f478
 8011204:	e000ed3c 	.word	0xe000ed3c
 8011208:	0801f483 	.word	0x0801f483
 801120c:	0801f48e 	.word	0x0801f48e
 8011210:	0801f499 	.word	0x0801f499
 8011214:	0801f4a4 	.word	0x0801f4a4
 8011218:	0801f4b0 	.word	0x0801f4b0
 801121c:	0801f459 	.word	0x0801f459
 8011220:	0801f4bb 	.word	0x0801f4bb
 8011224:	e000ed38 	.word	0xe000ed38
 8011228:	0801f4c7 	.word	0x0801f4c7
 801122c:	e000ed28 	.word	0xe000ed28
 8011230:	0801f4d4 	.word	0x0801f4d4
 8011234:	e000ed2c 	.word	0xe000ed2c
 8011238:	0801f4e1 	.word	0x0801f4e1
 801123c:	e000ed30 	.word	0xe000ed30
 8011240:	0801f4ee 	.word	0x0801f4ee
 8011244:	0801f4fb 	.word	0x0801f4fb
 8011248:	0801f508 	.word	0x0801f508
 801124c:	0801f519 	.word	0x0801f519

08011250 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
  __asm("TST LR, #4");
 8011250:	f01e 0f04 	tst.w	lr, #4
  __asm("ITE EQ");
 8011254:	bf0c      	ite	eq
  __asm("MRSEQ R0, MSP");
 8011256:	f3ef 8008 	mrseq	r0, MSP
  __asm("MRSNE R0, PSP");
 801125a:	f3ef 8009 	mrsne	r0, PSP
  __asm("B HardFault_Handler_c");
 801125e:	f7ff bf53 	b.w	8011108 <HardFault_Handler_c>
 8011262:	4770      	bx	lr

08011264 <_strtol_r>:
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace(c));
 8011264:	4840      	ldr	r0, [pc, #256]	; (8011368 <_strtol_r+0x104>)
_DEFUN (_strtol_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *nptr _AND
	char **endptr _AND
	int base)
{
 8011266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace(c));
 801126a:	f8d0 8000 	ldr.w	r8, [r0]
 801126e:	4608      	mov	r0, r1
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8011270:	4604      	mov	r4, r0
 8011272:	f814 5b01 	ldrb.w	r5, [r4], #1
	} while (isspace(c));
 8011276:	eb08 0605 	add.w	r6, r8, r5
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 801127a:	4620      	mov	r0, r4
	} while (isspace(c));
 801127c:	7877      	ldrb	r7, [r6, #1]
 801127e:	f007 0608 	and.w	r6, r7, #8
 8011282:	b2f7      	uxtb	r7, r6
 8011284:	2f00      	cmp	r7, #0
 8011286:	d1f3      	bne.n	8011270 <_strtol_r+0xc>
	if (c == '-') {
 8011288:	2d2d      	cmp	r5, #45	; 0x2d
 801128a:	d103      	bne.n	8011294 <_strtol_r+0x30>
		neg = 1;
		c = *s++;
 801128c:	f814 5b01 	ldrb.w	r5, [r4], #1
	 */
	do {
		c = *s++;
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
 8011290:	2701      	movs	r7, #1
 8011292:	e004      	b.n	801129e <_strtol_r+0x3a>
		c = *s++;
	} else if (c == '+')
 8011294:	2d2b      	cmp	r5, #43	; 0x2b
		c = *s++;
 8011296:	bf04      	itt	eq
 8011298:	4624      	moveq	r4, r4
 801129a:	f814 5b01 	ldrbeq.w	r5, [r4], #1
	if ((base == 0 || base == 16) &&
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d05b      	beq.n	801135a <_strtol_r+0xf6>
 80112a2:	2b10      	cmp	r3, #16
 80112a4:	d107      	bne.n	80112b6 <_strtol_r+0x52>
 80112a6:	2d30      	cmp	r5, #48	; 0x30
 80112a8:	d105      	bne.n	80112b6 <_strtol_r+0x52>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 80112aa:	7825      	ldrb	r5, [r4, #0]
 80112ac:	2d78      	cmp	r5, #120	; 0x78
 80112ae:	d14d      	bne.n	801134c <_strtol_r+0xe8>
		c = s[1];
 80112b0:	7865      	ldrb	r5, [r4, #1]
		s += 2;
		base = 16;
 80112b2:	2310      	movs	r3, #16
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
	    c == '0' && (*s == 'x' || *s == 'X')) {
		c = s[1];
		s += 2;
 80112b4:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 80112b6:	2f00      	cmp	r7, #0
 80112b8:	bf0c      	ite	eq
 80112ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80112be:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
 80112c2:	fbb0 f9f3 	udiv	r9, r0, r3
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 80112c6:	2600      	movs	r6, #0
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
 80112c8:	fb03 0a19 	mls	sl, r3, r9, r0
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 80112cc:	4630      	mov	r0, r6
		if (isdigit(c))
 80112ce:	eb08 0c05 	add.w	ip, r8, r5
 80112d2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80112d6:	f00c 0b04 	and.w	fp, ip, #4
 80112da:	fa5f fb8b 	uxtb.w	fp, fp
 80112de:	f1bb 0f00 	cmp.w	fp, #0
 80112e2:	d001      	beq.n	80112e8 <_strtol_r+0x84>
			c -= '0';
 80112e4:	3d30      	subs	r5, #48	; 0x30
 80112e6:	e00b      	b.n	8011300 <_strtol_r+0x9c>
		else if (isalpha(c))
 80112e8:	f01c 0c03 	ands.w	ip, ip, #3
 80112ec:	d01b      	beq.n	8011326 <_strtol_r+0xc2>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
 80112ee:	f1bc 0f01 	cmp.w	ip, #1
 80112f2:	bf14      	ite	ne
 80112f4:	f04f 0c57 	movne.w	ip, #87	; 0x57
 80112f8:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 80112fc:	ebcc 0505 	rsb	r5, ip, r5
		else
			break;
		if (c >= base)
 8011300:	429d      	cmp	r5, r3
 8011302:	da10      	bge.n	8011326 <_strtol_r+0xc2>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
 8011304:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8011308:	d00a      	beq.n	8011320 <_strtol_r+0xbc>
 801130a:	4548      	cmp	r0, r9
 801130c:	d806      	bhi.n	801131c <_strtol_r+0xb8>
 801130e:	d101      	bne.n	8011314 <_strtol_r+0xb0>
 8011310:	4555      	cmp	r5, sl
 8011312:	dc03      	bgt.n	801131c <_strtol_r+0xb8>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
 8011314:	fb03 5000 	mla	r0, r3, r0, r5
		if (c >= base)
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
			any = -1;
		else {
			any = 1;
 8011318:	2601      	movs	r6, #1
 801131a:	e001      	b.n	8011320 <_strtol_r+0xbc>
		else
			break;
		if (c >= base)
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
			any = -1;
 801131c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8011320:	f814 5b01 	ldrb.w	r5, [r4], #1
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
 8011324:	e7d3      	b.n	80112ce <_strtol_r+0x6a>
	if (any < 0) {
 8011326:	1c73      	adds	r3, r6, #1
 8011328:	d108      	bne.n	801133c <_strtol_r+0xd8>
		acc = neg ? LONG_MIN : LONG_MAX;
 801132a:	2f00      	cmp	r7, #0
 801132c:	bf14      	ite	ne
 801132e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8011332:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
#if NO_ERRNO == 0
		rptr->_errno = ERANGE;
#endif
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
 8011336:	b92a      	cbnz	r2, 8011344 <_strtol_r+0xe0>
 8011338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (any < 0) {
		acc = neg ? LONG_MIN : LONG_MAX;
#if NO_ERRNO == 0
		rptr->_errno = ERANGE;
#endif
	} else if (neg)
 801133c:	b107      	cbz	r7, 8011340 <_strtol_r+0xdc>
		acc = -acc;
 801133e:	4240      	negs	r0, r0
	if (endptr != 0)
 8011340:	b17a      	cbz	r2, 8011362 <_strtol_r+0xfe>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
 8011342:	b106      	cbz	r6, 8011346 <_strtol_r+0xe2>
 8011344:	1e61      	subs	r1, r4, #1
 8011346:	6011      	str	r1, [r2, #0]
 8011348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		neg = 1;
		c = *s++;
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
	    c == '0' && (*s == 'x' || *s == 'X')) {
 801134c:	2d58      	cmp	r5, #88	; 0x58
 801134e:	d0af      	beq.n	80112b0 <_strtol_r+0x4c>
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
 8011350:	2530      	movs	r5, #48	; 0x30
 8011352:	2b00      	cmp	r3, #0
 8011354:	d1af      	bne.n	80112b6 <_strtol_r+0x52>
		base = c == '0' ? 8 : 10;
 8011356:	2308      	movs	r3, #8
 8011358:	e7ad      	b.n	80112b6 <_strtol_r+0x52>
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
 801135a:	2d30      	cmp	r5, #48	; 0x30
 801135c:	d0a5      	beq.n	80112aa <_strtol_r+0x46>
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
 801135e:	230a      	movs	r3, #10
 8011360:	e7a9      	b.n	80112b6 <_strtol_r+0x52>
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
	return (acc);
}
 8011362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011366:	bf00      	nop
 8011368:	2000006c 	.word	0x2000006c

0801136c <strtol>:
long
_DEFUN (strtol, (s, ptr, base),
	_CONST char *s _AND
	char **ptr _AND
	int base)
{
 801136c:	b530      	push	{r4, r5, lr}
 801136e:	4605      	mov	r5, r0
 8011370:	460c      	mov	r4, r1
 8011372:	4613      	mov	r3, r2
#if NO_ERRNO == 0
	return _strtol_r (_REENT, s, ptr, base);
#else
	return _strtol_r (NULL, s, ptr, base);
 8011374:	2000      	movs	r0, #0
 8011376:	4629      	mov	r1, r5
 8011378:	4622      	mov	r2, r4
#endif
}
 801137a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	int base)
{
#if NO_ERRNO == 0
	return _strtol_r (_REENT, s, ptr, base);
#else
	return _strtol_r (NULL, s, ptr, base);
 801137e:	f7ff bf71 	b.w	8011264 <_strtol_r>
	...

08011384 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011386:	4d1e      	ldr	r5, [pc, #120]	; (8011400 <prvAddCurrentTaskToDelayedList+0x7c>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011388:	4b1e      	ldr	r3, [pc, #120]	; (8011404 <prvAddCurrentTaskToDelayedList+0x80>)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801138a:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801138c:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801138e:	6828      	ldr	r0, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011390:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011392:	6829      	ldr	r1, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011394:	2200      	movs	r2, #0
 8011396:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801139a:	1d08      	adds	r0, r1, #4
 801139c:	f000 fc3a 	bl	8011c14 <uxListRemove>
 80113a0:	b948      	cbnz	r0, 80113b6 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80113a2:	4b19      	ldr	r3, [pc, #100]	; (8011408 <prvAddCurrentTaskToDelayedList+0x84>)
 80113a4:	6819      	ldr	r1, [r3, #0]
 80113a6:	6828      	ldr	r0, [r5, #0]
 80113a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80113aa:	2001      	movs	r0, #1
 80113ac:	fa00 f202 	lsl.w	r2, r0, r2
 80113b0:	ea21 0102 	bic.w	r1, r1, r2
 80113b4:	6019      	str	r1, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80113b6:	1c63      	adds	r3, r4, #1
 80113b8:	4811      	ldr	r0, [pc, #68]	; (8011400 <prvAddCurrentTaskToDelayedList+0x7c>)
 80113ba:	d107      	bne.n	80113cc <prvAddCurrentTaskToDelayedList+0x48>
 80113bc:	b137      	cbz	r7, 80113cc <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113be:	6802      	ldr	r2, [r0, #0]
 80113c0:	4812      	ldr	r0, [pc, #72]	; (801140c <prvAddCurrentTaskToDelayedList+0x88>)
 80113c2:	1d11      	adds	r1, r2, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80113c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113c8:	f000 bc00 	b.w	8011bcc <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80113cc:	19a4      	adds	r4, r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80113ce:	6802      	ldr	r2, [r0, #0]
 80113d0:	4b0b      	ldr	r3, [pc, #44]	; (8011400 <prvAddCurrentTaskToDelayedList+0x7c>)
 80113d2:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 80113d4:	42b4      	cmp	r4, r6
 80113d6:	d207      	bcs.n	80113e8 <prvAddCurrentTaskToDelayedList+0x64>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113d8:	490d      	ldr	r1, [pc, #52]	; (8011410 <prvAddCurrentTaskToDelayedList+0x8c>)
 80113da:	6808      	ldr	r0, [r1, #0]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	1d19      	adds	r1, r3, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80113e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113e4:	f000 bbfe 	b.w	8011be4 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113e8:	490a      	ldr	r1, [pc, #40]	; (8011414 <prvAddCurrentTaskToDelayedList+0x90>)
 80113ea:	6808      	ldr	r0, [r1, #0]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	1d19      	adds	r1, r3, #4
 80113f0:	f000 fbf8 	bl	8011be4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80113f4:	4808      	ldr	r0, [pc, #32]	; (8011418 <prvAddCurrentTaskToDelayedList+0x94>)
 80113f6:	6802      	ldr	r2, [r0, #0]
 80113f8:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80113fa:	bf38      	it	cc
 80113fc:	6004      	strcc	r4, [r0, #0]
 80113fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011400:	20000b68 	.word	0x20000b68
 8011404:	20000b70 	.word	0x20000b70
 8011408:	20000bc0 	.word	0x20000bc0
 801140c:	20000bac 	.word	0x20000bac
 8011410:	20000b74 	.word	0x20000b74
 8011414:	20000ac8 	.word	0x20000ac8
 8011418:	20000b6c 	.word	0x20000b6c

0801141c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801141c:	4a06      	ldr	r2, [pc, #24]	; (8011438 <prvResetNextTaskUnblockTime+0x1c>)
 801141e:	4807      	ldr	r0, [pc, #28]	; (801143c <prvResetNextTaskUnblockTime+0x20>)
 8011420:	6813      	ldr	r3, [r2, #0]
 8011422:	6819      	ldr	r1, [r3, #0]
 8011424:	b911      	cbnz	r1, 801142c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801142a:	e003      	b.n	8011434 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801142c:	6812      	ldr	r2, [r2, #0]
 801142e:	68d3      	ldr	r3, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011430:	68d9      	ldr	r1, [r3, #12]
 8011432:	684a      	ldr	r2, [r1, #4]
 8011434:	6002      	str	r2, [r0, #0]
 8011436:	4770      	bx	lr
 8011438:	20000ac8 	.word	0x20000ac8
 801143c:	20000b6c 	.word	0x20000b6c

08011440 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011444:	ea4f 0b82 	mov.w	fp, r2, lsl #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011448:	4681      	mov	r9, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801144a:	4658      	mov	r0, fp
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801144c:	460e      	mov	r6, r1
 801144e:	4692      	mov	sl, r2
 8011450:	4698      	mov	r8, r3
 8011452:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011454:	f000 fefa 	bl	801224c <pvPortMalloc>

			if( pxStack != NULL )
 8011458:	4605      	mov	r5, r0
 801145a:	2800      	cmp	r0, #0
 801145c:	f000 80a5 	beq.w	80115aa <xTaskCreate+0x16a>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011460:	2050      	movs	r0, #80	; 0x50
 8011462:	f000 fef3 	bl	801224c <pvPortMalloc>

				if( pxNewTCB != NULL )
 8011466:	4604      	mov	r4, r0
 8011468:	b170      	cbz	r0, 8011488 <xTaskCreate+0x48>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801146a:	6305      	str	r5, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801146c:	465a      	mov	r2, fp
 801146e:	4628      	mov	r0, r5
 8011470:	21a5      	movs	r1, #165	; 0xa5
 8011472:	f00c ffdc 	bl	801e42e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011478:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801147c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011480:	f020 0b07 	bic.w	fp, r0, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011484:	2500      	movs	r5, #0
 8011486:	e006      	b.n	8011496 <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011488:	4628      	mov	r0, r5
 801148a:	f000 ff5f 	bl	801234c <vPortFree>
 801148e:	e08c      	b.n	80115aa <xTaskCreate+0x16a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011490:	3501      	adds	r5, #1
 8011492:	2d10      	cmp	r5, #16
 8011494:	d006      	beq.n	80114a4 <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011496:	5d72      	ldrb	r2, [r6, r5]
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 8011498:	1961      	adds	r1, r4, r5
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801149a:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801149e:	5d73      	ldrb	r3, [r6, r5]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1f5      	bne.n	8011490 <xTaskCreate+0x50>
 80114a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114a6:	2500      	movs	r5, #0
 80114a8:	2e04      	cmp	r6, #4
 80114aa:	bf34      	ite	cc
 80114ac:	46b2      	movcc	sl, r6
 80114ae:	f04f 0a04 	movcs.w	sl, #4
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114b2:	1d26      	adds	r6, r4, #4
 80114b4:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114b6:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80114ba:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114be:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80114c2:	64a5      	str	r5, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114c4:	f000 fb7f 	bl	8011bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114c8:	f104 0018 	add.w	r0, r4, #24
 80114cc:	f000 fb7b 	bl	8011bc6 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114d0:	f1ca 0005 	rsb	r0, sl, #5
 80114d4:	61a0      	str	r0, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80114d6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114d8:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80114da:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114de:	4658      	mov	r0, fp
 80114e0:	4649      	mov	r1, r9
 80114e2:	4642      	mov	r2, r8
 80114e4:	f000 fdde 	bl	80120a4 <pxPortInitialiseStack>
 80114e8:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80114ea:	b107      	cbz	r7, 80114ee <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114ec:	603c      	str	r4, [r7, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80114ee:	f000 fe07 	bl	8012100 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80114f2:	4a30      	ldr	r2, [pc, #192]	; (80115b4 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 80114f4:	4830      	ldr	r0, [pc, #192]	; (80115b8 <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 80114f6:	6811      	ldr	r1, [r2, #0]
 80114f8:	1c4b      	adds	r3, r1, #1
 80114fa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80114fc:	6805      	ldr	r5, [r0, #0]
 80114fe:	bb15      	cbnz	r5, 8011546 <xTaskCreate+0x106>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011500:	6004      	str	r4, [r0, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011502:	6810      	ldr	r0, [r2, #0]
 8011504:	2801      	cmp	r0, #1
 8011506:	d127      	bne.n	8011558 <xTaskCreate+0x118>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011508:	4a2c      	ldr	r2, [pc, #176]	; (80115bc <xTaskCreate+0x17c>)
 801150a:	2714      	movs	r7, #20
 801150c:	fb07 2005 	mla	r0, r7, r5, r2

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011510:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011512:	f000 fb4d 	bl	8011bb0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011516:	2d05      	cmp	r5, #5
 8011518:	d1f6      	bne.n	8011508 <xTaskCreate+0xc8>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 801151a:	4f29      	ldr	r7, [pc, #164]	; (80115c0 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList2 );
 801151c:	4d29      	ldr	r5, [pc, #164]	; (80115c4 <xTaskCreate+0x184>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 801151e:	4638      	mov	r0, r7
 8011520:	f000 fb46 	bl	8011bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011524:	4628      	mov	r0, r5
 8011526:	f000 fb43 	bl	8011bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801152a:	4827      	ldr	r0, [pc, #156]	; (80115c8 <xTaskCreate+0x188>)
 801152c:	f000 fb40 	bl	8011bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011530:	4826      	ldr	r0, [pc, #152]	; (80115cc <xTaskCreate+0x18c>)
 8011532:	f000 fb3d 	bl	8011bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011536:	4826      	ldr	r0, [pc, #152]	; (80115d0 <xTaskCreate+0x190>)
 8011538:	f000 fb3a 	bl	8011bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801153c:	4925      	ldr	r1, [pc, #148]	; (80115d4 <xTaskCreate+0x194>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801153e:	4b26      	ldr	r3, [pc, #152]	; (80115d8 <xTaskCreate+0x198>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011540:	600f      	str	r7, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011542:	601d      	str	r5, [r3, #0]
 8011544:	e008      	b.n	8011558 <xTaskCreate+0x118>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011546:	4d25      	ldr	r5, [pc, #148]	; (80115dc <xTaskCreate+0x19c>)
 8011548:	682a      	ldr	r2, [r5, #0]
 801154a:	b92a      	cbnz	r2, 8011558 <xTaskCreate+0x118>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801154c:	6801      	ldr	r1, [r0, #0]
 801154e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8011550:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8011552:	42ab      	cmp	r3, r5
				{
					pxCurrentTCB = pxNewTCB;
 8011554:	bf98      	it	ls
 8011556:	6004      	strls	r4, [r0, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011558:	4821      	ldr	r0, [pc, #132]	; (80115e0 <xTaskCreate+0x1a0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801155a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801155c:	6802      	ldr	r2, [r0, #0]
 801155e:	1c55      	adds	r5, r2, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011560:	4a20      	ldr	r2, [pc, #128]	; (80115e4 <xTaskCreate+0x1a4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011562:	6005      	str	r5, [r0, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011564:	6811      	ldr	r1, [r2, #0]
 8011566:	2501      	movs	r5, #1
 8011568:	fa05 f003 	lsl.w	r0, r5, r3
 801156c:	4301      	orrs	r1, r0
 801156e:	6011      	str	r1, [r2, #0]
 8011570:	4a12      	ldr	r2, [pc, #72]	; (80115bc <xTaskCreate+0x17c>)
 8011572:	2014      	movs	r0, #20
 8011574:	fb00 2003 	mla	r0, r0, r3, r2
 8011578:	4631      	mov	r1, r6
 801157a:	f000 fb27 	bl	8011bcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801157e:	f000 fdcf 	bl	8012120 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011582:	4b16      	ldr	r3, [pc, #88]	; (80115dc <xTaskCreate+0x19c>)
 8011584:	6819      	ldr	r1, [r3, #0]
 8011586:	b169      	cbz	r1, 80115a4 <xTaskCreate+0x164>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011588:	480b      	ldr	r0, [pc, #44]	; (80115b8 <xTaskCreate+0x178>)
 801158a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801158c:	6802      	ldr	r2, [r0, #0]
 801158e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011590:	4299      	cmp	r1, r3
 8011592:	d207      	bcs.n	80115a4 <xTaskCreate+0x164>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011594:	4a14      	ldr	r2, [pc, #80]	; (80115e8 <xTaskCreate+0x1a8>)
 8011596:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801159a:	6010      	str	r0, [r2, #0]
 801159c:	f3bf 8f4f 	dsb	sy
 80115a0:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 80115a4:	4628      	mov	r0, r5
 80115a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80115aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}

		return xReturn;
	}
 80115ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b2:	bf00      	nop
 80115b4:	20000b90 	.word	0x20000b90
 80115b8:	20000b68 	.word	0x20000b68
 80115bc:	20000aec 	.word	0x20000aec
 80115c0:	20000ad4 	.word	0x20000ad4
 80115c4:	20000b94 	.word	0x20000b94
 80115c8:	20000b78 	.word	0x20000b78
 80115cc:	20000b50 	.word	0x20000b50
 80115d0:	20000bac 	.word	0x20000bac
 80115d4:	20000ac8 	.word	0x20000ac8
 80115d8:	20000b74 	.word	0x20000b74
 80115dc:	20000acc 	.word	0x20000acc
 80115e0:	20000b8c 	.word	0x20000b8c
 80115e4:	20000bc0 	.word	0x20000bc0
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80115ec:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80115ee:	4b12      	ldr	r3, [pc, #72]	; (8011638 <vTaskStartScheduler+0x4c>)
 80115f0:	4812      	ldr	r0, [pc, #72]	; (801163c <vTaskStartScheduler+0x50>)
 80115f2:	9301      	str	r3, [sp, #4]
 80115f4:	2400      	movs	r4, #0
 80115f6:	9400      	str	r4, [sp, #0]
 80115f8:	4911      	ldr	r1, [pc, #68]	; (8011640 <vTaskStartScheduler+0x54>)
 80115fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115fe:	4623      	mov	r3, r4
 8011600:	f7ff ff1e 	bl	8011440 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011604:	2801      	cmp	r0, #1
 8011606:	d114      	bne.n	8011632 <vTaskStartScheduler+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011608:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011618:	490a      	ldr	r1, [pc, #40]	; (8011644 <vTaskStartScheduler+0x58>)
		xSchedulerRunning = pdTRUE;
 801161a:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <vTaskStartScheduler+0x5c>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801161c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011620:	600a      	str	r2, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8011622:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011624:	4809      	ldr	r0, [pc, #36]	; (801164c <vTaskStartScheduler+0x60>)
 8011626:	6004      	str	r4, [r0, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011628:	b002      	add	sp, #8
 801162a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801162e:	f000 bdd1 	b.w	80121d4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011632:	b002      	add	sp, #8
 8011634:	bd10      	pop	{r4, pc}
 8011636:	bf00      	nop
 8011638:	20000ba8 	.word	0x20000ba8
 801163c:	08011841 	.word	0x08011841
 8011640:	0801f526 	.word	0x0801f526
 8011644:	20000b6c 	.word	0x20000b6c
 8011648:	20000acc 	.word	0x20000acc
 801164c:	20000b70 	.word	0x20000b70

08011650 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011650:	4b02      	ldr	r3, [pc, #8]	; (801165c <vTaskSuspendAll+0xc>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	1c50      	adds	r0, r2, #1
 8011656:	6018      	str	r0, [r3, #0]
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop
 801165c:	20000ad0 	.word	0x20000ad0

08011660 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011660:	4b01      	ldr	r3, [pc, #4]	; (8011668 <xTaskGetTickCount+0x8>)
 8011662:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	20000b70 	.word	0x20000b70

0801166c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801166e:	4b35      	ldr	r3, [pc, #212]	; (8011744 <xTaskIncrementTick+0xd8>)
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	2800      	cmp	r0, #0
 8011674:	d136      	bne.n	80116e4 <xTaskIncrementTick+0x78>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8011676:	4b34      	ldr	r3, [pc, #208]	; (8011748 <xTaskIncrementTick+0xdc>)
 8011678:	681e      	ldr	r6, [r3, #0]
 801167a:	3601      	adds	r6, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801167c:	601e      	str	r6, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 801167e:	b95e      	cbnz	r6, 8011698 <xTaskIncrementTick+0x2c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011680:	4a32      	ldr	r2, [pc, #200]	; (801174c <xTaskIncrementTick+0xe0>)
 8011682:	4d33      	ldr	r5, [pc, #204]	; (8011750 <xTaskIncrementTick+0xe4>)
 8011684:	6811      	ldr	r1, [r2, #0]
 8011686:	6828      	ldr	r0, [r5, #0]
 8011688:	4b32      	ldr	r3, [pc, #200]	; (8011754 <xTaskIncrementTick+0xe8>)
 801168a:	6010      	str	r0, [r2, #0]
 801168c:	6029      	str	r1, [r5, #0]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	1c51      	adds	r1, r2, #1
 8011692:	6019      	str	r1, [r3, #0]
 8011694:	f7ff fec2 	bl	801141c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011698:	4d2f      	ldr	r5, [pc, #188]	; (8011758 <xTaskIncrementTick+0xec>)
 801169a:	6828      	ldr	r0, [r5, #0]
 801169c:	2500      	movs	r5, #0
 801169e:	4286      	cmp	r6, r0
 80116a0:	d310      	bcc.n	80116c4 <xTaskIncrementTick+0x58>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116a2:	4b2a      	ldr	r3, [pc, #168]	; (801174c <xTaskIncrementTick+0xe0>)
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	6811      	ldr	r1, [r2, #0]
 80116a8:	b921      	cbnz	r1, 80116b4 <xTaskIncrementTick+0x48>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116aa:	4b2b      	ldr	r3, [pc, #172]	; (8011758 <xTaskIncrementTick+0xec>)
 80116ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116b0:	6018      	str	r0, [r3, #0]
					break;
 80116b2:	e007      	b.n	80116c4 <xTaskIncrementTick+0x58>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80116b4:	681c      	ldr	r4, [r3, #0]
 80116b6:	68e0      	ldr	r0, [r4, #12]
 80116b8:	68c4      	ldr	r4, [r0, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80116ba:	6863      	ldr	r3, [r4, #4]

					if( xConstTickCount < xItemValue )
 80116bc:	429e      	cmp	r6, r3
 80116be:	d21f      	bcs.n	8011700 <xTaskIncrementTick+0x94>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80116c0:	4925      	ldr	r1, [pc, #148]	; (8011758 <xTaskIncrementTick+0xec>)
 80116c2:	600b      	str	r3, [r1, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116c4:	4a25      	ldr	r2, [pc, #148]	; (801175c <xTaskIncrementTick+0xf0>)
 80116c6:	6811      	ldr	r1, [r2, #0]
 80116c8:	4a25      	ldr	r2, [pc, #148]	; (8011760 <xTaskIncrementTick+0xf4>)
 80116ca:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80116cc:	2314      	movs	r3, #20
 80116ce:	4358      	muls	r0, r3
 80116d0:	5811      	ldr	r1, [r2, r0]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80116d2:	4824      	ldr	r0, [pc, #144]	; (8011764 <xTaskIncrementTick+0xf8>)
 80116d4:	6803      	ldr	r3, [r0, #0]
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 80116d6:	2901      	cmp	r1, #1
 80116d8:	bf88      	it	hi
 80116da:	2501      	movhi	r5, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80116dc:	b94b      	cbnz	r3, 80116f2 <xTaskIncrementTick+0x86>
			{
				vApplicationTickHook();
 80116de:	f7ff fcbf 	bl	8011060 <vApplicationTickHook>
 80116e2:	e006      	b.n	80116f2 <xTaskIncrementTick+0x86>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80116e4:	491f      	ldr	r1, [pc, #124]	; (8011764 <xTaskIncrementTick+0xf8>)
 80116e6:	680a      	ldr	r2, [r1, #0]
 80116e8:	1c55      	adds	r5, r2, #1
 80116ea:	600d      	str	r5, [r1, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80116ec:	f7ff fcb8 	bl	8011060 <vApplicationTickHook>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80116f0:	2500      	movs	r5, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80116f2:	4a1d      	ldr	r2, [pc, #116]	; (8011768 <xTaskIncrementTick+0xfc>)
 80116f4:	6811      	ldr	r1, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80116f6:	2900      	cmp	r1, #0
 80116f8:	bf0c      	ite	eq
 80116fa:	4628      	moveq	r0, r5
 80116fc:	2001      	movne	r0, #1
 80116fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011700:	1d27      	adds	r7, r4, #4
 8011702:	4638      	mov	r0, r7
 8011704:	f000 fa86 	bl	8011c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011708:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801170a:	b11a      	cbz	r2, 8011714 <xTaskIncrementTick+0xa8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801170c:	f104 0018 	add.w	r0, r4, #24
 8011710:	f000 fa80 	bl	8011c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011714:	4a15      	ldr	r2, [pc, #84]	; (801176c <xTaskIncrementTick+0x100>)
 8011716:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011718:	6810      	ldr	r0, [r2, #0]
 801171a:	2101      	movs	r1, #1
 801171c:	fa01 f103 	lsl.w	r1, r1, r3
 8011720:	4301      	orrs	r1, r0
 8011722:	6011      	str	r1, [r2, #0]
 8011724:	4a0e      	ldr	r2, [pc, #56]	; (8011760 <xTaskIncrementTick+0xf4>)
 8011726:	2014      	movs	r0, #20
 8011728:	fb00 2003 	mla	r0, r0, r3, r2
 801172c:	4639      	mov	r1, r7
 801172e:	f000 fa4d 	bl	8011bcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011732:	4b0a      	ldr	r3, [pc, #40]	; (801175c <xTaskIncrementTick+0xf0>)
 8011734:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011736:	6819      	ldr	r1, [r3, #0]
 8011738:	6aca      	ldr	r2, [r1, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 801173a:	4290      	cmp	r0, r2
 801173c:	bf28      	it	cs
 801173e:	2501      	movcs	r5, #1
 8011740:	e7af      	b.n	80116a2 <xTaskIncrementTick+0x36>
 8011742:	bf00      	nop
 8011744:	20000ad0 	.word	0x20000ad0
 8011748:	20000b70 	.word	0x20000b70
 801174c:	20000ac8 	.word	0x20000ac8
 8011750:	20000b74 	.word	0x20000b74
 8011754:	20000ac4 	.word	0x20000ac4
 8011758:	20000b6c 	.word	0x20000b6c
 801175c:	20000b68 	.word	0x20000b68
 8011760:	20000aec 	.word	0x20000aec
 8011764:	20000ae8 	.word	0x20000ae8
 8011768:	20000bc4 	.word	0x20000bc4
 801176c:	20000bc0 	.word	0x20000bc0

08011770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011770:	b570      	push	{r4, r5, r6, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011772:	f000 fcc5 	bl	8012100 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011776:	4b29      	ldr	r3, [pc, #164]	; (801181c <xTaskResumeAll+0xac>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	1e50      	subs	r0, r2, #1
 801177c:	6018      	str	r0, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801177e:	681c      	ldr	r4, [r3, #0]
 8011780:	b10c      	cbz	r4, 8011786 <xTaskResumeAll+0x16>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8011782:	2400      	movs	r4, #0
 8011784:	e045      	b.n	8011812 <xTaskResumeAll+0xa2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011786:	4926      	ldr	r1, [pc, #152]	; (8011820 <xTaskResumeAll+0xb0>)
 8011788:	680b      	ldr	r3, [r1, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d0f9      	beq.n	8011782 <xTaskResumeAll+0x12>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801178e:	4d25      	ldr	r5, [pc, #148]	; (8011824 <xTaskResumeAll+0xb4>)
 8011790:	682a      	ldr	r2, [r5, #0]
 8011792:	b30a      	cbz	r2, 80117d8 <xTaskResumeAll+0x68>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011794:	68ee      	ldr	r6, [r5, #12]
 8011796:	68f4      	ldr	r4, [r6, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011798:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801179a:	f104 0018 	add.w	r0, r4, #24
 801179e:	f000 fa39 	bl	8011c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117a2:	4630      	mov	r0, r6
 80117a4:	f000 fa36 	bl	8011c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80117a8:	4a1f      	ldr	r2, [pc, #124]	; (8011828 <xTaskResumeAll+0xb8>)
 80117aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80117ac:	6811      	ldr	r1, [r2, #0]
 80117ae:	2501      	movs	r5, #1
 80117b0:	fa05 f003 	lsl.w	r0, r5, r3
 80117b4:	4301      	orrs	r1, r0
 80117b6:	6011      	str	r1, [r2, #0]
 80117b8:	4a1c      	ldr	r2, [pc, #112]	; (801182c <xTaskResumeAll+0xbc>)
 80117ba:	2014      	movs	r0, #20
 80117bc:	fb00 2003 	mla	r0, r0, r3, r2
 80117c0:	4631      	mov	r1, r6
 80117c2:	f000 fa03 	bl	8011bcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117c6:	4b1a      	ldr	r3, [pc, #104]	; (8011830 <xTaskResumeAll+0xc0>)
 80117c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80117ca:	6819      	ldr	r1, [r3, #0]
 80117cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80117ce:	4290      	cmp	r0, r2
					{
						xYieldPending = pdTRUE;
 80117d0:	bf24      	itt	cs
 80117d2:	4818      	ldrcs	r0, [pc, #96]	; (8011834 <xTaskResumeAll+0xc4>)
 80117d4:	6005      	strcs	r5, [r0, #0]
 80117d6:	e7da      	b.n	801178e <xTaskResumeAll+0x1e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80117d8:	b10c      	cbz	r4, 80117de <xTaskResumeAll+0x6e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80117da:	f7ff fe1f 	bl	801141c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80117de:	4816      	ldr	r0, [pc, #88]	; (8011838 <xTaskResumeAll+0xc8>)
 80117e0:	6804      	ldr	r4, [r0, #0]
 80117e2:	4605      	mov	r5, r0

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80117e4:	b144      	cbz	r4, 80117f8 <xTaskResumeAll+0x88>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80117e6:	f7ff ff41 	bl	801166c <xTaskIncrementTick>
 80117ea:	b110      	cbz	r0, 80117f2 <xTaskResumeAll+0x82>
							{
								xYieldPending = pdTRUE;
 80117ec:	4b11      	ldr	r3, [pc, #68]	; (8011834 <xTaskResumeAll+0xc4>)
 80117ee:	2101      	movs	r1, #1
 80117f0:	6019      	str	r1, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80117f2:	3c01      	subs	r4, #1
 80117f4:	d1f7      	bne.n	80117e6 <xTaskResumeAll+0x76>

						uxPendedTicks = 0;
 80117f6:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80117f8:	4a0e      	ldr	r2, [pc, #56]	; (8011834 <xTaskResumeAll+0xc4>)
 80117fa:	6810      	ldr	r0, [r2, #0]
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d0c0      	beq.n	8011782 <xTaskResumeAll+0x12>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011800:	4b0e      	ldr	r3, [pc, #56]	; (801183c <xTaskResumeAll+0xcc>)
 8011802:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8011806:	6019      	str	r1, [r3, #0]
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011810:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011812:	f000 fc85 	bl	8012120 <vPortExitCritical>

	return xAlreadyYielded;
}
 8011816:	4620      	mov	r0, r4
 8011818:	bd70      	pop	{r4, r5, r6, pc}
 801181a:	bf00      	nop
 801181c:	20000ad0 	.word	0x20000ad0
 8011820:	20000b90 	.word	0x20000b90
 8011824:	20000b78 	.word	0x20000b78
 8011828:	20000bc0 	.word	0x20000bc0
 801182c:	20000aec 	.word	0x20000aec
 8011830:	20000b68 	.word	0x20000b68
 8011834:	20000bc4 	.word	0x20000bc4
 8011838:	20000ae8 	.word	0x20000ae8
 801183c:	e000ed04 	.word	0xe000ed04

08011840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011840:	b570      	push	{r4, r5, r6, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011842:	4c18      	ldr	r4, [pc, #96]	; (80118a4 <prvIdleTask+0x64>)
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	b1f3      	cbz	r3, 8011886 <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8011848:	4d17      	ldr	r5, [pc, #92]	; (80118a8 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
 801184a:	f7ff ff01 	bl	8011650 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 801184e:	682e      	ldr	r6, [r5, #0]
			}
			( void ) xTaskResumeAll();
 8011850:	f7ff ff8e 	bl	8011770 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8011854:	2e00      	cmp	r6, #0
 8011856:	d0f4      	beq.n	8011842 <prvIdleTask+0x2>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8011858:	f000 fc52 	bl	8012100 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801185c:	68eb      	ldr	r3, [r5, #12]
 801185e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011860:	1d28      	adds	r0, r5, #4
 8011862:	f000 f9d7 	bl	8011c14 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8011866:	4811      	ldr	r0, [pc, #68]	; (80118ac <prvIdleTask+0x6c>)
 8011868:	6801      	ldr	r1, [r0, #0]
 801186a:	1e4a      	subs	r2, r1, #1
 801186c:	6002      	str	r2, [r0, #0]
					--uxDeletedTasksWaitingCleanUp;
 801186e:	6826      	ldr	r6, [r4, #0]
 8011870:	1e73      	subs	r3, r6, #1
 8011872:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8011874:	f000 fc54 	bl	8012120 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011878:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801187a:	f000 fd67 	bl	801234c <vPortFree>
			vPortFree( pxTCB );
 801187e:	4628      	mov	r0, r5
 8011880:	f000 fd64 	bl	801234c <vPortFree>
 8011884:	e7dd      	b.n	8011842 <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011886:	480a      	ldr	r0, [pc, #40]	; (80118b0 <prvIdleTask+0x70>)
 8011888:	6801      	ldr	r1, [r0, #0]
 801188a:	2901      	cmp	r1, #1
 801188c:	d907      	bls.n	801189e <prvIdleTask+0x5e>
			{
				taskYIELD();
 801188e:	4d09      	ldr	r5, [pc, #36]	; (80118b4 <prvIdleTask+0x74>)
 8011890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011894:	602a      	str	r2, [r5, #0]
 8011896:	f3bf 8f4f 	dsb	sy
 801189a:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801189e:	f7ff fbeb 	bl	8011078 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80118a2:	e7ce      	b.n	8011842 <prvIdleTask+0x2>
 80118a4:	20000b64 	.word	0x20000b64
 80118a8:	20000b50 	.word	0x20000b50
 80118ac:	20000b90 	.word	0x20000b90
 80118b0:	20000aec 	.word	0x20000aec
 80118b4:	e000ed04 	.word	0xe000ed04

080118b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4604      	mov	r4, r0
 80118bc:	460d      	mov	r5, r1

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 80118be:	f7ff fec7 	bl	8011650 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80118c2:	4b13      	ldr	r3, [pc, #76]	; (8011910 <vTaskDelayUntil+0x58>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80118c4:	6822      	ldr	r2, [r4, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80118c6:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 80118c8:	4290      	cmp	r0, r2
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80118ca:	eb05 0102 	add.w	r1, r5, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 80118ce:	d202      	bcs.n	80118d6 <vTaskDelayUntil+0x1e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80118d0:	4291      	cmp	r1, r2
 80118d2:	d207      	bcs.n	80118e4 <vTaskDelayUntil+0x2c>
 80118d4:	e001      	b.n	80118da <vTaskDelayUntil+0x22>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80118d6:	4291      	cmp	r1, r2
 80118d8:	d306      	bcc.n	80118e8 <vTaskDelayUntil+0x30>
 80118da:	4281      	cmp	r1, r0
 80118dc:	bf94      	ite	ls
 80118de:	2200      	movls	r2, #0
 80118e0:	2201      	movhi	r2, #1
 80118e2:	e002      	b.n	80118ea <vTaskDelayUntil+0x32>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80118e4:	2200      	movs	r2, #0
 80118e6:	e000      	b.n	80118ea <vTaskDelayUntil+0x32>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 80118e8:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80118ea:	6021      	str	r1, [r4, #0]

			if( xShouldDelay != pdFALSE )
 80118ec:	b11a      	cbz	r2, 80118f6 <vTaskDelayUntil+0x3e>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80118ee:	1a08      	subs	r0, r1, r0
 80118f0:	2100      	movs	r1, #0
 80118f2:	f7ff fd47 	bl	8011384 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80118f6:	f7ff ff3b 	bl	8011770 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118fa:	b938      	cbnz	r0, 801190c <vTaskDelayUntil+0x54>
		{
			portYIELD_WITHIN_API();
 80118fc:	4b05      	ldr	r3, [pc, #20]	; (8011914 <vTaskDelayUntil+0x5c>)
 80118fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011902:	6018      	str	r0, [r3, #0]
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	bd38      	pop	{r3, r4, r5, pc}
 801190e:	bf00      	nop
 8011910:	20000b70 	.word	0x20000b70
 8011914:	e000ed04 	.word	0xe000ed04

08011918 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011918:	4b0f      	ldr	r3, [pc, #60]	; (8011958 <vTaskSwitchContext+0x40>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	4b0f      	ldr	r3, [pc, #60]	; (801195c <vTaskSwitchContext+0x44>)
 801191e:	b10a      	cbz	r2, 8011924 <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011920:	2201      	movs	r2, #1
 8011922:	e017      	b.n	8011954 <vTaskSwitchContext+0x3c>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011924:	480e      	ldr	r0, [pc, #56]	; (8011960 <vTaskSwitchContext+0x48>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8011926:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011928:	6801      	ldr	r1, [r0, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 801192a:	fab1 f381 	clz	r3, r1
 801192e:	b2da      	uxtb	r2, r3
 8011930:	4b0c      	ldr	r3, [pc, #48]	; (8011964 <vTaskSwitchContext+0x4c>)
 8011932:	2114      	movs	r1, #20
 8011934:	f1c2 001f 	rsb	r0, r2, #31
 8011938:	fb01 3000 	mla	r0, r1, r0, r3
 801193c:	f100 0108 	add.w	r1, r0, #8
 8011940:	6842      	ldr	r2, [r0, #4]
 8011942:	6853      	ldr	r3, [r2, #4]
 8011944:	428b      	cmp	r3, r1
 8011946:	6043      	str	r3, [r0, #4]
 8011948:	bf04      	itt	eq
 801194a:	685b      	ldreq	r3, [r3, #4]
 801194c:	6043      	streq	r3, [r0, #4]
 801194e:	6840      	ldr	r0, [r0, #4]
 8011950:	4b05      	ldr	r3, [pc, #20]	; (8011968 <vTaskSwitchContext+0x50>)
 8011952:	68c2      	ldr	r2, [r0, #12]
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	4770      	bx	lr
 8011958:	20000ad0 	.word	0x20000ad0
 801195c:	20000bc4 	.word	0x20000bc4
 8011960:	20000bc0 	.word	0x20000bc0
 8011964:	20000aec 	.word	0x20000aec
 8011968:	20000b68 	.word	0x20000b68

0801196c <vTaskPlaceOnEventList>:

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801196c:	4b06      	ldr	r3, [pc, #24]	; (8011988 <vTaskPlaceOnEventList+0x1c>)
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801196e:	b510      	push	{r4, lr}
 8011970:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011972:	6819      	ldr	r1, [r3, #0]
 8011974:	3118      	adds	r1, #24
 8011976:	f000 f935 	bl	8011be4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801197a:	4620      	mov	r0, r4
 801197c:	2101      	movs	r1, #1
}
 801197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011982:	f7ff bcff 	b.w	8011384 <prvAddCurrentTaskToDelayedList>
 8011986:	bf00      	nop
 8011988:	20000b68 	.word	0x20000b68

0801198c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801198c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801198e:	68c3      	ldr	r3, [r0, #12]
 8011990:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011992:	f104 0518 	add.w	r5, r4, #24
 8011996:	4628      	mov	r0, r5
 8011998:	f000 f93c 	bl	8011c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801199c:	4811      	ldr	r0, [pc, #68]	; (80119e4 <xTaskRemoveFromEventList+0x58>)
 801199e:	6801      	ldr	r1, [r0, #0]
 80119a0:	b981      	cbnz	r1, 80119c4 <xTaskRemoveFromEventList+0x38>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80119a2:	1d25      	adds	r5, r4, #4
 80119a4:	4628      	mov	r0, r5
 80119a6:	f000 f935 	bl	8011c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119aa:	4a0f      	ldr	r2, [pc, #60]	; (80119e8 <xTaskRemoveFromEventList+0x5c>)
 80119ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80119ae:	6810      	ldr	r0, [r2, #0]
 80119b0:	2101      	movs	r1, #1
 80119b2:	fa01 f103 	lsl.w	r1, r1, r3
 80119b6:	4301      	orrs	r1, r0
 80119b8:	6011      	str	r1, [r2, #0]
 80119ba:	4a0c      	ldr	r2, [pc, #48]	; (80119ec <xTaskRemoveFromEventList+0x60>)
 80119bc:	2014      	movs	r0, #20
 80119be:	fb00 2003 	mla	r0, r0, r3, r2
 80119c2:	e000      	b.n	80119c6 <xTaskRemoveFromEventList+0x3a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119c4:	480a      	ldr	r0, [pc, #40]	; (80119f0 <xTaskRemoveFromEventList+0x64>)
 80119c6:	4629      	mov	r1, r5
 80119c8:	f000 f900 	bl	8011bcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119cc:	4b09      	ldr	r3, [pc, #36]	; (80119f4 <xTaskRemoveFromEventList+0x68>)
 80119ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80119d0:	6819      	ldr	r1, [r3, #0]
 80119d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80119d4:	4290      	cmp	r0, r2
 80119d6:	d903      	bls.n	80119e0 <xTaskRemoveFromEventList+0x54>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119d8:	4b07      	ldr	r3, [pc, #28]	; (80119f8 <xTaskRemoveFromEventList+0x6c>)
 80119da:	2001      	movs	r0, #1
 80119dc:	6018      	str	r0, [r3, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 80119e0:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	20000ad0 	.word	0x20000ad0
 80119e8:	20000bc0 	.word	0x20000bc0
 80119ec:	20000aec 	.word	0x20000aec
 80119f0:	20000b78 	.word	0x20000b78
 80119f4:	20000b68 	.word	0x20000b68
 80119f8:	20000bc4 	.word	0x20000bc4

080119fc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80119fc:	4b03      	ldr	r3, [pc, #12]	; (8011a0c <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80119fe:	4a04      	ldr	r2, [pc, #16]	; (8011a10 <vTaskSetTimeOutState+0x14>)
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a00:	6819      	ldr	r1, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a02:	6813      	ldr	r3, [r2, #0]
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a04:	6001      	str	r1, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a06:	6043      	str	r3, [r0, #4]
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	20000ac4 	.word	0x20000ac4
 8011a10:	20000b70 	.word	0x20000b70

08011a14 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	4605      	mov	r5, r0
 8011a18:	460e      	mov	r6, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8011a1a:	f000 fb71 	bl	8012100 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a1e:	4b13      	ldr	r3, [pc, #76]	; (8011a6c <xTaskCheckForTimeOut+0x58>)

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8011a20:	4813      	ldr	r0, [pc, #76]	; (8011a70 <xTaskCheckForTimeOut+0x5c>)
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a22:	681a      	ldr	r2, [r3, #0]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8011a24:	6801      	ldr	r1, [r0, #0]
 8011a26:	f891 404c 	ldrb.w	r4, [r1, #76]	; 0x4c
 8011a2a:	b124      	cbz	r4, 8011a36 <xTaskCheckForTimeOut+0x22>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011a2c:	6801      	ldr	r1, [r0, #0]
 8011a2e:	2400      	movs	r4, #0
 8011a30:	f881 404c 	strb.w	r4, [r1, #76]	; 0x4c
 8011a34:	e015      	b.n	8011a62 <xTaskCheckForTimeOut+0x4e>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011a36:	6833      	ldr	r3, [r6, #0]
 8011a38:	1c59      	adds	r1, r3, #1
 8011a3a:	d013      	beq.n	8011a64 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011a3c:	4c0d      	ldr	r4, [pc, #52]	; (8011a74 <xTaskCheckForTimeOut+0x60>)
 8011a3e:	6829      	ldr	r1, [r5, #0]
 8011a40:	6820      	ldr	r0, [r4, #0]
 8011a42:	686c      	ldr	r4, [r5, #4]
 8011a44:	4288      	cmp	r0, r1
 8011a46:	d001      	beq.n	8011a4c <xTaskCheckForTimeOut+0x38>
 8011a48:	42a2      	cmp	r2, r4
 8011a4a:	d20a      	bcs.n	8011a62 <xTaskCheckForTimeOut+0x4e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011a4c:	1b10      	subs	r0, r2, r4
 8011a4e:	4298      	cmp	r0, r3
 8011a50:	d207      	bcs.n	8011a62 <xTaskCheckForTimeOut+0x4e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8011a52:	1aa2      	subs	r2, r4, r2
 8011a54:	18d3      	adds	r3, r2, r3
 8011a56:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff ffcf 	bl	80119fc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8011a5e:	2400      	movs	r4, #0
 8011a60:	e000      	b.n	8011a64 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011a62:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8011a64:	f000 fb5c 	bl	8012120 <vPortExitCritical>

	return xReturn;
}
 8011a68:	4620      	mov	r0, r4
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	20000b70 	.word	0x20000b70
 8011a70:	20000b68 	.word	0x20000b68
 8011a74:	20000ac4 	.word	0x20000ac4

08011a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8011a78:	4b01      	ldr	r3, [pc, #4]	; (8011a80 <vTaskMissedYield+0x8>)
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	601a      	str	r2, [r3, #0]
 8011a7e:	4770      	bx	lr
 8011a80:	20000bc4 	.word	0x20000bc4

08011a84 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011a84:	4b01      	ldr	r3, [pc, #4]	; (8011a8c <xTaskGetCurrentTaskHandle+0x8>)
 8011a86:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop
 8011a8c:	20000b68 	.word	0x20000b68

08011a90 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8011a92:	4604      	mov	r4, r0
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d03d      	beq.n	8011b14 <vTaskPriorityInherit+0x84>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011a98:	4a1f      	ldr	r2, [pc, #124]	; (8011b18 <vTaskPriorityInherit+0x88>)
 8011a9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011a9c:	6811      	ldr	r1, [r2, #0]
 8011a9e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8011aa0:	4283      	cmp	r3, r0
 8011aa2:	d237      	bcs.n	8011b14 <vTaskPriorityInherit+0x84>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011aa4:	69a6      	ldr	r6, [r4, #24]
 8011aa6:	2e00      	cmp	r6, #0
 8011aa8:	db04      	blt.n	8011ab4 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aaa:	6817      	ldr	r7, [r2, #0]
 8011aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aae:	f1c2 0105 	rsb	r1, r2, #5
 8011ab2:	61a1      	str	r1, [r4, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011ab4:	4e19      	ldr	r6, [pc, #100]	; (8011b1c <vTaskPriorityInherit+0x8c>)
 8011ab6:	6960      	ldr	r0, [r4, #20]
 8011ab8:	2714      	movs	r7, #20
 8011aba:	fb07 6303 	mla	r3, r7, r3, r6
 8011abe:	4298      	cmp	r0, r3
 8011ac0:	d124      	bne.n	8011b0c <vTaskPriorityInherit+0x7c>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ac2:	1d25      	adds	r5, r4, #4
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f000 f8a5 	bl	8011c14 <uxListRemove>
 8011aca:	b958      	cbnz	r0, 8011ae4 <vTaskPriorityInherit+0x54>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011acc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011ace:	4357      	muls	r7, r2
 8011ad0:	59f0      	ldr	r0, [r6, r7]
 8011ad2:	b938      	cbnz	r0, 8011ae4 <vTaskPriorityInherit+0x54>
 8011ad4:	4b12      	ldr	r3, [pc, #72]	; (8011b20 <vTaskPriorityInherit+0x90>)
 8011ad6:	2001      	movs	r0, #1
 8011ad8:	6819      	ldr	r1, [r3, #0]
 8011ada:	fa00 f202 	lsl.w	r2, r0, r2
 8011ade:	ea21 0102 	bic.w	r1, r1, r2
 8011ae2:	6019      	str	r1, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ae4:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <vTaskPriorityInherit+0x88>)
					prvAddTaskToReadyList( pxTCB );
 8011ae6:	4a0e      	ldr	r2, [pc, #56]	; (8011b20 <vTaskPriorityInherit+0x90>)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ae8:	6818      	ldr	r0, [r3, #0]
 8011aea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8011aec:	6810      	ldr	r0, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011aee:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8011af0:	2101      	movs	r1, #1
 8011af2:	fa01 f103 	lsl.w	r1, r1, r3
 8011af6:	4301      	orrs	r1, r0
 8011af8:	6011      	str	r1, [r2, #0]
 8011afa:	4a08      	ldr	r2, [pc, #32]	; (8011b1c <vTaskPriorityInherit+0x8c>)
 8011afc:	2014      	movs	r0, #20
 8011afe:	fb00 2003 	mla	r0, r0, r3, r2
 8011b02:	4629      	mov	r1, r5
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8011b08:	f000 b860 	b.w	8011bcc <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b0c:	4a02      	ldr	r2, [pc, #8]	; (8011b18 <vTaskPriorityInherit+0x88>)
 8011b0e:	6811      	ldr	r1, [r2, #0]
 8011b10:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8011b12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b16:	bf00      	nop
 8011b18:	20000b68 	.word	0x20000b68
 8011b1c:	20000aec 	.word	0x20000aec
 8011b20:	20000bc0 	.word	0x20000bc0

08011b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011b24:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8011b26:	4604      	mov	r4, r0
 8011b28:	b908      	cbnz	r0, 8011b2e <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	bd38      	pop	{r3, r4, r5, pc}
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8011b2e:	6c83      	ldr	r3, [r0, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011b32:	6c62      	ldr	r2, [r4, #68]	; 0x44
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8011b34:	1e58      	subs	r0, r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b36:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8011b38:	64a0      	str	r0, [r4, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b3a:	d0f6      	beq.n	8011b2a <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d1f4      	bne.n	8011b2a <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b40:	1d25      	adds	r5, r4, #4
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f866 	bl	8011c14 <uxListRemove>
 8011b48:	b968      	cbnz	r0, 8011b66 <xTaskPriorityDisinherit+0x42>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b4c:	4810      	ldr	r0, [pc, #64]	; (8011b90 <xTaskPriorityDisinherit+0x6c>)
 8011b4e:	2314      	movs	r3, #20
 8011b50:	4353      	muls	r3, r2
 8011b52:	58c1      	ldr	r1, [r0, r3]
 8011b54:	b939      	cbnz	r1, 8011b66 <xTaskPriorityDisinherit+0x42>
 8011b56:	4b0f      	ldr	r3, [pc, #60]	; (8011b94 <xTaskPriorityDisinherit+0x70>)
 8011b58:	2001      	movs	r0, #1
 8011b5a:	6819      	ldr	r1, [r3, #0]
 8011b5c:	fa00 f202 	lsl.w	r2, r0, r2
 8011b60:	ea21 0102 	bic.w	r1, r1, r2
 8011b64:	6019      	str	r1, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b66:	6c63      	ldr	r3, [r4, #68]	; 0x44

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8011b68:	4a0a      	ldr	r2, [pc, #40]	; (8011b94 <xTaskPriorityDisinherit+0x70>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b6a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b6c:	f1c3 0005 	rsb	r0, r3, #5
					prvAddTaskToReadyList( pxTCB );
 8011b70:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b72:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b74:	2401      	movs	r4, #1
 8011b76:	fa04 f003 	lsl.w	r0, r4, r3
 8011b7a:	4301      	orrs	r1, r0
 8011b7c:	6011      	str	r1, [r2, #0]
 8011b7e:	4a04      	ldr	r2, [pc, #16]	; (8011b90 <xTaskPriorityDisinherit+0x6c>)
 8011b80:	2014      	movs	r0, #20
 8011b82:	fb00 2003 	mla	r0, r0, r3, r2
 8011b86:	4629      	mov	r1, r5
 8011b88:	f000 f820 	bl	8011bcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b8c:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8011b8e:	bd38      	pop	{r3, r4, r5, pc}
 8011b90:	20000aec 	.word	0x20000aec
 8011b94:	20000bc0 	.word	0x20000bc0

08011b98 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b98:	4b04      	ldr	r3, [pc, #16]	; (8011bac <pvTaskIncrementMutexHeldCount+0x14>)
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	b11a      	cbz	r2, 8011ba6 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b9e:	6818      	ldr	r0, [r3, #0]
 8011ba0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011ba2:	1c4a      	adds	r2, r1, #1
 8011ba4:	6482      	str	r2, [r0, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011ba6:	6818      	ldr	r0, [r3, #0]
	}
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	20000b68 	.word	0x20000b68

08011bb0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bb0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011bb8:	2100      	movs	r1, #0
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bba:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011bbc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bbe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bc0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011bc2:	6001      	str	r1, [r0, #0]
 8011bc4:	4770      	bx	lr

08011bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	6103      	str	r3, [r0, #16]
 8011bca:	4770      	bx	lr

08011bcc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8011bcc:	6843      	ldr	r3, [r0, #4]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011bce:	6108      	str	r0, [r1, #16]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011bd0:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011bd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011bd4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011bd6:	689a      	ldr	r2, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;
 8011bd8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011bda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8011bdc:	6801      	ldr	r1, [r0, #0]
 8011bde:	1c4b      	adds	r3, r1, #1
 8011be0:	6003      	str	r3, [r0, #0]
 8011be2:	4770      	bx	lr

08011be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011be4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011be6:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011be8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011bea:	d101      	bne.n	8011bf0 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011bec:	6903      	ldr	r3, [r0, #16]
 8011bee:	e007      	b.n	8011c00 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bf0:	f100 0308 	add.w	r3, r0, #8
 8011bf4:	685c      	ldr	r4, [r3, #4]
 8011bf6:	6825      	ldr	r5, [r4, #0]
 8011bf8:	4295      	cmp	r5, r2
 8011bfa:	d801      	bhi.n	8011c00 <vListInsert+0x1c>
 8011bfc:	4623      	mov	r3, r4
 8011bfe:	e7f9      	b.n	8011bf4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011c00:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011c02:	6108      	str	r0, [r1, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011c04:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011c06:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;
 8011c08:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 8011c0a:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8011c0c:	6801      	ldr	r1, [r0, #0]
 8011c0e:	1c4b      	adds	r3, r1, #1
 8011c10:	6003      	str	r3, [r0, #0]
 8011c12:	bd30      	pop	{r4, r5, pc}

08011c14 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011c14:	6841      	ldr	r1, [r0, #4]
 8011c16:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011c18:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011c1a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011c1c:	6882      	ldr	r2, [r0, #8]
 8011c1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011c20:	6859      	ldr	r1, [r3, #4]
 8011c22:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011c24:	bf08      	it	eq
 8011c26:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011c28:	2200      	movs	r2, #0
 8011c2a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8011c2c:	6818      	ldr	r0, [r3, #0]
 8011c2e:	3801      	subs	r0, #1
 8011c30:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8011c32:	4770      	bx	lr

08011c34 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011c34:	6c02      	ldr	r2, [r0, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011c36:	b530      	push	{r4, r5, lr}
 8011c38:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011c3a:	b16a      	cbz	r2, 8011c58 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011c3c:	68c4      	ldr	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c3e:	6845      	ldr	r5, [r0, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011c40:	18a4      	adds	r4, r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c42:	42ac      	cmp	r4, r5

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011c44:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011c46:	bf24      	itt	cs
 8011c48:	6804      	ldrcs	r4, [r0, #0]
 8011c4a:	60c4      	strcs	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011c4c:	4608      	mov	r0, r1
 8011c4e:	68d9      	ldr	r1, [r3, #12]
	}
}
 8011c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011c54:	f00c bbe2 	b.w	801e41c <memcpy>
 8011c58:	bd30      	pop	{r4, r5, pc}

08011c5a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c5a:	b538      	push	{r3, r4, r5, lr}
 8011c5c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011c5e:	f000 fa4f 	bl	8012100 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011c62:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c66:	b26b      	sxtb	r3, r5
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	dd0b      	ble.n	8011c84 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c6e:	b148      	cbz	r0, 8011c84 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011c74:	f7ff fe8a 	bl	801198c <xTaskRemoveFromEventList>
 8011c78:	b108      	cbz	r0, 8011c7e <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c7a:	f7ff fefd 	bl	8011a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c7e:	1e69      	subs	r1, r5, #1
 8011c80:	b2cd      	uxtb	r5, r1
 8011c82:	e7f0      	b.n	8011c66 <prvUnlockQueue+0xc>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c84:	21ff      	movs	r1, #255	; 0xff
 8011c86:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011c8a:	f000 fa49 	bl	8012120 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c8e:	f000 fa37 	bl	8012100 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c92:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c96:	b26a      	sxtb	r2, r5
 8011c98:	2a00      	cmp	r2, #0
 8011c9a:	dd0b      	ble.n	8011cb4 <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c9c:	6923      	ldr	r3, [r4, #16]
 8011c9e:	b14b      	cbz	r3, 8011cb4 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ca0:	f104 0010 	add.w	r0, r4, #16
 8011ca4:	f7ff fe72 	bl	801198c <xTaskRemoveFromEventList>
 8011ca8:	b108      	cbz	r0, 8011cae <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
 8011caa:	f7ff fee5 	bl	8011a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011cae:	3d01      	subs	r5, #1
 8011cb0:	b2ed      	uxtb	r5, r5
 8011cb2:	e7f0      	b.n	8011c96 <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011cb4:	20ff      	movs	r0, #255	; 0xff
 8011cb6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8011cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8011cbe:	f000 ba2f 	b.w	8012120 <vPortExitCritical>

08011cc2 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011cc2:	b570      	push	{r4, r5, r6, lr}
 8011cc4:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011cc6:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cc8:	6b85      	ldr	r5, [r0, #56]	; 0x38

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011cca:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011ccc:	b932      	cbnz	r2, 8011cdc <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cce:	6806      	ldr	r6, [r0, #0]
 8011cd0:	bb26      	cbnz	r6, 8011d1c <prvCopyDataToQueue+0x5a>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011cd2:	6840      	ldr	r0, [r0, #4]
 8011cd4:	f7ff ff26 	bl	8011b24 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8011cd8:	6066      	str	r6, [r4, #4]
 8011cda:	e022      	b.n	8011d22 <prvCopyDataToQueue+0x60>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011cdc:	b966      	cbnz	r6, 8011cf8 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011cde:	6880      	ldr	r0, [r0, #8]
 8011ce0:	f00c fb9c 	bl	801e41c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011ce4:	68a1      	ldr	r1, [r4, #8]
 8011ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ce8:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011cea:	18c8      	adds	r0, r1, r3
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011cec:	4290      	cmp	r0, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011cee:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011cf0:	d314      	bcc.n	8011d1c <prvCopyDataToQueue+0x5a>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011cf2:	6821      	ldr	r1, [r4, #0]
 8011cf4:	60a1      	str	r1, [r4, #8]
 8011cf6:	e011      	b.n	8011d1c <prvCopyDataToQueue+0x5a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cf8:	68c0      	ldr	r0, [r0, #12]
 8011cfa:	f00c fb8f 	bl	801e41c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d00:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d02:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011d04:	4258      	negs	r0, r3
 8011d06:	1813      	adds	r3, r2, r0
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d08:	428b      	cmp	r3, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011d0a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d0c:	d202      	bcs.n	8011d14 <prvCopyDataToQueue+0x52>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011d0e:	6862      	ldr	r2, [r4, #4]
 8011d10:	1810      	adds	r0, r2, r0
 8011d12:	60e0      	str	r0, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011d14:	2e02      	cmp	r6, #2
 8011d16:	d101      	bne.n	8011d1c <prvCopyDataToQueue+0x5a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d18:	b115      	cbz	r5, 8011d20 <prvCopyDataToQueue+0x5e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011d1a:	3d01      	subs	r5, #1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	e000      	b.n	8011d22 <prvCopyDataToQueue+0x60>
 8011d20:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8011d22:	3501      	adds	r5, #1
 8011d24:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8011d26:	bd70      	pop	{r4, r5, r6, pc}

08011d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011d28:	b538      	push	{r3, r4, r5, lr}
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8011d2e:	f000 f9e7 	bl	8012100 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011d36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d38:	60a3      	str	r3, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011d3a:	fb00 3102 	mla	r1, r0, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011d3e:	3801      	subs	r0, #1
 8011d40:	fb02 3300 	mla	r3, r2, r0, r3

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011d44:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 8011d46:	22ff      	movs	r2, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011d48:	2100      	movs	r1, #0
 8011d4a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011d4c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011d4e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011d52:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011d56:	b97d      	cbnz	r5, 8011d78 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d58:	6921      	ldr	r1, [r4, #16]
 8011d5a:	b1a9      	cbz	r1, 8011d88 <xQueueGenericReset+0x60>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d5c:	f104 0010 	add.w	r0, r4, #16
 8011d60:	f7ff fe14 	bl	801198c <xTaskRemoveFromEventList>
 8011d64:	b180      	cbz	r0, 8011d88 <xQueueGenericReset+0x60>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011d66:	4b0a      	ldr	r3, [pc, #40]	; (8011d90 <xQueueGenericReset+0x68>)
 8011d68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011d6c:	6018      	str	r0, [r3, #0]
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	e007      	b.n	8011d88 <xQueueGenericReset+0x60>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d78:	f104 0010 	add.w	r0, r4, #16
 8011d7c:	f7ff ff18 	bl	8011bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011d80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011d84:	f7ff ff14 	bl	8011bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011d88:	f000 f9ca 	bl	8012120 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8011d8c:	2001      	movs	r0, #1
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	e000ed04 	.word	0xe000ed04

08011d94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011d94:	b570      	push	{r4, r5, r6, lr}
 8011d96:	4606      	mov	r6, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011d98:	460d      	mov	r5, r1
 8011d9a:	b111      	cbz	r1, 8011da2 <xQueueGenericCreate+0xe>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d9c:	fb00 f001 	mul.w	r0, r0, r1
 8011da0:	e000      	b.n	8011da4 <xQueueGenericCreate+0x10>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011da2:	4608      	mov	r0, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011da4:	3048      	adds	r0, #72	; 0x48
 8011da6:	f000 fa51 	bl	801224c <pvPortMalloc>

		if( pxNewQueue != NULL )
 8011daa:	4604      	mov	r4, r0
 8011dac:	b158      	cbz	r0, 8011dc6 <xQueueGenericCreate+0x32>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011dae:	b90d      	cbnz	r5, 8011db4 <xQueueGenericCreate+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011db0:	6020      	str	r0, [r4, #0]
 8011db2:	e002      	b.n	8011dba <xQueueGenericCreate+0x26>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011db4:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011db8:	6003      	str	r3, [r0, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011dba:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011dbc:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	2101      	movs	r1, #1
 8011dc2:	f7ff ffb1 	bl	8011d28 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011dcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	4688      	mov	r8, r1
 8011dd4:	9201      	str	r2, [sp, #4]
 8011dd6:	461d      	mov	r5, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011dd8:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011dda:	f000 f991 	bl	8012100 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d301      	bcc.n	8011dea <xQueueGenericSend+0x1e>
 8011de6:	2d02      	cmp	r5, #2
 8011de8:	d117      	bne.n	8011e1a <xQueueGenericSend+0x4e>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dea:	4641      	mov	r1, r8
 8011dec:	4620      	mov	r0, r4
 8011dee:	462a      	mov	r2, r5
 8011df0:	f7ff ff67 	bl	8011cc2 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011df4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011df6:	b119      	cbz	r1, 8011e00 <xQueueGenericSend+0x34>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011df8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011dfc:	f7ff fdc6 	bl	801198c <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e00:	b138      	cbz	r0, 8011e12 <xQueueGenericSend+0x46>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e02:	4a2f      	ldr	r2, [pc, #188]	; (8011ec0 <xQueueGenericSend+0xf4>)
 8011e04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011e08:	6010      	str	r0, [r2, #0]
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e12:	f000 f985 	bl	8012120 <vPortExitCritical>
				return pdPASS;
 8011e16:	2001      	movs	r0, #1
 8011e18:	e04f      	b.n	8011eba <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e1a:	9f01      	ldr	r7, [sp, #4]
 8011e1c:	b917      	cbnz	r7, 8011e24 <xQueueGenericSend+0x58>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e1e:	f000 f97f 	bl	8012120 <vPortExitCritical>
 8011e22:	e049      	b.n	8011eb8 <xQueueGenericSend+0xec>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e24:	b916      	cbnz	r6, 8011e2c <xQueueGenericSend+0x60>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8011e26:	a802      	add	r0, sp, #8
 8011e28:	f7ff fde8 	bl	80119fc <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e2c:	f000 f978 	bl	8012120 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e30:	f7ff fc0e 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e34:	f000 f964 	bl	8012100 <vPortEnterCritical>
 8011e38:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8011e3c:	b241      	sxtb	r1, r0
 8011e3e:	1c4b      	adds	r3, r1, #1
 8011e40:	d102      	bne.n	8011e48 <xQueueGenericSend+0x7c>
 8011e42:	2200      	movs	r2, #0
 8011e44:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8011e48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011e4c:	b258      	sxtb	r0, r3
 8011e4e:	1c43      	adds	r3, r0, #1
 8011e50:	d102      	bne.n	8011e58 <xQueueGenericSend+0x8c>
 8011e52:	2100      	movs	r1, #0
 8011e54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011e58:	f000 f962 	bl	8012120 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e5c:	a802      	add	r0, sp, #8
 8011e5e:	a901      	add	r1, sp, #4
 8011e60:	f7ff fdd8 	bl	8011a14 <xTaskCheckForTimeOut>
 8011e64:	bb18      	cbnz	r0, 8011eae <xQueueGenericSend+0xe2>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e66:	f000 f94b 	bl	8012100 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011e6a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8011e6c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8011e6e:	f000 f957 	bl	8012120 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e72:	42b7      	cmp	r7, r6
 8011e74:	d115      	bne.n	8011ea2 <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e76:	f104 0010 	add.w	r0, r4, #16
 8011e7a:	9901      	ldr	r1, [sp, #4]
 8011e7c:	f7ff fd76 	bl	801196c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e80:	4620      	mov	r0, r4
 8011e82:	f7ff feea 	bl	8011c5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e86:	f7ff fc73 	bl	8011770 <xTaskResumeAll>
 8011e8a:	b108      	cbz	r0, 8011e90 <xQueueGenericSend+0xc4>
 8011e8c:	2601      	movs	r6, #1
 8011e8e:	e7a4      	b.n	8011dda <xQueueGenericSend+0xe>
				{
					portYIELD_WITHIN_API();
 8011e90:	4b0b      	ldr	r3, [pc, #44]	; (8011ec0 <xQueueGenericSend+0xf4>)
 8011e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	f3bf 8f4f 	dsb	sy
 8011e9c:	f3bf 8f6f 	isb	sy
 8011ea0:	e7f4      	b.n	8011e8c <xQueueGenericSend+0xc0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f7ff fed9 	bl	8011c5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ea8:	f7ff fc62 	bl	8011770 <xTaskResumeAll>
 8011eac:	e7ee      	b.n	8011e8c <xQueueGenericSend+0xc0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f7ff fed3 	bl	8011c5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011eb4:	f7ff fc5c 	bl	8011770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011eb8:	2000      	movs	r0, #0
		}
	}
}
 8011eba:	b004      	add	sp, #16
 8011ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec0:	e000ed04 	.word	0xe000ed04

08011ec4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011ec4:	b538      	push	{r3, r4, r5, lr}
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011ec6:	6845      	ldr	r5, [r0, #4]
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011ec8:	4604      	mov	r4, r0
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011eca:	f7ff fddb 	bl	8011a84 <xTaskGetCurrentTaskHandle>
 8011ece:	4285      	cmp	r5, r0
 8011ed0:	d109      	bne.n	8011ee6 <xQueueGiveMutexRecursive+0x22>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011ed2:	68e1      	ldr	r1, [r4, #12]
 8011ed4:	3901      	subs	r1, #1
 8011ed6:	60e1      	str	r1, [r4, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011ed8:	b939      	cbnz	r1, 8011eea <xQueueGiveMutexRecursive+0x26>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011eda:	4620      	mov	r0, r4
 8011edc:	460a      	mov	r2, r1
 8011ede:	460b      	mov	r3, r1
 8011ee0:	f7ff ff74 	bl	8011dcc <xQueueGenericSend>
 8011ee4:	e001      	b.n	8011eea <xQueueGiveMutexRecursive+0x26>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011eea:	2001      	movs	r0, #1

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
	}
 8011eec:	bd38      	pop	{r3, r4, r5, pc}

08011eee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011eee:	b510      	push	{r4, lr}
 8011ef0:	4602      	mov	r2, r0
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	f7ff ff4d 	bl	8011d94 <xQueueGenericCreate>

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
 8011efa:	4604      	mov	r4, r0
 8011efc:	b138      	cbz	r0, 8011f0e <xQueueCreateMutex+0x20>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011efe:	2100      	movs	r1, #0
 8011f00:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011f02:	6001      	str	r1, [r0, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011f04:	60c1      	str	r1, [r0, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011f06:	460a      	mov	r2, r1
 8011f08:	460b      	mov	r3, r1
 8011f0a:	f7ff ff5f 	bl	8011dcc <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
 8011f0e:	4620      	mov	r0, r4
 8011f10:	bd10      	pop	{r4, pc}
	...

08011f14 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8011f14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011f18:	4604      	mov	r4, r0
 8011f1a:	460f      	mov	r7, r1
 8011f1c:	9201      	str	r2, [sp, #4]
 8011f1e:	4698      	mov	r8, r3
BaseType_t xEntryTimeSet = pdFALSE;
 8011f20:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f22:	f000 f8ed 	bl	8012100 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f26:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f28:	b33d      	cbz	r5, 8011f7a <xQueueGenericReceive+0x66>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	4639      	mov	r1, r7
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8011f2e:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f30:	f7ff fe80 	bl	8011c34 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8011f34:	f1b8 0f00 	cmp.w	r8, #0
 8011f38:	d10b      	bne.n	8011f52 <xQueueGenericReceive+0x3e>
					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f3a:	6820      	ldr	r0, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8011f3c:	3d01      	subs	r5, #1
 8011f3e:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f40:	b910      	cbnz	r0, 8011f48 <xQueueGenericReceive+0x34>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011f42:	f7ff fe29 	bl	8011b98 <pvTaskIncrementMutexHeldCount>
 8011f46:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f48:	6921      	ldr	r1, [r4, #16]
 8011f4a:	b191      	cbz	r1, 8011f72 <xQueueGenericReceive+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f4c:	f104 0010 	add.w	r0, r4, #16
 8011f50:	e004      	b.n	8011f5c <xQueueGenericReceive+0x48>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8011f54:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f56:	b163      	cbz	r3, 8011f72 <xQueueGenericReceive+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011f5c:	f7ff fd16 	bl	801198c <xTaskRemoveFromEventList>
 8011f60:	b138      	cbz	r0, 8011f72 <xQueueGenericReceive+0x5e>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f62:	4b36      	ldr	r3, [pc, #216]	; (801203c <xQueueGenericReceive+0x128>)
 8011f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8011f72:	f000 f8d5 	bl	8012120 <vPortExitCritical>
				return pdPASS;
 8011f76:	2001      	movs	r0, #1
 8011f78:	e05d      	b.n	8012036 <xQueueGenericReceive+0x122>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f7a:	9d01      	ldr	r5, [sp, #4]
 8011f7c:	b915      	cbnz	r5, 8011f84 <xQueueGenericReceive+0x70>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f7e:	f000 f8cf 	bl	8012120 <vPortExitCritical>
 8011f82:	e057      	b.n	8012034 <xQueueGenericReceive+0x120>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f84:	b916      	cbnz	r6, 8011f8c <xQueueGenericReceive+0x78>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8011f86:	a802      	add	r0, sp, #8
 8011f88:	f7ff fd38 	bl	80119fc <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f8c:	f000 f8c8 	bl	8012120 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f90:	f7ff fb5e 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f94:	f000 f8b4 	bl	8012100 <vPortEnterCritical>
 8011f98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f9c:	b258      	sxtb	r0, r3
 8011f9e:	1c43      	adds	r3, r0, #1
 8011fa0:	d102      	bne.n	8011fa8 <xQueueGenericReceive+0x94>
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8011fa8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8011fac:	b255      	sxtb	r5, r2
 8011fae:	1c6b      	adds	r3, r5, #1
 8011fb0:	d102      	bne.n	8011fb8 <xQueueGenericReceive+0xa4>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fb8:	f000 f8b2 	bl	8012120 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fbc:	a802      	add	r0, sp, #8
 8011fbe:	a901      	add	r1, sp, #4
 8011fc0:	f7ff fd28 	bl	8011a14 <xTaskCheckForTimeOut>
 8011fc4:	bb50      	cbnz	r0, 801201c <xQueueGenericReceive+0x108>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011fc6:	f000 f89b 	bl	8012100 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011fca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8011fcc:	f000 f8a8 	bl	8012120 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fd0:	b9f6      	cbnz	r6, 8012010 <xQueueGenericReceive+0xfc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fd2:	6820      	ldr	r0, [r4, #0]
 8011fd4:	b930      	cbnz	r0, 8011fe4 <xQueueGenericReceive+0xd0>
					{
						taskENTER_CRITICAL();
 8011fd6:	f000 f893 	bl	8012100 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011fda:	6860      	ldr	r0, [r4, #4]
 8011fdc:	f7ff fd58 	bl	8011a90 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8011fe0:	f000 f89e 	bl	8012120 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011fe4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011fe8:	9901      	ldr	r1, [sp, #4]
 8011fea:	f7ff fcbf 	bl	801196c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f7ff fe33 	bl	8011c5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ff4:	f7ff fbbc 	bl	8011770 <xTaskResumeAll>
 8011ff8:	b108      	cbz	r0, 8011ffe <xQueueGenericReceive+0xea>
 8011ffa:	2601      	movs	r6, #1
 8011ffc:	e791      	b.n	8011f22 <xQueueGenericReceive+0xe>
				{
					portYIELD_WITHIN_API();
 8011ffe:	4a0f      	ldr	r2, [pc, #60]	; (801203c <xQueueGenericReceive+0x128>)
 8012000:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8012004:	6011      	str	r1, [r2, #0]
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	e7f4      	b.n	8011ffa <xQueueGenericReceive+0xe6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012010:	4620      	mov	r0, r4
 8012012:	f7ff fe22 	bl	8011c5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012016:	f7ff fbab 	bl	8011770 <xTaskResumeAll>
 801201a:	e7ee      	b.n	8011ffa <xQueueGenericReceive+0xe6>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 801201c:	4620      	mov	r0, r4
 801201e:	f7ff fe1c 	bl	8011c5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012022:	f7ff fba5 	bl	8011770 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012026:	f000 f86b 	bl	8012100 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801202a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801202c:	f000 f878 	bl	8012120 <vPortExitCritical>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012030:	2d00      	cmp	r5, #0
 8012032:	d1e2      	bne.n	8011ffa <xQueueGenericReceive+0xe6>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012034:	4628      	mov	r0, r5
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012036:	b004      	add	sp, #16
 8012038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801203c:	e000ed04 	.word	0xe000ed04

08012040 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8012040:	b570      	push	{r4, r5, r6, lr}
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012042:	6846      	ldr	r6, [r0, #4]
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8012044:	4604      	mov	r4, r0
 8012046:	460d      	mov	r5, r1
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012048:	f7ff fd1c 	bl	8011a84 <xTaskGetCurrentTaskHandle>
 801204c:	4286      	cmp	r6, r0
 801204e:	d104      	bne.n	801205a <xQueueTakeMutexRecursive+0x1a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8012050:	68e0      	ldr	r0, [r4, #12]
 8012052:	1c42      	adds	r2, r0, #1
 8012054:	60e2      	str	r2, [r4, #12]
			xReturn = pdPASS;
 8012056:	2001      	movs	r0, #1
 8012058:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 801205a:	2100      	movs	r1, #0
 801205c:	4620      	mov	r0, r4
 801205e:	462a      	mov	r2, r5
 8012060:	460b      	mov	r3, r1
 8012062:	f7ff ff57 	bl	8011f14 <xQueueGenericReceive>

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8012066:	b110      	cbz	r0, 801206e <xQueueTakeMutexRecursive+0x2e>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8012068:	68e3      	ldr	r3, [r4, #12]
 801206a:	1c59      	adds	r1, r3, #1
 801206c:	60e1      	str	r1, [r4, #12]
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
 801206e:	bd70      	pop	{r4, r5, r6, pc}

08012070 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012070:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	e7fe      	b.n	8012080 <prvTaskExitError+0x10>
	...

08012084 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8012084:	4806      	ldr	r0, [pc, #24]	; (80120a0 <prvPortStartFirstTask+0x1c>)
 8012086:	6800      	ldr	r0, [r0, #0]
 8012088:	6800      	ldr	r0, [r0, #0]
 801208a:	f380 8808 	msr	MSP, r0
 801208e:	b662      	cpsie	i
 8012090:	b661      	cpsie	f
 8012092:	f3bf 8f4f 	dsb	sy
 8012096:	f3bf 8f6f 	isb	sy
 801209a:	df00      	svc	0
 801209c:	bf00      	nop
 801209e:	0000      	.short	0x0000
 80120a0:	e000ed08 	.word	0xe000ed08

080120a4 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80120a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80120a8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80120ac:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <pxPortInitialiseStack+0x20>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80120ae:	f840 2c20 	str.w	r2, [r0, #-32]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80120b2:	f021 0101 	bic.w	r1, r1, #1
 80120b6:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80120ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80120be:	3840      	subs	r0, #64	; 0x40
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	08012071 	.word	0x08012071
	...

080120d0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80120d0:	4b07      	ldr	r3, [pc, #28]	; (80120f0 <pxCurrentTCBConst2>)
 80120d2:	6819      	ldr	r1, [r3, #0]
 80120d4:	6808      	ldr	r0, [r1, #0]
 80120d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80120da:	f380 8809 	msr	PSP, r0
 80120de:	f3bf 8f6f 	isb	sy
 80120e2:	f04f 0000 	mov.w	r0, #0
 80120e6:	f380 8811 	msr	BASEPRI, r0
 80120ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80120ee:	4770      	bx	lr

080120f0 <pxCurrentTCBConst2>:
 80120f0:	20000b68 	.word	0x20000b68
 80120f4:	f3af 8000 	nop.w
 80120f8:	f3af 8000 	nop.w
 80120fc:	f3af 8000 	nop.w

08012100 <vPortEnterCritical>:
 8012100:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012110:	4b02      	ldr	r3, [pc, #8]	; (801211c <vPortEnterCritical+0x1c>)
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	1c50      	adds	r0, r2, #1
 8012116:	6018      	str	r0, [r3, #0]
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	20000000 	.word	0x20000000

08012120 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8012120:	4a03      	ldr	r2, [pc, #12]	; (8012130 <vPortExitCritical+0x10>)
 8012122:	6813      	ldr	r3, [r2, #0]
 8012124:	1e58      	subs	r0, r3, #1
 8012126:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012128:	b908      	cbnz	r0, 801212e <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801212a:	f380 8811 	msr	BASEPRI, r0
 801212e:	4770      	bx	lr
 8012130:	20000000 	.word	0x20000000
	...

08012140 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012140:	f3ef 8009 	mrs	r0, PSP
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	4b0d      	ldr	r3, [pc, #52]	; (8012180 <pxCurrentTCBConst>)
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012150:	6010      	str	r0, [r2, #0]
 8012152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8012156:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 801215a:	f380 8811 	msr	BASEPRI, r0
 801215e:	f7ff fbdb 	bl	8011918 <vTaskSwitchContext>
 8012162:	f04f 0000 	mov.w	r0, #0
 8012166:	f380 8811 	msr	BASEPRI, r0
 801216a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801216e:	6819      	ldr	r1, [r3, #0]
 8012170:	6808      	ldr	r0, [r1, #0]
 8012172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012176:	f380 8809 	msr	PSP, r0
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	4770      	bx	lr

08012180 <pxCurrentTCBConst>:
 8012180:	20000b68 	.word	0x20000b68
 8012184:	f3af 8000 	nop.w
 8012188:	f3af 8000 	nop.w
 801218c:	f3af 8000 	nop.w

08012190 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012190:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012192:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8012196:	f383 8811 	msr	BASEPRI, r3
 801219a:	f3bf 8f6f 	isb	sy
 801219e:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80121a2:	f7ff fa63 	bl	801166c <xTaskIncrementTick>
 80121a6:	b118      	cbz	r0, 80121b0 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80121a8:	4b03      	ldr	r3, [pc, #12]	; (80121b8 <xPortSysTickHandler+0x28>)
 80121aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ae:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80121b0:	2000      	movs	r0, #0
 80121b2:	f380 8811 	msr	BASEPRI, r0
 80121b6:	bd08      	pop	{r3, pc}
 80121b8:	e000ed04 	.word	0xe000ed04

080121bc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80121bc:	4b03      	ldr	r3, [pc, #12]	; (80121cc <vPortSetupTimerInterrupt+0x10>)
 80121be:	4a04      	ldr	r2, [pc, #16]	; (80121d0 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80121c0:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80121c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80121c4:	f843 0c04 	str.w	r0, [r3, #-4]
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop
 80121cc:	e000e014 	.word	0xe000e014
 80121d0:	0002903f 	.word	0x0002903f

080121d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80121d4:	b508      	push	{r3, lr}
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80121d6:	4b09      	ldr	r3, [pc, #36]	; (80121fc <xPortStartScheduler+0x28>)
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	f442 007f 	orr.w	r0, r2, #16711680	; 0xff0000
 80121de:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80121e0:	6819      	ldr	r1, [r3, #0]
 80121e2:	f041 427f 	orr.w	r2, r1, #4278190080	; 0xff000000
 80121e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80121e8:	f7ff ffe8 	bl	80121bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80121ec:	4b04      	ldr	r3, [pc, #16]	; (8012200 <xPortStartScheduler+0x2c>)
 80121ee:	2000      	movs	r0, #0
 80121f0:	6018      	str	r0, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80121f2:	f7ff ff47 	bl	8012084 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80121f6:	f7ff ff3b 	bl	8012070 <prvTaskExitError>
 80121fa:	bf00      	nop
 80121fc:	e000ed20 	.word	0xe000ed20
 8012200:	20000000 	.word	0x20000000

08012204 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012204:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012206:	4b0f      	ldr	r3, [pc, #60]	; (8012244 <prvInsertBlockIntoFreeList+0x40>)
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	4282      	cmp	r2, r0
 801220c:	d201      	bcs.n	8012212 <prvInsertBlockIntoFreeList+0xe>
 801220e:	4613      	mov	r3, r2
 8012210:	e7fa      	b.n	8012208 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012212:	6859      	ldr	r1, [r3, #4]
 8012214:	185c      	adds	r4, r3, r1
 8012216:	4284      	cmp	r4, r0
 8012218:	d103      	bne.n	8012222 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801221a:	6840      	ldr	r0, [r0, #4]
 801221c:	1841      	adds	r1, r0, r1
 801221e:	6059      	str	r1, [r3, #4]
 8012220:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012222:	6841      	ldr	r1, [r0, #4]
 8012224:	1844      	adds	r4, r0, r1
 8012226:	4294      	cmp	r4, r2
 8012228:	d107      	bne.n	801223a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801222a:	4c07      	ldr	r4, [pc, #28]	; (8012248 <prvInsertBlockIntoFreeList+0x44>)
 801222c:	6824      	ldr	r4, [r4, #0]
 801222e:	42a2      	cmp	r2, r4
 8012230:	d003      	beq.n	801223a <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012232:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012234:	6812      	ldr	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012236:	1861      	adds	r1, r4, r1
 8012238:	6041      	str	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801223a:	4283      	cmp	r3, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801223c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801223e:	bf18      	it	ne
 8012240:	6018      	strne	r0, [r3, #0]
 8012242:	bd10      	pop	{r4, pc}
 8012244:	20000bd0 	.word	0x20000bd0
 8012248:	20000bcc 	.word	0x20000bcc

0801224c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224e:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8012250:	f7ff f9fe 	bl	8011650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012254:	4b37      	ldr	r3, [pc, #220]	; (8012334 <pvPortMalloc+0xe8>)
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	bb18      	cbnz	r0, 80122a2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801225a:	4a37      	ldr	r2, [pc, #220]	; (8012338 <pvPortMalloc+0xec>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801225c:	0751      	lsls	r1, r2, #29
 801225e:	d007      	beq.n	8012270 <pvPortMalloc+0x24>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012260:	1dd6      	adds	r6, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012262:	f026 0307 	bic.w	r3, r6, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012266:	f502 5020 	add.w	r0, r2, #10240	; 0x2800
 801226a:	1ac1      	subs	r1, r0, r3
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801226c:	461a      	mov	r2, r3
 801226e:	e001      	b.n	8012274 <pvPortMalloc+0x28>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012270:	f44f 5120 	mov.w	r1, #10240	; 0x2800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012274:	1851      	adds	r1, r2, r1
	uxAddress -= xHeapStructSize;
 8012276:	3908      	subs	r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012278:	f021 0107 	bic.w	r1, r1, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801227c:	4e2f      	ldr	r6, [pc, #188]	; (801233c <pvPortMalloc+0xf0>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 801227e:	482d      	ldr	r0, [pc, #180]	; (8012334 <pvPortMalloc+0xe8>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012280:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012282:	2300      	movs	r3, #0
 8012284:	6073      	str	r3, [r6, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 8012286:	600b      	str	r3, [r1, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8012288:	604b      	str	r3, [r1, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801228a:	1a8b      	subs	r3, r1, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801228c:	e882 000a 	stmia.w	r2, {r1, r3}

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012290:	4e2b      	ldr	r6, [pc, #172]	; (8012340 <pvPortMalloc+0xf4>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012292:	4a2c      	ldr	r2, [pc, #176]	; (8012344 <pvPortMalloc+0xf8>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012294:	6033      	str	r3, [r6, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012298:	4b2b      	ldr	r3, [pc, #172]	; (8012348 <pvPortMalloc+0xfc>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 801229a:	6001      	str	r1, [r0, #0]
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801229c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80122a0:	6019      	str	r1, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80122a2:	4829      	ldr	r0, [pc, #164]	; (8012348 <pvPortMalloc+0xfc>)
 80122a4:	6806      	ldr	r6, [r0, #0]
 80122a6:	4235      	tst	r5, r6
 80122a8:	d13b      	bne.n	8012322 <pvPortMalloc+0xd6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80122aa:	2d00      	cmp	r5, #0
 80122ac:	d03a      	beq.n	8012324 <pvPortMalloc+0xd8>
			{
				xWantedSize += xHeapStructSize;
 80122ae:	f105 0308 	add.w	r3, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80122b2:	075a      	lsls	r2, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80122b4:	bf1c      	itt	ne
 80122b6:	f023 0307 	bicne.w	r3, r3, #7
 80122ba:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d02e      	beq.n	801231e <pvPortMalloc+0xd2>
 80122c0:	4d1f      	ldr	r5, [pc, #124]	; (8012340 <pvPortMalloc+0xf4>)
 80122c2:	682f      	ldr	r7, [r5, #0]
 80122c4:	42bb      	cmp	r3, r7
 80122c6:	d82c      	bhi.n	8012322 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80122c8:	4a1c      	ldr	r2, [pc, #112]	; (801233c <pvPortMalloc+0xf0>)
 80122ca:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122cc:	6861      	ldr	r1, [r4, #4]
 80122ce:	4299      	cmp	r1, r3
 80122d0:	d304      	bcc.n	80122dc <pvPortMalloc+0x90>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122d2:	4d18      	ldr	r5, [pc, #96]	; (8012334 <pvPortMalloc+0xe8>)
 80122d4:	6828      	ldr	r0, [r5, #0]
 80122d6:	4284      	cmp	r4, r0
 80122d8:	d106      	bne.n	80122e8 <pvPortMalloc+0x9c>
 80122da:	e022      	b.n	8012322 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122dc:	6820      	ldr	r0, [r4, #0]
 80122de:	2800      	cmp	r0, #0
 80122e0:	d0f7      	beq.n	80122d2 <pvPortMalloc+0x86>
 80122e2:	4622      	mov	r2, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
 80122e4:	4604      	mov	r4, r0
 80122e6:	e7f1      	b.n	80122cc <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80122e8:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122ea:	6815      	ldr	r5, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80122ec:	6010      	str	r0, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80122ee:	1aca      	subs	r2, r1, r3
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122f0:	3508      	adds	r5, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80122f2:	2a10      	cmp	r2, #16
 80122f4:	d904      	bls.n	8012300 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80122f6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80122f8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80122fa:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80122fc:	f7ff ff82 	bl	8012204 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012300:	6862      	ldr	r2, [r4, #4]
 8012302:	490f      	ldr	r1, [pc, #60]	; (8012340 <pvPortMalloc+0xf4>)
 8012304:	1abb      	subs	r3, r7, r2
 8012306:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012308:	490e      	ldr	r1, [pc, #56]	; (8012344 <pvPortMalloc+0xf8>)
 801230a:	6808      	ldr	r0, [r1, #0]
 801230c:	4283      	cmp	r3, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801230e:	ea42 0606 	orr.w	r6, r2, r6

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012312:	bf38      	it	cc
 8012314:	600b      	strcc	r3, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8012316:	2200      	movs	r2, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012318:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801231a:	6022      	str	r2, [r4, #0]
 801231c:	e002      	b.n	8012324 <pvPortMalloc+0xd8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801231e:	461d      	mov	r5, r3
 8012320:	e000      	b.n	8012324 <pvPortMalloc+0xd8>
 8012322:	2500      	movs	r5, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012324:	f7ff fa24 	bl	8011770 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012328:	b90d      	cbnz	r5, 801232e <pvPortMalloc+0xe2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801232a:	f7fe fec7 	bl	80110bc <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 801232e:	4628      	mov	r0, r5
 8012330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012332:	bf00      	nop
 8012334:	20000bcc 	.word	0x20000bcc
 8012338:	200013ac 	.word	0x200013ac
 801233c:	20000bd0 	.word	0x20000bd0
 8012340:	20000bc8 	.word	0x20000bc8
 8012344:	20000bd8 	.word	0x20000bd8
 8012348:	20000bdc 	.word	0x20000bdc

0801234c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801234c:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 801234e:	4604      	mov	r4, r0
 8012350:	b1e0      	cbz	r0, 801238c <vPortFree+0x40>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012352:	4a0f      	ldr	r2, [pc, #60]	; (8012390 <vPortFree+0x44>)
 8012354:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012358:	6810      	ldr	r0, [r2, #0]
 801235a:	4218      	tst	r0, r3
 801235c:	d016      	beq.n	801238c <vPortFree+0x40>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801235e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8012362:	b999      	cbnz	r1, 801238c <vPortFree+0x40>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012364:	ea23 0300 	bic.w	r3, r3, r0
 8012368:	f844 3c04 	str.w	r3, [r4, #-4]

				vTaskSuspendAll();
 801236c:	f7ff f970 	bl	8011650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012370:	4b08      	ldr	r3, [pc, #32]	; (8012394 <vPortFree+0x48>)
 8012372:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	1881      	adds	r1, r0, r2
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801237a:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801237e:	6019      	str	r1, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012380:	f7ff ff40 	bl	8012204 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8012388:	f7ff b9f2 	b.w	8011770 <xTaskResumeAll>
 801238c:	bd10      	pop	{r4, pc}
 801238e:	bf00      	nop
 8012390:	20000bdc 	.word	0x20000bdc
 8012394:	20000bc8 	.word	0x20000bc8

08012398 <Default_Handler>:
 * @param  None     
 * @retval : None       
*/

void Default_Handler(void) 
{
 8012398:	e7fe      	b.n	8012398 <Default_Handler>
	...

0801239c <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 801239c:	4668      	mov	r0, sp
 801239e:	f020 0107 	bic.w	r1, r0, #7
 80123a2:	468d      	mov	sp, r1
 80123a4:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 80123a6:	2300      	movs	r3, #0
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 80123a8:	4a0a      	ldr	r2, [pc, #40]	; (80123d4 <Reset_Handler+0x38>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 80123aa:	490b      	ldr	r1, [pc, #44]	; (80123d8 <Reset_Handler+0x3c>)
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 80123ac:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 80123ae:	4288      	cmp	r0, r1
 80123b0:	d204      	bcs.n	80123bc <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
 80123b2:	490a      	ldr	r1, [pc, #40]	; (80123dc <Reset_Handler+0x40>)
 80123b4:	5858      	ldr	r0, [r3, r1]
 80123b6:	5098      	str	r0, [r3, r2]
 80123b8:	3304      	adds	r3, #4
 80123ba:	e7f5      	b.n	80123a8 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 80123bc:	4b08      	ldr	r3, [pc, #32]	; (80123e0 <Reset_Handler+0x44>)
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 80123be:	4a09      	ldr	r2, [pc, #36]	; (80123e4 <Reset_Handler+0x48>)
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d203      	bcs.n	80123cc <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
 80123c4:	2000      	movs	r0, #0
 80123c6:	f843 0b04 	str.w	r0, [r3], #4
 80123ca:	e7f8      	b.n	80123be <Reset_Handler+0x22>
  }

  /* Call the application's entry point.*/
  main();
 80123cc:	f7fe fdde 	bl	8010f8c <main>
 80123d0:	e7fe      	b.n	80123d0 <Reset_Handler+0x34>
 80123d2:	bf00      	nop
 80123d4:	20000000 	.word	0x20000000
 80123d8:	20000070 	.word	0x20000070
 80123dc:	08020450 	.word	0x08020450
 80123e0:	20000070 	.word	0x20000070
 80123e4:	20004ce8 	.word	0x20004ce8

080123e8 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
 80123e8:	4770      	bx	lr
	...

080123ec <MIOS32_SRIO_DMA_Callback>:
/////////////////////////////////////////////////////////////////////////////
// DMA callback function is called by MIOS32_SPI driver once the complete SRIO chain
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
 80123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // notify that new values have been transfered
  srio_values_transfered = 1;

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 80123ee:	2100      	movs	r1, #0
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 80123f0:	2401      	movs	r4, #1
 80123f2:	4b21      	ldr	r3, [pc, #132]	; (8012478 <MIOS32_SRIO_DMA_Callback+0x8c>)

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 80123f4:	460a      	mov	r2, r1
 80123f6:	4620      	mov	r0, r4
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 80123f8:	701c      	strb	r4, [r3, #0]

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 80123fa:	f002 fa67 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 80123fe:	4621      	mov	r1, r4
 8012400:	4620      	mov	r0, r4
 8012402:	2200      	movs	r2, #0
 8012404:	f002 fa62 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8012408:	4622      	mov	r2, r4
 801240a:	4620      	mov	r0, r4
 801240c:	2100      	movs	r1, #0
 801240e:	f002 fa5d 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 8012412:	4620      	mov	r0, r4
 8012414:	4621      	mov	r1, r4
 8012416:	4622      	mov	r2, r4
 8012418:	f002 fa58 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 801241c:	4817      	ldr	r0, [pc, #92]	; (801247c <MIOS32_SRIO_DMA_Callback+0x90>)
 801241e:	7804      	ldrb	r4, [r0, #0]
 8012420:	2300      	movs	r3, #0
 8012422:	42a3      	cmp	r3, r4
 8012424:	da0c      	bge.n	8012440 <MIOS32_SRIO_DMA_Callback+0x54>
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 8012426:	4a16      	ldr	r2, [pc, #88]	; (8012480 <MIOS32_SRIO_DMA_Callback+0x94>)
 8012428:	4916      	ldr	r1, [pc, #88]	; (8012484 <MIOS32_SRIO_DMA_Callback+0x98>)
    mios32_srio_din_changed[i] |= change_mask;
 801242a:	4817      	ldr	r0, [pc, #92]	; (8012488 <MIOS32_SRIO_DMA_Callback+0x9c>)
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 801242c:	5cd5      	ldrb	r5, [r2, r3]
 801242e:	5ccf      	ldrb	r7, [r1, r3]
    mios32_srio_din_changed[i] |= change_mask;
 8012430:	5cc6      	ldrb	r6, [r0, r3]
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
    u8 change_mask = mios32_srio_din[i] ^ mios32_srio_din_buffer[i]; // these are the changed pins
 8012432:	407d      	eors	r5, r7
    mios32_srio_din_changed[i] |= change_mask;
 8012434:	4335      	orrs	r5, r6
 8012436:	54c5      	strb	r5, [r0, r3]
    mios32_srio_din[i] = mios32_srio_din_buffer[i];
 8012438:	5cc9      	ldrb	r1, [r1, r3]
 801243a:	54d1      	strb	r1, [r2, r3]
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 801243c:	3301      	adds	r3, #1
 801243e:	e7f0      	b.n	8012422 <MIOS32_SRIO_DMA_Callback+0x36>

  // call user specific hook if requested
  // it has to be called before button debouncing is handled
  // to ensure that the encoder driver, but also other drivers (e.g. BLM) are working properly
  // regardless if debouncing is enabled or not
  if( srio_scan_finished_hook != NULL )
 8012440:	4912      	ldr	r1, [pc, #72]	; (801248c <MIOS32_SRIO_DMA_Callback+0xa0>)
 8012442:	680a      	ldr	r2, [r1, #0]
 8012444:	b102      	cbz	r2, 8012448 <MIOS32_SRIO_DMA_Callback+0x5c>
    srio_scan_finished_hook();
 8012446:	4790      	blx	r2
  // at this time. In order to ensure, that a new final state of a button won't get lost, 
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
 8012448:	4b11      	ldr	r3, [pc, #68]	; (8012490 <MIOS32_SRIO_DMA_Callback+0xa4>)
 801244a:	8818      	ldrh	r0, [r3, #0]
 801244c:	b198      	cbz	r0, 8012476 <MIOS32_SRIO_DMA_Callback+0x8a>
 801244e:	4911      	ldr	r1, [pc, #68]	; (8012494 <MIOS32_SRIO_DMA_Callback+0xa8>)
 8012450:	880a      	ldrh	r2, [r1, #0]
 8012452:	b182      	cbz	r2, 8012476 <MIOS32_SRIO_DMA_Callback+0x8a>
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8012454:	4809      	ldr	r0, [pc, #36]	; (801247c <MIOS32_SRIO_DMA_Callback+0x90>)
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 8012456:	1e53      	subs	r3, r2, #1

    for(i=0; i<num_sr; ++i) {
 8012458:	7800      	ldrb	r0, [r0, #0]
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 801245a:	800b      	strh	r3, [r1, #0]

    for(i=0; i<num_sr; ++i) {
 801245c:	2300      	movs	r3, #0
 801245e:	4283      	cmp	r3, r0
 8012460:	da09      	bge.n	8012476 <MIOS32_SRIO_DMA_Callback+0x8a>
      mios32_srio_din[i] ^= mios32_srio_din_changed[i];
 8012462:	4907      	ldr	r1, [pc, #28]	; (8012480 <MIOS32_SRIO_DMA_Callback+0x94>)
 8012464:	4a08      	ldr	r2, [pc, #32]	; (8012488 <MIOS32_SRIO_DMA_Callback+0x9c>)
 8012466:	5ccc      	ldrb	r4, [r1, r3]
 8012468:	5cd5      	ldrb	r5, [r2, r3]
 801246a:	406c      	eors	r4, r5
 801246c:	54cc      	strb	r4, [r1, r3]
      mios32_srio_din_changed[i] = 0;
 801246e:	2100      	movs	r1, #0
 8012470:	54d1      	strb	r1, [r2, r3]
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8012472:	3301      	adds	r3, #1
 8012474:	e7f3      	b.n	801245e <MIOS32_SRIO_DMA_Callback+0x72>
 8012476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012478:	20000be7 	.word	0x20000be7
 801247c:	20000be6 	.word	0x20000be6
 8012480:	20003bdc 	.word	0x20003bdc
 8012484:	20003bcc 	.word	0x20003bcc
 8012488:	20003bac 	.word	0x20003bac
 801248c:	20000be0 	.word	0x20000be0
 8012490:	20000be4 	.word	0x20000be4
 8012494:	20000be8 	.word	0x20000be8

08012498 <MIOS32_SRIO_Init>:
//! Initializes SPI pins and peripheral
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
 8012498:	b510      	push	{r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 801249a:	2800      	cmp	r0, #0
 801249c:	d12e      	bne.n	80124fc <MIOS32_SRIO_Init+0x64>
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 801249e:	4b19      	ldr	r3, [pc, #100]	; (8012504 <MIOS32_SRIO_Init+0x6c>)

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 80124a0:	4919      	ldr	r1, [pc, #100]	; (8012508 <MIOS32_SRIO_Init+0x70>)
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 80124a2:	6018      	str	r0, [r3, #0]

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 80124a4:	2210      	movs	r2, #16
 80124a6:	700a      	strb	r2, [r1, #0]

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80124a8:	4603      	mov	r3, r0
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 80124aa:	4818      	ldr	r0, [pc, #96]	; (801250c <MIOS32_SRIO_Init+0x74>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 80124ac:	4918      	ldr	r1, [pc, #96]	; (8012510 <MIOS32_SRIO_Init+0x78>)
  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 80124ae:	2400      	movs	r4, #0
 80124b0:	54c4      	strb	r4, [r0, r3]
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 80124b2:	4818      	ldr	r0, [pc, #96]	; (8012514 <MIOS32_SRIO_Init+0x7c>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 80124b4:	22ff      	movs	r2, #255	; 0xff
 80124b6:	54ca      	strb	r2, [r1, r3]
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 80124b8:	54c2      	strb	r2, [r0, r3]
    mios32_srio_din_changed[i] = 0;   // no change
 80124ba:	4a17      	ldr	r2, [pc, #92]	; (8012518 <MIOS32_SRIO_Init+0x80>)
 80124bc:	54d4      	strb	r4, [r2, r3]
  num_sr = MIOS32_SRIO_NUM_SR;

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80124be:	3301      	adds	r3, #1
 80124c0:	2b10      	cmp	r3, #16
 80124c2:	d1f2      	bne.n	80124aa <MIOS32_SRIO_Init+0x12>
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
  debounce_ctr = 0;
 80124c4:	4815      	ldr	r0, [pc, #84]	; (801251c <MIOS32_SRIO_Init+0x84>)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 80124c6:	4916      	ldr	r1, [pc, #88]	; (8012520 <MIOS32_SRIO_Init+0x88>)
  debounce_ctr = 0;
 80124c8:	8004      	strh	r4, [r0, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80124ca:	2001      	movs	r0, #1
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 80124cc:	800c      	strh	r4, [r1, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80124ce:	4602      	mov	r2, r0
 80124d0:	4621      	mov	r1, r4
 80124d2:	f002 f9fb 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 80124d6:	2001      	movs	r0, #1
 80124d8:	4602      	mov	r2, r0
 80124da:	4601      	mov	r1, r0
 80124dc:	f002 f9f6 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  // using 2 MHz instead of 50 MHz to avoid fast transients which can cause flickering!
  // optionally using open drain mode for cheap and sufficient levelshifting from 3.3V to 5V
#if MIOS32_SRIO_OUTPUTS_OD
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK_OD);
#else
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK);
 80124e0:	2102      	movs	r1, #2
 80124e2:	2001      	movs	r0, #1
 80124e4:	f002 f8b4 	bl	8014650 <MIOS32_SPI_IO_Init>
#endif

  // init SPI port for baudrate of ca. 2 uS period @ 72 MHz
  MIOS32_SPI_TransferModeInit(MIOS32_SRIO_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 80124e8:	2206      	movs	r2, #6
 80124ea:	2001      	movs	r0, #1
 80124ec:	2103      	movs	r1, #3
 80124ee:	f002 fa4f 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;
 80124f2:	4b0c      	ldr	r3, [pc, #48]	; (8012524 <MIOS32_SRIO_Init+0x8c>)
 80124f4:	2201      	movs	r2, #1
 80124f6:	701a      	strb	r2, [r3, #0]

  return 0;
 80124f8:	4620      	mov	r0, r4
 80124fa:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80124fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;

  return 0;
}
 8012500:	bd10      	pop	{r4, pc}
 8012502:	bf00      	nop
 8012504:	20000be0 	.word	0x20000be0
 8012508:	20000be6 	.word	0x20000be6
 801250c:	20003bbc 	.word	0x20003bbc
 8012510:	20003bdc 	.word	0x20003bdc
 8012514:	20003bcc 	.word	0x20003bcc
 8012518:	20003bac 	.word	0x20003bac
 801251c:	20000be8 	.word	0x20000be8
 8012520:	20000be4 	.word	0x20000be4
 8012524:	20000be7 	.word	0x20000be7

08012528 <MIOS32_SRIO_ScanNumGet>:
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_SRIO_ScanNumGet(void)
{
  return num_sr;
}
 8012528:	4b01      	ldr	r3, [pc, #4]	; (8012530 <MIOS32_SRIO_ScanNumGet+0x8>)
 801252a:	7818      	ldrb	r0, [r3, #0]
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	20000be6 	.word	0x20000be6

08012534 <MIOS32_SRIO_DebounceStart>:
//! it in a common application.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_DebounceStart(void)
{
  debounce_ctr = debounce_time;
 8012534:	4b02      	ldr	r3, [pc, #8]	; (8012540 <MIOS32_SRIO_DebounceStart+0xc>)
 8012536:	4803      	ldr	r0, [pc, #12]	; (8012544 <MIOS32_SRIO_DebounceStart+0x10>)
 8012538:	881a      	ldrh	r2, [r3, #0]
 801253a:	8002      	strh	r2, [r0, #0]
  return 0; // no error
}
 801253c:	2000      	movs	r0, #0
 801253e:	4770      	bx	lr
 8012540:	20000be4 	.word	0x20000be4
 8012544:	20000be8 	.word	0x20000be8

08012548 <MIOS32_SRIO_ScanStart>:
//!     (all DOUT registers written, all DIN registers read)
//!     use NULL if no function should be called
//! \return < 0 if operation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_ScanStart(void *_notify_hook)
{
 8012548:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
 801254a:	4d17      	ldr	r5, [pc, #92]	; (80125a8 <MIOS32_SRIO_ScanStart+0x60>)
 801254c:	782b      	ldrb	r3, [r5, #0]
 801254e:	b323      	cbz	r3, 801259a <MIOS32_SRIO_ScanStart+0x52>

  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
 8012550:	4916      	ldr	r1, [pc, #88]	; (80125ac <MIOS32_SRIO_ScanStart+0x64>)
 8012552:	780a      	ldrb	r2, [r1, #0]
 8012554:	b322      	cbz	r2, 80125a0 <MIOS32_SRIO_ScanStart+0x58>

  // notify that new values have to be transfered
  srio_values_transfered = 0;

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 8012556:	4b16      	ldr	r3, [pc, #88]	; (80125b0 <MIOS32_SRIO_ScanStart+0x68>)
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 8012558:	2400      	movs	r4, #0

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 801255a:	6018      	str	r0, [r3, #0]
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 801255c:	700c      	strb	r4, [r1, #0]
  srio_scan_finished_hook = _notify_hook;

  // before first byte will be sent:
  // latch DIN registers by pulsing RCLK: 1->0->1
  // TODO: maybe we should disable all IRQs here for higher accuracy
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 801255e:	4622      	mov	r2, r4
 8012560:	4621      	mov	r1, r4
 8012562:	2001      	movs	r0, #1
 8012564:	f002 f9b2 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 8012568:	2001      	movs	r0, #1
 801256a:	4601      	mov	r1, r0
 801256c:	4622      	mov	r2, r4
 801256e:	f002 f9ad 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8012572:	2001      	movs	r0, #1
 8012574:	4621      	mov	r1, r4
 8012576:	4602      	mov	r2, r0
 8012578:	f002 f9a8 	bl	80148cc <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 801257c:	2001      	movs	r0, #1
 801257e:	4601      	mov	r1, r0
 8012580:	4602      	mov	r2, r0
 8012582:	f002 f9a3 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  if( ++mios32_srio_dout_page_ctr >= MIOS32_SRIO_NUM_DOUT_PAGES )
    mios32_srio_dout_page_ctr = 0;
#endif

  // start DMA transfer
  MIOS32_SPI_TransferBlock(MIOS32_SRIO_SPI,
 8012586:	480b      	ldr	r0, [pc, #44]	; (80125b4 <MIOS32_SRIO_ScanStart+0x6c>)
 8012588:	782b      	ldrb	r3, [r5, #0]
 801258a:	9000      	str	r0, [sp, #0]
 801258c:	490a      	ldr	r1, [pc, #40]	; (80125b8 <MIOS32_SRIO_ScanStart+0x70>)
 801258e:	4a0b      	ldr	r2, [pc, #44]	; (80125bc <MIOS32_SRIO_ScanStart+0x74>)
 8012590:	2001      	movs	r0, #1
 8012592:	f002 fbb1 	bl	8014cf8 <MIOS32_SPI_TransferBlock>
			   (u8 *)&mios32_srio_dout[mios32_srio_dout_page_ctr][0], (u8 *)&mios32_srio_din_buffer[0],
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
 8012596:	4620      	mov	r0, r4
 8012598:	e004      	b.n	80125a4 <MIOS32_SRIO_ScanStart+0x5c>
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
    return -1; // SRIO disabled during runtime
 801259a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801259e:	e001      	b.n	80125a4 <MIOS32_SRIO_ScanStart+0x5c>
  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here
 80125a0:	f06f 0001 	mvn.w	r0, #1
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
}
 80125a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80125a6:	bf00      	nop
 80125a8:	20000be6 	.word	0x20000be6
 80125ac:	20000be7 	.word	0x20000be7
 80125b0:	20000be0 	.word	0x20000be0
 80125b4:	080123ed 	.word	0x080123ed
 80125b8:	20003bbc 	.word	0x20003bbc
 80125bc:	20003bcc 	.word	0x20003bcc

080125c0 <MIOS32_DIN_Init>:
s32 MIOS32_DIN_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 80125c0:	b950      	cbnz	r0, 80125d8 <MIOS32_DIN_Init+0x18>
 80125c2:	4603      	mov	r3, r0
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
    mios32_srio_din[i] = 0xff; // passive state
 80125c4:	4a06      	ldr	r2, [pc, #24]	; (80125e0 <MIOS32_DIN_Init+0x20>)
 80125c6:	21ff      	movs	r1, #255	; 0xff
 80125c8:	54d1      	strb	r1, [r2, r3]
    mios32_srio_din_changed[i] = 0;
 80125ca:	4906      	ldr	r1, [pc, #24]	; (80125e4 <MIOS32_DIN_Init+0x24>)
 80125cc:	2000      	movs	r0, #0
 80125ce:	54c8      	strb	r0, [r1, r3]
 80125d0:	3301      	adds	r3, #1
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 80125d2:	2b10      	cmp	r3, #16
 80125d4:	d1f6      	bne.n	80125c4 <MIOS32_DIN_Init+0x4>
 80125d6:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80125d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    mios32_srio_din[i] = 0xff; // passive state
    mios32_srio_din_changed[i] = 0;
  }

  return 0;
}
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	20003bdc 	.word	0x20003bdc
 80125e4:	20003bac 	.word	0x20003bac

080125e8 <MIOS32_DIN_SRChangedGetAndClear>:
//! \param[in] mask pin mask (8bit value)
//! \return 8bit value which contains the selected (masked) change flags
//! \return no error status (-1)! - if unavailable SR selected, 0x00 will be returned
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_DIN_SRChangedGetAndClear(u32 sr, u8 mask)
{
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	4604      	mov	r4, r0
 80125ec:	460d      	mov	r5, r1
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 80125ee:	f7ff ff9b 	bl	8012528 <MIOS32_SRIO_ScanNumGet>
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
 80125f2:	4284      	cmp	r4, r0
 80125f4:	d20b      	bcs.n	801260e <MIOS32_DIN_SRChangedGetAndClear+0x26>
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
 80125f6:	f001 ffdd 	bl	80145b4 <MIOS32_IRQ_Disable>
  changed = mios32_srio_din_changed[sr] & mask;
 80125fa:	4b06      	ldr	r3, [pc, #24]	; (8012614 <MIOS32_DIN_SRChangedGetAndClear+0x2c>)
 80125fc:	5d1e      	ldrb	r6, [r3, r4]
  mios32_srio_din_changed[sr] &= ~mask;
 80125fe:	5d1a      	ldrb	r2, [r3, r4]
  if( sr >= num_sr )
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
  changed = mios32_srio_din_changed[sr] & mask;
 8012600:	402e      	ands	r6, r5
  mios32_srio_din_changed[sr] &= ~mask;
 8012602:	ea22 0505 	bic.w	r5, r2, r5
 8012606:	551d      	strb	r5, [r3, r4]
  MIOS32_IRQ_Enable();
 8012608:	f001 ffe8 	bl	80145dc <MIOS32_IRQ_Enable>

  return changed;
 801260c:	e000      	b.n	8012610 <MIOS32_DIN_SRChangedGetAndClear+0x28>
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
    return 0x00;
 801260e:	2600      	movs	r6, #0
  changed = mios32_srio_din_changed[sr] & mask;
  mios32_srio_din_changed[sr] &= ~mask;
  MIOS32_IRQ_Enable();

  return changed;
}
 8012610:	4630      	mov	r0, r6
 8012612:	bd70      	pop	{r4, r5, r6, pc}
 8012614:	20003bac 	.word	0x20003bac

08012618 <MIOS32_DIN_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
{
 8012618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801261c:	4607      	mov	r7, r0
  s32 sr;
  s32 sr_pin;
  u8 changed;
  void (*callback)(u32 pin, u32 value) = _callback;
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 801261e:	f7ff ff83 	bl	8012528 <MIOS32_SRIO_ScanNumGet>
  // no SRIOs?
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
 8012622:	4606      	mov	r6, r0
 8012624:	b320      	cbz	r0, 8012670 <MIOS32_DIN_Handler+0x58>
    return -1;

  // no callback function?
  if( _callback == NULL )
 8012626:	b31f      	cbz	r7, 8012670 <MIOS32_DIN_Handler+0x58>
 8012628:	2400      	movs	r4, #0
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 801262a:	42b4      	cmp	r4, r6
 801262c:	da1d      	bge.n	801266a <MIOS32_DIN_Handler+0x52>
    
    // check if there are pin changes (mask all pins)
    changed = MIOS32_DIN_SRChangedGetAndClear(sr, 0xff);
 801262e:	4620      	mov	r0, r4
 8012630:	21ff      	movs	r1, #255	; 0xff
 8012632:	f7ff ffd9 	bl	80125e8 <MIOS32_DIN_SRChangedGetAndClear>

    // any pin change at this SR?
    if( !changed )
 8012636:	4680      	mov	r8, r0
 8012638:	b908      	cbnz	r0, 801263e <MIOS32_DIN_Handler+0x26>
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 801263a:	3401      	adds	r4, #1
 801263c:	e7f5      	b.n	801262a <MIOS32_DIN_Handler+0x12>
//!   void DIN_NotifyToggle(u32 pin, u32 value)
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
 801263e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8012642:	2500      	movs	r5, #0
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
      if( changed & (1 << sr_pin) ) {
 8012644:	fa48 f305 	asr.w	r3, r8, r5
 8012648:	07db      	lsls	r3, r3, #31
 801264a:	d50a      	bpl.n	8012662 <MIOS32_DIN_Handler+0x4a>
	// call the notification function
	callback(8*sr+sr_pin, (mios32_srio_din[sr] & (1 << sr_pin)) ? 1 : 0);
 801264c:	480a      	ldr	r0, [pc, #40]	; (8012678 <MIOS32_DIN_Handler+0x60>)
 801264e:	5d01      	ldrb	r1, [r0, r4]
 8012650:	fa41 f105 	asr.w	r1, r1, r5
 8012654:	eb05 0009 	add.w	r0, r5, r9
 8012658:	f001 0101 	and.w	r1, r1, #1
 801265c:	47b8      	blx	r7

	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
 801265e:	f7ff ff69 	bl	8012534 <MIOS32_SRIO_DebounceStart>
    // any pin change at this SR?
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
 8012662:	3501      	adds	r5, #1
 8012664:	2d08      	cmp	r5, #8
 8012666:	d1ed      	bne.n	8012644 <MIOS32_DIN_Handler+0x2c>
 8012668:	e7e7      	b.n	801263a <MIOS32_DIN_Handler+0x22>
	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
 801266a:	2000      	movs	r0, #0
 801266c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
    return -1;
 8012670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
}
 8012674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012678:	20003bdc 	.word	0x20003bdc

0801267c <MIOS32_DOUT_Init>:
s32 MIOS32_DOUT_Init(u32 mode)
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
 801267c:	b938      	cbnz	r0, 801268e <MIOS32_DOUT_Init+0x12>
 801267e:	4603      	mov	r3, r0

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES < 2
    mios32_srio_dout[0][i] = 0;
 8012680:	4a04      	ldr	r2, [pc, #16]	; (8012694 <MIOS32_DOUT_Init+0x18>)
 8012682:	2000      	movs	r0, #0
 8012684:	54d0      	strb	r0, [r2, r3]
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 8012686:	3301      	adds	r3, #1
 8012688:	2b10      	cmp	r3, #16
 801268a:	d1f9      	bne.n	8012680 <MIOS32_DOUT_Init+0x4>
 801268c:	4770      	bx	lr
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 801268e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      mios32_srio_dout[j][i] = 0;
#endif
  }

  return 0;
}
 8012692:	4770      	bx	lr
 8012694:	20003bbc 	.word	0x20003bbc

08012698 <MIOS32_ENC_Init>:
s32 MIOS32_ENC_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 8012698:	bb60      	cbnz	r0, 80126f4 <MIOS32_ENC_Init+0x5c>
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 801269a:	4b18      	ldr	r3, [pc, #96]	; (80126fc <MIOS32_ENC_Init+0x64>)

    enc_state[i].state = 0xf; // all pins released
 801269c:	4918      	ldr	r1, [pc, #96]	; (8012700 <MIOS32_ENC_Init+0x68>)
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 801269e:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 80126a2:	f36f 0207 	bfc	r2, #0, #8
 80126a6:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]

    enc_state[i].state = 0xf; // all pins released
 80126aa:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
    enc_state[i].decinc = 0;
 80126ae:	f043 020f 	orr.w	r2, r3, #15
 80126b2:	f36f 1204 	bfc	r2, #4, #1
 80126b6:	f801 2030 	strb.w	r2, [r1, r0, lsl #3]
    enc_state[i].incrementer = 0;
 80126ba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80126be:	3001      	adds	r0, #1
 80126c0:	784b      	ldrb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
 80126c2:	788a      	ldrb	r2, [r1, #2]
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
 80126c4:	f36f 0307 	bfc	r3, #0, #8
 80126c8:	704b      	strb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
 80126ca:	78cb      	ldrb	r3, [r1, #3]
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
 80126cc:	f36f 0207 	bfc	r2, #0, #8
 80126d0:	708a      	strb	r2, [r1, #2]
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80126d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80126d6:	f36f 1207 	bfc	r2, #4, #4
    enc_state[i].prev_acc = 0;
 80126da:	790b      	ldrb	r3, [r1, #4]
    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80126dc:	70ca      	strb	r2, [r1, #3]
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
 80126de:	794a      	ldrb	r2, [r1, #5]
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 80126e0:	f36f 0307 	bfc	r3, #0, #8
    enc_state[i].predivider = 0;
 80126e4:	f36f 0203 	bfc	r2, #0, #4
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 80126e8:	2840      	cmp	r0, #64	; 0x40
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 80126ea:	710b      	strb	r3, [r1, #4]
    enc_state[i].predivider = 0;
 80126ec:	714a      	strb	r2, [r1, #5]
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 80126ee:	d1d4      	bne.n	801269a <MIOS32_ENC_Init+0x2>
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
 80126f0:	2000      	movs	r0, #0
 80126f2:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80126f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
}
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	20003bf0 	.word	0x20003bf0
 8012700:	20003cf0 	.word	0x20003cf0

08012704 <MIOS32_ENC_UpdateStates>:
/////////////////////////////////////////////////////////////////////////////
//! This function has to be called after a SRIO scan to update encoder states
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_UpdateStates(void)
{
 8012704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012708:	2700      	movs	r7, #0
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 801270a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 801296c <MIOS32_ENC_UpdateStates+0x268>

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 801270e:	f819 3027 	ldrb.w	r3, [r9, r7, lsl #2]
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 8012712:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8012716:	eb0b 0809 	add.w	r8, fp, r9

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 8118 	beq.w	8012950 <MIOS32_ENC_UpdateStates+0x24c>
      continue;

    enc_state_t *enc_state_ptr = &enc_state[enc];
 8012720:	4d8f      	ldr	r5, [pc, #572]	; (8012960 <MIOS32_ENC_UpdateStates+0x25c>)
 8012722:	00fe      	lsls	r6, r7, #3
 8012724:	1974      	adds	r4, r6, r5

    // decrement accelerator until it is zero (used to determine rotation speed)
    if( enc_state_ptr->accelerator )
 8012726:	78a0      	ldrb	r0, [r4, #2]
 8012728:	b108      	cbz	r0, 801272e <MIOS32_ENC_UpdateStates+0x2a>
      --enc_state_ptr->accelerator;
 801272a:	1e41      	subs	r1, r0, #1
 801272c:	70a1      	strb	r1, [r4, #2]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
 801272e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012732:	b392      	cbz	r2, 801279a <MIOS32_ENC_UpdateStates+0x96>
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
      u8 pos = enc_config_ptr->cfg.pos;
 8012734:	f898 3001 	ldrb.w	r3, [r8, #1]
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
 8012738:	f816 c005 	ldrb.w	ip, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 801273c:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
      u8 pos = enc_config_ptr->cfg.pos;
 8012740:	095a      	lsrs	r2, r3, #5
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
 8012742:	2003      	movs	r0, #3
 8012744:	f002 0306 	and.w	r3, r2, #6
 8012748:	fa00 f003 	lsl.w	r0, r0, r3
 801274c:	b2c1      	uxtb	r1, r0
      enc_state_ptr->last12 = enc_state_ptr->act12;
 801274e:	4660      	mov	r0, ip
 8012750:	f36c 0083 	bfi	r0, ip, #2, #2
 8012754:	5570      	strb	r0, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 8012756:	fa5f fa8a 	uxtb.w	sl, sl
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
 801275a:	4882      	ldr	r0, [pc, #520]	; (8012964 <MIOS32_ENC_UpdateStates+0x260>)
 801275c:	f810 000a 	ldrb.w	r0, [r0, sl]
 8012760:	4201      	tst	r1, r0
 8012762:	d01a      	beq.n	801279a <MIOS32_ENC_UpdateStates+0x96>
 8012764:	4650      	mov	r0, sl
 8012766:	9201      	str	r2, [sp, #4]
 8012768:	9300      	str	r3, [sp, #0]
 801276a:	f7ff ff3d 	bl	80125e8 <MIOS32_DIN_SRChangedGetAndClear>
 801276e:	9a01      	ldr	r2, [sp, #4]
 8012770:	9b00      	ldr	r3, [sp, #0]
 8012772:	b190      	cbz	r0, 801279a <MIOS32_ENC_UpdateStates+0x96>
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 8012774:	497c      	ldr	r1, [pc, #496]	; (8012968 <MIOS32_ENC_UpdateStates+0x264>)
 8012776:	f811 000a 	ldrb.w	r0, [r1, sl]
 801277a:	fa40 f303 	asr.w	r3, r0, r3
 801277e:	f003 0103 	and.w	r1, r3, #3
	if( pos & 1 ) { // swap pins?
 8012782:	07d2      	lsls	r2, r2, #31
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 8012784:	b2cb      	uxtb	r3, r1
	if( pos & 1 ) { // swap pins?
 8012786:	d504      	bpl.n	8012792 <MIOS32_ENC_UpdateStates+0x8e>
	  state = ((state << 1) & 2) | (state >> 1);
 8012788:	004a      	lsls	r2, r1, #1
 801278a:	f002 0002 	and.w	r0, r2, #2
 801278e:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
	}
	enc_state_ptr->act12 = state;
 8012792:	5da9      	ldrb	r1, [r5, r6]
 8012794:	f363 0101 	bfi	r1, r3, #0, #2
 8012798:	5571      	strb	r1, [r6, r5]
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
 801279a:	5d70      	ldrb	r0, [r6, r5]
 801279c:	f3c0 0281 	ubfx	r2, r0, #2, #2
 80127a0:	f000 0303 	and.w	r3, r0, #3
 80127a4:	429a      	cmp	r2, r3
 80127a6:	f000 80d3 	beq.w	8012950 <MIOS32_ENC_UpdateStates+0x24c>
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 80127aa:	f000 010f 	and.w	r1, r0, #15
 80127ae:	2901      	cmp	r1, #1
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
      mios32_enc_type_t enc_type = enc_config_ptr->cfg.type;
 80127b0:	f81b 3009 	ldrb.w	r3, [fp, r9]
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 80127b4:	d102      	bne.n	80127bc <MIOS32_ENC_UpdateStates+0xb8>
 80127b6:	f013 0f10 	tst.w	r3, #16
 80127ba:	e00d      	b.n	80127d8 <MIOS32_ENC_UpdateStates+0xd4>
 80127bc:	2907      	cmp	r1, #7
 80127be:	d102      	bne.n	80127c6 <MIOS32_ENC_UpdateStates+0xc2>
	  (enc_state_ptr->state == 0x07 && (enc_type & (1 << 5))) ||
 80127c0:	f013 0f20 	tst.w	r3, #32
 80127c4:	e008      	b.n	80127d8 <MIOS32_ENC_UpdateStates+0xd4>
 80127c6:	290e      	cmp	r1, #14
 80127c8:	d102      	bne.n	80127d0 <MIOS32_ENC_UpdateStates+0xcc>
	  (enc_state_ptr->state == 0x0e && (enc_type & (1 << 6))) ||
 80127ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80127ce:	e003      	b.n	80127d8 <MIOS32_ENC_UpdateStates+0xd4>
 80127d0:	2908      	cmp	r1, #8
 80127d2:	d158      	bne.n	8012886 <MIOS32_ENC_UpdateStates+0x182>
	  (enc_state_ptr->state == 0x08 && (enc_type & (1 << 7))) ) {
 80127d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80127d8:	f000 80ba 	beq.w	8012950 <MIOS32_ENC_UpdateStates+0x24c>
	// DEC
	// plausibility check: when accelerator > 0xe0, exit if last event was a INC.
	// if non-detented encoder: only do anything if the state has actually changed
	if( (enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) && 
 80127dc:	f000 0010 	and.w	r0, r0, #16
 80127e0:	b2c2      	uxtb	r2, r0
 80127e2:	b91a      	cbnz	r2, 80127ec <MIOS32_ENC_UpdateStates+0xe8>
 80127e4:	78a1      	ldrb	r1, [r4, #2]
 80127e6:	29e0      	cmp	r1, #224	; 0xe0
 80127e8:	f200 80b2 	bhi.w	8012950 <MIOS32_ENC_UpdateStates+0x24c>
 80127ec:	2bff      	cmp	r3, #255	; 0xff
 80127ee:	d108      	bne.n	8012802 <MIOS32_ENC_UpdateStates+0xfe>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_dec) ) {
 80127f0:	5d70      	ldrb	r0, [r6, r5]
 80127f2:	78e3      	ldrb	r3, [r4, #3]
 80127f4:	f000 020f 	and.w	r2, r0, #15
 80127f8:	f003 010f 	and.w	r1, r3, #15
 80127fc:	428a      	cmp	r2, r1
 80127fe:	f000 80a7 	beq.w	8012950 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize DEC
	  enc_state_ptr->decinc = 1;
 8012802:	5d70      	ldrb	r0, [r6, r5]
 8012804:	f040 0310 	orr.w	r3, r0, #16
 8012808:	5573      	strb	r3, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 801280a:	7921      	ldrb	r1, [r4, #4]
 801280c:	78a2      	ldrb	r2, [r4, #2]
 801280e:	1a50      	subs	r0, r2, r1
 8012810:	2814      	cmp	r0, #20
 8012812:	dd01      	ble.n	8012818 <MIOS32_ENC_UpdateStates+0x114>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 8012814:	3114      	adds	r1, #20
 8012816:	70a1      	strb	r1, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 8012818:	f898 3001 	ldrb.w	r3, [r8, #1]
 801281c:	f013 0103 	ands.w	r1, r3, #3
 8012820:	d015      	beq.n	801284e <MIOS32_ENC_UpdateStates+0x14a>
 8012822:	2902      	cmp	r1, #2
 8012824:	d123      	bne.n	801286e <MIOS32_ENC_UpdateStates+0x16a>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8012826:	78a1      	ldrb	r1, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 8012828:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801282c:	f1c3 0007 	rsb	r0, r3, #7
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8012830:	f001 02c0 	and.w	r2, r1, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 8012834:	fa32 f100 	lsrs.w	r1, r2, r0
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8012838:	f994 2001 	ldrsb.w	r2, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 801283c:	bf08      	it	eq
 801283e:	2101      	moveq	r1, #1
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8012840:	1a50      	subs	r0, r2, r1
	    if( new_incrementer < -70 ) // avoid overrun
	      new_incrementer = -70;
	    enc_state_ptr->incrementer = new_incrementer;
 8012842:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8012846:	4298      	cmp	r0, r3
 8012848:	bfb8      	it	lt
 801284a:	4618      	movlt	r0, r3
 801284c:	e011      	b.n	8012872 <MIOS32_ENC_UpdateStates+0x16e>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider - (enc_config_ptr->cfg.speed_par+1);
 801284e:	7960      	ldrb	r0, [r4, #5]
 8012850:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8012854:	f000 010f 	and.w	r1, r0, #15
 8012858:	43d3      	mvns	r3, r2
	    // increment on 4bit underrun
	    if( predivider < 0 )
 801285a:	18c8      	adds	r0, r1, r3
 801285c:	d502      	bpl.n	8012864 <MIOS32_ENC_UpdateStates+0x160>
	      --enc_state_ptr->incrementer;
 801285e:	7861      	ldrb	r1, [r4, #1]
 8012860:	1e4a      	subs	r2, r1, #1
 8012862:	7062      	strb	r2, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 8012864:	7963      	ldrb	r3, [r4, #5]
 8012866:	f360 0303 	bfi	r3, r0, #0, #4
 801286a:	7163      	strb	r3, [r4, #5]
	    break;
 801286c:	e002      	b.n	8012874 <MIOS32_ENC_UpdateStates+0x170>

	  default: // NORMAL
	    --enc_state_ptr->incrementer;
 801286e:	7862      	ldrb	r2, [r4, #1]
 8012870:	1e50      	subs	r0, r2, #1
 8012872:	7060      	strb	r0, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8012874:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 8012876:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    --enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8012878:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 801287a:	21ff      	movs	r1, #255	; 0xff
 801287c:	70a1      	strb	r1, [r4, #2]

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 801287e:	5d72      	ldrb	r2, [r6, r5]
 8012880:	f362 0303 	bfi	r3, r2, #0, #4
 8012884:	e063      	b.n	801294e <MIOS32_ENC_UpdateStates+0x24a>
	}
      } else if( (enc_state_ptr->state == 0x02 && (enc_type & (1 << 0))) ||
 8012886:	2902      	cmp	r1, #2
 8012888:	d102      	bne.n	8012890 <MIOS32_ENC_UpdateStates+0x18c>
 801288a:	f013 0f01 	tst.w	r3, #1
 801288e:	e00d      	b.n	80128ac <MIOS32_ENC_UpdateStates+0x1a8>
 8012890:	290b      	cmp	r1, #11
 8012892:	d102      	bne.n	801289a <MIOS32_ENC_UpdateStates+0x196>
		 (enc_state_ptr->state == 0x0b && (enc_type & (1 << 1))) ||
 8012894:	f013 0f02 	tst.w	r3, #2
 8012898:	e008      	b.n	80128ac <MIOS32_ENC_UpdateStates+0x1a8>
 801289a:	290d      	cmp	r1, #13
 801289c:	d102      	bne.n	80128a4 <MIOS32_ENC_UpdateStates+0x1a0>
		 (enc_state_ptr->state == 0x0d && (enc_type & (1 << 2))) ||
 801289e:	f013 0f04 	tst.w	r3, #4
 80128a2:	e003      	b.n	80128ac <MIOS32_ENC_UpdateStates+0x1a8>
 80128a4:	2904      	cmp	r1, #4
 80128a6:	d153      	bne.n	8012950 <MIOS32_ENC_UpdateStates+0x24c>
		 (enc_state_ptr->state == 0x04 && (enc_type & (1 << 3))) ) {
 80128a8:	f013 0f08 	tst.w	r3, #8
 80128ac:	d050      	beq.n	8012950 <MIOS32_ENC_UpdateStates+0x24c>
	// INC
	// plausibility check: when accelerator > 0xe0, exit if last event was a DEC
	// if non-detented encoder: only do anything if the state has actually changed
	if( (!enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) &&
 80128ae:	f000 0010 	and.w	r0, r0, #16
 80128b2:	b2c2      	uxtb	r2, r0
 80128b4:	b112      	cbz	r2, 80128bc <MIOS32_ENC_UpdateStates+0x1b8>
 80128b6:	78a1      	ldrb	r1, [r4, #2]
 80128b8:	29e0      	cmp	r1, #224	; 0xe0
 80128ba:	d849      	bhi.n	8012950 <MIOS32_ENC_UpdateStates+0x24c>
 80128bc:	2bff      	cmp	r3, #255	; 0xff
 80128be:	d106      	bne.n	80128ce <MIOS32_ENC_UpdateStates+0x1ca>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_inc) ) {
 80128c0:	5d73      	ldrb	r3, [r6, r5]
 80128c2:	78e0      	ldrb	r0, [r4, #3]
 80128c4:	f003 020f 	and.w	r2, r3, #15
 80128c8:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 80128cc:	d040      	beq.n	8012950 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize INC
	  enc_state_ptr->decinc = 0;
 80128ce:	5da9      	ldrb	r1, [r5, r6]
 80128d0:	f36f 1104 	bfc	r1, #4, #1
 80128d4:	5571      	strb	r1, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 80128d6:	7923      	ldrb	r3, [r4, #4]
 80128d8:	78a0      	ldrb	r0, [r4, #2]
 80128da:	1ac2      	subs	r2, r0, r3
 80128dc:	2a14      	cmp	r2, #20
 80128de:	dd01      	ble.n	80128e4 <MIOS32_ENC_UpdateStates+0x1e0>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 80128e0:	3314      	adds	r3, #20
 80128e2:	70a3      	strb	r3, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 80128e4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80128e8:	f011 0303 	ands.w	r3, r1, #3
 80128ec:	d013      	beq.n	8012916 <MIOS32_ENC_UpdateStates+0x212>
 80128ee:	2b02      	cmp	r3, #2
 80128f0:	d122      	bne.n	8012938 <MIOS32_ENC_UpdateStates+0x234>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 80128f2:	78a3      	ldrb	r3, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 80128f4:	f3c1 0182 	ubfx	r1, r1, #2, #3
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 80128f8:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 80128fc:	f1c1 0207 	rsb	r2, r1, #7
	      acc = 1;
 8012900:	fa30 f302 	lsrs.w	r3, r0, r2
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 8012904:	f994 0001 	ldrsb.w	r0, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 8012908:	bf08      	it	eq
 801290a:	2301      	moveq	r3, #1
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 801290c:	18c2      	adds	r2, r0, r3
	    if( new_incrementer > 70 ) // avoid overrun
	      new_incrementer = 70;
	    enc_state_ptr->incrementer = new_incrementer;
 801290e:	2a46      	cmp	r2, #70	; 0x46
 8012910:	bfa8      	it	ge
 8012912:	2246      	movge	r2, #70	; 0x46
 8012914:	e012      	b.n	801293c <MIOS32_ENC_UpdateStates+0x238>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider + (enc_config_ptr->cfg.speed_par+1);
 8012916:	7962      	ldrb	r2, [r4, #5]
 8012918:	f3c1 0182 	ubfx	r1, r1, #2, #3
 801291c:	1c4b      	adds	r3, r1, #1
 801291e:	f002 000f 	and.w	r0, r2, #15
 8012922:	18c0      	adds	r0, r0, r3
	    // increment on 4bit overrun
	    if( predivider >= 16 )
 8012924:	280f      	cmp	r0, #15
 8012926:	dd02      	ble.n	801292e <MIOS32_ENC_UpdateStates+0x22a>
	      ++enc_state_ptr->incrementer;
 8012928:	7862      	ldrb	r2, [r4, #1]
 801292a:	1c51      	adds	r1, r2, #1
 801292c:	7061      	strb	r1, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 801292e:	7963      	ldrb	r3, [r4, #5]
 8012930:	f360 0303 	bfi	r3, r0, #0, #4
 8012934:	7163      	strb	r3, [r4, #5]
	    break;
 8012936:	e002      	b.n	801293e <MIOS32_ENC_UpdateStates+0x23a>

	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
 8012938:	7860      	ldrb	r0, [r4, #1]
 801293a:	1c42      	adds	r2, r0, #1
 801293c:	7062      	strb	r2, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 801293e:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8012940:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8012942:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 8012944:	22ff      	movs	r2, #255	; 0xff
 8012946:	70a2      	strb	r2, [r4, #2]

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8012948:	5d71      	ldrb	r1, [r6, r5]
 801294a:	f361 1307 	bfi	r3, r1, #4, #4
 801294e:	70e3      	strb	r3, [r4, #3]
 8012950:	3701      	adds	r7, #1
{
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 8012952:	2f40      	cmp	r7, #64	; 0x40
 8012954:	f47f aed9 	bne.w	801270a <MIOS32_ENC_UpdateStates+0x6>
	}
      }
    }
  }
  return 0; // no error
}
 8012958:	2000      	movs	r0, #0
 801295a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801295e:	bf00      	nop
 8012960:	20003cf0 	.word	0x20003cf0
 8012964:	20003bac 	.word	0x20003bac
 8012968:	20003bdc 	.word	0x20003bdc
 801296c:	20003bf0 	.word	0x20003bf0

08012970 <MIOS32_ENC_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_Handler(void *_callback)
{
 8012970:	b570      	push	{r4, r5, r6, lr}
  u8 enc;
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
 8012972:	4606      	mov	r6, r0
 8012974:	b1c0      	cbz	r0, 80129a8 <MIOS32_ENC_Handler+0x38>
 8012976:	2400      	movs	r4, #0

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {

    // following check/modify operation must be atomic
    MIOS32_IRQ_Disable();
 8012978:	f001 fe1c 	bl	80145b4 <MIOS32_IRQ_Disable>
    if( (incrementer = enc_state[enc].incrementer) ) {
 801297c:	4b0c      	ldr	r3, [pc, #48]	; (80129b0 <MIOS32_ENC_Handler+0x40>)
 801297e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8012982:	7845      	ldrb	r5, [r0, #1]
 8012984:	b14d      	cbz	r5, 801299a <MIOS32_ENC_Handler+0x2a>
      enc_state[enc].incrementer = 0;
 8012986:	462a      	mov	r2, r5
 8012988:	f36f 0207 	bfc	r2, #0, #8
 801298c:	7042      	strb	r2, [r0, #1]
      MIOS32_IRQ_Enable();
 801298e:	f001 fe25 	bl	80145dc <MIOS32_IRQ_Enable>

      // call the hook
      callback(enc, incrementer);
 8012992:	4620      	mov	r0, r4
 8012994:	b269      	sxtb	r1, r5
 8012996:	47b0      	blx	r6
 8012998:	e001      	b.n	801299e <MIOS32_ENC_Handler+0x2e>
    } else {
      MIOS32_IRQ_Enable();
 801299a:	f001 fe1f 	bl	80145dc <MIOS32_IRQ_Enable>
 801299e:	3401      	adds	r4, #1
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 80129a0:	2c40      	cmp	r4, #64	; 0x40
 80129a2:	d1e9      	bne.n	8012978 <MIOS32_ENC_Handler+0x8>
    } else {
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
 80129a4:	2000      	movs	r0, #0
 80129a6:	bd70      	pop	{r4, r5, r6, pc}
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
    return -1;
 80129a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
}
 80129ac:	bd70      	pop	{r4, r5, r6, pc}
 80129ae:	bf00      	nop
 80129b0:	20003cf0 	.word	0x20003cf0

080129b4 <MIOS32_LCD_ParametersFetchFromBslInfoRange>:
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 80129b4:	4a10      	ldr	r2, [pc, #64]	; (80129f8 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x44>)
 80129b6:	4b11      	ldr	r3, [pc, #68]	; (80129fc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
 80129b8:	6811      	ldr	r1, [r2, #0]
 80129ba:	6850      	ldr	r0, [r2, #4]
 80129bc:	8912      	ldrh	r2, [r2, #8]
 80129be:	6019      	str	r1, [r3, #0]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 80129c0:	490f      	ldr	r1, [pc, #60]	; (8012a00 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x4c>)
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 80129c2:	6058      	str	r0, [r3, #4]
 80129c4:	811a      	strh	r2, [r3, #8]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 80129c6:	7808      	ldrb	r0, [r1, #0]
 80129c8:	2842      	cmp	r0, #66	; 0x42
 80129ca:	d113      	bne.n	80129f4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x40>
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 80129cc:	4a0d      	ldr	r2, [pc, #52]	; (8012a04 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x50>)
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80129ce:	480e      	ldr	r0, [pc, #56]	; (8012a08 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x54>)
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 80129d0:	7811      	ldrb	r1, [r2, #0]
 80129d2:	7019      	strb	r1, [r3, #0]
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80129d4:	7802      	ldrb	r2, [r0, #0]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80129d6:	490d      	ldr	r1, [pc, #52]	; (8012a0c <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x58>)
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80129d8:	705a      	strb	r2, [r3, #1]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80129da:	7808      	ldrb	r0, [r1, #0]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 80129dc:	4a0c      	ldr	r2, [pc, #48]	; (8012a10 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x5c>)
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80129de:	7098      	strb	r0, [r3, #2]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 80129e0:	7811      	ldrb	r1, [r2, #0]
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 80129e2:	4a06      	ldr	r2, [pc, #24]	; (80129fc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
 80129e4:	29ff      	cmp	r1, #255	; 0xff
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
 80129e6:	bf08      	it	eq
 80129e8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80129ec:	8099      	strh	r1, [r3, #4]
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 80129ee:	4b09      	ldr	r3, [pc, #36]	; (8012a14 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x60>)
 80129f0:	7818      	ldrb	r0, [r3, #0]
 80129f2:	80d0      	strh	r0, [r2, #6]
  }
#endif

  return 0; // no error
}
 80129f4:	2000      	movs	r0, #0
 80129f6:	4770      	bx	lr
 80129f8:	0801f5c6 	.word	0x0801f5c6
 80129fc:	20003ef2 	.word	0x20003ef2
 8012a00:	08003fc0 	.word	0x08003fc0
 8012a04:	08003fc1 	.word	0x08003fc1
 8012a08:	08003fc2 	.word	0x08003fc2
 8012a0c:	08003fc3 	.word	0x08003fc3
 8012a10:	08003fc4 	.word	0x08003fc4
 8012a14:	08003fc5 	.word	0x08003fc5

08012a18 <MIOS32_LCD_TypeIsGLCD>:
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 8012a18:	4b02      	ldr	r3, [pc, #8]	; (8012a24 <MIOS32_LCD_TypeIsGLCD+0xc>)
 8012a1a:	f993 0000 	ldrsb.w	r0, [r3]
}
 8012a1e:	0fc0      	lsrs	r0, r0, #31
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop
 8012a24:	20003ef2 	.word	0x20003ef2

08012a28 <MIOS32_LCD_DeviceSet>:
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8012a28:	4b01      	ldr	r3, [pc, #4]	; (8012a30 <MIOS32_LCD_DeviceSet+0x8>)
 8012a2a:	7018      	strb	r0, [r3, #0]

  return 0; // no error
}
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	4770      	bx	lr
 8012a30:	20000bf8 	.word	0x20000bf8

08012a34 <MIOS32_LCD_CursorSet>:
//! \param[in] column number
//! \param[in] line number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
 8012a34:	b510      	push	{r4, lr}
  // set character position
  mios32_lcd_column = column;
 8012a36:	4b0b      	ldr	r3, [pc, #44]	; (8012a64 <MIOS32_LCD_CursorSet+0x30>)
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8012a38:	4c0b      	ldr	r4, [pc, #44]	; (8012a68 <MIOS32_LCD_CursorSet+0x34>)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
 8012a3a:	8018      	strh	r0, [r3, #0]
  mios32_lcd_line = line;
 8012a3c:	4a0b      	ldr	r2, [pc, #44]	; (8012a6c <MIOS32_LCD_CursorSet+0x38>)

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8012a3e:	88a3      	ldrh	r3, [r4, #4]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;
 8012a40:	8011      	strh	r1, [r2, #0]

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8012a42:	b113      	cbz	r3, 8012a4a <MIOS32_LCD_CursorSet+0x16>
    font_width = font_bitmap.width;
 8012a44:	b2da      	uxtb	r2, r3
    font_height = font_bitmap.height;
 8012a46:	79a3      	ldrb	r3, [r4, #6]
 8012a48:	e001      	b.n	8012a4e <MIOS32_LCD_CursorSet+0x1a>
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
 8012a4a:	2308      	movs	r3, #8
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
 8012a4c:	2206      	movs	r2, #6
  if( font_bitmap.width ) {
    font_width = font_bitmap.width;
    font_height = font_bitmap.height;
  }

  mios32_lcd_x = column * font_width;
 8012a4e:	4c08      	ldr	r4, [pc, #32]	; (8012a70 <MIOS32_LCD_CursorSet+0x3c>)
 8012a50:	4342      	muls	r2, r0
 8012a52:	8022      	strh	r2, [r4, #0]
  mios32_lcd_y = line * font_height;
 8012a54:	4a07      	ldr	r2, [pc, #28]	; (8012a74 <MIOS32_LCD_CursorSet+0x40>)
 8012a56:	434b      	muls	r3, r1
 8012a58:	8013      	strh	r3, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
}
 8012a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  mios32_lcd_x = column * font_width;
  mios32_lcd_y = line * font_height;

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
 8012a5e:	f008 bfd7 	b.w	801ba10 <APP_LCD_CursorSet>
 8012a62:	bf00      	nop
 8012a64:	20003efc 	.word	0x20003efc
 8012a68:	20000bec 	.word	0x20000bec
 8012a6c:	20003f02 	.word	0x20003f02
 8012a70:	20003f04 	.word	0x20003f04
 8012a74:	20003ef0 	.word	0x20003ef0

08012a78 <MIOS32_LCD_GCursorSet>:
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 8012a78:	4b02      	ldr	r3, [pc, #8]	; (8012a84 <MIOS32_LCD_GCursorSet+0xc>)
  mios32_lcd_y = y;
 8012a7a:	4a03      	ldr	r2, [pc, #12]	; (8012a88 <MIOS32_LCD_GCursorSet+0x10>)
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 8012a7c:	8018      	strh	r0, [r3, #0]
  mios32_lcd_y = y;
 8012a7e:	8011      	strh	r1, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_GCursorSet(x, y);
 8012a80:	f008 bf5c 	b.w	801b93c <APP_LCD_GCursorSet>
 8012a84:	20003f04 	.word	0x20003f04
 8012a88:	20003ef0 	.word	0x20003ef0

08012a8c <MIOS32_LCD_CursorMapSet>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 8012a8c:	2300      	movs	r3, #0
    mios32_lcd_cursor_map[i] = map_table[i];
 8012a8e:	5cc1      	ldrb	r1, [r0, r3]
 8012a90:	4a03      	ldr	r2, [pc, #12]	; (8012aa0 <MIOS32_LCD_CursorMapSet+0x14>)
 8012a92:	5499      	strb	r1, [r3, r2]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 8012a94:	3301      	adds	r3, #1
 8012a96:	2b04      	cmp	r3, #4
 8012a98:	d1f9      	bne.n	8012a8e <MIOS32_LCD_CursorMapSet+0x2>
    mios32_lcd_cursor_map[i] = map_table[i];

  return 0; // no error
}
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	20003efe 	.word	0x20003efe

08012aa4 <MIOS32_LCD_FontInit>:
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 8012aa4:	7882      	ldrb	r2, [r0, #2]
 8012aa6:	4b07      	ldr	r3, [pc, #28]	; (8012ac4 <MIOS32_LCD_FontInit+0x20>)
 8012aa8:	1d11      	adds	r1, r2, #4
 8012aaa:	1842      	adds	r2, r0, r1
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 8012aac:	7801      	ldrb	r1, [r0, #0]
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 8012aae:	601a      	str	r2, [r3, #0]
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 8012ab0:	7842      	ldrb	r2, [r0, #1]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8012ab2:	78c0      	ldrb	r0, [r0, #3]
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 8012ab4:	8099      	strh	r1, [r3, #4]
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 8012ab6:	2101      	movs	r1, #1
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8012ab8:	8118      	strh	r0, [r3, #8]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 8012aba:	80da      	strh	r2, [r3, #6]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 8012abc:	7299      	strb	r1, [r3, #10]

  return 0; // no error
}
 8012abe:	2000      	movs	r0, #0
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	20000bec 	.word	0x20000bec

08012ac8 <MIOS32_LCD_Clear>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Clear(void)
{
  // -> forward to app_lcd
  return APP_LCD_Clear();
 8012ac8:	f008 be94 	b.w	801b7f4 <APP_LCD_Clear>

08012acc <MIOS32_LCD_Init>:
//! Initializes LCD driver
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Init(u32 mode)
{
 8012acc:	b513      	push	{r0, r1, r4, lr}
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
 8012ace:	4604      	mov	r4, r0
 8012ad0:	b9f0      	cbnz	r0, 8012b10 <MIOS32_LCD_Init+0x44>
    return -1; // unsupported mode

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();
 8012ad2:	f7ff ff6f 	bl	80129b4 <MIOS32_LCD_ParametersFetchFromBslInfoRange>

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8012ad6:	4810      	ldr	r0, [pc, #64]	; (8012b18 <MIOS32_LCD_Init+0x4c>)

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 8012ad8:	4b10      	ldr	r3, [pc, #64]	; (8012b1c <MIOS32_LCD_Init+0x50>)

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8012ada:	6801      	ldr	r1, [r0, #0]

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 8012adc:	809c      	strh	r4, [r3, #4]

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
  MIOS32_LCD_CursorMapSet(cursor_map);
 8012ade:	a801      	add	r0, sp, #4

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8012ae0:	9101      	str	r1, [sp, #4]
  MIOS32_LCD_CursorMapSet(cursor_map);
 8012ae2:	f7ff ffd3 	bl	8012a8c <MIOS32_LCD_CursorMapSet>
  // the driver is able to modify the default cursor mapping
  // usage example: "dog" LCDs

#if !defined(MIOS32_FAMILY_EMULATION)
  // initial delay - some LCDs need this!
  MIOS32_DELAY_Wait_uS(50000);
 8012ae6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012aea:	f002 fc53 	bl	8015394 <MIOS32_DELAY_Wait_uS>
#endif

  // call application specific init function
  if( (ret=APP_LCD_Init(mode)) < 0 )
 8012aee:	4620      	mov	r0, r4
 8012af0:	f008 fcd4 	bl	801b49c <APP_LCD_Init>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	db0d      	blt.n	8012b14 <MIOS32_LCD_Init+0x48>
    return ret;

  // clear screen
  MIOS32_LCD_Clear();
 8012af8:	f7ff ffe6 	bl	8012ac8 <MIOS32_LCD_Clear>

  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
 8012afc:	4621      	mov	r1, r4
 8012afe:	4620      	mov	r0, r4
 8012b00:	f7ff ff98 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_GCursorSet(0, 0);
 8012b04:	4620      	mov	r0, r4
 8012b06:	4621      	mov	r1, r4
 8012b08:	f7ff ffb6 	bl	8012a78 <MIOS32_LCD_GCursorSet>

  return 0; // no error
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	e001      	b.n	8012b14 <MIOS32_LCD_Init+0x48>
{
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
  MIOS32_LCD_GCursorSet(0, 0);

  return 0; // no error
}
 8012b14:	bd1c      	pop	{r2, r3, r4, pc}
 8012b16:	bf00      	nop
 8012b18:	0801f52b 	.word	0x0801f52b
 8012b1c:	20000bec 	.word	0x20000bec

08012b20 <MIOS32_LCD_PrintChar>:
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 8012b20:	b530      	push	{r4, r5, lr}
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 8012b22:	4b15      	ldr	r3, [pc, #84]	; (8012b78 <MIOS32_LCD_PrintChar+0x58>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 8012b24:	f993 1000 	ldrsb.w	r1, [r3]
 8012b28:	2900      	cmp	r1, #0
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	4605      	mov	r5, r0
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 8012b2e:	da19      	bge.n	8012b64 <MIOS32_LCD_PrintChar+0x44>
    if( !font_bitmap.width )
 8012b30:	4b12      	ldr	r3, [pc, #72]	; (8012b7c <MIOS32_LCD_PrintChar+0x5c>)
 8012b32:	889a      	ldrh	r2, [r3, #4]
      return -1;    // font not initialized yet!
 8012b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
 8012b38:	b1e2      	cbz	r2, 8012b74 <MIOS32_LCD_PrintChar+0x54>
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
 8012b3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b3e:	ac01      	add	r4, sp, #4
 8012b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012b44:	88da      	ldrh	r2, [r3, #6]
 8012b46:	891b      	ldrh	r3, [r3, #8]
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
    status = APP_LCD_BitmapPrint(bitmap);
 8012b48:	f8ad 200a 	strh.w	r2, [sp, #10]
  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
 8012b4c:	08d1      	lsrs	r1, r2, #3
 8012b4e:	4359      	muls	r1, r3
 8012b50:	fb05 0001 	mla	r0, r5, r1, r0
    status = APP_LCD_BitmapPrint(bitmap);
 8012b54:	9001      	str	r0, [sp, #4]
 8012b56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012b5a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012b5e:	f008 ff83 	bl	801ba68 <APP_LCD_BitmapPrint>
 8012b62:	e001      	b.n	8012b68 <MIOS32_LCD_PrintChar+0x48>
  } else {
    status = APP_LCD_Data(c);
 8012b64:	f008 fba0 	bl	801b2a8 <APP_LCD_Data>
  }

  if( status >= 0 ) {
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	db03      	blt.n	8012b74 <MIOS32_LCD_PrintChar+0x54>
    // increment cursor
    ++mios32_lcd_column;
 8012b6c:	4b04      	ldr	r3, [pc, #16]	; (8012b80 <MIOS32_LCD_PrintChar+0x60>)
 8012b6e:	881a      	ldrh	r2, [r3, #0]
 8012b70:	1c51      	adds	r1, r2, #1
 8012b72:	8019      	strh	r1, [r3, #0]
  }

  return status;
}
 8012b74:	b005      	add	sp, #20
 8012b76:	bd30      	pop	{r4, r5, pc}
 8012b78:	20003ef2 	.word	0x20003ef2
 8012b7c:	20000bec 	.word	0x20000bec
 8012b80:	20003efc 	.word	0x20003efc

08012b84 <MIOS32_LCD_PrintString>:
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
{
 8012b84:	b538      	push	{r3, r4, r5, lr}
/////////////////////////////////////////////////////////////////////////////
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
 8012b86:	1e45      	subs	r5, r0, #1
{
  s32 status = 0;
 8012b88:	2400      	movs	r4, #0

  while( *str != '\0' )
 8012b8a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012b8e:	b118      	cbz	r0, 8012b98 <MIOS32_LCD_PrintString+0x14>
    status |= MIOS32_LCD_PrintChar(*str++);
 8012b90:	f7ff ffc6 	bl	8012b20 <MIOS32_LCD_PrintChar>
 8012b94:	4304      	orrs	r4, r0
 8012b96:	e7f8      	b.n	8012b8a <MIOS32_LCD_PrintString+0x6>

  return status;
}
 8012b98:	4620      	mov	r0, r4
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}

08012b9c <MIOS32_LCD_PrintBootMessage>:
//! The message is automatically print by the programming model after each reset.<BR>
//! It will also be returned on a SysEx query.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintBootMessage(void)
{
 8012b9c:	b538      	push	{r3, r4, r5, lr}
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8012b9e:	4b0b      	ldr	r3, [pc, #44]	; (8012bcc <MIOS32_LCD_PrintBootMessage+0x30>)
 8012ba0:	2400      	movs	r4, #0
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	4620      	mov	r0, r4
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8012ba6:	701c      	strb	r4, [r3, #0]
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8012ba8:	f7ff ff44 	bl	8012a34 <MIOS32_LCD_CursorSet>
 8012bac:	4605      	mov	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 8012bae:	4808      	ldr	r0, [pc, #32]	; (8012bd0 <MIOS32_LCD_PrintBootMessage+0x34>)
 8012bb0:	f7ff ffe8 	bl	8012b84 <MIOS32_LCD_PrintString>
  status |= MIOS32_LCD_CursorSet(0, 1);
 8012bb4:	2101      	movs	r1, #1
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 8012bb6:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_CursorSet(0, 1);
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f7ff ff3b 	bl	8012a34 <MIOS32_LCD_CursorSet>
 8012bbe:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE2);
 8012bc0:	4804      	ldr	r0, [pc, #16]	; (8012bd4 <MIOS32_LCD_PrintBootMessage+0x38>)
 8012bc2:	f7ff ffdf 	bl	8012b84 <MIOS32_LCD_PrintString>

  return status;
}
 8012bc6:	4328      	orrs	r0, r5
 8012bc8:	bd38      	pop	{r3, r4, r5, pc}
 8012bca:	bf00      	nop
 8012bcc:	20000bf8 	.word	0x20000bf8
 8012bd0:	0801e552 	.word	0x0801e552
 8012bd4:	0801f5a7 	.word	0x0801f5a7

08012bd8 <MIOS32_LCD_PrintFormattedString>:
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 8012bd8:	b40f      	push	{r0, r1, r2, r3}
 8012bda:	b500      	push	{lr}
 8012bdc:	b093      	sub	sp, #76	; 0x4c
 8012bde:	aa14      	add	r2, sp, #80	; 0x50
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
  vsprintf((char *)buffer, format, args);
 8012be0:	a802      	add	r0, sp, #8
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 8012be2:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
 8012be6:	9201      	str	r2, [sp, #4]
  vsprintf((char *)buffer, format, args);
 8012be8:	f003 fee9 	bl	80169be <vsprintf>
  return MIOS32_LCD_PrintString(buffer);
 8012bec:	a802      	add	r0, sp, #8
 8012bee:	f7ff ffc9 	bl	8012b84 <MIOS32_LCD_PrintString>
}
 8012bf2:	b013      	add	sp, #76	; 0x4c
 8012bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bf8:	b004      	add	sp, #16
 8012bfa:	4770      	bx	lr

08012bfc <MIOS32_LCD_BColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_BColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_BColourSet(rgb);
 8012bfc:	f008 bf2e 	b.w	801ba5c <APP_LCD_BColourSet>

08012c00 <MIOS32_LCD_FColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_FColourSet(rgb);
 8012c00:	f008 bf2f 	b.w	801ba62 <APP_LCD_FColourSet>

08012c04 <MIOS32_MIDI_Init>:
//! Initializes MIDI layer
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Init(u32 mode)
{
 8012c04:	b538      	push	{r3, r4, r5, lr}
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 8012c06:	4605      	mov	r5, r0
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	d145      	bne.n	8012c98 <MIOS32_MIDI_Init+0x94>
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 8012c0c:	4a24      	ldr	r2, [pc, #144]	; (8012ca0 <MIOS32_MIDI_Init+0x9c>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 8012c0e:	4925      	ldr	r1, [pc, #148]	; (8012ca4 <MIOS32_MIDI_Init+0xa0>)

  // disable callback functions
  direct_rx_callback_func = NULL;
 8012c10:	4c25      	ldr	r4, [pc, #148]	; (8012ca8 <MIOS32_MIDI_Init+0xa4>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 8012c12:	2310      	movs	r3, #16
 8012c14:	7013      	strb	r3, [r2, #0]
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 8012c16:	700b      	strb	r3, [r1, #0]

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
 8012c18:	4b24      	ldr	r3, [pc, #144]	; (8012cac <MIOS32_MIDI_Init+0xa8>)
  sysex_callback_func = NULL;
 8012c1a:	4a25      	ldr	r2, [pc, #148]	; (8012cb0 <MIOS32_MIDI_Init+0xac>)
  timeout_callback_func = NULL;
 8012c1c:	4925      	ldr	r1, [pc, #148]	; (8012cb4 <MIOS32_MIDI_Init+0xb0>)
  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
 8012c1e:	6020      	str	r0, [r4, #0]
  direct_tx_callback_func = NULL;
 8012c20:	6018      	str	r0, [r3, #0]
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 8012c22:	4c25      	ldr	r4, [pc, #148]	; (8012cb8 <MIOS32_MIDI_Init+0xb4>)
  filebrowser_command_callback_func = NULL;
 8012c24:	4b25      	ldr	r3, [pc, #148]	; (8012cbc <MIOS32_MIDI_Init+0xb8>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
 8012c26:	6010      	str	r0, [r2, #0]
  timeout_callback_func = NULL;
 8012c28:	6008      	str	r0, [r1, #0]
  debug_command_callback_func = NULL;
  filebrowser_command_callback_func = NULL;
 8012c2a:	6018      	str	r0, [r3, #0]
  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 8012c2c:	6020      	str	r0, [r4, #0]
  filebrowser_command_callback_func = NULL;

  // initialize interfaces
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  if( MIOS32_USB_MIDI_Init(0) < 0 )
 8012c2e:	f002 ff9f 	bl	8015b70 <MIOS32_USB_MIDI_Init>
 8012c32:	0fc4      	lsrs	r4, r0, #31
    ret |= (1 << 0);
#endif

#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
 8012c34:	4628      	mov	r0, r5
 8012c36:	f000 fe1b 	bl	8013870 <MIOS32_UART_MIDI_Init>
 8012c3a:	2800      	cmp	r0, #0
    ret |= (1 << 1);
 8012c3c:	bfb8      	it	lt
 8012c3e:	f044 0402 	orrlt.w	r4, r4, #2
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 8012c42:	2000      	movs	r0, #0
 8012c44:	f000 ffb1 	bl	8013baa <MIOS32_IIC_MIDI_Init>
 8012c48:	2800      	cmp	r0, #0
    ret |= (1 << 2);
 8012c4a:	bfb8      	it	lt
 8012c4c:	f044 0404 	orrlt.w	r4, r4, #4
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 8012c50:	2000      	movs	r0, #0
 8012c52:	f000 ff9f 	bl	8013b94 <MIOS32_SPI_MIDI_Init>
  if( MIOS32_CAN_MIDI_Init(0) < 0 )
    ret |= (1 << 4);
#endif
  ///////////////////////////////////////////////////////////////////////////// end of CAN modification
  
  last_sysex_port = DEFAULT;
 8012c56:	4a1a      	ldr	r2, [pc, #104]	; (8012cc0 <MIOS32_MIDI_Init+0xbc>)
  sysex_state.ALL = 0;
 8012c58:	4b1a      	ldr	r3, [pc, #104]	; (8012cc4 <MIOS32_MIDI_Init+0xc0>)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
    ret |= (1 << 2);
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 8012c5a:	2800      	cmp	r0, #0
    ret |= (1 << 3);
 8012c5c:	bfb8      	it	lt
 8012c5e:	f044 0408 	orrlt.w	r4, r4, #8
  if( MIOS32_CAN_MIDI_Init(0) < 0 )
    ret |= (1 << 4);
#endif
  ///////////////////////////////////////////////////////////////////////////// end of CAN modification
  
  last_sysex_port = DEFAULT;
 8012c62:	2000      	movs	r0, #0
 8012c64:	7010      	strb	r0, [r2, #0]
  sysex_state.ALL = 0;
 8012c66:	7819      	ldrb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8012c68:	4a17      	ldr	r2, [pc, #92]	; (8012cc8 <MIOS32_MIDI_Init+0xc4>)
    ret |= (1 << 4);
#endif
  ///////////////////////////////////////////////////////////////////////////// end of CAN modification
  
  last_sysex_port = DEFAULT;
  sysex_state.ALL = 0;
 8012c6a:	f360 0107 	bfi	r1, r0, #0, #8
 8012c6e:	7019      	strb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8012c70:	7010      	strb	r0, [r2, #0]
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *device_id_confirm = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID_CONFIRM;
  u8 *device_id = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID;
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
 8012c72:	4816      	ldr	r0, [pc, #88]	; (8012ccc <MIOS32_MIDI_Init+0xc8>)
 8012c74:	7803      	ldrb	r3, [r0, #0]
 8012c76:	2b42      	cmp	r3, #66	; 0x42
 8012c78:	d104      	bne.n	8012c84 <MIOS32_MIDI_Init+0x80>
 8012c7a:	4915      	ldr	r1, [pc, #84]	; (8012cd0 <MIOS32_MIDI_Init+0xcc>)
 8012c7c:	7808      	ldrb	r0, [r1, #0]
 8012c7e:	0601      	lsls	r1, r0, #24
    sysex_device_id = *device_id;
 8012c80:	bf58      	it	pl
 8012c82:	7010      	strbpl	r0, [r2, #0]
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8012c84:	4b13      	ldr	r3, [pc, #76]	; (8012cd4 <MIOS32_MIDI_Init+0xd0>)
  sysex_timeout_ctr_flags.ALL = 0;
 8012c86:	4914      	ldr	r1, [pc, #80]	; (8012cd8 <MIOS32_MIDI_Init+0xd4>)
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
    sysex_device_id = *device_id;
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8012c88:	2200      	movs	r2, #0
 8012c8a:	801a      	strh	r2, [r3, #0]
  sysex_timeout_ctr_flags.ALL = 0;
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	2300      	movs	r3, #0
 8012c90:	e9c1 2300 	strd	r2, r3, [r1]

  return -ret;
 8012c94:	4260      	negs	r0, r4
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
  sysex_timeout_ctr_flags.ALL = 0;

  return -ret;
}
 8012c9c:	bd38      	pop	{r3, r4, r5, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20000004 	.word	0x20000004
 8012ca4:	20000005 	.word	0x20000005
 8012ca8:	20000c04 	.word	0x20000c04
 8012cac:	20000bfc 	.word	0x20000bfc
 8012cb0:	20000c28 	.word	0x20000c28
 8012cb4:	20000c2c 	.word	0x20000c2c
 8012cb8:	20000c1c 	.word	0x20000c1c
 8012cbc:	20000c08 	.word	0x20000c08
 8012cc0:	20000c0c 	.word	0x20000c0c
 8012cc4:	20000c14 	.word	0x20000c14
 8012cc8:	20000c0e 	.word	0x20000c0e
 8012ccc:	08003fd0 	.word	0x08003fd0
 8012cd0:	08003fd1 	.word	0x08003fd1
 8012cd4:	20000c10 	.word	0x20000c10
 8012cd8:	20000c20 	.word	0x20000c20

08012cdc <MIOS32_MIDI_SendPackage>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8012cdc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
//! \param[in] package MIDI package
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	460c      	mov	r4, r1
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8012ce6:	d104      	bne.n	8012cf2 <MIOS32_MIDI_SendPackage+0x16>
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
 8012ce8:	2801      	cmp	r0, #1
 8012cea:	bf0c      	ite	eq
 8012cec:	4b1f      	ldreq	r3, [pc, #124]	; (8012d6c <MIOS32_MIDI_SendPackage+0x90>)
 8012cee:	4b20      	ldrne	r3, [pc, #128]	; (8012d70 <MIOS32_MIDI_SendPackage+0x94>)
 8012cf0:	781d      	ldrb	r5, [r3, #0]

  // insert subport number into package
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 8012cf2:	4b20      	ldr	r3, [pc, #128]	; (8012d74 <MIOS32_MIDI_SendPackage+0x98>)
 8012cf4:	681a      	ldr	r2, [r3, #0]
  if( !(port & 0xf0) ) {
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
  }

  // insert subport number into package
  package.cable = port & 0xf;
 8012cf6:	f005 060f 	and.w	r6, r5, #15

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 8012cfa:	2a00      	cmp	r2, #0
 8012cfc:	d118      	bne.n	8012d30 <MIOS32_MIDI_SendPackage+0x54>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 8012cfe:	f005 00f0 	and.w	r0, r5, #240	; 0xf0
 8012d02:	2820      	cmp	r0, #32
 8012d04:	d01c      	beq.n	8012d40 <MIOS32_MIDI_SendPackage+0x64>
 8012d06:	d808      	bhi.n	8012d1a <MIOS32_MIDI_SendPackage+0x3e>
 8012d08:	2810      	cmp	r0, #16
 8012d0a:	d12b      	bne.n	8012d64 <MIOS32_MIDI_SendPackage+0x88>
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 8012d0c:	f366 1407 	bfi	r4, r6, #4, #4
 8012d10:	4620      	mov	r0, r4
      ///////////////////////////////////////////////////////////////////////////// end of CAN modification
    default:
      // invalid port
      return -1;
  }
}
 8012d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  // branch depending on selected port
  switch( port & 0xf0 ) {
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 8012d16:	f003 b82d 	b.w	8015d74 <MIOS32_USB_MIDI_PackageSend>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 8012d1a:	2830      	cmp	r0, #48	; 0x30
 8012d1c:	d019      	beq.n	8012d52 <MIOS32_MIDI_SendPackage+0x76>
 8012d1e:	2850      	cmp	r0, #80	; 0x50
 8012d20:	d120      	bne.n	8012d64 <MIOS32_MIDI_SendPackage+0x88>
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 8012d22:	f366 1407 	bfi	r4, r6, #4, #4
 8012d26:	4620      	mov	r0, r4
      ///////////////////////////////////////////////////////////////////////////// end of CAN modification
    default:
      // invalid port
      return -1;
  }
}
 8012d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 8012d2c:	f000 bf37 	b.w	8013b9e <MIOS32_SPI_MIDI_PackageSend>
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
    s32 status;
    if( (status=direct_tx_callback_func(port, package)) )
 8012d30:	f366 1407 	bfi	r4, r6, #4, #4
 8012d34:	4628      	mov	r0, r5
 8012d36:	4621      	mov	r1, r4
 8012d38:	4790      	blx	r2
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	d0df      	beq.n	8012cfe <MIOS32_MIDI_SendPackage+0x22>
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 8012d40:	f366 1407 	bfi	r4, r6, #4, #4
 8012d44:	f005 000f 	and.w	r0, r5, #15
 8012d48:	4621      	mov	r1, r4
      ///////////////////////////////////////////////////////////////////////////// end of CAN modification
    default:
      // invalid port
      return -1;
  }
}
 8012d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 8012d4e:	f000 be3d 	b.w	80139cc <MIOS32_UART_MIDI_PackageSend>
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8012d52:	f366 1407 	bfi	r4, r6, #4, #4
 8012d56:	f005 000f 	and.w	r0, r5, #15
 8012d5a:	4621      	mov	r1, r4
      ///////////////////////////////////////////////////////////////////////////// end of CAN modification
    default:
      // invalid port
      return -1;
  }
}
 8012d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8012d60:	f000 bf28 	b.w	8013bb4 <MIOS32_IIC_MIDI_PackageSend>
      ///////////////////////////////////////////////////////////////////////////// begin of CAN modification
    case MCAN0://..15
#if defined(MIOS32_USE_CAN) && defined(MIOS32_USE_CAN_MIDI)
      return MIOS32_CAN_MIDI_PackageSend(package);
#else
      return -1; // CAN_MIDI has been disabled
 8012d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      ///////////////////////////////////////////////////////////////////////////// end of CAN modification
    default:
      // invalid port
      return -1;
  }
}
 8012d68:	bd70      	pop	{r4, r5, r6, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20000005 	.word	0x20000005
 8012d70:	20000004 	.word	0x20000004
 8012d74:	20000bfc 	.word	0x20000bfc

08012d78 <MIOS32_MIDI_SendSysEx>:
//! \param[in] count number of bytes
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSysEx(mios32_midi_port_t port, u8 *stream, u32 count)
{
 8012d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7c:	4680      	mov	r8, r0
 8012d7e:	460e      	mov	r6, r1
 8012d80:	4617      	mov	r7, r2
  u32 offset;
  mios32_midi_package_t package;

  // MEMO: have a look into the project.lss file - gcc optimizes this code pretty well :)

  for(offset=0; offset<count;) {
 8012d82:	2400      	movs	r4, #0
 8012d84:	42bc      	cmp	r4, r7
 8012d86:	d235      	bcs.n	8012df4 <MIOS32_MIDI_SendSysEx+0x7c>
    // package type depends on number of remaining bytes
    switch( count-offset ) {
 8012d88:	1b3b      	subs	r3, r7, r4
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d00d      	beq.n	8012daa <MIOS32_MIDI_SendSysEx+0x32>
 8012d8e:	2b03      	cmp	r3, #3
 8012d90:	d019      	beq.n	8012dc6 <MIOS32_MIDI_SendSysEx+0x4e>
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d119      	bne.n	8012dca <MIOS32_MIDI_SendSysEx+0x52>
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
	package.evnt0 = stream[offset++];
 8012d96:	5d32      	ldrb	r2, [r6, r4]

  for(offset=0; offset<count;) {
    // package type depends on number of remaining bytes
    switch( count-offset ) {
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
 8012d98:	2105      	movs	r1, #5
 8012d9a:	f361 0503 	bfi	r5, r1, #0, #4
	package.evnt0 = stream[offset++];
 8012d9e:	f362 250f 	bfi	r5, r2, #8, #8
 8012da2:	3401      	adds	r4, #1
	package.evnt1 = 0x00;
 8012da4:	f36f 4517 	bfc	r5, #16, #8
 8012da8:	e00a      	b.n	8012dc0 <MIOS32_MIDI_SendSysEx+0x48>
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8012daa:	1931      	adds	r1, r6, r4
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
 8012dac:	5d30      	ldrb	r0, [r6, r4]
	package.evnt1 = stream[offset++];
 8012dae:	784a      	ldrb	r2, [r1, #1]
	package.evnt0 = stream[offset++];
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
 8012db0:	2306      	movs	r3, #6
 8012db2:	f363 0503 	bfi	r5, r3, #0, #4
	package.evnt0 = stream[offset++];
 8012db6:	f360 250f 	bfi	r5, r0, #8, #8
	package.evnt1 = stream[offset++];
 8012dba:	f362 4517 	bfi	r5, r2, #16, #8
 8012dbe:	3402      	adds	r4, #2
	package.evnt2 = 0x00;
 8012dc0:	f36f 651f 	bfc	r5, #24, #8
	break;
 8012dc4:	e00f      	b.n	8012de6 <MIOS32_MIDI_SendSysEx+0x6e>
      case 3:
	package.type = 0x7; // SysEx ends with following three bytes. 
 8012dc6:	2007      	movs	r0, #7
 8012dc8:	e000      	b.n	8012dcc <MIOS32_MIDI_SendSysEx+0x54>
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
 8012dca:	2004      	movs	r0, #4
 8012dcc:	f360 0503 	bfi	r5, r0, #0, #4
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8012dd0:	1930      	adds	r0, r6, r4
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8012dd2:	5d33      	ldrb	r3, [r6, r4]
	package.evnt1 = stream[offset++];
 8012dd4:	7841      	ldrb	r1, [r0, #1]
	package.evnt2 = stream[offset++];
 8012dd6:	7882      	ldrb	r2, [r0, #2]
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8012dd8:	f363 250f 	bfi	r5, r3, #8, #8
	package.evnt1 = stream[offset++];
 8012ddc:	f361 4517 	bfi	r5, r1, #16, #8
	package.evnt2 = stream[offset++];
 8012de0:	f362 651f 	bfi	r5, r2, #24, #8
 8012de4:	3403      	adds	r4, #3
    }

    res=MIOS32_MIDI_SendPackage(port, package);
 8012de6:	4640      	mov	r0, r8
 8012de8:	4629      	mov	r1, r5
 8012dea:	f7ff ff77 	bl	8012cdc <MIOS32_MIDI_SendPackage>

    // expection? (e.g., port not available)
    if( res < 0 )
 8012dee:	2800      	cmp	r0, #0
 8012df0:	dac8      	bge.n	8012d84 <MIOS32_MIDI_SendSysEx+0xc>
 8012df2:	e000      	b.n	8012df6 <MIOS32_MIDI_SendSysEx+0x7e>
      return res;
  }

  return 0;
 8012df4:	2000      	movs	r0, #0
}
 8012df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012dfc <MIOS32_MIDI_SYSEX_SendAckStr>:

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
{
 8012dfc:	b530      	push	{r4, r5, lr}
 8012dfe:	b0a1      	sub	sp, #132	; 0x84
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8012e00:	23f0      	movs	r3, #240	; 0xf0
 8012e02:	f88d 3000 	strb.w	r3, [sp]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e06:	4b13      	ldr	r3, [pc, #76]	; (8012e54 <MIOS32_MIDI_SYSEX_SendAckStr+0x58>)
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8012e08:	227e      	movs	r2, #126	; 0x7e
 8012e0a:	2532      	movs	r5, #50	; 0x32
 8012e0c:	f88d 2003 	strb.w	r2, [sp, #3]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e10:	781a      	ldrb	r2, [r3, #0]
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8012e12:	f88d 5004 	strb.w	r5, [sp, #4]
 8012e16:	2400      	movs	r4, #0

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 8012e18:	250f      	movs	r5, #15
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8012e1a:	f88d 4001 	strb.w	r4, [sp, #1]
 8012e1e:	f88d 4002 	strb.w	r4, [sp, #2]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e22:	f88d 2005 	strb.w	r2, [sp, #5]

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 8012e26:	f88d 5006 	strb.w	r5, [sp, #6]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8012e2a:	ab02      	add	r3, sp, #8

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8012e2c:	5d0d      	ldrb	r5, [r1, r4]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8012e2e:	1e5a      	subs	r2, r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8012e30:	b135      	cbz	r5, 8012e40 <MIOS32_MIDI_SYSEX_SendAckStr+0x44>
 8012e32:	3401      	adds	r4, #1
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8012e34:	461a      	mov	r2, r3
  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
    *sysex_buffer_ptr++ = str[i];
 8012e36:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012e3a:	3301      	adds	r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8012e3c:	2c64      	cmp	r4, #100	; 0x64
 8012e3e:	d1f5      	bne.n	8012e2c <MIOS32_MIDI_SYSEX_SendAckStr+0x30>
    *sysex_buffer_ptr++ = str[i];

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8012e40:	21f7      	movs	r1, #247	; 0xf7
 8012e42:	f802 1b01 	strb.w	r1, [r2], #1

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8012e46:	4669      	mov	r1, sp
 8012e48:	1a52      	subs	r2, r2, r1
 8012e4a:	f7ff ff95 	bl	8012d78 <MIOS32_MIDI_SendSysEx>
}
 8012e4e:	b021      	add	sp, #132	; 0x84
 8012e50:	bd30      	pop	{r4, r5, pc}
 8012e52:	bf00      	nop
 8012e54:	20000c0e 	.word	0x20000c0e

08012e58 <MIOS32_MIDI_SYSEX_SendAck>:
/////////////////////////////////////////////////////////////////////////////
// This function sends a SysEx acknowledge to notify the user about the received command
// expects acknowledge code (e.g. 0x0f for good, 0x0e for error) and additional argument
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAck(mios32_midi_port_t port, u8 ack_code, u8 ack_arg)
{
 8012e58:	b500      	push	{lr}
 8012e5a:	b089      	sub	sp, #36	; 0x24
  u8 sysex_buffer[32]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8012e5c:	23f0      	movs	r3, #240	; 0xf0
 8012e5e:	f88d 3000 	strb.w	r3, [sp]
 8012e62:	2300      	movs	r3, #0
 8012e64:	f88d 3001 	strb.w	r3, [sp, #1]
 8012e68:	f88d 3002 	strb.w	r3, [sp, #2]
 8012e6c:	237e      	movs	r3, #126	; 0x7e
 8012e6e:	f88d 3003 	strb.w	r3, [sp, #3]
 8012e72:	2332      	movs	r3, #50	; 0x32
 8012e74:	f88d 3004 	strb.w	r3, [sp, #4]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e78:	4b08      	ldr	r3, [pc, #32]	; (8012e9c <MIOS32_MIDI_SYSEX_SendAck+0x44>)

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
 8012e7a:	f88d 1006 	strb.w	r1, [sp, #6]

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e7e:	781b      	ldrb	r3, [r3, #0]

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
  *sysex_buffer_ptr++ = ack_arg;
 8012e80:	f88d 2007 	strb.w	r2, [sp, #7]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8012e84:	21f7      	movs	r1, #247	; 0xf7
 8012e86:	f88d 1008 	strb.w	r1, [sp, #8]

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8012e8a:	2209      	movs	r2, #9
 8012e8c:	4669      	mov	r1, sp

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8012e8e:	f88d 3005 	strb.w	r3, [sp, #5]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8012e92:	f7ff ff71 	bl	8012d78 <MIOS32_MIDI_SendSysEx>
}
 8012e96:	b009      	add	sp, #36	; 0x24
 8012e98:	bd00      	pop	{pc}
 8012e9a:	bf00      	nop
 8012e9c:	20000c0e 	.word	0x20000c0e

08012ea0 <MIOS32_MIDI_SendDebugStringHeader>:
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8012ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8012ea4:	2304      	movs	r3, #4
 8012ea6:	2400      	movs	r4, #0
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8012ea8:	460e      	mov	r6, r1
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8012eaa:	f363 0403 	bfi	r4, r3, #0, #4
  package.evnt0 = mios32_midi_sysex_header[0];
 8012eae:	f06f 010f 	mvn.w	r1, #15
 8012eb2:	f361 240f 	bfi	r4, r1, #8, #8
  package.evnt1 = mios32_midi_sysex_header[1];
 8012eb6:	f36f 4417 	bfc	r4, #16, #8
  package.evnt2 = mios32_midi_sysex_header[2];
 8012eba:	f36f 641f 	bfc	r4, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012ebe:	4621      	mov	r1, r4
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	4690      	mov	r8, r2

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012ec4:	f7ff ff0a 	bl	8012cdc <MIOS32_MIDI_SendPackage>

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8012ec8:	4b0e      	ldr	r3, [pc, #56]	; (8012f04 <MIOS32_MIDI_SendDebugStringHeader+0x64>)

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012eca:	4607      	mov	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8012ecc:	207e      	movs	r0, #126	; 0x7e
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8012ece:	7819      	ldrb	r1, [r3, #0]
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
 8012ed0:	2232      	movs	r2, #50	; 0x32
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8012ed2:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = mios32_midi_sysex_header[4];
 8012ed6:	f362 4417 	bfi	r4, r2, #16, #8
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8012eda:	f361 641f 	bfi	r4, r1, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012ede:	4621      	mov	r1, r4
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f7ff fefb 	bl	8012cdc <MIOS32_MIDI_SendPackage>
 8012ee6:	4307      	orrs	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = MIOS32_MIDI_SYSEX_DEBUG;
 8012ee8:	200d      	movs	r0, #13
 8012eea:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = command; // output string, usually 0x40
 8012eee:	f366 4417 	bfi	r4, r6, #16, #8
  package.evnt2 = first_byte; // will be 0x00 if string already ends (""), thats ok, MIOS Studio can handle this
 8012ef2:	f368 641f 	bfi	r4, r8, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f7ff feef 	bl	8012cdc <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8012efe:	4338      	orrs	r0, r7
 8012f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f04:	20000c0e 	.word	0x20000c0e

08012f08 <MIOS32_MIDI_SendDebugStringBody>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringBody(mios32_midi_port_t port, char *str, u32 len)
{
 8012f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f0c:	4681      	mov	r9, r0
 8012f0e:	4688      	mov	r8, r1
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  if( len > 0 ) {
 8012f10:	4617      	mov	r7, r2
 8012f12:	b352      	cbz	r2, 8012f6a <MIOS32_MIDI_SendDebugStringBody+0x62>
 8012f14:	460d      	mov	r5, r1
 8012f16:	2600      	movs	r6, #0
    int i = 0;
    for(i=0; i<len; i+=3) {
 8012f18:	ebc8 0305 	rsb	r3, r8, r5
 8012f1c:	42bb      	cmp	r3, r7
 8012f1e:	d225      	bcs.n	8012f6c <MIOS32_MIDI_SendDebugStringBody+0x64>
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
 8012f20:	7829      	ldrb	r1, [r5, #0]
    int i = 0;
    for(i=0; i<len; i+=3) {
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
 8012f22:	2004      	movs	r0, #4
 8012f24:	f360 0403 	bfi	r4, r0, #0, #4
      if( (b=str[i+0]) ) {
 8012f28:	b131      	cbz	r1, 8012f38 <MIOS32_MIDI_SendDebugStringBody+0x30>
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8012f2a:	786b      	ldrb	r3, [r5, #1]
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
 8012f2c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8012f30:	f362 240f 	bfi	r4, r2, #8, #8
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8012f34:	b91b      	cbnz	r3, 8012f3e <MIOS32_MIDI_SendDebugStringBody+0x36>
 8012f36:	e00d      	b.n	8012f54 <MIOS32_MIDI_SendDebugStringBody+0x4c>

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
      } else {
	package.evnt0 = 0x00;
 8012f38:	f361 240f 	bfi	r4, r1, #8, #8
 8012f3c:	e00a      	b.n	8012f54 <MIOS32_MIDI_SendDebugStringBody+0x4c>
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8012f3e:	78a9      	ldrb	r1, [r5, #2]
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
 8012f40:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8012f44:	f360 4417 	bfi	r4, r0, #16, #8
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8012f48:	b131      	cbz	r1, 8012f58 <MIOS32_MIDI_SendDebugStringBody+0x50>
	package.evnt2 = b & 0x7f;
 8012f4a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8012f4e:	f362 641f 	bfi	r4, r2, #24, #8
 8012f52:	e003      	b.n	8012f5c <MIOS32_MIDI_SendDebugStringBody+0x54>
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
      } else {
	package.evnt1 = 0x00;
 8012f54:	f36f 4417 	bfc	r4, #16, #8
      }

      if( !terminated && (b=str[i+2]) ) {
	package.evnt2 = b & 0x7f;
      } else {
	package.evnt2 = 0x00;
 8012f58:	f36f 641f 	bfc	r4, #24, #8
	terminated = 1;
      }

      status |= MIOS32_MIDI_SendPackage(port, package);
 8012f5c:	4648      	mov	r0, r9
 8012f5e:	4621      	mov	r1, r4
 8012f60:	f7ff febc 	bl	8012cdc <MIOS32_MIDI_SendPackage>
 8012f64:	3503      	adds	r5, #3
 8012f66:	4306      	orrs	r6, r0
 8012f68:	e7d6      	b.n	8012f18 <MIOS32_MIDI_SendDebugStringBody+0x10>
{
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
 8012f6a:	4616      	mov	r6, r2
    }
  }

  return status;
#endif
}
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012f72 <MIOS32_MIDI_SendDebugStringFooter>:
//! Example: see MIOS32_MIDI_SendDebugStringHeader
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringFooter(mios32_midi_port_t port)
{
 8012f72:	b508      	push	{r3, lr}
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  package.type = 0x5; // SysEx ends with following single byte. 
 8012f74:	2100      	movs	r1, #0
 8012f76:	2305      	movs	r3, #5
 8012f78:	f363 0103 	bfi	r1, r3, #0, #4
  package.evnt0 = 0xf7;
 8012f7c:	f06f 0208 	mvn.w	r2, #8
 8012f80:	f362 210f 	bfi	r1, r2, #8, #8
  package.evnt1 = 0x00;
  package.evnt2 = 0x00;
  status |= MIOS32_MIDI_SendPackage(port, package);
 8012f84:	b289      	uxth	r1, r1
 8012f86:	f7ff fea9 	bl	8012cdc <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8012f8a:	bd08      	pop	{r3, pc}

08012f8c <MIOS32_MIDI_SendDebugString>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugString(const char *str)
{
 8012f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8e:	4605      	mov	r5, r0
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8012f90:	f00b fa6a 	bl	801e468 <strlen>

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8012f94:	4f0a      	ldr	r7, [pc, #40]	; (8012fc0 <MIOS32_MIDI_SendDebugString+0x34>)
 8012f96:	782a      	ldrb	r2, [r5, #0]
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8012f98:	4606      	mov	r6, r0

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8012f9a:	2140      	movs	r1, #64	; 0x40
 8012f9c:	7838      	ldrb	r0, [r7, #0]
 8012f9e:	f7ff ff7f 	bl	8012ea0 <MIOS32_MIDI_SendDebugStringHeader>
  if( len >= 2 )
 8012fa2:	2e01      	cmp	r6, #1
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8012fa4:	4604      	mov	r4, r0
  if( len >= 2 )
 8012fa6:	d905      	bls.n	8012fb4 <MIOS32_MIDI_SendDebugString+0x28>
    status |= MIOS32_MIDI_SendDebugStringBody(debug_port, (char *)&str[1], len-1);
 8012fa8:	7838      	ldrb	r0, [r7, #0]
 8012faa:	1c69      	adds	r1, r5, #1
 8012fac:	1e72      	subs	r2, r6, #1
 8012fae:	f7ff ffab 	bl	8012f08 <MIOS32_MIDI_SendDebugStringBody>
 8012fb2:	4304      	orrs	r4, r0
  status |= MIOS32_MIDI_SendDebugStringFooter(debug_port);
 8012fb4:	4b02      	ldr	r3, [pc, #8]	; (8012fc0 <MIOS32_MIDI_SendDebugString+0x34>)
 8012fb6:	7818      	ldrb	r0, [r3, #0]
 8012fb8:	f7ff ffdb 	bl	8012f72 <MIOS32_MIDI_SendDebugStringFooter>

  return status;
#endif
}
 8012fbc:	4320      	orrs	r0, r4
 8012fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc0:	20000005 	.word	0x20000005

08012fc4 <MIOS32_MIDI_SendDebugMessage>:
//! \param[in] *format zero-terminated format string - 128 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugMessage(const char *format, ...)
{
 8012fc4:	b40f      	push	{r0, r1, r2, r3}
 8012fc6:	b530      	push	{r4, r5, lr}
 8012fc8:	b0a3      	sub	sp, #140	; 0x8c
 8012fca:	9d26      	ldr	r5, [sp, #152]	; 0x98

  // failsave: if format string is longer than 100 chars, break here
  // note that this is a weak protection: if %s is used, or a lot of other format tokens,
  // the resulting string could still lead to a buffer overflow
  // other the other hand we don't want to allocate too many byte for buffer[] to save stack
  if( strlen(format) > 100 ) {
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f00b fa4b 	bl	801e468 <strlen>
 8012fd2:	2864      	cmp	r0, #100	; 0x64
 8012fd4:	d901      	bls.n	8012fda <MIOS32_MIDI_SendDebugMessage+0x16>
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
 8012fd6:	480e      	ldr	r0, [pc, #56]	; (8013010 <MIOS32_MIDI_SendDebugMessage+0x4c>)
 8012fd8:	e013      	b.n	8013002 <MIOS32_MIDI_SendDebugMessage+0x3e>
  } else {
    // transform formatted string into string
    va_start(args, format);
    vsprintf(str, format, args);
 8012fda:	ac02      	add	r4, sp, #8
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8012fdc:	aa27      	add	r2, sp, #156	; 0x9c
    vsprintf(str, format, args);
 8012fde:	4629      	mov	r1, r5
 8012fe0:	4620      	mov	r0, r4
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8012fe2:	9201      	str	r2, [sp, #4]
    vsprintf(str, format, args);
 8012fe4:	f003 fceb 	bl	80169be <vsprintf>
  }

  u32 len = strlen(str);
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f00b fa3d 	bl	801e468 <strlen>
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8012fee:	2300      	movs	r3, #0
 8012ff0:	4283      	cmp	r3, r0
 8012ff2:	d005      	beq.n	8013000 <MIOS32_MIDI_SendDebugMessage+0x3c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
 8012ff4:	5ce2      	ldrb	r2, [r4, r3]
 8012ff6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8012ffa:	54e1      	strb	r1, [r4, r3]
  }

  u32 len = strlen(str);
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	e7f7      	b.n	8012ff0 <MIOS32_MIDI_SendDebugMessage+0x2c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
  }

  return MIOS32_MIDI_SendDebugString(str);
 8013000:	4620      	mov	r0, r4
 8013002:	f7ff ffc3 	bl	8012f8c <MIOS32_MIDI_SendDebugString>
#endif
}
 8013006:	b023      	add	sp, #140	; 0x8c
 8013008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801300c:	b004      	add	sp, #16
 801300e:	4770      	bx	lr
 8013010:	0801f618 	.word	0x0801f618

08013014 <MIOS32_MIDI_TimeOut>:

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8013014:	b510      	push	{r4, lr}
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8013016:	4b0e      	ldr	r3, [pc, #56]	; (8013050 <MIOS32_MIDI_TimeOut+0x3c>)
 8013018:	781a      	ldrb	r2, [r3, #0]
 801301a:	f002 0108 	and.w	r1, r2, #8

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 801301e:	4604      	mov	r4, r0
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8013020:	b2c8      	uxtb	r0, r1
 8013022:	b148      	cbz	r0, 8013038 <MIOS32_MIDI_TimeOut+0x24>
 8013024:	490b      	ldr	r1, [pc, #44]	; (8013054 <MIOS32_MIDI_TimeOut+0x40>)
 8013026:	7808      	ldrb	r0, [r1, #0]
 8013028:	42a0      	cmp	r0, r4
 801302a:	d105      	bne.n	8013038 <MIOS32_MIDI_TimeOut+0x24>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 801302c:	f36f 0207 	bfc	r2, #0, #8
 8013030:	701a      	strb	r2, [r3, #0]
  sysex_cmd = 0;
 8013032:	4b09      	ldr	r3, [pc, #36]	; (8013058 <MIOS32_MIDI_TimeOut+0x44>)
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
    MIOS32_MIDI_SYSEX_CmdFinished();

  // optional hook to application
  if( timeout_callback_func != NULL )
 8013038:	4908      	ldr	r1, [pc, #32]	; (801305c <MIOS32_MIDI_TimeOut+0x48>)
 801303a:	680a      	ldr	r2, [r1, #0]
 801303c:	b10a      	cbz	r2, 8013042 <MIOS32_MIDI_TimeOut+0x2e>
    timeout_callback_func(port);
 801303e:	4620      	mov	r0, r4
 8013040:	4790      	blx	r2

#ifndef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // this debug message should always be active, so that common users are informed about the exception
  MIOS32_MIDI_SendDebugMessage("[MIOS32_MIDI_Receive_Handler] Timeout on port 0x%02x\n", port);
 8013042:	4621      	mov	r1, r4
 8013044:	4806      	ldr	r0, [pc, #24]	; (8013060 <MIOS32_MIDI_TimeOut+0x4c>)
 8013046:	f7ff ffbd 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif

  return 0; // no error
}
 801304a:	2000      	movs	r0, #0
 801304c:	bd10      	pop	{r4, pc}
 801304e:	bf00      	nop
 8013050:	20000c14 	.word	0x20000c14
 8013054:	20000c0c 	.word	0x20000c0c
 8013058:	20000c00 	.word	0x20000c00
 801305c:	20000c2c 	.word	0x20000c2c
 8013060:	0801f66b 	.word	0x0801f66b

08013064 <MIOS32_MIDI_Periodic_mS>:
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Periodic_mS(void)
{
 8013064:	b510      	push	{r4, lr}
  s32 status = 0;

#ifndef MIOS32_DONT_USE_USB_MIDI
  status |= MIOS32_USB_MIDI_Periodic_mS();
 8013066:	f002 fec7 	bl	8015df8 <MIOS32_USB_MIDI_Periodic_mS>
 801306a:	4604      	mov	r4, r0
#endif

#ifndef MIOS32_DONT_USE_UART_MIDI
  status |= MIOS32_UART_MIDI_Periodic_mS();
 801306c:	f000 fc2e 	bl	80138cc <MIOS32_UART_MIDI_Periodic_mS>
 8013070:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
 8013072:	f000 fd9d 	bl	8013bb0 <MIOS32_IIC_MIDI_Periodic_mS>
 8013076:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8013078:	f000 fd8f 	bl	8013b9a <MIOS32_SPI_MIDI_Periodic_mS>
#endif
  ///////////////////////////////////////////////////////////////////////////// End of CAN modification
  
  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 801307c:	4b05      	ldr	r3, [pc, #20]	; (8013094 <MIOS32_MIDI_Periodic_mS+0x30>)
 801307e:	881a      	ldrh	r2, [r3, #0]
 8013080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013084:	428a      	cmp	r2, r1
#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8013086:	ea44 0000 	orr.w	r0, r4, r0
#endif
  ///////////////////////////////////////////////////////////////////////////// End of CAN modification
  
  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 801308a:	d001      	beq.n	8013090 <MIOS32_MIDI_Periodic_mS+0x2c>
    ++sysex_timeout_ctr;
 801308c:	3201      	adds	r2, #1
 801308e:	801a      	strh	r2, [r3, #0]

  return status;
}
 8013090:	bd10      	pop	{r4, pc}
 8013092:	bf00      	nop
 8013094:	20000c10 	.word	0x20000c10

08013098 <MIOS32_MIDI_SendByteToRxCallback>:
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_byte received MIDI byte
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendByteToRxCallback(mios32_midi_port_t port, u8 midi_byte)
{
 8013098:	b508      	push	{r3, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL )
 801309a:	4b03      	ldr	r3, [pc, #12]	; (80130a8 <MIOS32_MIDI_SendByteToRxCallback+0x10>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	b10a      	cbz	r2, 80130a4 <MIOS32_MIDI_SendByteToRxCallback+0xc>
    return direct_rx_callback_func(port, midi_byte);
 80130a0:	4790      	blx	r2
 80130a2:	bd08      	pop	{r3, pc}
  return 0; // no error
 80130a4:	4610      	mov	r0, r2
}
 80130a6:	bd08      	pop	{r3, pc}
 80130a8:	20000c04 	.word	0x20000c04

080130ac <MIOS32_MIDI_SendPackageToRxCallback>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 80130ac:	4b11      	ldr	r3, [pc, #68]	; (80130f4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 80130ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 80130b0:	681c      	ldr	r4, [r3, #0]
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 80130b2:	4607      	mov	r7, r0
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 80130b4:	b1e4      	cbz	r4, 80130f0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 80130b6:	f3c1 6407 	ubfx	r4, r1, #24, #8
 80130ba:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80130be:	f3c1 4207 	ubfx	r2, r1, #16, #8
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 80130c2:	4d0d      	ldr	r5, [pc, #52]	; (80130f8 <MIOS32_MIDI_SendPackageToRxCallback+0x4c>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 80130c4:	f88d 4006 	strb.w	r4, [sp, #6]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 80130c8:	f001 010f 	and.w	r1, r1, #15
    int i;
    s32 status = 0;
 80130cc:	2400      	movs	r4, #0
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 80130ce:	5c6e      	ldrb	r6, [r5, r1]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 80130d0:	f88d 0004 	strb.w	r0, [sp, #4]
 80130d4:	f88d 2005 	strb.w	r2, [sp, #5]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 80130d8:	4625      	mov	r5, r4
 80130da:	42b5      	cmp	r5, r6
 80130dc:	da08      	bge.n	80130f0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
      status |= direct_rx_callback_func(port, buffer[i]);
 80130de:	aa01      	add	r2, sp, #4
 80130e0:	4b04      	ldr	r3, [pc, #16]	; (80130f4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
 80130e2:	5d51      	ldrb	r1, [r2, r5]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4638      	mov	r0, r7
 80130e8:	4798      	blx	r3
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 80130ea:	3501      	adds	r5, #1
      status |= direct_rx_callback_func(port, buffer[i]);
 80130ec:	4304      	orrs	r4, r0
 80130ee:	e7f4      	b.n	80130da <MIOS32_MIDI_SendPackageToRxCallback+0x2e>
    return status;
  }
  return 0; // no error
}
 80130f0:	4620      	mov	r0, r4
 80130f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80130f4:	20000c04 	.word	0x20000c04
 80130f8:	0801f608 	.word	0x0801f608

080130fc <MIOS32_MIDI_DebugPortSet>:
//! \param[in] port MIDI port (USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
 80130fc:	2801      	cmp	r0, #1
 80130fe:	d003      	beq.n	8013108 <MIOS32_MIDI_DebugPortSet+0xc>
    return -1;

  debug_port = port;
 8013100:	4b03      	ldr	r3, [pc, #12]	; (8013110 <MIOS32_MIDI_DebugPortSet+0x14>)
 8013102:	7018      	strb	r0, [r3, #0]
 
  return 0; // no error
 8013104:	2000      	movs	r0, #0
 8013106:	4770      	bx	lr
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
    return -1;
 8013108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  debug_port = port;
 
  return 0; // no error
}
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	20000005 	.word	0x20000005

08013114 <MIOS32_MIDI_SYSEX_Cmd>:

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8013114:	b530      	push	{r4, r5, lr}
 8013116:	460b      	mov	r3, r1
 8013118:	4611      	mov	r1, r2
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 801311a:	4a5a      	ldr	r2, [pc, #360]	; (8013284 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
 801311c:	7815      	ldrb	r5, [r2, #0]
 801311e:	2d0d      	cmp	r5, #13

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8013120:	b08b      	sub	sp, #44	; 0x2c
 8013122:	4604      	mov	r4, r0
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8013124:	d057      	beq.n	80131d6 <MIOS32_MIDI_SYSEX_Cmd+0xc2>
 8013126:	d801      	bhi.n	801312c <MIOS32_MIDI_SYSEX_Cmd+0x18>
 8013128:	b13d      	cbz	r5, 801313a <MIOS32_MIDI_SYSEX_Cmd+0x26>
 801312a:	e09a      	b.n	8013262 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 801312c:	2d0e      	cmp	r5, #14
 801312e:	f000 80a5 	beq.w	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8013132:	2d0f      	cmp	r5, #15
 8013134:	f040 8095 	bne.w	8013262 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8013138:	e087      	b.n	801324a <MIOS32_MIDI_SYSEX_Cmd+0x136>
 801313a:	4a53      	ldr	r2, [pc, #332]	; (8013288 <MIOS32_MIDI_SYSEX_Cmd+0x174>)
static s32 MIOS32_MIDI_SYSEX_Cmd_Query(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  static u8 query_req = 0;
  char str_buffer[40];

  switch( cmd_state ) {
 801313c:	b11b      	cbz	r3, 8013146 <MIOS32_MIDI_SYSEX_Cmd+0x32>
 801313e:	2b01      	cmp	r3, #1
 8013140:	d103      	bne.n	801314a <MIOS32_MIDI_SYSEX_Cmd+0x36>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
 8013142:	7011      	strb	r1, [r2, #0]
 8013144:	e09a      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
  char str_buffer[40];

  switch( cmd_state ) {

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
 8013146:	7013      	strb	r3, [r2, #0]
 8013148:	e098      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 801314a:	7811      	ldrb	r1, [r2, #0]
 801314c:	2905      	cmp	r1, #5
 801314e:	d028      	beq.n	80131a2 <MIOS32_MIDI_SYSEX_Cmd+0x8e>
 8013150:	d810      	bhi.n	8013174 <MIOS32_MIDI_SYSEX_Cmd+0x60>
 8013152:	2902      	cmp	r1, #2
 8013154:	d01f      	beq.n	8013196 <MIOS32_MIDI_SYSEX_Cmd+0x82>
 8013156:	d803      	bhi.n	8013160 <MIOS32_MIDI_SYSEX_Cmd+0x4c>
 8013158:	2901      	cmp	r1, #1
 801315a:	d138      	bne.n	80131ce <MIOS32_MIDI_SYSEX_Cmd+0xba>
	      MIOS32_MIDI_SendActiveSense(port);
	      MIOS32_USB_MIDI_Periodic_mS();
	    }
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
 801315c:	494b      	ldr	r1, [pc, #300]	; (801328c <MIOS32_MIDI_SYSEX_Cmd+0x178>)
 801315e:	e01b      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8013160:	2903      	cmp	r1, #3
 8013162:	d01c      	beq.n	801319e <MIOS32_MIDI_SYSEX_Cmd+0x8a>
 8013164:	2904      	cmp	r1, #4
 8013166:	d132      	bne.n	80131ce <MIOS32_MIDI_SYSEX_Cmd+0xba>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
	  break;
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
 8013168:	f001 f908 	bl	801437c <MIOS32_SYS_ChipIDGet>
 801316c:	4948      	ldr	r1, [pc, #288]	; (8013290 <MIOS32_MIDI_SYSEX_Cmd+0x17c>)
 801316e:	4602      	mov	r2, r0
 8013170:	4668      	mov	r0, sp
 8013172:	e023      	b.n	80131bc <MIOS32_MIDI_SYSEX_Cmd+0xa8>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8013174:	2908      	cmp	r1, #8
 8013176:	d026      	beq.n	80131c6 <MIOS32_MIDI_SYSEX_Cmd+0xb2>
 8013178:	d806      	bhi.n	8013188 <MIOS32_MIDI_SYSEX_Cmd+0x74>
 801317a:	2906      	cmp	r1, #6
 801317c:	d019      	beq.n	80131b2 <MIOS32_MIDI_SYSEX_Cmd+0x9e>
 801317e:	2907      	cmp	r1, #7
 8013180:	d125      	bne.n	80131ce <MIOS32_MIDI_SYSEX_Cmd+0xba>
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8013182:	f001 f909 	bl	8014398 <MIOS32_SYS_RAMSizeGet>
 8013186:	e016      	b.n	80131b6 <MIOS32_MIDI_SYSEX_Cmd+0xa2>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8013188:	2909      	cmp	r1, #9
 801318a:	d01e      	beq.n	80131ca <MIOS32_MIDI_SYSEX_Cmd+0xb6>
 801318c:	297f      	cmp	r1, #127	; 0x7f
 801318e:	d11e      	bne.n	80131ce <MIOS32_MIDI_SYSEX_Cmd+0xba>
#if MIOS32_MIDI_BSL_ENHANCEMENTS
	  // release halt state (or sending upload request) instead of reseting the core
	  BSL_SYSEX_ReleaseHaltState();
#else
	  // reset core (this will send an upload request)
	  MIOS32_SYS_Reset();
 8013190:	f001 f89e 	bl	80142d0 <MIOS32_SYS_Reset>
 8013194:	e072      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
	  break;
        case 0x02: // Board
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_BOARD_STR);
 8013196:	493f      	ldr	r1, [pc, #252]	; (8013294 <MIOS32_MIDI_SYSEX_Cmd+0x180>)
 8013198:	f7ff fe30 	bl	8012dfc <MIOS32_MIDI_SYSEX_SendAckStr>
 801319c:	e06e      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
 801319e:	493e      	ldr	r1, [pc, #248]	; (8013298 <MIOS32_MIDI_SYSEX_Cmd+0x184>)
 80131a0:	e7fa      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 80131a2:	4668      	mov	r0, sp
 80131a4:	f001 f8fc 	bl	80143a0 <MIOS32_SYS_SerialNumberGet>
 80131a8:	2800      	cmp	r0, #0
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 80131aa:	4620      	mov	r0, r4
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 80131ac:	da09      	bge.n	80131c2 <MIOS32_MIDI_SYSEX_Cmd+0xae>
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  else
	    MIOS32_MIDI_SYSEX_SendAckStr(port, "?");
 80131ae:	493b      	ldr	r1, [pc, #236]	; (801329c <MIOS32_MIDI_SYSEX_Cmd+0x188>)
 80131b0:	e7f2      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
 80131b2:	f001 f8e9 	bl	8014388 <MIOS32_SYS_FlashSizeGet>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 80131b6:	493a      	ldr	r1, [pc, #232]	; (80132a0 <MIOS32_MIDI_SYSEX_Cmd+0x18c>)
 80131b8:	4602      	mov	r2, r0
 80131ba:	4668      	mov	r0, sp
 80131bc:	f003 fbf0 	bl	80169a0 <sprintf>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 80131c0:	4620      	mov	r0, r4
 80131c2:	4669      	mov	r1, sp
 80131c4:	e7e8      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x08: // Application Name Line #1
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE1);
 80131c6:	4937      	ldr	r1, [pc, #220]	; (80132a4 <MIOS32_MIDI_SYSEX_Cmd+0x190>)
 80131c8:	e7e6      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x09: // Application Name Line #2
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE2);
 80131ca:	4937      	ldr	r1, [pc, #220]	; (80132a8 <MIOS32_MIDI_SYSEX_Cmd+0x194>)
 80131cc:	e7e4      	b.n	8013198 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  // but other core families could contain an empty stumb!
#endif
	  break;
        default: 
	  // unknown query
	  MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNKNOWN_QUERY);
 80131ce:	4620      	mov	r0, r4
 80131d0:	210e      	movs	r1, #14
 80131d2:	220d      	movs	r2, #13
 80131d4:	e042      	b.n	801325c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 80131d6:	4d35      	ldr	r5, [pc, #212]	; (80132ac <MIOS32_MIDI_SYSEX_Cmd+0x198>)
  if( cmd_state == MIOS32_MIDI_SYSEX_CMD_STATE_END )
    MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
#else
  static u8 debug_req = 0xff;

  switch( cmd_state ) {
 80131d8:	b113      	cbz	r3, 80131e0 <MIOS32_MIDI_SYSEX_Cmd+0xcc>
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d115      	bne.n	801320a <MIOS32_MIDI_SYSEX_Cmd+0xf6>
 80131de:	e002      	b.n	80131e6 <MIOS32_MIDI_SYSEX_Cmd+0xd2>

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      debug_req = 0xff;
 80131e0:	21ff      	movs	r1, #255	; 0xff
 80131e2:	7029      	strb	r1, [r5, #0]
 80131e4:	e04a      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      if( debug_req == 0xff ) {
 80131e6:	782b      	ldrb	r3, [r5, #0]
 80131e8:	2bff      	cmp	r3, #255	; 0xff
 80131ea:	d101      	bne.n	80131f0 <MIOS32_MIDI_SYSEX_Cmd+0xdc>
	debug_req = midi_in;
 80131ec:	7029      	strb	r1, [r5, #0]
 80131ee:	e045      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      } else {
	switch( debug_req ) {
 80131f0:	b11b      	cbz	r3, 80131fa <MIOS32_MIDI_SYSEX_Cmd+0xe6>
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d142      	bne.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	    if( debug_command_callback_func != NULL )
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 80131f6:	4a2e      	ldr	r2, [pc, #184]	; (80132b0 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 80131f8:	e000      	b.n	80131fc <MIOS32_MIDI_SYSEX_Cmd+0xe8>
      if( debug_req == 0xff ) {
	debug_req = midi_in;
      } else {
	switch( debug_req ) {
	  case 0x00: // input string
	    if( debug_command_callback_func != NULL )
 80131fa:	4a2e      	ldr	r2, [pc, #184]	; (80132b4 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 80131fc:	6813      	ldr	r3, [r2, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d03c      	beq.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	      filebrowser_command_callback_func(last_sysex_port, (char)midi_in);
 8013202:	482d      	ldr	r0, [pc, #180]	; (80132b8 <MIOS32_MIDI_SYSEX_Cmd+0x1a4>)
 8013204:	7800      	ldrb	r0, [r0, #0]
 8013206:	4798      	blx	r3
 8013208:	e038      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}
      }
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      if( debug_req == 0x00 ) {
 801320a:	782a      	ldrb	r2, [r5, #0]
 801320c:	b9a2      	cbnz	r2, 8013238 <MIOS32_MIDI_SYSEX_Cmd+0x124>
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 801320e:	210f      	movs	r1, #15
 8013210:	f7ff fe22 	bl	8012e58 <MIOS32_MIDI_SYSEX_SendAck>

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
 8013214:	7829      	ldrb	r1, [r5, #0]
 8013216:	2900      	cmp	r1, #0
 8013218:	d130      	bne.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 801321a:	4a26      	ldr	r2, [pc, #152]	; (80132b4 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
 801321c:	6810      	ldr	r0, [r2, #0]
 801321e:	bb68      	cbnz	r0, 801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8013220:	4d26      	ldr	r5, [pc, #152]	; (80132bc <MIOS32_MIDI_SYSEX_Cmd+0x1a8>)
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8013222:	4620      	mov	r0, r4
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8013224:	782d      	ldrb	r5, [r5, #0]
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8013226:	f7ff ff69 	bl	80130fc <MIOS32_MIDI_DebugPortSet>
	  MIOS32_MIDI_SendDebugString("[MIOS32_MIDI_SYSEX_Cmd_Debug] command handler not implemented by application\n");
 801322a:	4825      	ldr	r0, [pc, #148]	; (80132c0 <MIOS32_MIDI_SYSEX_Cmd+0x1ac>)
 801322c:	f7ff feae 	bl	8012f8c <MIOS32_MIDI_SendDebugString>
	  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8013230:	4628      	mov	r0, r5
 8013232:	f7ff ff63 	bl	80130fc <MIOS32_MIDI_DebugPortSet>
 8013236:	e021      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}

      } else if( debug_req == 0x01 && filebrowser_command_callback_func != NULL ) {
 8013238:	2a01      	cmp	r2, #1
 801323a:	d102      	bne.n	8013242 <MIOS32_MIDI_SYSEX_Cmd+0x12e>
 801323c:	481c      	ldr	r0, [pc, #112]	; (80132b0 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 801323e:	6803      	ldr	r3, [r0, #0]
 8013240:	b9e3      	cbnz	r3, 801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	// we expect that the filebrowser handler sends back a string
      } else {
	// send disacknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
 8013242:	4620      	mov	r0, r4
 8013244:	210e      	movs	r1, #14
 8013246:	2210      	movs	r2, #16
 8013248:	e008      	b.n	801325c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 801324a:	4a1e      	ldr	r2, [pc, #120]	; (80132c4 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
/////////////////////////////////////////////////////////////////////////////
// Command 0F: Ping (just send back acknowledge if no additional byte has been received)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd_Ping(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  switch( cmd_state ) {
 801324c:	b10b      	cbz	r3, 8013252 <MIOS32_MIDI_SYSEX_Cmd+0x13e>
 801324e:	2b01      	cmp	r3, #1
 8013250:	d101      	bne.n	8013256 <MIOS32_MIDI_SYSEX_Cmd+0x142>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      sysex_state.ping.PING_BYTE_RECEIVED = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      sysex_state.ping.PING_BYTE_RECEIVED = 1;
 8013252:	6053      	str	r3, [r2, #4]
 8013254:	e012      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      // TODO: send 0xf7 if merger enabled

      // send acknowledge if no additional byte has been received
      // to avoid feedback loop if two cores are directly connected
      if( !sysex_state.ping.PING_BYTE_RECEIVED )
 8013256:	6852      	ldr	r2, [r2, #4]
 8013258:	b982      	cbnz	r2, 801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 801325a:	4629      	mov	r1, r5
 801325c:	f7ff fdfc 	bl	8012e58 <MIOS32_MIDI_SYSEX_SendAck>
 8013260:	e00c      	b.n	801327c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      MIOS32_MIDI_SYSEX_Cmd_Ping(port, cmd_state, midi_in);
      break;
    default:
      // unknown command
      // TODO: send 0xf7 if merger enabled
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
 8013262:	210e      	movs	r1, #14
 8013264:	460a      	mov	r2, r1
 8013266:	4620      	mov	r0, r4
 8013268:	f7ff fdf6 	bl	8012e58 <MIOS32_MIDI_SYSEX_SendAck>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 801326c:	4815      	ldr	r0, [pc, #84]	; (80132c4 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
  sysex_cmd = 0;
 801326e:	4905      	ldr	r1, [pc, #20]	; (8013284 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8013270:	7803      	ldrb	r3, [r0, #0]
  sysex_cmd = 0;
 8013272:	2200      	movs	r2, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8013274:	f36f 0307 	bfc	r3, #0, #8
 8013278:	7003      	strb	r3, [r0, #0]
  sysex_cmd = 0;
 801327a:	700a      	strb	r2, [r1, #0]
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
      MIOS32_MIDI_SYSEX_CmdFinished();      
  }

  return 0; // no error
}
 801327c:	2000      	movs	r0, #0
 801327e:	b00b      	add	sp, #44	; 0x2c
 8013280:	bd30      	pop	{r4, r5, pc}
 8013282:	bf00      	nop
 8013284:	20000c00 	.word	0x20000c00
 8013288:	20000c0d 	.word	0x20000c0d
 801328c:	0801f6ad 	.word	0x0801f6ad
 8013290:	0801f521 	.word	0x0801f521
 8013294:	0801f6b4 	.word	0x0801f6b4
 8013298:	0801f6c6 	.word	0x0801f6c6
 801329c:	0801f6d0 	.word	0x0801f6d0
 80132a0:	0801f6d2 	.word	0x0801f6d2
 80132a4:	0801e552 	.word	0x0801e552
 80132a8:	0801f5a7 	.word	0x0801f5a7
 80132ac:	20000006 	.word	0x20000006
 80132b0:	20000c08 	.word	0x20000c08
 80132b4:	20000c1c 	.word	0x20000c1c
 80132b8:	20000c0c 	.word	0x20000c0c
 80132bc:	20000005 	.word	0x20000005
 80132c0:	0801f6d5 	.word	0x0801f6d5
 80132c4:	20000c14 	.word	0x20000c14

080132c8 <MIOS32_MIDI_SYSEX_Parser>:
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 80132c8:	29f7      	cmp	r1, #247	; 0xf7

/////////////////////////////////////////////////////////////////////////////
// This function parses an incoming sysex stream for MIOS32 commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
 80132ca:	b510      	push	{r4, lr}
 80132cc:	460a      	mov	r2, r1
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 80132ce:	d85a      	bhi.n	8013386 <MIOS32_MIDI_SYSEX_Parser+0xbe>
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
 80132d0:	4b2e      	ldr	r3, [pc, #184]	; (801338c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 80132d2:	7819      	ldrb	r1, [r3, #0]
 80132d4:	f001 0308 	and.w	r3, r1, #8
 80132d8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80132dc:	b11b      	cbz	r3, 80132e6 <MIOS32_MIDI_SYSEX_Parser+0x1e>
 80132de:	4b2c      	ldr	r3, [pc, #176]	; (8013390 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	4283      	cmp	r3, r0
 80132e4:	d14c      	bne.n	8013380 <MIOS32_MIDI_SYSEX_Parser+0xb8>
  // USB upload is only allowed via USB0
  // this covers the scenario where other USB1..7 ports are used for MIDI Port forwarding, and a MIOS8 core
  // is connected to one of these ports
  // MIOS Studio reports "Detected MIOS8 and MIOS32 response - selection not supported yet!" in this case
  // By ignoring >= USB1 <= USB7 we have at least a workaround which works (for example) for MIDIbox LC
  if( port >= USB1 && port <= USB7 )
 80132e6:	f1a0 0311 	sub.w	r3, r0, #17
 80132ea:	2b06      	cmp	r3, #6
 80132ec:	d948      	bls.n	8013380 <MIOS32_MIDI_SYSEX_Parser+0xb8>
    return -1;

  last_sysex_port = port;
 80132ee:	4b28      	ldr	r3, [pc, #160]	; (8013390 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 80132f0:	7018      	strb	r0, [r3, #0]

  // branch depending on state
  if( !sysex_state.general.MY_SYSEX ) {
 80132f2:	bb04      	cbnz	r4, 8013336 <MIOS32_MIDI_SYSEX_Parser+0x6e>
    if( (sysex_state.general.CTR < sizeof(mios32_midi_sysex_header) && midi_in != mios32_midi_sysex_header[sysex_state.general.CTR]) ||
 80132f4:	4825      	ldr	r0, [pc, #148]	; (801338c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 80132f6:	7803      	ldrb	r3, [r0, #0]
 80132f8:	f003 0307 	and.w	r3, r3, #7
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d803      	bhi.n	8013308 <MIOS32_MIDI_SYSEX_Parser+0x40>
 8013300:	4824      	ldr	r0, [pc, #144]	; (8013394 <MIOS32_MIDI_SYSEX_Parser+0xcc>)
 8013302:	5cc0      	ldrb	r0, [r0, r3]
 8013304:	4290      	cmp	r0, r2
 8013306:	d121      	bne.n	801334c <MIOS32_MIDI_SYSEX_Parser+0x84>
 8013308:	f001 0107 	and.w	r1, r1, #7
 801330c:	2905      	cmp	r1, #5
 801330e:	d103      	bne.n	8013318 <MIOS32_MIDI_SYSEX_Parser+0x50>
	(sysex_state.general.CTR == sizeof(mios32_midi_sysex_header) && midi_in != sysex_device_id) ) {
 8013310:	4821      	ldr	r0, [pc, #132]	; (8013398 <MIOS32_MIDI_SYSEX_Parser+0xd0>)
 8013312:	7801      	ldrb	r1, [r0, #0]
 8013314:	4291      	cmp	r1, r2
 8013316:	d119      	bne.n	801334c <MIOS32_MIDI_SYSEX_Parser+0x84>
      // incoming byte doesn't match
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      if( ++sysex_state.general.CTR > sizeof(mios32_midi_sysex_header) ) {
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	4b1c      	ldr	r3, [pc, #112]	; (801338c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 801331c:	7819      	ldrb	r1, [r3, #0]
 801331e:	f002 0007 	and.w	r0, r2, #7
 8013322:	f360 0102 	bfi	r1, r0, #0, #3
 8013326:	2805      	cmp	r0, #5
 8013328:	7019      	strb	r1, [r3, #0]
 801332a:	d92c      	bls.n	8013386 <MIOS32_MIDI_SYSEX_Parser+0xbe>
	// complete header received, waiting for data
	sysex_state.general.MY_SYSEX = 1;
 801332c:	b2ca      	uxtb	r2, r1
 801332e:	f042 0008 	orr.w	r0, r2, #8
 8013332:	7018      	strb	r0, [r3, #0]
 8013334:	e027      	b.n	8013386 <MIOS32_MIDI_SYSEX_Parser+0xbe>
      }
    }
  } else {
    // check for end of SysEx message or invalid status byte
    if( midi_in >= 0x80 ) {
 8013336:	0613      	lsls	r3, r2, #24
 8013338:	d511      	bpl.n	801335e <MIOS32_MIDI_SYSEX_Parser+0x96>
      if( midi_in == 0xf7 && sysex_state.general.CMD ) {
 801333a:	2af7      	cmp	r2, #247	; 0xf7
 801333c:	d106      	bne.n	801334c <MIOS32_MIDI_SYSEX_Parser+0x84>
 801333e:	f001 0110 	and.w	r1, r1, #16
 8013342:	b2cb      	uxtb	r3, r1
 8013344:	b113      	cbz	r3, 801334c <MIOS32_MIDI_SYSEX_Parser+0x84>
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
 8013346:	2102      	movs	r1, #2
 8013348:	f7ff fee4 	bl	8013114 <MIOS32_MIDI_SYSEX_Cmd>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 801334c:	4b0f      	ldr	r3, [pc, #60]	; (801338c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
  sysex_cmd = 0;
 801334e:	4a13      	ldr	r2, [pc, #76]	; (801339c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8013350:	7819      	ldrb	r1, [r3, #0]
  sysex_cmd = 0;
 8013352:	2000      	movs	r0, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8013354:	f36f 0107 	bfc	r1, #0, #8
 8013358:	7019      	strb	r1, [r3, #0]
  sysex_cmd = 0;
 801335a:	7010      	strb	r0, [r2, #0]
 801335c:	bd10      	pop	{r4, pc}
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
      }
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
 801335e:	f001 0410 	and.w	r4, r1, #16
 8013362:	b2e4      	uxtb	r4, r4
 8013364:	b944      	cbnz	r4, 8013378 <MIOS32_MIDI_SYSEX_Parser+0xb0>
	sysex_state.general.CMD = 1;
 8013366:	4b09      	ldr	r3, [pc, #36]	; (801338c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8013368:	7819      	ldrb	r1, [r3, #0]
 801336a:	f041 0110 	orr.w	r1, r1, #16
 801336e:	7019      	strb	r1, [r3, #0]
	sysex_cmd = midi_in;
 8013370:	4b0a      	ldr	r3, [pc, #40]	; (801339c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
 8013372:	4621      	mov	r1, r4
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
	sysex_state.general.CMD = 1;
	sysex_cmd = midi_in;
 8013374:	701a      	strb	r2, [r3, #0]
 8013376:	e000      	b.n	801337a <MIOS32_MIDI_SYSEX_Parser+0xb2>
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
      }
      else
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
 8013378:	2101      	movs	r1, #1
 801337a:	f7ff fecb 	bl	8013114 <MIOS32_MIDI_SYSEX_Cmd>
 801337e:	e002      	b.n	8013386 <MIOS32_MIDI_SYSEX_Parser+0xbe>
  if( midi_in >= 0xf8 )
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
    return -1;
 8013380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013384:	bd10      	pop	{r4, pc}
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
    return 0;
 8013386:	2000      	movs	r0, #0
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
    }
  }

  return 0; // no error
}
 8013388:	bd10      	pop	{r4, pc}
 801338a:	bf00      	nop
 801338c:	20000c14 	.word	0x20000c14
 8013390:	20000c0c 	.word	0x20000c0c
 8013394:	0801f72b 	.word	0x0801f72b
 8013398:	20000c0e 	.word	0x20000c0e
 801339c:	20000c00 	.word	0x20000c00

080133a0 <MIOS32_MIDI_ReceivePackage>:
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 80133a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a4:	f001 030f 	and.w	r3, r1, #15
 80133a8:	4617      	mov	r7, r2
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 80133aa:	f103 0208 	add.w	r2, r3, #8
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 80133ae:	4688      	mov	r8, r1
 80133b0:	f3c1 2907 	ubfx	r9, r1, #8, #8
 80133b4:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80133b8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 80133bc:	f002 010f 	and.w	r1, r2, #15
 80133c0:	2906      	cmp	r1, #6
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 80133c2:	4606      	mov	r6, r0
  
  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;
  
  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 80133c4:	d803      	bhi.n	80133ce <MIOS32_MIDI_ReceivePackage+0x2e>
    if( callback_package != NULL )
 80133c6:	2f00      	cmp	r7, #0
 80133c8:	f040 8091 	bne.w	80134ee <MIOS32_MIDI_ReceivePackage+0x14e>
 80133cc:	e0f1      	b.n	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 80133ce:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 80133d2:	d008      	beq.n	80133e6 <MIOS32_MIDI_ReceivePackage+0x46>
       ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 80133d4:	f103 000c 	add.w	r0, r3, #12
  if( package.type >= 0x8 && package.type < 0xf ) {
    if( callback_package != NULL )
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 80133d8:	f000 020f 	and.w	r2, r0, #15
 80133dc:	2a03      	cmp	r2, #3
 80133de:	d82c      	bhi.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
       ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 80133e0:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 80133e4:	d029      	beq.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
 80133e6:	4a74      	ldr	r2, [pc, #464]	; (80135b8 <MIOS32_MIDI_ReceivePackage+0x218>)
 80133e8:	e9d2 4500 	ldrd	r4, r5, [r2]
 80133ec:	ea54 0105 	orrs.w	r1, r4, r5
 80133f0:	d123      	bne.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
        switch( port & 0xf0 ) {
 80133f2:	f006 00f0 	and.w	r0, r6, #240	; 0xf0
 80133f6:	2830      	cmp	r0, #48	; 0x30
 80133f8:	f04f 0100 	mov.w	r1, #0
 80133fc:	d00c      	beq.n	8013418 <MIOS32_MIDI_ReceivePackage+0x78>
 80133fe:	2850      	cmp	r0, #80	; 0x50
 8013400:	d013      	beq.n	801342a <MIOS32_MIDI_ReceivePackage+0x8a>
 8013402:	2810      	cmp	r0, #16
 8013404:	d119      	bne.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
          case USB0://..15
            sysex_timeout_ctr = 0;
 8013406:	486d      	ldr	r0, [pc, #436]	; (80135bc <MIOS32_MIDI_ReceivePackage+0x21c>)
 8013408:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 801340a:	f006 010f 	and.w	r1, r6, #15
 801340e:	2001      	movs	r0, #1
 8013410:	fa00 f101 	lsl.w	r1, r0, r1
 8013414:	8011      	strh	r1, [r2, #0]
            break;
 8013416:	e010      	b.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
          case UART0://..15
            // already done in MIOS32_UART_MIDI_PackageReceive()
            break;
          case IIC0://..15
            sysex_timeout_ctr = 0;
 8013418:	4868      	ldr	r0, [pc, #416]	; (80135bc <MIOS32_MIDI_ReceivePackage+0x21c>)
 801341a:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 801341c:	f006 010f 	and.w	r1, r6, #15
 8013420:	2001      	movs	r0, #1
 8013422:	fa00 f101 	lsl.w	r1, r0, r1
 8013426:	8051      	strh	r1, [r2, #2]
            break;
 8013428:	e007      	b.n	801343a <MIOS32_MIDI_ReceivePackage+0x9a>
          case SPIM0://..15
            sysex_timeout_ctr = 0;
 801342a:	4864      	ldr	r0, [pc, #400]	; (80135bc <MIOS32_MIDI_ReceivePackage+0x21c>)
 801342c:	8001      	strh	r1, [r0, #0]
            sysex_timeout_ctr_flags.spi_receives = (1 << (port & 0xf));
 801342e:	f006 010f 	and.w	r1, r6, #15
 8013432:	2001      	movs	r0, #1
 8013434:	fa00 f101 	lsl.w	r1, r0, r1
 8013438:	8091      	strh	r1, [r2, #4]
        }
      }
    }
    
    u8 filter_sysex = 0;
    switch( package.type ) {
 801343a:	2b0f      	cmp	r3, #15
 801343c:	f200 80b9 	bhi.w	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
 8013440:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013444:	00520052 	.word	0x00520052
 8013448:	00520052 	.word	0x00520052
 801344c:	004c0010 	.word	0x004c0010
 8013450:	00580058 	.word	0x00580058
 8013454:	00b700b7 	.word	0x00b700b7
 8013458:	00b700b7 	.word	0x00b700b7
 801345c:	00b700b7 	.word	0x00b700b7
 8013460:	001000b7 	.word	0x001000b7
        break;
        
      case 0x4: // SysEx starts or continues (3 bytes)
      case 0xf: // Single byte is interpreted as SysEx as well (I noticed that portmidi sometimes sends single bytes!)
        
        if( package.evnt0 >= 0xf8 ) { // relevant for package type 0xf
 8013464:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 8013468:	d83e      	bhi.n	80134e8 <MIOS32_MIDI_ReceivePackage+0x148>
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
        if( package.type != 0x0f ) {
 801346a:	f36f 1807 	bfc	r8, #4, #4
          if( callback_package != NULL )
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 801346e:	4630      	mov	r0, r6
 8013470:	4649      	mov	r1, r9
        if( package.type != 0x0f ) {
 8013472:	f008 050f 	and.w	r5, r8, #15
          if( callback_package != NULL )
            callback_package(port, package); // -> realtime event is forwarded as event
          break;
        }
        
        MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 8013476:	f7ff ff27 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
        if( package.type != 0x0f ) {
 801347a:	2d0f      	cmp	r5, #15
 801347c:	d007      	beq.n	801348e <MIOS32_MIDI_ReceivePackage+0xee>
          MIOS32_MIDI_SYSEX_Parser(port, package.evnt1); // -> forward to MIOS32 SysEx Parser
 801347e:	4659      	mov	r1, fp
 8013480:	4630      	mov	r0, r6
 8013482:	f7ff ff21 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
          MIOS32_MIDI_SYSEX_Parser(port, package.evnt2); // -> forward to MIOS32 SysEx Parser
 8013486:	4630      	mov	r0, r6
 8013488:	4651      	mov	r1, sl
 801348a:	f7ff ff1d 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
        }
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 801348e:	4b4c      	ldr	r3, [pc, #304]	; (80135c0 <MIOS32_MIDI_ReceivePackage+0x220>)
 8013490:	781a      	ldrb	r2, [r3, #0]
 8013492:	f002 0008 	and.w	r0, r2, #8
 8013496:	b2c1      	uxtb	r1, r0
 8013498:	2900      	cmp	r1, #0
 801349a:	f040 808a 	bne.w	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
          if( sysex_callback_func != NULL ) {
 801349e:	4c49      	ldr	r4, [pc, #292]	; (80135c4 <MIOS32_MIDI_ReceivePackage+0x224>)
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 8083 	beq.w	80135ae <MIOS32_MIDI_ReceivePackage+0x20e>
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 80134a8:	4649      	mov	r1, r9
 80134aa:	4630      	mov	r0, r6
 80134ac:	4798      	blx	r3
            if( package.type != 0x0f ) {
 80134ae:	2d0f      	cmp	r5, #15
        }
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 80134b0:	4681      	mov	r9, r0
 80134b2:	b2c1      	uxtb	r1, r0
            if( package.type != 0x0f ) {
 80134b4:	d00d      	beq.n	80134d2 <MIOS32_MIDI_ReceivePackage+0x132>
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 80134b6:	6825      	ldr	r5, [r4, #0]
 80134b8:	4659      	mov	r1, fp
 80134ba:	4630      	mov	r0, r6
 80134bc:	47a8      	blx	r5
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 80134be:	4651      	mov	r1, sl
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
            if( package.type != 0x0f ) {
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 80134c0:	4605      	mov	r5, r0
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 80134c2:	6822      	ldr	r2, [r4, #0]
 80134c4:	4630      	mov	r0, r6
 80134c6:	4790      	blx	r2
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
          if( sysex_callback_func != NULL ) {
            filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
            if( package.type != 0x0f ) {
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 80134c8:	4328      	orrs	r0, r5
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 80134ca:	ea40 0909 	orr.w	r9, r0, r9
 80134ce:	fa5f f189 	uxtb.w	r1, r9
            }
          }
          
          if( callback_package != NULL && !filter_sysex )
 80134d2:	2f00      	cmp	r7, #0
 80134d4:	d06d      	beq.n	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
 80134d6:	2900      	cmp	r1, #0
 80134d8:	d16b      	bne.n	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
 80134da:	e060      	b.n	801359e <MIOS32_MIDI_ReceivePackage+0x1fe>
        }
#endif
        break;
        
      case 0x5:   // Single-byte System Common Message or SysEx ends with following single byte.
        if( (package.evnt0 >= 0xf8) || (package.evnt0 == 0xf6) ) {
 80134dc:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 80134e0:	d802      	bhi.n	80134e8 <MIOS32_MIDI_ReceivePackage+0x148>
 80134e2:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 80134e6:	d105      	bne.n	80134f4 <MIOS32_MIDI_ReceivePackage+0x154>
          if( callback_package != NULL )
 80134e8:	2f00      	cmp	r7, #0
 80134ea:	d062      	beq.n	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
            callback_package(port, package); // -> forwarded as event
 80134ec:	4630      	mov	r0, r6
 80134ee:	f028 01f0 	bic.w	r1, r8, #240	; 0xf0
 80134f2:	e056      	b.n	80135a2 <MIOS32_MIDI_ReceivePackage+0x202>
        }
        // no >= 0xf8 or == 0xf6 event: continue!
        
      case 0x6:   // SysEx ends with following two bytes.
      case 0x7: { // SysEx ends with following three bytes.
        u8 num_bytes = package.type - 0x5 + 1;
 80134f4:	1f1c      	subs	r4, r3, #4
        u8 current_byte = 0;
        
        if( num_bytes >= 1 ) {
 80134f6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80134fa:	d054      	beq.n	80135a6 <MIOS32_MIDI_ReceivePackage+0x206>
          current_byte = package.evnt0;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 80134fc:	4630      	mov	r0, r6
 80134fe:	4649      	mov	r1, r9
 8013500:	f7ff fee2 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8013504:	4b2e      	ldr	r3, [pc, #184]	; (80135c0 <MIOS32_MIDI_ReceivePackage+0x220>)
 8013506:	781d      	ldrb	r5, [r3, #0]
 8013508:	f005 0208 	and.w	r2, r5, #8
 801350c:	b2d0      	uxtb	r0, r2
 801350e:	b938      	cbnz	r0, 8013520 <MIOS32_MIDI_ReceivePackage+0x180>
            if( sysex_callback_func != NULL )
 8013510:	492c      	ldr	r1, [pc, #176]	; (80135c4 <MIOS32_MIDI_ReceivePackage+0x224>)
 8013512:	680b      	ldr	r3, [r1, #0]
 8013514:	b133      	cbz	r3, 8013524 <MIOS32_MIDI_ReceivePackage+0x184>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8013516:	4630      	mov	r0, r6
 8013518:	4649      	mov	r1, r9
 801351a:	4798      	blx	r3
 801351c:	b2c5      	uxtb	r5, r0
 801351e:	e002      	b.n	8013526 <MIOS32_MIDI_ReceivePackage+0x186>
            // no timeout protection for remaining interfaces (yet)
        }
      }
    }
    
    u8 filter_sysex = 0;
 8013520:	2500      	movs	r5, #0
 8013522:	e000      	b.n	8013526 <MIOS32_MIDI_ReceivePackage+0x186>
 8013524:	461d      	mov	r5, r3
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 2 ) {
 8013526:	2c01      	cmp	r4, #1
 8013528:	d03f      	beq.n	80135aa <MIOS32_MIDI_ReceivePackage+0x20a>
          current_byte = package.evnt1;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 801352a:	4659      	mov	r1, fp
 801352c:	4630      	mov	r0, r6
 801352e:	f7ff fecb 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8013532:	4a23      	ldr	r2, [pc, #140]	; (80135c0 <MIOS32_MIDI_ReceivePackage+0x220>)
 8013534:	7810      	ldrb	r0, [r2, #0]
 8013536:	f000 0108 	and.w	r1, r0, #8
 801353a:	b2cb      	uxtb	r3, r1
 801353c:	b93b      	cbnz	r3, 801354e <MIOS32_MIDI_ReceivePackage+0x1ae>
            if( sysex_callback_func != NULL )
 801353e:	4a21      	ldr	r2, [pc, #132]	; (80135c4 <MIOS32_MIDI_ReceivePackage+0x224>)
 8013540:	6813      	ldr	r3, [r2, #0]
 8013542:	b123      	cbz	r3, 801354e <MIOS32_MIDI_ReceivePackage+0x1ae>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8013544:	4630      	mov	r0, r6
 8013546:	4659      	mov	r1, fp
 8013548:	4798      	blx	r3
 801354a:	4328      	orrs	r0, r5
 801354c:	b2c5      	uxtb	r5, r0
          }
#endif
        }
        
        if( num_bytes >= 3 ) {
 801354e:	2c02      	cmp	r4, #2
 8013550:	d012      	beq.n	8013578 <MIOS32_MIDI_ReceivePackage+0x1d8>
          current_byte = package.evnt2;
          MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8013552:	4651      	mov	r1, sl
 8013554:	4630      	mov	r0, r6
 8013556:	f7ff feb7 	bl	80132c8 <MIOS32_MIDI_SYSEX_Parser>
          
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
          if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 801355a:	4819      	ldr	r0, [pc, #100]	; (80135c0 <MIOS32_MIDI_ReceivePackage+0x220>)
 801355c:	7801      	ldrb	r1, [r0, #0]
 801355e:	f001 0208 	and.w	r2, r1, #8
 8013562:	b2d3      	uxtb	r3, r2
 8013564:	b94b      	cbnz	r3, 801357a <MIOS32_MIDI_ReceivePackage+0x1da>
            if( sysex_callback_func != NULL )
 8013566:	4817      	ldr	r0, [pc, #92]	; (80135c4 <MIOS32_MIDI_ReceivePackage+0x224>)
 8013568:	6802      	ldr	r2, [r0, #0]
 801356a:	b132      	cbz	r2, 801357a <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 801356c:	4630      	mov	r0, r6
 801356e:	4651      	mov	r1, sl
 8013570:	4790      	blx	r2
 8013572:	4328      	orrs	r0, r5
 8013574:	b2c5      	uxtb	r5, r0
 8013576:	e000      	b.n	801357a <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 3 ) {
 8013578:	46da      	mov	sl, fp
          }
#endif
        }
        
        // reset timeout protection if required
        if( current_byte == 0xf7 )
 801357a:	f1ba 0ff7 	cmp.w	sl, #247	; 0xf7
 801357e:	d104      	bne.n	801358a <MIOS32_MIDI_ReceivePackage+0x1ea>
          sysex_timeout_ctr_flags.ALL = 0;
 8013580:	4b0d      	ldr	r3, [pc, #52]	; (80135b8 <MIOS32_MIDI_ReceivePackage+0x218>)
 8013582:	2000      	movs	r0, #0
 8013584:	2100      	movs	r1, #0
 8013586:	e9c3 0100 	strd	r0, r1, [r3]
        
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
        if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 801358a:	490d      	ldr	r1, [pc, #52]	; (80135c0 <MIOS32_MIDI_ReceivePackage+0x220>)
 801358c:	7808      	ldrb	r0, [r1, #0]
 801358e:	f000 0208 	and.w	r2, r0, #8
 8013592:	b2d3      	uxtb	r3, r2
 8013594:	b96b      	cbnz	r3, 80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
          // forward as package if not filtered
          if( callback_package != NULL && !filter_sysex )
 8013596:	b167      	cbz	r7, 80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
 8013598:	b95d      	cbnz	r5, 80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
            callback_package(port, package);
 801359a:	f365 1807 	bfi	r8, r5, #4, #4
 801359e:	4630      	mov	r0, r6
 80135a0:	4641      	mov	r1, r8
 80135a2:	47b8      	blx	r7
 80135a4:	e005      	b.n	80135b2 <MIOS32_MIDI_ReceivePackage+0x212>
            // no timeout protection for remaining interfaces (yet)
        }
      }
    }
    
    u8 filter_sysex = 0;
 80135a6:	4625      	mov	r5, r4
 80135a8:	e7ef      	b.n	801358a <MIOS32_MIDI_ReceivePackage+0x1ea>
              filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
          }
#endif
        }
        
        if( num_bytes >= 2 ) {
 80135aa:	46ca      	mov	sl, r9
 80135ac:	e7e5      	b.n	801357a <MIOS32_MIDI_ReceivePackage+0x1da>
              filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
              filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
            }
          }
          
          if( callback_package != NULL && !filter_sysex )
 80135ae:	2f00      	cmp	r7, #0
 80135b0:	d1f5      	bne.n	801359e <MIOS32_MIDI_ReceivePackage+0x1fe>
      } break;
    }
  }
  
  return 0; // no error
}
 80135b2:	2000      	movs	r0, #0
 80135b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b8:	20000c20 	.word	0x20000c20
 80135bc:	20000c10 	.word	0x20000c10
 80135c0:	20000c14 	.word	0x20000c14
 80135c4:	20000c28 	.word	0x20000c28

080135c8 <MIOS32_MIDI_Receive_Handler>:
//! which can be installed via MIOS32_MIDI_SysExCallback_Init()
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Receive_Handler(void *_callback_package)
{
 80135c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135cc:	4606      	mov	r6, r0
 80135ce:	b08e      	sub	sp, #56	; 0x38
  // handle all USB MIDI packages
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_USB_MIDI_PackageReceive(&package)) >= 0 ) {
 80135d0:	a801      	add	r0, sp, #4
 80135d2:	f002 fbe7 	bl	8015da4 <MIOS32_USB_MIDI_PackageReceive>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	db07      	blt.n	80135ea <MIOS32_MIDI_Receive_Handler+0x22>
      MIOS32_MIDI_ReceivePackage(USB0 + package.cable, package, _callback_package);
 80135da:	9901      	ldr	r1, [sp, #4]
 80135dc:	f3c1 1003 	ubfx	r0, r1, #4, #4
 80135e0:	3010      	adds	r0, #16
 80135e2:	4632      	mov	r2, r6
 80135e4:	f7ff fedc 	bl	80133a0 <MIOS32_MIDI_ReceivePackage>
 80135e8:	e7f2      	b.n	80135d0 <MIOS32_MIDI_Receive_Handler+0x8>
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 80135ea:	4d42      	ldr	r5, [pc, #264]	; (80136f4 <MIOS32_MIDI_Receive_Handler+0x12c>)
 80135ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135ee:	ac04      	add	r4, sp, #16
 80135f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135f6:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 80135fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 80135fe:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8013602:	b34b      	cbz	r3, 8013658 <MIOS32_MIDI_Receive_Handler+0x90>
 8013604:	2400      	movs	r4, #0
 8013606:	4625      	mov	r5, r4
 8013608:	4627      	mov	r7, r4
      int intf = 0;
      do {
	mios32_midi_package_t package;

	// last table entry?
	if( !midi_intf_table[intf].port ) {
 801360a:	a80e      	add	r0, sp, #56	; 0x38
 801360c:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 8013610:	f811 2c28 	ldrb.w	r2, [r1, #-40]
 8013614:	b912      	cbnz	r2, 801361c <MIOS32_MIDI_Receive_Handler+0x54>
	  if( !packages_forwarded_this_round )
 8013616:	b1fd      	cbz	r5, 8013658 <MIOS32_MIDI_Receive_Handler+0x90>
	    break; // no new package

	  intf = 0; // at least one package: restart
 8013618:	4614      	mov	r4, r2
	  packages_forwarded_this_round = 0;
 801361a:	4615      	mov	r5, r2
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 801361c:	ab0e      	add	r3, sp, #56	; 0x38
 801361e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8013622:	a902      	add	r1, sp, #8
	  intf = 0; // at least one package: restart
	  packages_forwarded_this_round = 0;
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8013624:	f810 8c28 	ldrb.w	r8, [r0, #-40]
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8013628:	f850 2c24 	ldr.w	r2, [r0, #-36]
 801362c:	f008 000f 	and.w	r0, r8, #15
 8013630:	4790      	blx	r2

	if( status == -10 ) { // receive timeout?
 8013632:	f110 0f0a 	cmn.w	r0, #10
 8013636:	d103      	bne.n	8013640 <MIOS32_MIDI_Receive_Handler+0x78>
	  MIOS32_MIDI_TimeOut(port);
 8013638:	4640      	mov	r0, r8
 801363a:	f7ff fceb 	bl	8013014 <MIOS32_MIDI_TimeOut>
 801363e:	e008      	b.n	8013652 <MIOS32_MIDI_Receive_Handler+0x8a>
	} else if( status >= 0 ) { // message received?
 8013640:	2800      	cmp	r0, #0
 8013642:	db06      	blt.n	8013652 <MIOS32_MIDI_Receive_Handler+0x8a>
	  ++packages_forwarded;
	  ++packages_forwarded_this_round;
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 8013644:	4640      	mov	r0, r8
 8013646:	9902      	ldr	r1, [sp, #8]
 8013648:	4632      	mov	r2, r6
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);

	if( status == -10 ) { // receive timeout?
	  MIOS32_MIDI_TimeOut(port);
	} else if( status >= 0 ) { // message received?
	  ++packages_forwarded;
 801364a:	3701      	adds	r7, #1
	  ++packages_forwarded_this_round;
 801364c:	3501      	adds	r5, #1
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 801364e:	f7ff fea7 	bl	80133a0 <MIOS32_MIDI_ReceivePackage>
	}

	++intf;
 8013652:	3401      	adds	r4, #1
      } while( packages_forwarded < 10 );
 8013654:	2f09      	cmp	r7, #9
 8013656:	ddd8      	ble.n	801360a <MIOS32_MIDI_Receive_Handler+0x42>
  // handle all SPI MIDI packages
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_SPI_MIDI_PackageReceive(&package)) >= 0 ) {
 8013658:	a803      	add	r0, sp, #12
 801365a:	f000 faa3 	bl	8013ba4 <MIOS32_SPI_MIDI_PackageReceive>
 801365e:	2800      	cmp	r0, #0
 8013660:	db07      	blt.n	8013672 <MIOS32_MIDI_Receive_Handler+0xaa>
      MIOS32_MIDI_ReceivePackage(SPIM0 + package.cable, package, _callback_package);
 8013662:	9903      	ldr	r1, [sp, #12]
 8013664:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8013668:	3050      	adds	r0, #80	; 0x50
 801366a:	4632      	mov	r2, r6
 801366c:	f7ff fe98 	bl	80133a0 <MIOS32_MIDI_ReceivePackage>
 8013670:	e7f2      	b.n	8013658 <MIOS32_MIDI_Receive_Handler+0x90>
  }
#endif
  

  // SysEx timeout detected by this handler?
  if( sysex_timeout_ctr_flags.ALL && sysex_timeout_ctr > 1000 ) {
 8013672:	4921      	ldr	r1, [pc, #132]	; (80136f8 <MIOS32_MIDI_Receive_Handler+0x130>)
 8013674:	e9d1 2300 	ldrd	r2, r3, [r1]
 8013678:	ea52 0003 	orrs.w	r0, r2, r3
 801367c:	d035      	beq.n	80136ea <MIOS32_MIDI_Receive_Handler+0x122>
 801367e:	4b1f      	ldr	r3, [pc, #124]	; (80136fc <MIOS32_MIDI_Receive_Handler+0x134>)
 8013680:	8818      	ldrh	r0, [r3, #0]
 8013682:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8013686:	d930      	bls.n	80136ea <MIOS32_MIDI_Receive_Handler+0x122>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
 8013688:	880a      	ldrh	r2, [r1, #0]
 801368a:	b162      	cbz	r2, 80136a6 <MIOS32_MIDI_Receive_Handler+0xde>
 801368c:	2100      	movs	r1, #0
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
 801368e:	fa42 f301 	asr.w	r3, r2, r1
 8013692:	f013 0001 	ands.w	r0, r3, #1
 8013696:	d103      	bne.n	80136a0 <MIOS32_MIDI_Receive_Handler+0xd8>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8013698:	3101      	adds	r1, #1
 801369a:	2910      	cmp	r1, #16
 801369c:	d1f7      	bne.n	801368e <MIOS32_MIDI_Receive_Handler+0xc6>
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 801369e:	4601      	mov	r1, r0
      timeout_port = USB0 + i;
 80136a0:	3110      	adds	r1, #16
 80136a2:	b2c8      	uxtb	r0, r1
 80136a4:	e01a      	b.n	80136dc <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
 80136a6:	884b      	ldrh	r3, [r1, #2]
 80136a8:	b15b      	cbz	r3, 80136c2 <MIOS32_MIDI_Receive_Handler+0xfa>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
 80136aa:	fa43 f002 	asr.w	r0, r3, r2
 80136ae:	f010 0101 	ands.w	r1, r0, #1
 80136b2:	d103      	bne.n	80136bc <MIOS32_MIDI_Receive_Handler+0xf4>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = USB0 + i;
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 80136b4:	3201      	adds	r2, #1
 80136b6:	2a10      	cmp	r2, #16
 80136b8:	d1f7      	bne.n	80136aa <MIOS32_MIDI_Receive_Handler+0xe2>
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 80136ba:	460a      	mov	r2, r1
      timeout_port = IIC0 + i;
 80136bc:	3230      	adds	r2, #48	; 0x30
 80136be:	b2d0      	uxtb	r0, r2
 80136c0:	e00c      	b.n	80136dc <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
 80136c2:	8888      	ldrh	r0, [r1, #4]
 80136c4:	b150      	cbz	r0, 80136dc <MIOS32_MIDI_Receive_Handler+0x114>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
 80136c6:	fa40 f103 	asr.w	r1, r0, r3
 80136ca:	f011 0201 	ands.w	r2, r1, #1
 80136ce:	d103      	bne.n	80136d8 <MIOS32_MIDI_Receive_Handler+0x110>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = IIC0 + i;
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 80136d0:	3301      	adds	r3, #1
 80136d2:	2b10      	cmp	r3, #16
 80136d4:	d1f7      	bne.n	80136c6 <MIOS32_MIDI_Receive_Handler+0xfe>
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 80136d6:	4613      	mov	r3, r2
      timeout_port = SPIM0 + i;
 80136d8:	3350      	adds	r3, #80	; 0x50
 80136da:	b2d8      	uxtb	r0, r3
    }

    MIOS32_MIDI_TimeOut(timeout_port);
 80136dc:	f7ff fc9a 	bl	8013014 <MIOS32_MIDI_TimeOut>
    sysex_timeout_ctr_flags.ALL = 0;
 80136e0:	4805      	ldr	r0, [pc, #20]	; (80136f8 <MIOS32_MIDI_Receive_Handler+0x130>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	2300      	movs	r3, #0
 80136e6:	e9c0 2300 	strd	r2, r3, [r0]
  }

  return 0;
}
 80136ea:	2000      	movs	r0, #0
 80136ec:	b00e      	add	sp, #56	; 0x38
 80136ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f2:	bf00      	nop
 80136f4:	0801f5d0 	.word	0x0801f5d0
 80136f8:	20000c20 	.word	0x20000c20
 80136fc:	20000c10 	.word	0x20000c10

08013700 <MIOS32_MIDI_DebugPortGet>:
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
}
 8013700:	4b01      	ldr	r3, [pc, #4]	; (8013708 <MIOS32_MIDI_DebugPortGet+0x8>)
 8013702:	7818      	ldrb	r0, [r3, #0]
 8013704:	4770      	bx	lr
 8013706:	bf00      	nop
 8013708:	20000005 	.word	0x20000005

0801370c <MIOS32_MIDI_DebugCommandCallback_Init>:
//! \param[in] callback_debug_command the callback function (NULL disables the callback)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugCommandCallback_Init(s32 (*callback_debug_command)(mios32_midi_port_t port, char c))
{
  debug_command_callback_func = callback_debug_command;
 801370c:	4b01      	ldr	r3, [pc, #4]	; (8013714 <MIOS32_MIDI_DebugCommandCallback_Init+0x8>)
 801370e:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 8013710:	2000      	movs	r0, #0
 8013712:	4770      	bx	lr
 8013714:	20000c1c 	.word	0x20000c1c

08013718 <MIOS32_OSC_Init>:
{
  if( mode > 0 )
    return -1; // only mode 0 supported yet

  return 0; // no error
}
 8013718:	2800      	cmp	r0, #0
 801371a:	bf14      	ite	ne
 801371c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8013720:	2000      	moveq	r0, #0
 8013722:	4770      	bx	lr

08013724 <MIOS32_COM_Init>:
s32 MIOS32_COM_Init(u32 mode)
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 8013724:	b938      	cbnz	r0, 8013736 <MIOS32_COM_Init+0x12>
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 8013726:	4b05      	ldr	r3, [pc, #20]	; (801373c <MIOS32_COM_Init+0x18>)

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 8013728:	4a05      	ldr	r2, [pc, #20]	; (8013740 <MIOS32_COM_Init+0x1c>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 801372a:	6018      	str	r0, [r3, #0]

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
  debug_port = MIOS32_COM_DEBUG_PORT;
 801372c:	4b05      	ldr	r3, [pc, #20]	; (8013744 <MIOS32_COM_Init+0x20>)

  // disable callback by default
  receive_callback_func = NULL;

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 801372e:	2110      	movs	r1, #16
 8013730:	7011      	strb	r1, [r2, #0]
  debug_port = MIOS32_COM_DEBUG_PORT;
 8013732:	7019      	strb	r1, [r3, #0]
#if MIOS32_UART0_ASSIGNMENT == 2 || MIOS32_UART1_ASSIGNMENT == 2 || MIOS32_UART2_ASSIGNMENT == 2 || MIOS32_UART3_ASSIGNMENT == 2
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
 8013734:	4770      	bx	lr
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
}
 801373a:	4770      	bx	lr
 801373c:	20000c30 	.word	0x20000c30
 8013740:	20000007 	.word	0x20000007
 8013744:	20000008 	.word	0x20000008

08013748 <MIOS32_COM_SendBuffer>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendBuffer(mios32_com_port_t port, u8 *buffer, u16 len)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8013748:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 801374c:	d104      	bne.n	8013758 <MIOS32_COM_SendBuffer+0x10>
    port = (port == COM_DEBUG) ? debug_port : default_port;
 801374e:	2801      	cmp	r0, #1
 8013750:	bf0c      	ite	eq
 8013752:	4b06      	ldreq	r3, [pc, #24]	; (801376c <MIOS32_COM_SendBuffer+0x24>)
 8013754:	4b06      	ldrne	r3, [pc, #24]	; (8013770 <MIOS32_COM_SendBuffer+0x28>)
 8013756:	7818      	ldrb	r0, [r3, #0]
  }

  // branch depending on selected port
  switch( port >> 4 ) {
 8013758:	0903      	lsrs	r3, r0, #4
 801375a:	2b02      	cmp	r3, #2
 801375c:	d103      	bne.n	8013766 <MIOS32_COM_SendBuffer+0x1e>
      return -1; // USB has been disabled
#endif

    case 2:
#if !defined(MIOS32_DONT_USE_UART)
      return MIOS32_UART_TxBufferPutMore(port & 0xf, buffer, len);
 801375e:	f000 000f 	and.w	r0, r0, #15
 8013762:	f002 bde9 	b.w	8016338 <MIOS32_UART_TxBufferPutMore>
      
    default:
      // invalid port
      return -1;
  }
}
 8013766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801376a:	4770      	bx	lr
 801376c:	20000008 	.word	0x20000008
 8013770:	20000007 	.word	0x20000007

08013774 <MIOS32_COM_SendChar>:
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 8013774:	b507      	push	{r0, r1, r2, lr}
 8013776:	ab02      	add	r3, sp, #8
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 8013778:	2201      	movs	r2, #1
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 801377a:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 801377e:	4619      	mov	r1, r3
 8013780:	f7ff ffe2 	bl	8013748 <MIOS32_COM_SendBuffer>
}
 8013784:	bd0e      	pop	{r1, r2, r3, pc}
	...

08013788 <MIOS32_COM_Receive_Handler>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
 8013788:	4b28      	ldr	r3, [pc, #160]	; (801382c <MIOS32_COM_Receive_Handler+0xa4>)
 801378a:	6818      	ldr	r0, [r3, #0]
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
 801378c:	b570      	push	{r4, r5, r6, lr}
  // no callback -> no polling
  if( receive_callback_func == NULL )
 801378e:	2800      	cmp	r0, #0
 8013790:	d045      	beq.n	801381e <MIOS32_COM_Receive_Handler+0x96>
 8013792:	2400      	movs	r4, #0
 8013794:	4625      	mov	r5, r4
 8013796:	4620      	mov	r0, r4
    // TODO: maybe a list based approach would be better
    // it would allow to add/remove interfaces dynamically
    // this would also allow to give certain ports a higher priority (to add them multiple times to the list)
    // it would also improve this spagetthi code ;)
    s32 status = -1;
    switch( intf++ ) {
 8013798:	1c46      	adds	r6, r0, #1
 801379a:	b2f6      	uxtb	r6, r6
 801379c:	2804      	cmp	r0, #4
 801379e:	d82b      	bhi.n	80137f8 <MIOS32_COM_Receive_Handler+0x70>
 80137a0:	e8df f000 	tbb	[pc, r0]
 80137a4:	160c0339 	.word	0x160c0339
 80137a8:	20          	.byte	0x20
 80137a9:	00          	.byte	0x00
      case 0: status = MIOS32_USB_COM_RxBufferGet(0); port = USB0; break;
#else
      case 0: status = -1; break;
#endif
#if !defined(MIOS32_DONT_USE_UART)
      case 1: if( MIOS32_UART_IsAssignedToMIDI(0) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(0); port = UART0; } break;
 80137aa:	2000      	movs	r0, #0
 80137ac:	f002 fb48 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80137b0:	bb88      	cbnz	r0, 8013816 <MIOS32_COM_Receive_Handler+0x8e>
 80137b2:	f002 fce7 	bl	8016184 <MIOS32_UART_RxBufferGet>
 80137b6:	4601      	mov	r1, r0
 80137b8:	2020      	movs	r0, #32
 80137ba:	e021      	b.n	8013800 <MIOS32_COM_Receive_Handler+0x78>
      case 2: if( MIOS32_UART_IsAssignedToMIDI(1) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(1); port = UART1; } break;
 80137bc:	2001      	movs	r0, #1
 80137be:	f002 fb3f 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80137c2:	bb40      	cbnz	r0, 8013816 <MIOS32_COM_Receive_Handler+0x8e>
 80137c4:	2001      	movs	r0, #1
 80137c6:	f002 fcdd 	bl	8016184 <MIOS32_UART_RxBufferGet>
 80137ca:	4601      	mov	r1, r0
 80137cc:	2021      	movs	r0, #33	; 0x21
 80137ce:	e017      	b.n	8013800 <MIOS32_COM_Receive_Handler+0x78>
      case 3: if( MIOS32_UART_IsAssignedToMIDI(2) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(2); port = UART2; } break;
 80137d0:	2002      	movs	r0, #2
 80137d2:	f002 fb35 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80137d6:	b9f0      	cbnz	r0, 8013816 <MIOS32_COM_Receive_Handler+0x8e>
 80137d8:	2002      	movs	r0, #2
 80137da:	f002 fcd3 	bl	8016184 <MIOS32_UART_RxBufferGet>
 80137de:	4601      	mov	r1, r0
 80137e0:	2022      	movs	r0, #34	; 0x22
 80137e2:	e00d      	b.n	8013800 <MIOS32_COM_Receive_Handler+0x78>
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
 80137e4:	2003      	movs	r0, #3
 80137e6:	f002 fb2b 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80137ea:	b9a0      	cbnz	r0, 8013816 <MIOS32_COM_Receive_Handler+0x8e>
 80137ec:	2003      	movs	r0, #3
 80137ee:	f002 fcc9 	bl	8016184 <MIOS32_UART_RxBufferGet>
 80137f2:	4601      	mov	r1, r0
 80137f4:	2023      	movs	r0, #35	; 0x23
 80137f6:	e003      	b.n	8013800 <MIOS32_COM_Receive_Handler+0x78>
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
 80137f8:	b17c      	cbz	r4, 801381a <MIOS32_COM_Receive_Handler+0x92>
 80137fa:	2d3f      	cmp	r5, #63	; 0x3f
 80137fc:	d912      	bls.n	8013824 <MIOS32_COM_Receive_Handler+0x9c>
 80137fe:	e00c      	b.n	801381a <MIOS32_COM_Receive_Handler+0x92>
	}
	status = -1; // empty round - no message
    }

    // message received?
    if( status >= 0 ) {
 8013800:	2900      	cmp	r1, #0
 8013802:	db08      	blt.n	8013816 <MIOS32_COM_Receive_Handler+0x8e>
      // notify that a package has been forwarded
      ++bytes_forwarded;
      ++total_bytes_forwarded;

      // call function
      if( receive_callback_func != NULL )
 8013804:	4a09      	ldr	r2, [pc, #36]	; (801382c <MIOS32_COM_Receive_Handler+0xa4>)
 8013806:	6813      	ldr	r3, [r2, #0]
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 8013808:	3401      	adds	r4, #1
      ++total_bytes_forwarded;
 801380a:	3501      	adds	r5, #1
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 801380c:	b2e4      	uxtb	r4, r4
      ++total_bytes_forwarded;
 801380e:	b2ed      	uxtb	r5, r5

      // call function
      if( receive_callback_func != NULL )
 8013810:	b10b      	cbz	r3, 8013816 <MIOS32_COM_Receive_Handler+0x8e>
	receive_callback_func(port, (u8)status);
 8013812:	b2c9      	uxtb	r1, r1
 8013814:	4798      	blx	r3
    }
  } while( again );
 8013816:	4630      	mov	r0, r6
 8013818:	e7be      	b.n	8013798 <MIOS32_COM_Receive_Handler+0x10>

  return 0;
 801381a:	2000      	movs	r0, #0
 801381c:	bd70      	pop	{r4, r5, r6, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
    return -1;
 801381e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013822:	bd70      	pop	{r4, r5, r6, pc}
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
	  bytes_forwarded = 0; // for checking, if bytes still have been forwarded in next round
 8013824:	2400      	movs	r4, #0
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
 8013826:	4626      	mov	r6, r4
 8013828:	e7f5      	b.n	8013816 <MIOS32_COM_Receive_Handler+0x8e>
 801382a:	bf00      	nop
 801382c:	20000c30 	.word	0x20000c30

08013830 <MIOS32_UART_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_CheckAvailable(u8 uart_port)
{
 8013830:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  return MIOS32_UART_IsAssignedToMIDI(uart_port) >= 1; // UART assigned to MIDI?
 8013832:	f002 fb05 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
#endif
}
 8013836:	2800      	cmp	r0, #0
 8013838:	bfd4      	ite	le
 801383a:	2000      	movle	r0, #0
 801383c:	2001      	movgt	r0, #1
 801383e:	bd08      	pop	{r3, pc}

08013840 <MIOS32_UART_MIDI_RS_Reset>:
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 8013840:	2803      	cmp	r0, #3
//! \return -1 if port not available
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
 8013842:	b538      	push	{r3, r4, r5, lr}
 8013844:	4604      	mov	r4, r0
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 8013846:	d80c      	bhi.n	8013862 <MIOS32_UART_MIDI_RS_Reset+0x22>
    return -1; // port not available

  MIOS32_IRQ_Disable();
 8013848:	f000 feb4 	bl	80145b4 <MIOS32_IRQ_Disable>
  rs_last[uart_port] = 0xff;
 801384c:	4b06      	ldr	r3, [pc, #24]	; (8013868 <MIOS32_UART_MIDI_RS_Reset+0x28>)
  rs_expire_ctr[uart_port] = 0;
 801384e:	4807      	ldr	r0, [pc, #28]	; (801386c <MIOS32_UART_MIDI_RS_Reset+0x2c>)
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8013850:	22ff      	movs	r2, #255	; 0xff
  rs_expire_ctr[uart_port] = 0;
 8013852:	2500      	movs	r5, #0
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8013854:	551a      	strb	r2, [r3, r4]
  rs_expire_ctr[uart_port] = 0;
 8013856:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
  MIOS32_IRQ_Enable();
 801385a:	f000 febf 	bl	80145dc <MIOS32_IRQ_Enable>

  return 0;
 801385e:	4628      	mov	r0, r5
 8013860:	bd38      	pop	{r3, r4, r5, pc}
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available
 8013862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  rs_expire_ctr[uart_port] = 0;
  MIOS32_IRQ_Enable();

  return 0;
#endif
}
 8013866:	bd38      	pop	{r3, r4, r5, pc}
 8013868:	20000c34 	.word	0x20000c34
 801386c:	20000c6a 	.word	0x20000c6a

08013870 <MIOS32_UART_MIDI_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Init(u32 mode)
{
 8013870:	b510      	push	{r4, lr}
#else
  int i;


  // currently only mode 0 supported
  if( mode != 0 )
 8013872:	b110      	cbz	r0, 801387a <MIOS32_UART_MIDI_Init+0xa>
    return -1; // unsupported mode
 8013874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013878:	bd10      	pop	{r4, pc}

// internal function to reset the record structure
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 801387a:	4912      	ldr	r1, [pc, #72]	; (80138c4 <MIOS32_UART_MIDI_Init+0x54>)
 801387c:	220c      	movs	r2, #12
 801387e:	4342      	muls	r2, r0
 8013880:	188b      	adds	r3, r1, r2
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 8013882:	3001      	adds	r0, #1
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8013884:	2400      	movs	r4, #0
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 8013886:	2804      	cmp	r0, #4
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8013888:	508c      	str	r4, [r1, r2]
  midix->running_status = 0x00;
 801388a:	711c      	strb	r4, [r3, #4]
  midix->expected_bytes = 0x00;
 801388c:	715c      	strb	r4, [r3, #5]
  midix->wait_bytes = 0x00;
 801388e:	719c      	strb	r4, [r3, #6]
  midix->sysex_ctr = 0x00;
 8013890:	71dc      	strb	r4, [r3, #7]
  midix->timeout_ctr = 0;
 8013892:	811c      	strh	r4, [r3, #8]
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // initialize MIDI record
  for(i=0; i<MIOS32_UART_NUM; ++i)
 8013894:	d1f1      	bne.n	801387a <MIOS32_UART_MIDI_Init+0xa>
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8013896:	490c      	ldr	r1, [pc, #48]	; (80138c8 <MIOS32_UART_MIDI_Init+0x58>)
 8013898:	20ff      	movs	r0, #255	; 0xff
 801389a:	7008      	strb	r0, [r1, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RS_Reset(i);
 801389c:	4620      	mov	r0, r4
 801389e:	f7ff ffcf 	bl	8013840 <MIOS32_UART_MIDI_RS_Reset>
 80138a2:	2001      	movs	r0, #1
 80138a4:	f7ff ffcc 	bl	8013840 <MIOS32_UART_MIDI_RS_Reset>
 80138a8:	2002      	movs	r0, #2
 80138aa:	f7ff ffc9 	bl	8013840 <MIOS32_UART_MIDI_RS_Reset>
 80138ae:	2003      	movs	r0, #3
 80138b0:	f7ff ffc6 	bl	8013840 <MIOS32_UART_MIDI_RS_Reset>

  // if any MIDI assignment:
#if MIOS32_UART0_ASSIGNMENT == 1 || MIOS32_UART1_ASSIGNMENT == 1 || MIOS32_UART2_ASSIGNMENT == 1 || MIOS32_UART3_ASSIGNMENT == 1
  // initialize U(S)ART interface
  if( MIOS32_UART_Init(0) < 0 )
 80138b4:	4620      	mov	r0, r4
 80138b6:	f002 fbb9 	bl	801602c <MIOS32_UART_Init>
 80138ba:	42a0      	cmp	r0, r4
 80138bc:	dbda      	blt.n	8013874 <MIOS32_UART_MIDI_Init+0x4>
    return -1; // initialisation of U(S)ART Interface failed
#endif

  return 0; // no error
 80138be:	4620      	mov	r0, r4
#endif
}
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	bf00      	nop
 80138c4:	20000c38 	.word	0x20000c38
 80138c8:	20000c68 	.word	0x20000c68

080138cc <MIOS32_UART_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Periodic_mS(void)
{
 80138cc:	b510      	push	{r4, lr}
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
 80138ce:	f000 fe71 	bl	80145b4 <MIOS32_IRQ_Disable>
 80138d2:	4a0b      	ldr	r2, [pc, #44]	; (8013900 <MIOS32_UART_MIDI_Periodic_mS+0x34>)
 80138d4:	2300      	movs	r3, #0
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 80138d6:	490b      	ldr	r1, [pc, #44]	; (8013904 <MIOS32_UART_MIDI_Periodic_mS+0x38>)
 80138d8:	5a58      	ldrh	r0, [r3, r1]
 80138da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80138de:	42a0      	cmp	r0, r4
 80138e0:	d001      	beq.n	80138e6 <MIOS32_UART_MIDI_Periodic_mS+0x1a>
      ++rs_expire_ctr[uart_port];
 80138e2:	3001      	adds	r0, #1
 80138e4:	5258      	strh	r0, [r3, r1]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 80138e6:	8911      	ldrh	r1, [r2, #8]
 80138e8:	42a1      	cmp	r1, r4
 80138ea:	d001      	beq.n	80138f0 <MIOS32_UART_MIDI_Periodic_mS+0x24>
      ++midi_rec[uart_port].timeout_ctr;
 80138ec:	1c48      	adds	r0, r1, #1
 80138ee:	8110      	strh	r0, [r2, #8]
 80138f0:	3302      	adds	r3, #2
 80138f2:	320c      	adds	r2, #12
{
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
  for(uart_port=0; uart_port<MIOS32_UART_NUM; ++uart_port) {
 80138f4:	2b08      	cmp	r3, #8
 80138f6:	d1ee      	bne.n	80138d6 <MIOS32_UART_MIDI_Periodic_mS+0xa>
    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
      ++midi_rec[uart_port].timeout_ctr;
  }
  MIOS32_IRQ_Enable();
 80138f8:	f000 fe70 	bl	80145dc <MIOS32_IRQ_Enable>
  // (atomic operation not required in MIOS32_UART_MIDI_PackageSend_NonBlocking() due to single-byte accesses)
#endif

  return 0; // no error
}
 80138fc:	2000      	movs	r0, #0
 80138fe:	bd10      	pop	{r4, pc}
 8013900:	20000c38 	.word	0x20000c38
 8013904:	20000c6a 	.word	0x20000c6a

08013908 <MIOS32_UART_MIDI_PackageSend_NonBlocking>:
//! \return -2: UART_MIDI buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend_NonBlocking(u8 uart_port, mios32_midi_package_t package)
{
 8013908:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801390c:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8013910:	4605      	mov	r5, r0
 8013912:	f001 070f 	and.w	r7, r1, #15
 8013916:	fa5f f886 	uxtb.w	r8, r6
 801391a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801391e:	f3c1 6907 	ubfx	r9, r1, #24, #8
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 8013922:	f7ff ff85 	bl	8013830 <MIOS32_UART_MIDI_CheckAvailable>
 8013926:	2800      	cmp	r0, #0
 8013928:	d040      	beq.n	80139ac <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
 801392a:	4b23      	ldr	r3, [pc, #140]	; (80139b8 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb0>)
 801392c:	5ddc      	ldrb	r4, [r3, r7]
  if( len ) {
 801392e:	2c00      	cmp	r4, #0
 8013930:	d03f      	beq.n	80139b2 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xaa>
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8013932:	4822      	ldr	r0, [pc, #136]	; (80139bc <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb4>)
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8013934:	f88d 6004 	strb.w	r6, [sp, #4]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8013938:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 801393c:	f88d a005 	strb.w	sl, [sp, #5]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8013940:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8013944:	f88d 9006 	strb.w	r9, [sp, #6]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8013948:	d903      	bls.n	8013952 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x4a>
      // the current RS is expired each second to ensure that a status byte will be sent
      // if the MIDI cable is (re)connected during runtime
      MIOS32_UART_MIDI_RS_Reset(uart_port);
 801394a:	4628      	mov	r0, r5
 801394c:	f7ff ff78 	bl	8013840 <MIOS32_UART_MIDI_RS_Reset>
 8013950:	e01b      	b.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
#if 0
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
 8013952:	491b      	ldr	r1, [pc, #108]	; (80139c0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb8>)
 8013954:	780b      	ldrb	r3, [r1, #0]
 8013956:	fa43 f305 	asr.w	r3, r3, r5
 801395a:	07da      	lsls	r2, r3, #31
 801395c:	d515      	bpl.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 801395e:	2f07      	cmp	r7, #7
 8013960:	dd13      	ble.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8013962:	2f0f      	cmp	r7, #15
 8013964:	d011      	beq.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 8013966:	2c01      	cmp	r4, #1
 8013968:	d90e      	bls.n	8013988 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
 801396a:	4a16      	ldr	r2, [pc, #88]	; (80139c4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)
 801396c:	5d51      	ldrb	r1, [r2, r5]
 801396e:	4541      	cmp	r1, r8
 8013970:	d106      	bne.n	8013980 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x78>
	  buffer[0] = package.evnt1;
	  buffer[1] = package.evnt2;
	  --len;
 8013972:	3c01      	subs	r4, #1
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
	  buffer[0] = package.evnt1;
 8013974:	f88d a004 	strb.w	sl, [sp, #4]
	  buffer[1] = package.evnt2;
 8013978:	f88d 9005 	strb.w	r9, [sp, #5]
	  --len;
 801397c:	b2e4      	uxtb	r4, r4
 801397e:	e004      	b.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  // for optional monitoring of the optimisation
	  MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS optimized (%02x) %02x %02x\n", uart_port, package.evnt0, package.evnt1, package.evnt2);
#endif
	} else {
	  // new running status
	  rs_expire_ctr[uart_port] = 0;
 8013980:	2300      	movs	r3, #0
 8013982:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 8013986:	e000      	b.n	801398a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8013988:	2401      	movs	r4, #1
      }
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
 801398a:	f1b8 0ff7 	cmp.w	r8, #247	; 0xf7
      rs_last[uart_port] = package.evnt0;
 801398e:	bf98      	it	ls
 8013990:	480c      	ldrls	r0, [pc, #48]	; (80139c4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8013992:	a901      	add	r1, sp, #4
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;
 8013994:	bf98      	it	ls
 8013996:	5546      	strbls	r6, [r0, r5]


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8013998:	4622      	mov	r2, r4
 801399a:	4628      	mov	r0, r5
 801399c:	f002 fccc 	bl	8016338 <MIOS32_UART_TxBufferPutMore>
 80139a0:	3002      	adds	r0, #2
 80139a2:	2802      	cmp	r0, #2
 80139a4:	d802      	bhi.n	80139ac <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
#endif
}
 80139a6:	4a08      	ldr	r2, [pc, #32]	; (80139c8 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xc0>)
 80139a8:	5610      	ldrsb	r0, [r2, r0]
 80139aa:	e003      	b.n	80139b4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 80139ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139b0:	e000      	b.n	80139b4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
      case -2: return -2; // buffer full, request retry
      default: return -1; // UART error
    }

  } else {
    return 0; // no bytes to send -> no error
 80139b2:	4620      	mov	r0, r4
  }
#endif
}
 80139b4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 80139b8:	0801f608 	.word	0x0801f608
 80139bc:	20000c6a 	.word	0x20000c6a
 80139c0:	20000c68 	.word	0x20000c68
 80139c4:	20000c34 	.word	0x20000c34
 80139c8:	0801f730 	.word	0x0801f730

080139cc <MIOS32_UART_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: UART_MIDI device not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend(u8 uart_port, mios32_midi_package_t package)
{
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4605      	mov	r5, r0
 80139d0:	460c      	mov	r4, r1
  s32 error;

  while( (error=MIOS32_UART_MIDI_PackageSend_NonBlocking(uart_port, package)) == -2);
 80139d2:	4621      	mov	r1, r4
 80139d4:	4628      	mov	r0, r5
 80139d6:	f7ff ff97 	bl	8013908 <MIOS32_UART_MIDI_PackageSend_NonBlocking>
 80139da:	1c81      	adds	r1, r0, #2
 80139dc:	d0f9      	beq.n	80139d2 <MIOS32_UART_MIDI_PackageSend+0x6>

  return error;
}
 80139de:	bd38      	pop	{r3, r4, r5, pc}

080139e0 <MIOS32_UART_MIDI_PackageReceive>:
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 80139e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	4680      	mov	r8, r0
 80139e6:	460f      	mov	r7, r1
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 80139e8:	f7ff ff22 	bl	8013830 <MIOS32_UART_MIDI_CheckAvailable>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	f000 80c5 	beq.w	8013b7c <MIOS32_UART_MIDI_PackageReceive+0x19c>
    return -1;

  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 80139f2:	4d65      	ldr	r5, [pc, #404]	; (8013b88 <MIOS32_UART_MIDI_PackageReceive+0x1a8>)
 80139f4:	260c      	movs	r6, #12
 80139f6:	fb06 f608 	mul.w	r6, r6, r8
 80139fa:	19ac      	adds	r4, r5, r6
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 80139fc:	4640      	mov	r0, r8
 80139fe:	f002 fbc1 	bl	8016184 <MIOS32_UART_RxBufferGet>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	f2c0 80a1 	blt.w	8013b4a <MIOS32_UART_MIDI_PackageReceive+0x16a>
    u8 byte = (u8)status;

    if( byte & 0x80 ) { // new MIDI status
 8013a08:	0602      	lsls	r2, r0, #24
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
    u8 byte = (u8)status;
 8013a0a:	b2c3      	uxtb	r3, r0

    if( byte & 0x80 ) { // new MIDI status
 8013a0c:	d552      	bpl.n	8013ab4 <MIOS32_UART_MIDI_PackageReceive+0xd4>
      if( byte >= 0xf8 ) { // events >= 0xf8 don't change the running status and can just be forwarded
 8013a0e:	2bf7      	cmp	r3, #247	; 0xf7
 8013a10:	d908      	bls.n	8013a24 <MIOS32_UART_MIDI_PackageReceive+0x44>
	// Realtime messages don't change the running status and can be sent immediately
	// They also don't touch the timeout counter!
	package->cin = 0xf; // F: single byte
 8013a12:	6839      	ldr	r1, [r7, #0]
 8013a14:	f041 020f 	orr.w	r2, r1, #15
 8013a18:	603a      	str	r2, [r7, #0]
	package->evnt0 = byte;
 8013a1a:	707b      	strb	r3, [r7, #1]
	package->evnt1 = 0x00;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	70bb      	strb	r3, [r7, #2]
	package->evnt2 = 0x00;
 8013a20:	70fb      	strb	r3, [r7, #3]
 8013a22:	e0af      	b.n	8013b84 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	package_complete = 1;
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8013a24:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8013a28:	4958      	ldr	r1, [pc, #352]	; (8013b8c <MIOS32_UART_MIDI_PackageReceive+0x1ac>)
	package->evnt0 = byte;
	package->evnt1 = 0x00;
	package->evnt2 = 0x00;
	package_complete = 1;
      } else {
	midix->running_status = byte;
 8013a2a:	7123      	strb	r3, [r4, #4]
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8013a2c:	5c89      	ldrb	r1, [r1, r2]
 8013a2e:	7161      	strb	r1, [r4, #5]

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
 8013a30:	b109      	cbz	r1, 8013a36 <MIOS32_UART_MIDI_PackageReceive+0x56>
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8013a32:	2100      	movs	r1, #0
 8013a34:	e037      	b.n	8013aa6 <MIOS32_UART_MIDI_PackageReceive+0xc6>
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 8013a36:	f000 000f 	and.w	r0, r0, #15
 8013a3a:	4a55      	ldr	r2, [pc, #340]	; (8013b90 <MIOS32_UART_MIDI_PackageReceive+0x1b0>)
 8013a3c:	5c12      	ldrb	r2, [r2, r0]

	  if( byte == 0xf0 ) {
 8013a3e:	2bf0      	cmp	r3, #240	; 0xf0
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 8013a40:	7162      	strb	r2, [r4, #5]

	  if( byte == 0xf0 ) {
 8013a42:	d103      	bne.n	8013a4c <MIOS32_UART_MIDI_PackageReceive+0x6c>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
 8013a44:	2201      	movs	r2, #1

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];

	  if( byte == 0xf0 ) {
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
 8013a46:	7063      	strb	r3, [r4, #1]
	    midix->sysex_ctr = 0x01;
 8013a48:	71e2      	strb	r2, [r4, #7]
 8013a4a:	e7f2      	b.n	8013a32 <MIOS32_UART_MIDI_PackageReceive+0x52>
	  } else if( byte == 0xf7 ) {
 8013a4c:	2bf7      	cmp	r3, #247	; 0xf7
 8013a4e:	d11d      	bne.n	8013a8c <MIOS32_UART_MIDI_PackageReceive+0xac>
	    switch( midix->sysex_ctr ) {
 8013a50:	79e2      	ldrb	r2, [r4, #7]
 8013a52:	7820      	ldrb	r0, [r4, #0]
 8013a54:	b142      	cbz	r2, 8013a68 <MIOS32_UART_MIDI_PackageReceive+0x88>
 8013a56:	2a01      	cmp	r2, #1
 8013a58:	d10e      	bne.n	8013a78 <MIOS32_UART_MIDI_PackageReceive+0x98>
		midix->package.evnt0 = 0xf7;
		midix->package.evnt1 = 0x00;
		midix->package.evnt2 = 0x00;
		break;
	      case 1:
		midix->package.cin = 6; // 6: SysEx ends with two bytes
 8013a5a:	2206      	movs	r2, #6
 8013a5c:	f362 0003 	bfi	r0, r2, #0, #4
 8013a60:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
 8013a62:	70a3      	strb	r3, [r4, #2]
		midix->package.evnt2 = 0x00;
 8013a64:	70e1      	strb	r1, [r4, #3]
		break;
 8013a66:	e00c      	b.n	8013a82 <MIOS32_UART_MIDI_PackageReceive+0xa2>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
	  } else if( byte == 0xf7 ) {
	    switch( midix->sysex_ctr ) {
 	      case 0:
		midix->package.cin = 5; // 5: SysEx ends with single byte
 8013a68:	2105      	movs	r1, #5
 8013a6a:	f361 0003 	bfi	r0, r1, #0, #4
 8013a6e:	7020      	strb	r0, [r4, #0]
		midix->package.evnt0 = 0xf7;
 8013a70:	7063      	strb	r3, [r4, #1]
		midix->package.evnt1 = 0x00;
 8013a72:	70a2      	strb	r2, [r4, #2]
		midix->package.evnt2 = 0x00;
 8013a74:	70e2      	strb	r2, [r4, #3]
		break;
 8013a76:	e004      	b.n	8013a82 <MIOS32_UART_MIDI_PackageReceive+0xa2>
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
		midix->package.evnt2 = 0x00;
		break;
	      default:
		midix->package.cin = 7; // 7: SysEx ends with three bytes
 8013a78:	2107      	movs	r1, #7
 8013a7a:	f361 0003 	bfi	r0, r1, #0, #4
 8013a7e:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
 8013a80:	70e3      	strb	r3, [r4, #3]
		break;
	    }
	    *package = midix->package;
 8013a82:	6823      	ldr	r3, [r4, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8013a84:	2000      	movs	r0, #0
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
		break;
	    }
	    *package = midix->package;
 8013a86:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8013a88:	71e0      	strb	r0, [r4, #7]
 8013a8a:	e00b      	b.n	8013aa4 <MIOS32_UART_MIDI_PackageReceive+0xc4>
	  } else if( !midix->expected_bytes ) {
 8013a8c:	2a00      	cmp	r2, #0
 8013a8e:	d1d0      	bne.n	8013a32 <MIOS32_UART_MIDI_PackageReceive+0x52>
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8013a90:	7821      	ldrb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
 8013a92:	7063      	strb	r3, [r4, #1]
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
	  } else if( !midix->expected_bytes ) {
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8013a94:	2005      	movs	r0, #5
 8013a96:	f360 0103 	bfi	r1, r0, #0, #4
 8013a9a:	7021      	strb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
	    midix->package.evnt1 = 0x00;
 8013a9c:	70a2      	strb	r2, [r4, #2]
	    midix->package.evnt2 = 0x00;
 8013a9e:	70e2      	strb	r2, [r4, #3]
	    *package = midix->package;
 8013aa0:	6823      	ldr	r3, [r4, #0]
 8013aa2:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
 8013aa4:	2101      	movs	r1, #1
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 8013aa6:	7963      	ldrb	r3, [r4, #5]
	midix->timeout_ctr = 0; // reset timeout counter
 8013aa8:	2000      	movs	r0, #0
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 8013aaa:	71a3      	strb	r3, [r4, #6]
	midix->timeout_ctr = 0; // reset timeout counter
 8013aac:	8120      	strh	r0, [r4, #8]
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8013aae:	2900      	cmp	r1, #0
 8013ab0:	d0a4      	beq.n	80139fc <MIOS32_UART_MIDI_PackageReceive+0x1c>
 8013ab2:	e067      	b.n	8013b84 <MIOS32_UART_MIDI_PackageReceive+0x1a4>

	midix->wait_bytes = midix->expected_bytes;
	midix->timeout_ctr = 0; // reset timeout counter
      }
    } else {
      if( midix->running_status == 0xf0 ) {
 8013ab4:	7922      	ldrb	r2, [r4, #4]
 8013ab6:	2af0      	cmp	r2, #240	; 0xf0
 8013ab8:	d117      	bne.n	8013aea <MIOS32_UART_MIDI_PackageReceive+0x10a>
	switch( ++midix->sysex_ctr ) {
 8013aba:	79e2      	ldrb	r2, [r4, #7]
 8013abc:	1c51      	adds	r1, r2, #1
 8013abe:	b2c8      	uxtb	r0, r1
 8013ac0:	2801      	cmp	r0, #1
 8013ac2:	71e0      	strb	r0, [r4, #7]
 8013ac4:	d003      	beq.n	8013ace <MIOS32_UART_MIDI_PackageReceive+0xee>
 8013ac6:	2802      	cmp	r0, #2
 8013ac8:	d103      	bne.n	8013ad2 <MIOS32_UART_MIDI_PackageReceive+0xf2>
  	  case 1:
	    midix->package.evnt0 = byte; 
	    break;
	  case 2: 
	    midix->package.evnt1 = byte; 
 8013aca:	70a3      	strb	r3, [r4, #2]
	    break;
 8013acc:	e796      	b.n	80139fc <MIOS32_UART_MIDI_PackageReceive+0x1c>
      }
    } else {
      if( midix->running_status == 0xf0 ) {
	switch( ++midix->sysex_ctr ) {
  	  case 1:
	    midix->package.evnt0 = byte; 
 8013ace:	7063      	strb	r3, [r4, #1]
	    break;
 8013ad0:	e794      	b.n	80139fc <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  case 2: 
	    midix->package.evnt1 = byte; 
	    break;
	  default: // 3
	    midix->package.evnt2 = byte;
 8013ad2:	70e3      	strb	r3, [r4, #3]

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
 8013ad4:	5dab      	ldrb	r3, [r5, r6]
 8013ad6:	2204      	movs	r2, #4
 8013ad8:	f362 0303 	bfi	r3, r2, #0, #4
 8013adc:	55ab      	strb	r3, [r5, r6]
	    *package = midix->package;
 8013ade:	59a9      	ldr	r1, [r5, r6]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8013ae0:	2000      	movs	r0, #0
	  default: // 3
	    midix->package.evnt2 = byte;

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
	    *package = midix->package;
 8013ae2:	6039      	str	r1, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8013ae4:	71e0      	strb	r0, [r4, #7]
	    midix->timeout_ctr = 0; // reset timeout counter
 8013ae6:	8120      	strh	r0, [r4, #8]
 8013ae8:	e04c      	b.n	8013b84 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
 8013aea:	79a0      	ldrb	r0, [r4, #6]
 8013aec:	b920      	cbnz	r0, 8013af8 <MIOS32_UART_MIDI_PackageReceive+0x118>
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8013aee:	7962      	ldrb	r2, [r4, #5]
	  midix->timeout_ctr = 0; // reset timeout counter
 8013af0:	8120      	strh	r0, [r4, #8]
	    midix->timeout_ctr = 0; // reset timeout counter
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8013af2:	1e51      	subs	r1, r2, #1
 8013af4:	71a1      	strb	r1, [r4, #6]
 8013af6:	e001      	b.n	8013afc <MIOS32_UART_MIDI_PackageReceive+0x11c>
	  midix->timeout_ctr = 0; // reset timeout counter
	} else {
	  --midix->wait_bytes;
 8013af8:	1e41      	subs	r1, r0, #1
 8013afa:	71a1      	strb	r1, [r4, #6]
	}

	if( midix->expected_bytes == 1 ) {
 8013afc:	7960      	ldrb	r0, [r4, #5]
 8013afe:	2801      	cmp	r0, #1
 8013b00:	d102      	bne.n	8013b08 <MIOS32_UART_MIDI_PackageReceive+0x128>
	  midix->package.evnt1 = byte;
 8013b02:	70a3      	strb	r3, [r4, #2]
	  midix->package.evnt2 = 0x00;
 8013b04:	2300      	movs	r3, #0
 8013b06:	e003      	b.n	8013b10 <MIOS32_UART_MIDI_PackageReceive+0x130>
	} else {
	  if( midix->wait_bytes )
 8013b08:	79a2      	ldrb	r2, [r4, #6]
 8013b0a:	b10a      	cbz	r2, 8013b10 <MIOS32_UART_MIDI_PackageReceive+0x130>
	    midix->package.evnt1 = byte;
 8013b0c:	70a3      	strb	r3, [r4, #2]
 8013b0e:	e000      	b.n	8013b12 <MIOS32_UART_MIDI_PackageReceive+0x132>
	  else
	    midix->package.evnt2 = byte;
 8013b10:	70e3      	strb	r3, [r4, #3]
	}
	
	if( !midix->wait_bytes ) {
 8013b12:	79a3      	ldrb	r3, [r4, #6]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f47f af71 	bne.w	80139fc <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
 8013b1a:	7920      	ldrb	r0, [r4, #4]
 8013b1c:	5daa      	ldrb	r2, [r5, r6]
 8013b1e:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 8013b22:	29f0      	cmp	r1, #240	; 0xf0
 8013b24:	d001      	beq.n	8013b2a <MIOS32_UART_MIDI_PackageReceive+0x14a>
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
 8013b26:	0901      	lsrs	r1, r0, #4
 8013b28:	e008      	b.n	8013b3c <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
 8013b2a:	7963      	ldrb	r3, [r4, #5]
 8013b2c:	b11b      	cbz	r3, 8013b36 <MIOS32_UART_MIDI_PackageReceive+0x156>
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d103      	bne.n	8013b3a <MIOS32_UART_MIDI_PackageReceive+0x15a>
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
 8013b32:	2102      	movs	r1, #2
 8013b34:	e002      	b.n	8013b3c <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
 8013b36:	2105      	movs	r1, #5
 8013b38:	e000      	b.n	8013b3c <MIOS32_UART_MIDI_PackageReceive+0x15c>
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
		break;
  	      default: 
		midix->package.cin = 3; // 3: SysEx common with three bytes
 8013b3a:	2103      	movs	r1, #3
 8013b3c:	f361 0203 	bfi	r2, r1, #0, #4
 8013b40:	55aa      	strb	r2, [r5, r6]
		break;
	    }
	  }

	  midix->package.evnt0 = midix->running_status;
 8013b42:	7060      	strb	r0, [r4, #1]
	  // midix->package.evnt1 = // already stored
	  // midix->package.evnt2 = // already stored
	  *package = midix->package;
 8013b44:	59a8      	ldr	r0, [r5, r6]
 8013b46:	6038      	str	r0, [r7, #0]
 8013b48:	e01c      	b.n	8013b84 <MIOS32_UART_MIDI_PackageReceive+0x1a4>
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8013b4a:	2000      	movs	r0, #0
      }
    }
  }

  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
 8013b4c:	79a1      	ldrb	r1, [r4, #6]
 8013b4e:	b171      	cbz	r1, 8013b6e <MIOS32_UART_MIDI_PackageReceive+0x18e>
 8013b50:	8922      	ldrh	r2, [r4, #8]
 8013b52:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8013b56:	d90a      	bls.n	8013b6e <MIOS32_UART_MIDI_PackageReceive+0x18e>
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	51ab      	str	r3, [r5, r6]
  midix->running_status = 0x00;
 8013b5c:	7123      	strb	r3, [r4, #4]
  midix->expected_bytes = 0x00;
 8013b5e:	7163      	strb	r3, [r4, #5]
  midix->wait_bytes = 0x00;
 8013b60:	71a3      	strb	r3, [r4, #6]
  midix->sysex_ctr = 0x00;
 8013b62:	71e3      	strb	r3, [r4, #7]
  midix->timeout_ctr = 0;
 8013b64:	8123      	strh	r3, [r4, #8]
  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
    // stop waiting
    MIOS32_UART_MIDI_RecordReset(uart_port);
    // notify that incomplete package has been received
    return -10;
 8013b66:	f06f 0009 	mvn.w	r0, #9
 8013b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	bf0c      	ite	eq
 8013b72:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 8013b76:	2000      	movne	r0, #0
 8013b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 8013b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8013b84:	2001      	movs	r0, #1
 8013b86:	e7e1      	b.n	8013b4c <MIOS32_UART_MIDI_PackageReceive+0x16c>
 8013b88:	20000c38 	.word	0x20000c38
 8013b8c:	0801f723 	.word	0x0801f723
 8013b90:	0801f5f8 	.word	0x0801f5f8

08013b94 <MIOS32_SPI_MIDI_Init>:
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[0]);
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[1]);

  return status;
#endif
}
 8013b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b98:	4770      	bx	lr

08013b9a <MIOS32_SPI_MIDI_Periodic_mS>:
  MIOS32_SPI_MIDI_MUTEX_GIVE;
#endif

  return 0; // no error
#endif
}
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	4770      	bx	lr

08013b9e <MIOS32_SPI_MIDI_PackageSend>:
  if( error >= 0 ) // no error: reset timeout counter
    timeout_ctr = 0;

  return error;
#endif
}
 8013b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ba2:	4770      	bx	lr

08013ba4 <MIOS32_SPI_MIDI_PackageReceive>:
  --rx_ringbuffer_size;
  MIOS32_IRQ_Enable();

  return rx_ringbuffer_size;
#endif
}
 8013ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ba8:	4770      	bx	lr

08013baa <MIOS32_IIC_MIDI_Init>:
  // TODO: send optimisation flag to IIC_MIDI device once it has been scanned!
#endif

  return 0; // no error
#endif
}
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bae:	4770      	bx	lr

08013bb0 <MIOS32_IIC_MIDI_Periodic_mS>:
s32 MIOS32_IIC_MIDI_Periodic_mS(void)
{
  // currently only a dummy - RS optimisation handled by IIC_MIDI device

  return 0;
}
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	4770      	bx	lr

08013bb4 <MIOS32_IIC_MIDI_PackageSend>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IIC_MIDI_PackageSend(u8 iic_port, mios32_midi_package_t package)
{
  return _MIOS32_IIC_MIDI_PackageSend(iic_port, package, 0); // blocking mode
}
 8013bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bb8:	4770      	bx	lr

08013bba <MIOS32_IIC_BS_Init>:
  if( MIOS32_IIC_BS_ScanBankSticks() < 0 )
    return -2; // we don't expect that any other task accesses the IIC port yet!

  return 0; // no error
#endif
}
 8013bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bbe:	4770      	bx	lr

08013bc0 <MIOS32_MF_Init>:
    mf_state[i].config.cfg.pwm_duty_cycle_up = 1;
  }

  return 0;
#endif
}
 8013bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bc4:	4770      	bx	lr

08013bc6 <MIOS32_SDCARD_Init>:
//! Initializes SPI pins and peripheral to access MMC/SD Card
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_Init(u32 mode)
{
 8013bc6:	b510      	push	{r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8013bc8:	4604      	mov	r4, r0
 8013bca:	b948      	cbnz	r0, 8013be0 <MIOS32_SDCARD_Init+0x1a>
    return -1; // unsupported mode
	
  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that fast pin drivers are activated
  MIOS32_SPI_IO_Init(MIOS32_SDCARD_SPI, MIOS32_SPI_PIN_DRIVER_STRONG);
 8013bcc:	4601      	mov	r1, r0
 8013bce:	f000 fd3f 	bl	8014650 <MIOS32_SPI_IO_Init>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	2103      	movs	r1, #3
 8013bd6:	2207      	movs	r2, #7
 8013bd8:	f000 feda 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  MIOS32_SDCARD_MUTEX_GIVE;
 
  return 0; // no error
 8013bdc:	4620      	mov	r0, r4
 8013bde:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);

  MIOS32_SDCARD_MUTEX_GIVE;
 
  return 0; // no error
}
 8013be4:	bd10      	pop	{r4, pc}

08013be6 <MIOS32_SDCARD_SendSDCCmd>:
//! \param[in] crc precalculated CRC
//! \return >= 0x00 if command has been sent successfully (contains received byte)
//! \return -1 if no response from SD Card (timeout)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SendSDCCmd(u8 cmd, u32 addr, u8 crc)
{
 8013be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be8:	4617      	mov	r7, r2
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 8013bea:	0602      	lsls	r2, r0, #24
//! \param[in] crc precalculated CRC
//! \return >= 0x00 if command has been sent successfully (contains received byte)
//! \return -1 if no response from SD Card (timeout)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SendSDCCmd(u8 cmd, u32 addr, u8 crc)
{
 8013bec:	4605      	mov	r5, r0
 8013bee:	460e      	mov	r6, r1
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 8013bf0:	d509      	bpl.n	8013c06 <MIOS32_SDCARD_SendSDCCmd+0x20>
	cmd &= 0x7F;
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
 8013bf2:	2077      	movs	r0, #119	; 0x77
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	22ff      	movs	r2, #255	; 0xff
 8013bf8:	f7ff fff5 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
	if (ret > 1) return ret;
 8013bfc:	2801      	cmp	r0, #1
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
	cmd &= 0x7F;
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
 8013bfe:	4604      	mov	r4, r0
	if (ret > 1) return ret;
 8013c00:	dc70      	bgt.n	8013ce4 <MIOS32_SDCARD_SendSDCCmd+0xfe>
{
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
	cmd &= 0x7F;
 8013c02:	f005 057f 	and.w	r5, r5, #127	; 0x7f
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
	if (ret > 1) return ret;
  }
  // activate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8013c06:	2000      	movs	r0, #0
 8013c08:	4602      	mov	r2, r0
 8013c0a:	4601      	mov	r1, r0
 8013c0c:	f000 fe5e 	bl	80148cc <MIOS32_SPI_RC_PinSet>

  // transfer to card
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (u8)cmd);
 8013c10:	2000      	movs	r0, #0
 8013c12:	4629      	mov	r1, r5
 8013c14:	f000 fe96 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 24) & 0xff);
 8013c18:	0e31      	lsrs	r1, r6, #24
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f000 fe92 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
 8013c20:	2000      	movs	r0, #0
 8013c22:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8013c26:	f000 fe8d 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8013c30:	f000 fe88 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
 8013c34:	2000      	movs	r0, #0
 8013c36:	b2f1      	uxtb	r1, r6
 8013c38:	f000 fe84 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);
 8013c3c:	2000      	movs	r0, #0
 8013c3e:	4639      	mov	r1, r7
 8013c40:	f000 fe80 	bl	8014944 <MIOS32_SPI_TransferByte>

  u8 timeout = 0;

  if( cmd == SDCMD_SEND_STATUS ) {
 8013c44:	2d4d      	cmp	r5, #77	; 0x4d
 8013c46:	d112      	bne.n	8013c6e <MIOS32_SDCARD_SendSDCCmd+0x88>

  // one dummy read
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013c48:	21ff      	movs	r1, #255	; 0xff
 8013c4a:	2000      	movs	r0, #0
 8013c4c:	f000 fe7a 	bl	8014944 <MIOS32_SPI_TransferByte>

    // read two bytes (only last value will be returned)
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013c50:	21ff      	movs	r1, #255	; 0xff
 8013c52:	2000      	movs	r0, #0
 8013c54:	f000 fe76 	bl	8014944 <MIOS32_SPI_TransferByte>
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013c58:	2000      	movs	r0, #0
 8013c5a:	21ff      	movs	r1, #255	; 0xff
 8013c5c:	f000 fe72 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 8013c60:	f1b0 03ff 	subs.w	r3, r0, #255	; 0xff
 8013c64:	425a      	negs	r2, r3
  // one dummy read
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

    // read two bytes (only last value will be returned)
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013c66:	4604      	mov	r4, r0
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 8013c68:	eb52 0603 	adcs.w	r6, r2, r3
 8013c6c:	e02a      	b.n	8013cc4 <MIOS32_SDCARD_SendSDCCmd+0xde>

  if( cmd == SDCMD_SEND_STATUS ) {
 8013c6e:	2608      	movs	r6, #8
      timeout = 1;
	  
  } else {
    // wait for standard R1 response
    for(i=0; i<8; ++i) {
      if( (ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)) != 0xff )
 8013c70:	2000      	movs	r0, #0
 8013c72:	21ff      	movs	r1, #255	; 0xff
 8013c74:	f000 fe66 	bl	8014944 <MIOS32_SPI_TransferByte>
 8013c78:	28ff      	cmp	r0, #255	; 0xff
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	d103      	bne.n	8013c86 <MIOS32_SDCARD_SendSDCCmd+0xa0>
    if( ret == 0xff )
      timeout = 1;
	  
  } else {
    // wait for standard R1 response
    for(i=0; i<8; ++i) {
 8013c7e:	3e01      	subs	r6, #1
 8013c80:	d1f6      	bne.n	8013c70 <MIOS32_SDCARD_SendSDCCmd+0x8a>
      if( (ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)) != 0xff )
	    break;
    }
    if( i == 8 )
      timeout = 1;
 8013c82:	2601      	movs	r6, #1
 8013c84:	e000      	b.n	8013c88 <MIOS32_SDCARD_SendSDCCmd+0xa2>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 8013c86:	2600      	movs	r6, #0
    }
    if( i == 8 )
      timeout = 1;
  }
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
 8013c88:	2d48      	cmp	r5, #72	; 0x48
 8013c8a:	d001      	beq.n	8013c90 <MIOS32_SDCARD_SendSDCCmd+0xaa>
 8013c8c:	2d7a      	cmp	r5, #122	; 0x7a
 8013c8e:	d119      	bne.n	8013cc4 <MIOS32_SDCARD_SendSDCCmd+0xde>
 8013c90:	b9c6      	cbnz	r6, 8013cc4 <MIOS32_SDCARD_SendSDCCmd+0xde>
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
 8013c92:	21ff      	movs	r1, #255	; 0xff
 8013c94:	2000      	movs	r0, #0
 8013c96:	f000 fe55 	bl	8014944 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 8013c9a:	21ff      	movs	r1, #255	; 0xff
  }
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
 8013c9c:	0604      	lsls	r4, r0, #24
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f000 fe50 	bl	8014944 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 8013ca4:	21ff      	movs	r1, #255	; 0xff
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 8013ca6:	4606      	mov	r6, r0
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 8013ca8:	2000      	movs	r0, #0
 8013caa:	f000 fe4b 	bl	8014944 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 8013cae:	21ff      	movs	r1, #255	; 0xff
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 8013cb0:	4605      	mov	r5, r0
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	f000 fe46 	bl	8014944 <MIOS32_SPI_TransferByte>
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 8013cb8:	ea44 4106 	orr.w	r1, r4, r6, lsl #16
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 8013cbc:	4308      	orrs	r0, r1
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 8013cbe:	ea40 2405 	orr.w	r4, r0, r5, lsl #8
 8013cc2:	2600      	movs	r6, #0
	
  } 

  // required clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	21ff      	movs	r1, #255	; 0xff
 8013cc8:	f000 fe3c 	bl	8014944 <MIOS32_SPI_TransferByte>

  // deactivate chip-select on timeout, and return error code
  if( timeout ) {
 8013ccc:	b156      	cbz	r6, 8013ce4 <MIOS32_SDCARD_SendSDCCmd+0xfe>
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013cce:	2000      	movs	r0, #0
 8013cd0:	4601      	mov	r1, r0
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	f000 fdfa 	bl	80148cc <MIOS32_SPI_RC_PinSet>

	// Send dummy byte once deactivated to drop cards DO
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013cd8:	2000      	movs	r0, #0
 8013cda:	21ff      	movs	r1, #255	; 0xff
 8013cdc:	f000 fe32 	bl	8014944 <MIOS32_SPI_TransferByte>
    return -1;
 8013ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  }
  
  // else return received value - don't deactivate chip select or mutex (for continuous access)
  return ret;
}
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ce8 <MIOS32_SDCARD_PowerOn>:
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that chip select line deactivated
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013ce8:	2000      	movs	r0, #0
/////////////////////////////////////////////////////////////////////////////
//! Connects to SD Card
//! \return < 0 if initialisation sequence failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_PowerOn(void)
{
 8013cea:	b538      	push	{r3, r4, r5, lr}
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that chip select line deactivated
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013cec:	4601      	mov	r1, r0
 8013cee:	2201      	movs	r2, #1
 8013cf0:	f000 fdec 	bl	80148cc <MIOS32_SPI_RC_PinSet>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	2103      	movs	r1, #3
 8013cf8:	2207      	movs	r2, #7
 8013cfa:	f000 fe49 	bl	8014990 <MIOS32_SPI_TransferModeInit>
 8013cfe:	240a      	movs	r4, #10

  // send 80 clock cycles to start up
  for(i=0; i<10; ++i)
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013d00:	2000      	movs	r0, #0
 8013d02:	21ff      	movs	r1, #255	; 0xff
 8013d04:	f000 fe1e 	bl	8014944 <MIOS32_SPI_TransferByte>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);

  // send 80 clock cycles to start up
  for(i=0; i<10; ++i)
 8013d08:	3c01      	subs	r4, #1
 8013d0a:	d1f9      	bne.n	8013d00 <MIOS32_SDCARD_PowerOn+0x18>
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

  // activate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8013d0c:	4621      	mov	r1, r4
 8013d0e:	4622      	mov	r2, r4
 8013d10:	4620      	mov	r0, r4
 8013d12:	f000 fddb 	bl	80148cc <MIOS32_SPI_RC_PinSet>

  // wait for 1 mS
  MIOS32_DELAY_Wait_uS(1000);
 8013d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013d1a:	f001 fb3b 	bl	8015394 <MIOS32_DELAY_Wait_uS>

  // send CMD0 to reset the media
  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC)) < 0 ) 
 8013d1e:	2040      	movs	r0, #64	; 0x40
 8013d20:	2295      	movs	r2, #149	; 0x95
 8013d22:	4621      	mov	r1, r4
 8013d24:	f7ff ff5f 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013d28:	1e05      	subs	r5, r0, #0
 8013d2a:	db54      	blt.n	8013dd6 <MIOS32_SDCARD_PowerOn+0xee>
    goto error;
  
  CardType=0;
 8013d2c:	4d2f      	ldr	r5, [pc, #188]	; (8013dec <MIOS32_SDCARD_PowerOn+0x104>)

  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
 8013d2e:	2048      	movs	r0, #72	; 0x48
 8013d30:	2287      	movs	r2, #135	; 0x87
 8013d32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa

  // send CMD0 to reset the media
  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC)) < 0 ) 
    goto error;
  
  CardType=0;
 8013d36:	702c      	strb	r4, [r5, #0]

  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
 8013d38:	f7ff ff55 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013d3c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
 8013d40:	d10e      	bne.n	8013d60 <MIOS32_SDCARD_PowerOn+0x78>
 8013d42:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	// SDHC Card Detected.

	// We now check to see if we should use block mode or byte mode. Command is SEND_OP_COND_SDC (ACMD41) with HCS (bit 30) set
	for (i=0;i<16384;i++) 
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
 8013d46:	20e9      	movs	r0, #233	; 0xe9
 8013d48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013d4c:	22ff      	movs	r2, #255	; 0xff
 8013d4e:	f7ff ff4a 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013d52:	4605      	mov	r5, r0
 8013d54:	b390      	cbz	r0, 8013dbc <MIOS32_SDCARD_PowerOn+0xd4>
  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
	// SDHC Card Detected.

	// We now check to see if we should use block mode or byte mode. Command is SEND_OP_COND_SDC (ACMD41) with HCS (bit 30) set
	for (i=0;i<16384;i++) 
 8013d56:	3c01      	subs	r4, #1
 8013d58:	d1f5      	bne.n	8013d46 <MIOS32_SDCARD_PowerOn+0x5e>
    MIOS32_SDCARD_SendSDCCmd(SDCMD_SET_BLOCKLEN, 512, SDCMD_SEND_OP_COND_CRC);
  }
  

  if( i == 16384 || CardType==0 ) 
    status=-2; // the last loop timed out or the cardtype was not detected...
 8013d5a:	f06f 0501 	mvn.w	r5, #1
 8013d5e:	e03a      	b.n	8013dd6 <MIOS32_SDCARD_PowerOn+0xee>
	    status = -2;
    }
  } else { // Card is SDv1 or MMC. 
  
	//MMC will accept ACMD41 (SDv1 won't and requires CMD1) so send ACMD41 first and then CMD1 if that fails
	if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC)) <= 1 ) 
 8013d60:	20e9      	movs	r0, #233	; 0xe9
 8013d62:	22ff      	movs	r2, #255	; 0xff
 8013d64:	4621      	mov	r1, r4
 8013d66:	f7ff ff3e 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013d6a:	2801      	cmp	r0, #1
 8013d6c:	dc01      	bgt.n	8013d72 <MIOS32_SDCARD_PowerOn+0x8a>
	  CardType=CT_SD1; 
 8013d6e:	2302      	movs	r3, #2
 8013d70:	e000      	b.n	8013d74 <MIOS32_SDCARD_PowerOn+0x8c>
	else 
      CardType=CT_MMC;
 8013d72:	2301      	movs	r3, #1
 8013d74:	702b      	strb	r3, [r5, #0]
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
		break;

	if(i < 16384) { 
	  status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_OCR, 0, SDCMD_READ_OCR_CRC);
	  CardType=((status>>24) & 0x40)  ? CT_SD2 | CT_BLOCK : CT_SD2;
 8013d76:	2400      	movs	r4, #0
	else 
      CardType=CT_MMC;
	  
	for (i=0;i<16384;i++) {

	  if (CardType==CT_SD1)
 8013d78:	481c      	ldr	r0, [pc, #112]	; (8013dec <MIOS32_SDCARD_PowerOn+0x104>)
 8013d7a:	7801      	ldrb	r1, [r0, #0]
 8013d7c:	2902      	cmp	r1, #2
 8013d7e:	d103      	bne.n	8013d88 <MIOS32_SDCARD_PowerOn+0xa0>
		status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC);
 8013d80:	20e9      	movs	r0, #233	; 0xe9
 8013d82:	2100      	movs	r1, #0
 8013d84:	22ff      	movs	r2, #255	; 0xff
 8013d86:	e002      	b.n	8013d8e <MIOS32_SDCARD_PowerOn+0xa6>
	  else 
	    status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND, 0, SDCMD_SEND_OP_COND_CRC);
 8013d88:	2041      	movs	r0, #65	; 0x41
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	22f9      	movs	r2, #249	; 0xf9
 8013d8e:	f7ff ff2a 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
		
	  if (status<0){
 8013d92:	2800      	cmp	r0, #0
	for (i=0;i<16384;i++) {

	  if (CardType==CT_SD1)
		status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC);
	  else 
	    status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND, 0, SDCMD_SEND_OP_COND_CRC);
 8013d94:	4605      	mov	r5, r0
		
	  if (status<0){
 8013d96:	db04      	blt.n	8013da2 <MIOS32_SDCARD_PowerOn+0xba>
		break;
	  }
	  if (status==0)
 8013d98:	d003      	beq.n	8013da2 <MIOS32_SDCARD_PowerOn+0xba>
	if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC)) <= 1 ) 
	  CardType=CT_SD1; 
	else 
      CardType=CT_MMC;
	  
	for (i=0;i<16384;i++) {
 8013d9a:	3401      	adds	r4, #1
 8013d9c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8013da0:	d1ea      	bne.n	8013d78 <MIOS32_SDCARD_PowerOn+0x90>
	  if (status==0)
		break;
	}
	
	// The block size should already be 512 bytes but re-initialize just in case (ignore if it fails)
    MIOS32_SDCARD_SendSDCCmd(SDCMD_SET_BLOCKLEN, 512, SDCMD_SEND_OP_COND_CRC);
 8013da2:	2050      	movs	r0, #80	; 0x50
 8013da4:	22f9      	movs	r2, #249	; 0xf9
 8013da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013daa:	f7ff ff1c 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
  }
  

  if( i == 16384 || CardType==0 ) 
 8013dae:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8013db2:	d0d2      	beq.n	8013d5a <MIOS32_SDCARD_PowerOn+0x72>
 8013db4:	480d      	ldr	r0, [pc, #52]	; (8013dec <MIOS32_SDCARD_PowerOn+0x104>)
 8013db6:	7801      	ldrb	r1, [r0, #0]
 8013db8:	b969      	cbnz	r1, 8013dd6 <MIOS32_SDCARD_PowerOn+0xee>
 8013dba:	e7ce      	b.n	8013d5a <MIOS32_SDCARD_PowerOn+0x72>
	for (i=0;i<16384;i++) 
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
		break;

	if(i < 16384) { 
	  status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_OCR, 0, SDCMD_READ_OCR_CRC);
 8013dbc:	22ff      	movs	r2, #255	; 0xff
 8013dbe:	207a      	movs	r0, #122	; 0x7a
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	f7ff ff10 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
	  CardType=((status>>24) & 0x40)  ? CT_SD2 | CT_BLOCK : CT_SD2;
 8013dc6:	4b09      	ldr	r3, [pc, #36]	; (8013dec <MIOS32_SDCARD_PowerOn+0x104>)
 8013dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013dcc:	bf0c      	ite	eq
 8013dce:	2204      	moveq	r2, #4
 8013dd0:	220c      	movne	r2, #12
 8013dd2:	701a      	strb	r2, [r3, #0]
 8013dd4:	e7ee      	b.n	8013db4 <MIOS32_SDCARD_PowerOn+0xcc>

  if( i == 16384 || CardType==0 ) 
    status=-2; // the last loop timed out or the cardtype was not detected...
error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013dd6:	2000      	movs	r0, #0
 8013dd8:	2201      	movs	r2, #1
 8013dda:	4601      	mov	r1, r0
 8013ddc:	f000 fd76 	bl	80148cc <MIOS32_SPI_RC_PinSet>

  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013de0:	2000      	movs	r0, #0
 8013de2:	21ff      	movs	r1, #255	; 0xff
 8013de4:	f000 fdae 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;
  return status; // Status should be 0 if nothing went wrong!
}
 8013de8:	4628      	mov	r0, r5
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	20000c72 	.word	0x20000c72

08013df0 <MIOS32_SDCARD_CheckAvailable>:
//! \param[in] was_available should only be set if the SD card was previously available
//! \return 0 if no response from SD Card
//! \return 1 if SD card is accessible
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CheckAvailable(u8 was_available)
{
 8013df0:	b538      	push	{r3, r4, r5, lr}
  s32 ret;
  MIOS32_SDCARD_MUTEX_TAKE;
  
  if( was_available ) {
 8013df2:	4604      	mov	r4, r0
 8013df4:	b178      	cbz	r0, 8013e16 <MIOS32_SDCARD_CheckAvailable+0x26>
    // init SPI port for fast frequency access (ca. 18 MBit/s)
    // this is required for the case that the SPI port is shared with other devices
    MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8013df6:	2103      	movs	r1, #3
 8013df8:	2202      	movs	r2, #2
 8013dfa:	2000      	movs	r0, #0
 8013dfc:	f000 fdc8 	bl	8014990 <MIOS32_SPI_TransferModeInit>
    // activate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8013e00:	2000      	movs	r0, #0
 8013e02:	4601      	mov	r1, r0
 8013e04:	4602      	mov	r2, r0
 8013e06:	f000 fd61 	bl	80148cc <MIOS32_SPI_RC_PinSet>

    // send STATUS command to check if media is available
    ret=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_STATUS, 0, SDCMD_SEND_STATUS_CRC);
 8013e0a:	204d      	movs	r0, #77	; 0x4d
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	22af      	movs	r2, #175	; 0xaf
 8013e10:	f7ff fee9 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013e14:	e024      	b.n	8013e60 <MIOS32_SDCARD_CheckAvailable+0x70>

  } else {

    // ensure that SPI interface is clocked at low speed
    MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 8013e16:	2103      	movs	r1, #3
 8013e18:	2207      	movs	r2, #7
 8013e1a:	f000 fdb9 	bl	8014990 <MIOS32_SPI_TransferModeInit>

    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013e1e:	4620      	mov	r0, r4
 8013e20:	4621      	mov	r1, r4
 8013e22:	2201      	movs	r2, #1
 8013e24:	f000 fd52 	bl	80148cc <MIOS32_SPI_RC_PinSet>
 8013e28:	240a      	movs	r4, #10
    // send 80 clock cycles to start up
	u8 i;
    for(i=0; i<10; ++i)
       MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	21ff      	movs	r1, #255	; 0xff
 8013e2e:	3c01      	subs	r4, #1
 8013e30:	f000 fd88 	bl	8014944 <MIOS32_SPI_TransferByte>

    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
    // send 80 clock cycles to start up
	u8 i;
    for(i=0; i<10; ++i)
 8013e34:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8013e38:	d1f7      	bne.n	8013e2a <MIOS32_SDCARD_CheckAvailable+0x3a>
       MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    // activate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8013e3a:	4621      	mov	r1, r4
 8013e3c:	4622      	mov	r2, r4
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f000 fd44 	bl	80148cc <MIOS32_SPI_RC_PinSet>

    // send CMD0 to reset the media
    if( (ret=(MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC))) < 0 ) 
 8013e44:	2040      	movs	r0, #64	; 0x40
 8013e46:	2295      	movs	r2, #149	; 0x95
 8013e48:	4621      	mov	r1, r4
 8013e4a:	f7ff fecc 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013e4e:	1e05      	subs	r5, r0, #0
 8013e50:	db07      	blt.n	8013e62 <MIOS32_SDCARD_CheckAvailable+0x72>
	  goto not_available;
		
    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013e52:	4621      	mov	r1, r4
 8013e54:	2201      	movs	r2, #1
 8013e56:	4620      	mov	r0, r4
 8013e58:	f000 fd38 	bl	80148cc <MIOS32_SPI_RC_PinSet>

    MIOS32_SDCARD_MUTEX_GIVE;  
    // run power-on sequence (negative return = not available)
    ret=MIOS32_SDCARD_PowerOn();
 8013e5c:	f7ff ff44 	bl	8013ce8 <MIOS32_SDCARD_PowerOn>
 8013e60:	4605      	mov	r5, r0

  }

not_available:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013e62:	2000      	movs	r0, #0
 8013e64:	2201      	movs	r2, #1
 8013e66:	4601      	mov	r1, r0
 8013e68:	f000 fd30 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013e6c:	21ff      	movs	r1, #255	; 0xff
 8013e6e:	2000      	movs	r0, #0
 8013e70:	f000 fd68 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;  

  return (ret == 0) ? 1 : 0; // 1=available, 0=not available.
}
 8013e74:	f1d5 0001 	rsbs	r0, r5, #1
 8013e78:	bf38      	it	cc
 8013e7a:	2000      	movcc	r0, #0
 8013e7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013e80 <MIOS32_SDCARD_SectorRead>:
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 8013e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 8013e82:	4b23      	ldr	r3, [pc, #140]	; (8013f10 <MIOS32_SDCARD_SectorRead+0x90>)
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 8013e84:	4604      	mov	r4, r0
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 8013e86:	7818      	ldrb	r0, [r3, #0]
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 8013e88:	460e      	mov	r6, r1
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 8013e8a:	f000 0108 	and.w	r1, r0, #8
 8013e8e:	b2ca      	uxtb	r2, r1
 8013e90:	b902      	cbnz	r2, 8013e94 <MIOS32_SDCARD_SectorRead+0x14>
	sector *= 512;
 8013e92:	0264      	lsls	r4, r4, #9

  MIOS32_SDCARD_MUTEX_TAKE;

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8013e94:	2103      	movs	r1, #3
 8013e96:	2202      	movs	r2, #2
 8013e98:	2000      	movs	r0, #0
 8013e9a:	f000 fd79 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_SINGLE_BLOCK, sector, SDCMD_READ_SINGLE_BLOCK_CRC)) ) {
 8013e9e:	2051      	movs	r0, #81	; 0x51
 8013ea0:	22ff      	movs	r2, #255	; 0xff
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	f7ff fe9f 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013ea8:	1e05      	subs	r5, r0, #0
 8013eaa:	d003      	beq.n	8013eb4 <MIOS32_SDCARD_SectorRead+0x34>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 8013eac:	da25      	bge.n	8013efa <MIOS32_SDCARD_SectorRead+0x7a>
 8013eae:	f06f 05ff 	mvn.w	r5, #255	; 0xff
 8013eb2:	e022      	b.n	8013efa <MIOS32_SDCARD_SectorRead+0x7a>

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_SINGLE_BLOCK, sector, SDCMD_READ_SINGLE_BLOCK_CRC)) ) {
 8013eb4:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    goto error;
  }
  
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013eb8:	2000      	movs	r0, #0
 8013eba:	21ff      	movs	r1, #255	; 0xff
 8013ebc:	f000 fd42 	bl	8014944 <MIOS32_SPI_TransferByte>
    if( ret != 0xff )
 8013ec0:	b2c3      	uxtb	r3, r0
 8013ec2:	2bff      	cmp	r3, #255	; 0xff
 8013ec4:	d104      	bne.n	8013ed0 <MIOS32_SDCARD_SectorRead+0x50>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
    goto error;
  }
  
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
 8013ec6:	3c01      	subs	r4, #1
 8013ec8:	d1f6      	bne.n	8013eb8 <MIOS32_SDCARD_SectorRead+0x38>
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    if( ret != 0xff )
      break;
  }
  if( i == 65536 ) {
    status= -257;
 8013eca:	f46f 7580 	mvn.w	r5, #256	; 0x100
 8013ece:	e014      	b.n	8013efa <MIOS32_SDCARD_SectorRead+0x7a>
  // read 512 bytes via DMA
#ifdef MIOS32_SDCARD_TASK_SUSPEND_HOOK
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, NULL, buffer, 512, MIOS32_SDCARD_TASK_RESUME_HOOK);
  MIOS32_SDCARD_TASK_SUSPEND_HOOK();
#else
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, NULL, buffer, 512, NULL);
 8013ed0:	2400      	movs	r4, #0
 8013ed2:	4632      	mov	r2, r6
 8013ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ed8:	4621      	mov	r1, r4
 8013eda:	9400      	str	r4, [sp, #0]
 8013edc:	4620      	mov	r0, r4
 8013ede:	f000 ff0b 	bl	8014cf8 <MIOS32_SPI_TransferBlock>
#endif

  // read (and ignore) CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013ee2:	21ff      	movs	r1, #255	; 0xff
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	f000 fd2d 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013eea:	21ff      	movs	r1, #255	; 0xff
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 fd29 	bl	8014944 <MIOS32_SPI_TransferByte>

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	21ff      	movs	r1, #255	; 0xff
 8013ef6:	f000 fd25 	bl	8014944 <MIOS32_SPI_TransferByte>

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013efa:	2000      	movs	r0, #0
 8013efc:	2201      	movs	r2, #1
 8013efe:	4601      	mov	r1, r0
 8013f00:	f000 fce4 	bl	80148cc <MIOS32_SPI_RC_PinSet>

  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f04:	2000      	movs	r0, #0
 8013f06:	21ff      	movs	r1, #255	; 0xff
 8013f08:	f000 fd1c 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;
  return status; 
}
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8013f10:	20000c72 	.word	0x20000c72

08013f14 <MIOS32_SDCARD_SectorWrite>:
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 8013f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 8013f16:	4b29      	ldr	r3, [pc, #164]	; (8013fbc <MIOS32_SDCARD_SectorWrite+0xa8>)
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 8013f18:	4604      	mov	r4, r0
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 8013f1a:	7818      	ldrb	r0, [r3, #0]
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 8013f1c:	460d      	mov	r5, r1
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 8013f1e:	f000 0108 	and.w	r1, r0, #8
 8013f22:	b2ca      	uxtb	r2, r1
 8013f24:	b902      	cbnz	r2, 8013f28 <MIOS32_SDCARD_SectorWrite+0x14>
	sector *= 512;
 8013f26:	0264      	lsls	r4, r4, #9

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8013f28:	2103      	movs	r1, #3
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	f000 fd2f 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_WRITE_SINGLE_BLOCK, sector, SDCMD_WRITE_SINGLE_BLOCK_CRC)) ) {
 8013f32:	2058      	movs	r0, #88	; 0x58
 8013f34:	4621      	mov	r1, r4
 8013f36:	22ff      	movs	r2, #255	; 0xff
 8013f38:	f7ff fe55 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013f3c:	1e04      	subs	r4, r0, #0
 8013f3e:	d003      	beq.n	8013f48 <MIOS32_SDCARD_SectorWrite+0x34>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 8013f40:	da31      	bge.n	8013fa6 <MIOS32_SDCARD_SectorWrite+0x92>
 8013f42:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 8013f46:	e02e      	b.n	8013fa6 <MIOS32_SDCARD_SectorWrite+0x92>
    goto error;
  }  

  // send start token
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xfe);
 8013f48:	21fe      	movs	r1, #254	; 0xfe
 8013f4a:	f000 fcfb 	bl	8014944 <MIOS32_SPI_TransferByte>
  // send 512 bytes of data via DMA
#ifdef MIOS32_SDCARD_TASK_SUSPEND_HOOK
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, buffer, NULL, 512, MIOS32_SDCARD_TASK_RESUME_HOOK);
  MIOS32_SDCARD_TASK_SUSPEND_HOOK();
#else
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, buffer, NULL, 512, NULL);
 8013f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f52:	4622      	mov	r2, r4
 8013f54:	4629      	mov	r1, r5
 8013f56:	9400      	str	r4, [sp, #0]
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f000 fecd 	bl	8014cf8 <MIOS32_SPI_TransferBlock>
#endif

  // send CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f5e:	21ff      	movs	r1, #255	; 0xff
 8013f60:	4620      	mov	r0, r4
 8013f62:	f000 fcef 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f66:	21ff      	movs	r1, #255	; 0xff
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f000 fceb 	bl	8014944 <MIOS32_SPI_TransferByte>

  // read response
  u8 response = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f6e:	21ff      	movs	r1, #255	; 0xff
 8013f70:	4620      	mov	r0, r4
 8013f72:	f000 fce7 	bl	8014944 <MIOS32_SPI_TransferByte>
  if( (response & 0x0f) != 0x5 ) {
 8013f76:	f000 030f 	and.w	r3, r0, #15
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d10c      	bne.n	8013f98 <MIOS32_SDCARD_SectorWrite+0x84>
 8013f7e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    goto error;
  }

  // wait for write completion
  for(i=0; i<32*65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f82:	2000      	movs	r0, #0
 8013f84:	21ff      	movs	r1, #255	; 0xff
 8013f86:	f000 fcdd 	bl	8014944 <MIOS32_SPI_TransferByte>
    if( ret != 0x00 )
 8013f8a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8013f8e:	d106      	bne.n	8013f9e <MIOS32_SDCARD_SectorWrite+0x8a>
    status= -257;
    goto error;
  }

  // wait for write completion
  for(i=0; i<32*65536; ++i) { // TODO: check if sufficient
 8013f90:	3d01      	subs	r5, #1
 8013f92:	d1f6      	bne.n	8013f82 <MIOS32_SDCARD_SectorWrite+0x6e>
    if( ret != 0x00 )
      break;
  }
  if( i == 32*65536 ) {

    status= -258;
 8013f94:	4c0a      	ldr	r4, [pc, #40]	; (8013fc0 <MIOS32_SDCARD_SectorWrite+0xac>)
 8013f96:	e006      	b.n	8013fa6 <MIOS32_SDCARD_SectorWrite+0x92>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

  // read response
  u8 response = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
  if( (response & 0x0f) != 0x5 ) {
    status= -257;
 8013f98:	f46f 7480 	mvn.w	r4, #256	; 0x100
 8013f9c:	e003      	b.n	8013fa6 <MIOS32_SDCARD_SectorWrite+0x92>
    status= -258;
    goto error;
  }

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	21ff      	movs	r1, #255	; 0xff
 8013fa2:	f000 fccf 	bl	8014944 <MIOS32_SPI_TransferByte>

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	2201      	movs	r2, #1
 8013faa:	4601      	mov	r1, r0
 8013fac:	f000 fc8e 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	21ff      	movs	r1, #255	; 0xff
 8013fb4:	f000 fcc6 	bl	8014944 <MIOS32_SPI_TransferByte>

  MIOS32_SDCARD_MUTEX_GIVE;

  return status;
}
 8013fb8:	4620      	mov	r0, r4
 8013fba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013fbc:	20000c72 	.word	0x20000c72
 8013fc0:	fffffefe 	.word	0xfffffefe

08013fc4 <MIOS32_SDCARD_CIDRead>:
//! \return -error if error occured during read operation
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CIDRead(mios32_sdcard_cid_t *cid)
{
 8013fc4:	b570      	push	{r4, r5, r6, lr}

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SDCARD_MUTEX_TAKE;

  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8013fc6:	2103      	movs	r1, #3
 8013fc8:	2202      	movs	r2, #2
//! \return -error if error occured during read operation
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CIDRead(mios32_sdcard_cid_t *cid)
{
 8013fca:	b086      	sub	sp, #24
 8013fcc:	4604      	mov	r4, r0

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SDCARD_MUTEX_TAKE;

  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8013fce:	2000      	movs	r0, #0
 8013fd0:	f000 fcde 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_CID, 0, SDCMD_SEND_CID_CRC)) ) {
 8013fd4:	204a      	movs	r0, #74	; 0x4a
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	22ff      	movs	r2, #255	; 0xff
 8013fda:	f7ff fe04 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 8013fde:	1e06      	subs	r6, r0, #0
 8013fe0:	d003      	beq.n	8013fea <MIOS32_SDCARD_CIDRead+0x26>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 8013fe2:	da62      	bge.n	80140aa <MIOS32_SDCARD_CIDRead+0xe6>
 8013fe4:	f06f 06ff 	mvn.w	r6, #255	; 0xff
 8013fe8:	e05f      	b.n	80140aa <MIOS32_SDCARD_CIDRead+0xe6>
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SDCARD_MUTEX_TAKE;

  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_CID, 0, SDCMD_SEND_CID_CRC)) ) {
 8013fea:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    goto error;
  }  
	
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8013fee:	2000      	movs	r0, #0
 8013ff0:	21ff      	movs	r1, #255	; 0xff
 8013ff2:	f000 fca7 	bl	8014944 <MIOS32_SPI_TransferByte>
    if( ret != 0xff )
 8013ff6:	b2c0      	uxtb	r0, r0
 8013ff8:	28ff      	cmp	r0, #255	; 0xff
 8013ffa:	d103      	bne.n	8014004 <MIOS32_SDCARD_CIDRead+0x40>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
    goto error;
  }  
	
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
 8013ffc:	3d01      	subs	r5, #1
 8013ffe:	d1f6      	bne.n	8013fee <MIOS32_SDCARD_CIDRead+0x2a>
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    if( ret != 0xff )
      break;
  }
  if( i == 65536 ) 
    status= -257;
 8014000:	f46f 7680 	mvn.w	r6, #256	; 0x100
  

  // read 16 bytes via DMA
  u8 cid_buffer[16];
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, NULL, cid_buffer, 16, NULL);
 8014004:	2500      	movs	r5, #0
 8014006:	aa02      	add	r2, sp, #8
 8014008:	2310      	movs	r3, #16
 801400a:	4629      	mov	r1, r5
 801400c:	9500      	str	r5, [sp, #0]
 801400e:	4628      	mov	r0, r5
 8014010:	f000 fe72 	bl	8014cf8 <MIOS32_SPI_TransferBlock>

  // read (and ignore) CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8014014:	21ff      	movs	r1, #255	; 0xff
 8014016:	4628      	mov	r0, r5
 8014018:	f000 fc94 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801401c:	21ff      	movs	r1, #255	; 0xff
 801401e:	4628      	mov	r0, r5
 8014020:	f000 fc90 	bl	8014944 <MIOS32_SPI_TransferByte>

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8014024:	21ff      	movs	r1, #255	; 0xff
 8014026:	4628      	mov	r0, r5
 8014028:	f000 fc8c 	bl	8014944 <MIOS32_SPI_TransferByte>
  // sort returned informations into CID structure
  // from STM Mass Storage example
  /* Byte 0 */
  cid->ManufacturerID = cid_buffer[0];
  /* Byte 1 */
  cid->OEM_AppliID = cid_buffer[1] << 8;
 801402c:	f89d 2009 	ldrb.w	r2, [sp, #9]
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
 8014030:	f89d 100a 	ldrb.w	r1, [sp, #10]


  // sort returned informations into CID structure
  // from STM Mass Storage example
  /* Byte 0 */
  cid->ManufacturerID = cid_buffer[0];
 8014034:	f89d 3008 	ldrb.w	r3, [sp, #8]
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
  cid->ProdName[5] = 0; // string terminator
 8014038:	7265      	strb	r5, [r4, #9]
  /* Byte 0 */
  cid->ManufacturerID = cid_buffer[0];
  /* Byte 1 */
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
 801403a:	ea41 2002 	orr.w	r0, r1, r2, lsl #8


  // sort returned informations into CID structure
  // from STM Mass Storage example
  /* Byte 0 */
  cid->ManufacturerID = cid_buffer[0];
 801403e:	7023      	strb	r3, [r4, #0]
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
 8014040:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014044:	f89d 300b 	ldrb.w	r3, [sp, #11]
  /* Byte 0 */
  cid->ManufacturerID = cid_buffer[0];
  /* Byte 1 */
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
 8014048:	8060      	strh	r0, [r4, #2]
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
 801404a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 801404e:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8014052:	7123      	strb	r3, [r4, #4]
 8014054:	7162      	strb	r2, [r4, #5]
 8014056:	f89d 300f 	ldrb.w	r3, [sp, #15]
  cid->ProdName[5] = 0; // string terminator
  /* Byte 8 */
  cid->ProdRev = cid_buffer[8];
 801405a:	f89d 2010 	ldrb.w	r2, [sp, #16]
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
 801405e:	71e0      	strb	r0, [r4, #7]
  cid->ProdName[5] = 0; // string terminator
  /* Byte 8 */
  cid->ProdRev = cid_buffer[8];
  /* Byte 9 */
  cid->ProdSN = cid_buffer[9] << 24;
 8014060:	f89d 0011 	ldrb.w	r0, [sp, #17]
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
 8014064:	71a1      	strb	r1, [r4, #6]
  /* Byte 8 */
  cid->ProdRev = cid_buffer[8];
  /* Byte 9 */
  cid->ProdSN = cid_buffer[9] << 24;
  /* Byte 10 */
  cid->ProdSN |= cid_buffer[10] << 16;
 8014066:	f89d 1012 	ldrb.w	r1, [sp, #18]
  cid->OEM_AppliID = cid_buffer[1] << 8;
  /* Byte 2 */
  cid->OEM_AppliID |= cid_buffer[2];
  /* Byte 3..7 */
  for(i=0; i<5; ++i)
    cid->ProdName[i] = cid_buffer[3+i];
 801406a:	7223      	strb	r3, [r4, #8]
  cid->ProdName[5] = 0; // string terminator
  /* Byte 8 */
  cid->ProdRev = cid_buffer[8];
 801406c:	72a2      	strb	r2, [r4, #10]
  /* Byte 9 */
  cid->ProdSN = cid_buffer[9] << 24;
 801406e:	0603      	lsls	r3, r0, #24
  /* Byte 10 */
  cid->ProdSN |= cid_buffer[10] << 16;
  /* Byte 11 */
  cid->ProdSN |= cid_buffer[11] << 8;
 8014070:	f89d 2013 	ldrb.w	r2, [sp, #19]
  /* Byte 8 */
  cid->ProdRev = cid_buffer[8];
  /* Byte 9 */
  cid->ProdSN = cid_buffer[9] << 24;
  /* Byte 10 */
  cid->ProdSN |= cid_buffer[10] << 16;
 8014074:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  /* Byte 11 */
  cid->ProdSN |= cid_buffer[11] << 8;
  /* Byte 12 */
  cid->ProdSN |= cid_buffer[12];
 8014078:	f89d 3014 	ldrb.w	r3, [sp, #20]
  /* Byte 9 */
  cid->ProdSN = cid_buffer[9] << 24;
  /* Byte 10 */
  cid->ProdSN |= cid_buffer[10] << 16;
  /* Byte 11 */
  cid->ProdSN |= cid_buffer[11] << 8;
 801407c:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
  /* Byte 12 */
  cid->ProdSN |= cid_buffer[12];
  /* Byte 13 */
  cid->Reserved1 |= (cid_buffer[13] & 0xF0) >> 4;
 8014080:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8014084:	7c22      	ldrb	r2, [r4, #16]
  /* Byte 10 */
  cid->ProdSN |= cid_buffer[10] << 16;
  /* Byte 11 */
  cid->ProdSN |= cid_buffer[11] << 8;
  /* Byte 12 */
  cid->ProdSN |= cid_buffer[12];
 8014086:	4318      	orrs	r0, r3
 8014088:	60e0      	str	r0, [r4, #12]
  /* Byte 13 */
  cid->Reserved1 |= (cid_buffer[13] & 0xF0) >> 4;
 801408a:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
  /* Byte 14 */
  cid->ManufactDate = (cid_buffer[13] & 0x0F) << 8;
 801408e:	f001 030f 	and.w	r3, r1, #15
  /* Byte 11 */
  cid->ProdSN |= cid_buffer[11] << 8;
  /* Byte 12 */
  cid->ProdSN |= cid_buffer[12];
  /* Byte 13 */
  cid->Reserved1 |= (cid_buffer[13] & 0xF0) >> 4;
 8014092:	7420      	strb	r0, [r4, #16]
  /* Byte 14 */
  cid->ManufactDate = (cid_buffer[13] & 0x0F) << 8;
  /* Byte 15 */
  cid->ManufactDate |= cid_buffer[14];
 8014094:	f89d 1016 	ldrb.w	r1, [sp, #22]
  /* Byte 16 */
  cid->msd_CRC = (cid_buffer[15] & 0xFE) >> 1;
 8014098:	f89d 0017 	ldrb.w	r0, [sp, #23]
  /* Byte 13 */
  cid->Reserved1 |= (cid_buffer[13] & 0xF0) >> 4;
  /* Byte 14 */
  cid->ManufactDate = (cid_buffer[13] & 0x0F) << 8;
  /* Byte 15 */
  cid->ManufactDate |= cid_buffer[14];
 801409c:	ea41 2203 	orr.w	r2, r1, r3, lsl #8
  /* Byte 16 */
  cid->msd_CRC = (cid_buffer[15] & 0xFE) >> 1;
 80140a0:	0843      	lsrs	r3, r0, #1
  cid->Reserved2 = 1;
 80140a2:	2101      	movs	r1, #1
  /* Byte 13 */
  cid->Reserved1 |= (cid_buffer[13] & 0xF0) >> 4;
  /* Byte 14 */
  cid->ManufactDate = (cid_buffer[13] & 0x0F) << 8;
  /* Byte 15 */
  cid->ManufactDate |= cid_buffer[14];
 80140a4:	8262      	strh	r2, [r4, #18]
  /* Byte 16 */
  cid->msd_CRC = (cid_buffer[15] & 0xFE) >> 1;
 80140a6:	7523      	strb	r3, [r4, #20]
  cid->Reserved2 = 1;
 80140a8:	7561      	strb	r1, [r4, #21]

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80140aa:	2000      	movs	r0, #0
 80140ac:	2201      	movs	r2, #1
 80140ae:	4601      	mov	r1, r0
 80140b0:	f000 fc0c 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80140b4:	2000      	movs	r0, #0
 80140b6:	21ff      	movs	r1, #255	; 0xff
 80140b8:	f000 fc44 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;

  return status;
}
 80140bc:	4630      	mov	r0, r6
 80140be:	b006      	add	sp, #24
 80140c0:	bd70      	pop	{r4, r5, r6, pc}

080140c2 <MIOS32_SDCARD_CSDRead>:
//! \return -error if error occured during read operation
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CSDRead(mios32_sdcard_csd_t *csd)
{
 80140c2:	b570      	push	{r4, r5, r6, lr}
  
  MIOS32_SDCARD_MUTEX_TAKE;

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 80140c4:	2103      	movs	r1, #3
 80140c6:	2202      	movs	r2, #2
//! \return -error if error occured during read operation
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CSDRead(mios32_sdcard_csd_t *csd)
{
 80140c8:	b086      	sub	sp, #24
 80140ca:	4604      	mov	r4, r0
  
  MIOS32_SDCARD_MUTEX_TAKE;

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 80140cc:	2000      	movs	r0, #0
 80140ce:	f000 fc5f 	bl	8014990 <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_CSD, 0, SDCMD_SEND_CSD_CRC)) ) {
 80140d2:	2049      	movs	r0, #73	; 0x49
 80140d4:	2100      	movs	r1, #0
 80140d6:	22ff      	movs	r2, #255	; 0xff
 80140d8:	f7ff fd85 	bl	8013be6 <MIOS32_SDCARD_SendSDCCmd>
 80140dc:	1e06      	subs	r6, r0, #0
 80140de:	d004      	beq.n	80140ea <MIOS32_SDCARD_CSDRead+0x28>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 80140e0:	f280 80d7 	bge.w	8014292 <MIOS32_SDCARD_CSDRead+0x1d0>
 80140e4:	f06f 06ff 	mvn.w	r6, #255	; 0xff
 80140e8:	e0d3      	b.n	8014292 <MIOS32_SDCARD_CSDRead+0x1d0>

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_CSD, 0, SDCMD_SEND_CSD_CRC)) ) {
 80140ea:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
    goto error;
  }
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80140ee:	2000      	movs	r0, #0
 80140f0:	21ff      	movs	r1, #255	; 0xff
 80140f2:	f000 fc27 	bl	8014944 <MIOS32_SPI_TransferByte>
    if( ret != 0xff )
 80140f6:	b2c0      	uxtb	r0, r0
 80140f8:	28ff      	cmp	r0, #255	; 0xff
 80140fa:	d104      	bne.n	8014106 <MIOS32_SDCARD_CSDRead+0x44>
  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_CSD, 0, SDCMD_SEND_CSD_CRC)) ) {
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
    goto error;
  }
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
 80140fc:	3d01      	subs	r5, #1
 80140fe:	d1f6      	bne.n	80140ee <MIOS32_SDCARD_CSDRead+0x2c>
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    if( ret != 0xff )
      break;
  }
  if( i == 65536 ) {
    status= -257;
 8014100:	f46f 7680 	mvn.w	r6, #256	; 0x100
 8014104:	e0c5      	b.n	8014292 <MIOS32_SDCARD_CSDRead+0x1d0>
    goto error;
  }

  // read 16 bytes via DMA
  u8 csd_buffer[16];
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, NULL, csd_buffer, 16, NULL);
 8014106:	2500      	movs	r5, #0
 8014108:	2310      	movs	r3, #16
 801410a:	aa02      	add	r2, sp, #8
 801410c:	4629      	mov	r1, r5
 801410e:	9500      	str	r5, [sp, #0]
 8014110:	4628      	mov	r0, r5
 8014112:	f000 fdf1 	bl	8014cf8 <MIOS32_SPI_TransferBlock>

  // read (and ignore) CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8014116:	21ff      	movs	r1, #255	; 0xff
 8014118:	4628      	mov	r0, r5
 801411a:	f000 fc13 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801411e:	21ff      	movs	r1, #255	; 0xff
 8014120:	4628      	mov	r0, r5
 8014122:	f000 fc0f 	bl	8014944 <MIOS32_SPI_TransferByte>

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8014126:	21ff      	movs	r1, #255	; 0xff
 8014128:	4628      	mov	r0, r5
 801412a:	f000 fc0b 	bl	8014944 <MIOS32_SPI_TransferByte>

  // sort returned informations into CSD structure
  // from STM Mass Storage example
  /* Byte 0 */
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
 801412e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
  csd->WrBlockMisalign = (csd_buffer[6] & 0x40) >> 6;
  csd->RdBlockMisalign = (csd_buffer[6] & 0x20) >> 5;
  csd->DSRImpl = (csd_buffer[6] & 0x10) >> 4;
  csd->Reserved2 = 0; /* Reserved */
 8014132:	7365      	strb	r5, [r4, #13]
  // sort returned informations into CSD structure
  // from STM Mass Storage example
  /* Byte 0 */
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
  csd->SysSpecVersion = (csd_buffer[0] & 0x3C) >> 2;
 8014134:	f3c3 0183 	ubfx	r1, r3, #2, #4
 8014138:	7061      	strb	r1, [r4, #1]
  csd->Reserved1 = csd_buffer[0] & 0x03;
  /* Byte 1 */
  csd->TAAC = csd_buffer[1] ;
  /* Byte 2 */
  csd->NSAC = csd_buffer[2];
 801413a:	f89d 100a 	ldrb.w	r1, [sp, #10]

  // sort returned informations into CSD structure
  // from STM Mass Storage example
  /* Byte 0 */
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
 801413e:	099a      	lsrs	r2, r3, #6
  csd->SysSpecVersion = (csd_buffer[0] & 0x3C) >> 2;
  csd->Reserved1 = csd_buffer[0] & 0x03;
 8014140:	f003 0003 	and.w	r0, r3, #3
  /* Byte 1 */
  csd->TAAC = csd_buffer[1] ;
 8014144:	f89d 3009 	ldrb.w	r3, [sp, #9]
  // from STM Mass Storage example
  /* Byte 0 */
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
  csd->SysSpecVersion = (csd_buffer[0] & 0x3C) >> 2;
  csd->Reserved1 = csd_buffer[0] & 0x03;
 8014148:	70a0      	strb	r0, [r4, #2]
  /* Byte 1 */
  csd->TAAC = csd_buffer[1] ;
  /* Byte 2 */
  csd->NSAC = csd_buffer[2];
 801414a:	7121      	strb	r1, [r4, #4]
  /* Byte 3 */
  csd->MaxBusClkFrec = csd_buffer[3];
 801414c:	f89d 000b 	ldrb.w	r0, [sp, #11]
  /* Byte 4 */
  csd->CardComdClasses = csd_buffer[4] << 4;
 8014150:	f89d 100c 	ldrb.w	r1, [sp, #12]
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
  csd->SysSpecVersion = (csd_buffer[0] & 0x3C) >> 2;
  csd->Reserved1 = csd_buffer[0] & 0x03;
  /* Byte 1 */
  csd->TAAC = csd_buffer[1] ;
 8014154:	70e3      	strb	r3, [r4, #3]
  /* Byte 3 */
  csd->MaxBusClkFrec = csd_buffer[3];
  /* Byte 4 */
  csd->CardComdClasses = csd_buffer[4] << 4;
  /* Byte 5 */
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
 8014156:	f89d 300d 	ldrb.w	r3, [sp, #13]
  /* Byte 1 */
  csd->TAAC = csd_buffer[1] ;
  /* Byte 2 */
  csd->NSAC = csd_buffer[2];
  /* Byte 3 */
  csd->MaxBusClkFrec = csd_buffer[3];
 801415a:	7160      	strb	r0, [r4, #5]
  /* Byte 4 */
  csd->CardComdClasses = csd_buffer[4] << 4;
 801415c:	0108      	lsls	r0, r1, #4
  /* Byte 5 */
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
 801415e:	ea40 1113 	orr.w	r1, r0, r3, lsr #4
  csd->RdBlockLen = csd_buffer[5] & 0x0F;
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
 8014162:	f89d 000e 	ldrb.w	r0, [sp, #14]
  /* Byte 3 */
  csd->MaxBusClkFrec = csd_buffer[3];
  /* Byte 4 */
  csd->CardComdClasses = csd_buffer[4] << 4;
  /* Byte 5 */
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
 8014166:	80e1      	strh	r1, [r4, #6]
  csd->RdBlockLen = csd_buffer[5] & 0x0F;
 8014168:	f003 030f 	and.w	r3, r3, #15
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
 801416c:	09c1      	lsrs	r1, r0, #7
  csd->MaxBusClkFrec = csd_buffer[3];
  /* Byte 4 */
  csd->CardComdClasses = csd_buffer[4] << 4;
  /* Byte 5 */
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
  csd->RdBlockLen = csd_buffer[5] & 0x0F;
 801416e:	7223      	strb	r3, [r4, #8]
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
  csd->WrBlockMisalign = (csd_buffer[6] & 0x40) >> 6;
 8014170:	f3c0 1380 	ubfx	r3, r0, #6, #1
  csd->CardComdClasses = csd_buffer[4] << 4;
  /* Byte 5 */
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
  csd->RdBlockLen = csd_buffer[5] & 0x0F;
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
 8014174:	7261      	strb	r1, [r4, #9]
  csd->WrBlockMisalign = (csd_buffer[6] & 0x40) >> 6;
 8014176:	72a3      	strb	r3, [r4, #10]
  csd->RdBlockMisalign = (csd_buffer[6] & 0x20) >> 5;
 8014178:	f3c0 1140 	ubfx	r1, r0, #5, #1
  csd->DSRImpl = (csd_buffer[6] & 0x10) >> 4;
 801417c:	f3c0 1300 	ubfx	r3, r0, #4, #1
  csd->Reserved2 = 0; /* Reserved */
  
  if (csd->CSDStruct != 1) { //SD V1
 8014180:	2a01      	cmp	r2, #1

  // sort returned informations into CSD structure
  // from STM Mass Storage example
  /* Byte 0 */
  
  csd->CSDStruct = (csd_buffer[0] & 0xC0) >> 6;
 8014182:	7022      	strb	r2, [r4, #0]
  csd->CardComdClasses |= (csd_buffer[5] & 0xF0) >> 4;
  csd->RdBlockLen = csd_buffer[5] & 0x0F;
  /* Byte 6 */
  csd->PartBlockRead = (csd_buffer[6] & 0x80) >> 7;
  csd->WrBlockMisalign = (csd_buffer[6] & 0x40) >> 6;
  csd->RdBlockMisalign = (csd_buffer[6] & 0x20) >> 5;
 8014184:	72e1      	strb	r1, [r4, #11]
  csd->DSRImpl = (csd_buffer[6] & 0x10) >> 4;
 8014186:	7323      	strb	r3, [r4, #12]
  csd->Reserved2 = 0; /* Reserved */
  
  if (csd->CSDStruct != 1) { //SD V1
 8014188:	d020      	beq.n	80141cc <MIOS32_SDCARD_CSDRead+0x10a>
	csd->DeviceSize = (csd_buffer[6] & 0x03) << 10;
	/* Byte 7 */
	csd->DeviceSize |= (csd_buffer[7]) << 2;
 801418a:	f89d 100f 	ldrb.w	r1, [sp, #15]
	/* Byte 8 */
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
 801418e:	f89d 2010 	ldrb.w	r2, [sp, #16]
  csd->Reserved2 = 0; /* Reserved */
  
  if (csd->CSDStruct != 1) { //SD V1
	csd->DeviceSize = (csd_buffer[6] & 0x03) << 10;
	/* Byte 7 */
	csd->DeviceSize |= (csd_buffer[7]) << 2;
 8014192:	008b      	lsls	r3, r1, #2
  csd->RdBlockMisalign = (csd_buffer[6] & 0x20) >> 5;
  csd->DSRImpl = (csd_buffer[6] & 0x10) >> 4;
  csd->Reserved2 = 0; /* Reserved */
  
  if (csd->CSDStruct != 1) { //SD V1
	csd->DeviceSize = (csd_buffer[6] & 0x03) << 10;
 8014194:	f000 0003 	and.w	r0, r0, #3
	/* Byte 7 */
	csd->DeviceSize |= (csd_buffer[7]) << 2;
 8014198:	ea43 2080 	orr.w	r0, r3, r0, lsl #10
	/* Byte 8 */
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
 801419c:	ea40 1192 	orr.w	r1, r0, r2, lsr #6
	csd->MaxRdCurrentVDDMin = (csd_buffer[8] & 0x38) >> 3;
 80141a0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
	csd->MaxRdCurrentVDDMax = (csd_buffer[8] & 0x07);
    /* Byte 9 */
    csd->MaxWrCurrentVDDMin = (csd_buffer[9] & 0xE0) >> 5;
 80141a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  if (csd->CSDStruct != 1) { //SD V1
	csd->DeviceSize = (csd_buffer[6] & 0x03) << 10;
	/* Byte 7 */
	csd->DeviceSize |= (csd_buffer[7]) << 2;
	/* Byte 8 */
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
 80141a8:	6121      	str	r1, [r4, #16]
	csd->MaxRdCurrentVDDMin = (csd_buffer[8] & 0x38) >> 3;
	csd->MaxRdCurrentVDDMax = (csd_buffer[8] & 0x07);
 80141aa:	f002 0207 	and.w	r2, r2, #7
 80141ae:	7562      	strb	r2, [r4, #21]
    /* Byte 9 */
    csd->MaxWrCurrentVDDMin = (csd_buffer[9] & 0xE0) >> 5;
    csd->MaxWrCurrentVDDMax = (csd_buffer[9] & 0x1C) >> 2;
    csd->DeviceSizeMul = (csd_buffer[9] & 0x03) << 1;
    /* Byte 10 */
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
 80141b0:	f89d 2012 	ldrb.w	r2, [sp, #18]
	csd->DeviceSize = (csd_buffer[6] & 0x03) << 10;
	/* Byte 7 */
	csd->DeviceSize |= (csd_buffer[7]) << 2;
	/* Byte 8 */
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
	csd->MaxRdCurrentVDDMin = (csd_buffer[8] & 0x38) >> 3;
 80141b4:	7523      	strb	r3, [r4, #20]
	csd->MaxRdCurrentVDDMax = (csd_buffer[8] & 0x07);
    /* Byte 9 */
    csd->MaxWrCurrentVDDMin = (csd_buffer[9] & 0xE0) >> 5;
 80141b6:	0941      	lsrs	r1, r0, #5
    csd->MaxWrCurrentVDDMax = (csd_buffer[9] & 0x1C) >> 2;
 80141b8:	f3c0 0382 	ubfx	r3, r0, #2, #3
	/* Byte 8 */
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
	csd->MaxRdCurrentVDDMin = (csd_buffer[8] & 0x38) >> 3;
	csd->MaxRdCurrentVDDMax = (csd_buffer[8] & 0x07);
    /* Byte 9 */
    csd->MaxWrCurrentVDDMin = (csd_buffer[9] & 0xE0) >> 5;
 80141bc:	75a1      	strb	r1, [r4, #22]
    csd->MaxWrCurrentVDDMax = (csd_buffer[9] & 0x1C) >> 2;
    csd->DeviceSizeMul = (csd_buffer[9] & 0x03) << 1;
 80141be:	f000 0003 	and.w	r0, r0, #3
    /* Byte 10 */
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
 80141c2:	09d1      	lsrs	r1, r2, #7
	csd->DeviceSize |= (csd_buffer[8] & 0xC0) >> 6;
	csd->MaxRdCurrentVDDMin = (csd_buffer[8] & 0x38) >> 3;
	csd->MaxRdCurrentVDDMax = (csd_buffer[8] & 0x07);
    /* Byte 9 */
    csd->MaxWrCurrentVDDMin = (csd_buffer[9] & 0xE0) >> 5;
    csd->MaxWrCurrentVDDMax = (csd_buffer[9] & 0x1C) >> 2;
 80141c4:	75e3      	strb	r3, [r4, #23]
    csd->DeviceSizeMul = (csd_buffer[9] & 0x03) << 1;
    /* Byte 10 */
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
 80141c6:	ea41 0340 	orr.w	r3, r1, r0, lsl #1
 80141ca:	e013      	b.n	80141f4 <MIOS32_SDCARD_CSDRead+0x132>
  } else { // SD V2
	/* Byte 7 */
    csd->DeviceSize = (csd_buffer[7] & 0x03)<<16;
 80141cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
	/* Byte 8 */
    csd->DeviceSize |= (csd_buffer[8] & 0xff)<<8;
 80141d0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    /* Byte 9 */
    csd->DeviceSize |= csd_buffer[9] & 0xff;
	// These are not supported/required on v2 cards.
	csd->MaxRdCurrentVDDMin=0; 
 80141d4:	7525      	strb	r5, [r4, #20]
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
  } else { // SD V2
	/* Byte 7 */
    csd->DeviceSize = (csd_buffer[7] & 0x03)<<16;
	/* Byte 8 */
    csd->DeviceSize |= (csd_buffer[8] & 0xff)<<8;
 80141d6:	020b      	lsls	r3, r1, #8
    csd->DeviceSizeMul = (csd_buffer[9] & 0x03) << 1;
    /* Byte 10 */
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
  } else { // SD V2
	/* Byte 7 */
    csd->DeviceSize = (csd_buffer[7] & 0x03)<<16;
 80141d8:	f002 0003 	and.w	r0, r2, #3
	/* Byte 8 */
    csd->DeviceSize |= (csd_buffer[8] & 0xff)<<8;
    /* Byte 9 */
    csd->DeviceSize |= csd_buffer[9] & 0xff;
 80141dc:	f89d 2011 	ldrb.w	r2, [sp, #17]
	// These are not supported/required on v2 cards.
	csd->MaxRdCurrentVDDMin=0; 
	csd->MaxRdCurrentVDDMax=0;
	csd->MaxWrCurrentVDDMin=0;
	csd->MaxWrCurrentVDDMax=0;
	csd->DeviceSizeMul= (csd_buffer[10]) << 4 ;
 80141e0:	f89d 1012 	ldrb.w	r1, [sp, #18]
    csd->DeviceSize |= (csd_buffer[8] & 0xff)<<8;
    /* Byte 9 */
    csd->DeviceSize |= csd_buffer[9] & 0xff;
	// These are not supported/required on v2 cards.
	csd->MaxRdCurrentVDDMin=0; 
	csd->MaxRdCurrentVDDMax=0;
 80141e4:	7565      	strb	r5, [r4, #21]
    csd->DeviceSizeMul |= (csd_buffer[10] & 0x80) >> 7;
  } else { // SD V2
	/* Byte 7 */
    csd->DeviceSize = (csd_buffer[7] & 0x03)<<16;
	/* Byte 8 */
    csd->DeviceSize |= (csd_buffer[8] & 0xff)<<8;
 80141e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    /* Byte 9 */
    csd->DeviceSize |= csd_buffer[9] & 0xff;
 80141ea:	4310      	orrs	r0, r2
 80141ec:	6120      	str	r0, [r4, #16]
	// These are not supported/required on v2 cards.
	csd->MaxRdCurrentVDDMin=0; 
	csd->MaxRdCurrentVDDMax=0;
	csd->MaxWrCurrentVDDMin=0;
 80141ee:	75a5      	strb	r5, [r4, #22]
	csd->MaxWrCurrentVDDMax=0;
 80141f0:	75e5      	strb	r5, [r4, #23]
	csd->DeviceSizeMul= (csd_buffer[10]) << 4 ;
 80141f2:	010b      	lsls	r3, r1, #4
  }
   
  /* Byte 10 continued */
  csd->EraseGrSize = (csd_buffer[10] & 0x7C) >> 2;
 80141f4:	f89d 0012 	ldrb.w	r0, [sp, #18]
	// These are not supported/required on v2 cards.
	csd->MaxRdCurrentVDDMin=0; 
	csd->MaxRdCurrentVDDMax=0;
	csd->MaxWrCurrentVDDMin=0;
	csd->MaxWrCurrentVDDMax=0;
	csd->DeviceSizeMul= (csd_buffer[10]) << 4 ;
 80141f8:	7623      	strb	r3, [r4, #24]
  }
   
  /* Byte 10 continued */
  csd->EraseGrSize = (csd_buffer[10] & 0x7C) >> 2;
 80141fa:	f3c0 0384 	ubfx	r3, r0, #2, #5
 80141fe:	7663      	strb	r3, [r4, #25]
  csd->EraseGrMul = (csd_buffer[10] & 0x03) << 3;
  /* Byte 11 */
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
 8014200:	f89d 3013 	ldrb.w	r3, [sp, #19]
	csd->DeviceSizeMul= (csd_buffer[10]) << 4 ;
  }
   
  /* Byte 10 continued */
  csd->EraseGrSize = (csd_buffer[10] & 0x7C) >> 2;
  csd->EraseGrMul = (csd_buffer[10] & 0x03) << 3;
 8014204:	f000 0203 	and.w	r2, r0, #3
  /* Byte 11 */
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
 8014208:	0959      	lsrs	r1, r3, #5
 801420a:	ea41 00c2 	orr.w	r0, r1, r2, lsl #3
  csd->WrProtectGrSize = (csd_buffer[11] & 0x1F);
  /* Byte 12 */
  csd->WrProtectGrEnable = (csd_buffer[12] & 0x80) >> 7;
 801420e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   
  /* Byte 10 continued */
  csd->EraseGrSize = (csd_buffer[10] & 0x7C) >> 2;
  csd->EraseGrMul = (csd_buffer[10] & 0x03) << 3;
  /* Byte 11 */
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
 8014212:	76a0      	strb	r0, [r4, #26]
  csd->WrProtectGrSize = (csd_buffer[11] & 0x1F);
  /* Byte 12 */
  csd->WrProtectGrEnable = (csd_buffer[12] & 0x80) >> 7;
 8014214:	09ca      	lsrs	r2, r1, #7
 8014216:	7722      	strb	r2, [r4, #28]
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
 8014218:	f89d 2015 	ldrb.w	r2, [sp, #21]
  /* Byte 11 */
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
  csd->WrProtectGrSize = (csd_buffer[11] & 0x1F);
  /* Byte 12 */
  csd->WrProtectGrEnable = (csd_buffer[12] & 0x80) >> 7;
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
 801421c:	f3c1 1041 	ubfx	r0, r1, #5, #2
  /* Byte 10 continued */
  csd->EraseGrSize = (csd_buffer[10] & 0x7C) >> 2;
  csd->EraseGrMul = (csd_buffer[10] & 0x03) << 3;
  /* Byte 11 */
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
  csd->WrProtectGrSize = (csd_buffer[11] & 0x1F);
 8014220:	f003 031f 	and.w	r3, r3, #31
 8014224:	76e3      	strb	r3, [r4, #27]
  /* Byte 12 */
  csd->WrProtectGrEnable = (csd_buffer[12] & 0x80) >> 7;
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
 8014226:	7760      	strb	r0, [r4, #29]
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
 8014228:	f3c1 0382 	ubfx	r3, r1, #2, #3
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
 801422c:	f001 0003 	and.w	r0, r1, #3
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
 8014230:	0991      	lsrs	r1, r2, #6
  csd->EraseGrMul |= (csd_buffer[11] & 0xE0) >> 5;
  csd->WrProtectGrSize = (csd_buffer[11] & 0x1F);
  /* Byte 12 */
  csd->WrProtectGrEnable = (csd_buffer[12] & 0x80) >> 7;
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
 8014232:	77a3      	strb	r3, [r4, #30]
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
 8014234:	ea41 0380 	orr.w	r3, r1, r0, lsl #2
 8014238:	77e3      	strb	r3, [r4, #31]
  csd->WriteBlockPaPartial = (csd_buffer[13] & 0x20) >> 5;
  csd->Reserved3 = 0;
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
  /* Byte 14 */
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
 801423a:	f89d 3016 	ldrb.w	r3, [sp, #22]
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
  csd->WriteBlockPaPartial = (csd_buffer[13] & 0x20) >> 5;
 801423e:	f3c2 1040 	ubfx	r0, r2, #5, #1
  csd->Reserved3 = 0;
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
 8014242:	f002 0201 	and.w	r2, r2, #1
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
  csd->WriteBlockPaPartial = (csd_buffer[13] & 0x20) >> 5;
  csd->Reserved3 = 0;
 8014246:	2100      	movs	r1, #0
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
 8014248:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  /* Byte 14 */
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
  csd->CopyFlag = (csd_buffer[14] & 0x40) >> 6;
  csd->PermWrProtect = (csd_buffer[14] & 0x20) >> 5;
 801424c:	f3c3 1240 	ubfx	r2, r3, #5, #1
  csd->ManDeflECC = (csd_buffer[12] & 0x60) >> 5;
  csd->WrSpeedFact = (csd_buffer[12] & 0x1C) >> 2;
  csd->MaxWrBlockLen = (csd_buffer[12] & 0x03) << 2;
  /* Byte 13 */
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
  csd->WriteBlockPaPartial = (csd_buffer[13] & 0x20) >> 5;
 8014250:	f884 0020 	strb.w	r0, [r4, #32]
  csd->Reserved3 = 0;
 8014254:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
  /* Byte 14 */
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
 8014258:	09d8      	lsrs	r0, r3, #7
  csd->CopyFlag = (csd_buffer[14] & 0x40) >> 6;
 801425a:	f3c3 1180 	ubfx	r1, r3, #6, #1
  csd->PermWrProtect = (csd_buffer[14] & 0x20) >> 5;
 801425e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  csd->TempWrProtect = (csd_buffer[14] & 0x10) >> 4;
  csd->FileFormat = (csd_buffer[14] & 0x0C) >> 2;
  csd->ECC = (csd_buffer[14] & 0x03);
  /* Byte 15 */
  csd->msd_CRC = (csd_buffer[15] & 0xFE) >> 1;
 8014262:	f89d 2017 	ldrb.w	r2, [sp, #23]
  csd->MaxWrBlockLen |= (csd_buffer[13] & 0xc0) >> 6;
  csd->WriteBlockPaPartial = (csd_buffer[13] & 0x20) >> 5;
  csd->Reserved3 = 0;
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
  /* Byte 14 */
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
 8014266:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  csd->CopyFlag = (csd_buffer[14] & 0x40) >> 6;
 801426a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  csd->PermWrProtect = (csd_buffer[14] & 0x20) >> 5;
  csd->TempWrProtect = (csd_buffer[14] & 0x10) >> 4;
 801426e:	f3c3 1000 	ubfx	r0, r3, #4, #1
  csd->FileFormat = (csd_buffer[14] & 0x0C) >> 2;
 8014272:	f3c3 0181 	ubfx	r1, r3, #2, #2
  csd->ContentProtectAppli = (csd_buffer[13] & 0x01);
  /* Byte 14 */
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
  csd->CopyFlag = (csd_buffer[14] & 0x40) >> 6;
  csd->PermWrProtect = (csd_buffer[14] & 0x20) >> 5;
  csd->TempWrProtect = (csd_buffer[14] & 0x10) >> 4;
 8014276:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  csd->FileFormat = (csd_buffer[14] & 0x0C) >> 2;
 801427a:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
  csd->ECC = (csd_buffer[14] & 0x03);
 801427e:	f003 0303 	and.w	r3, r3, #3
  /* Byte 15 */
  csd->msd_CRC = (csd_buffer[15] & 0xFE) >> 1;
 8014282:	0850      	lsrs	r0, r2, #1
  csd->Reserved4 = 1;
 8014284:	2101      	movs	r1, #1
  csd->FileFormatGrouop = (csd_buffer[14] & 0x80) >> 7;
  csd->CopyFlag = (csd_buffer[14] & 0x40) >> 6;
  csd->PermWrProtect = (csd_buffer[14] & 0x20) >> 5;
  csd->TempWrProtect = (csd_buffer[14] & 0x10) >> 4;
  csd->FileFormat = (csd_buffer[14] & 0x0C) >> 2;
  csd->ECC = (csd_buffer[14] & 0x03);
 8014286:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  /* Byte 15 */
  csd->msd_CRC = (csd_buffer[15] & 0xFE) >> 1;
 801428a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  csd->Reserved4 = 1;
 801428e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8014292:	2000      	movs	r0, #0
 8014294:	2201      	movs	r2, #1
 8014296:	4601      	mov	r1, r0
 8014298:	f000 fb18 	bl	80148cc <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801429c:	2000      	movs	r0, #0
 801429e:	21ff      	movs	r1, #255	; 0xff
 80142a0:	f000 fb50 	bl	8014944 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;

  return status; 
}
 80142a4:	4630      	mov	r0, r6
 80142a6:	b006      	add	sp, #24
 80142a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080142ac <MIOS32_TIMESTAMP_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 80142ac:	b910      	cbnz	r0, 80142b4 <MIOS32_TIMESTAMP_Init+0x8>
    return -1; // unsupported mode

  timestamp = 0;
 80142ae:	4b03      	ldr	r3, [pc, #12]	; (80142bc <MIOS32_TIMESTAMP_Init+0x10>)
 80142b0:	6018      	str	r0, [r3, #0]

  return 0;
 80142b2:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80142b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  timestamp = 0;

  return 0;
}
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop
 80142bc:	20000c74 	.word	0x20000c74

080142c0 <MIOS32_TIMESTAMP_Inc>:
//!
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Inc(void)
{
  ++timestamp;
 80142c0:	4b02      	ldr	r3, [pc, #8]	; (80142cc <MIOS32_TIMESTAMP_Inc+0xc>)
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	1c50      	adds	r0, r2, #1
 80142c6:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 80142c8:	2000      	movs	r0, #0
 80142ca:	4770      	bx	lr
 80142cc:	20000c74 	.word	0x20000c74

080142d0 <MIOS32_SYS_Reset>:
//!   <LI>reset STM32
//! </UL>
//! \return < 0 if reset failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Reset(void)
{
 80142d0:	b510      	push	{r4, lr}
  // disable all RTOS tasks
#ifndef MIOS32_DONT_USE_FREERTOS
  portENTER_CRITICAL(); // port specific FreeRTOS function to disable tasks (nested)
 80142d2:	f7fd ff15 	bl	8012100 <vPortEnterCritical>

  // print reboot message if LCD enabled
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80142d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80142da:	f7fe fc8f 	bl	8012bfc <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80142de:	2000      	movs	r0, #0
 80142e0:	f7fe fc8e 	bl	8012c00 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80142e4:	2000      	movs	r0, #0
 80142e6:	f7fe fb9f 	bl	8012a28 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80142ea:	f7fe fbed 	bl	8012ac8 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80142ee:	2000      	movs	r0, #0
 80142f0:	4601      	mov	r1, r0
 80142f2:	f7fe fb9f 	bl	8012a34 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Bootloader Mode "); // 16 chars
 80142f6:	481e      	ldr	r0, [pc, #120]	; (8014370 <MIOS32_SYS_Reset+0xa0>)
 80142f8:	f7fe fc44 	bl	8012b84 <MIOS32_LCD_PrintString>
#endif

  // disable all interrupts
  MIOS32_IRQ_Disable();
 80142fc:	f000 f95a 	bl	80145b4 <MIOS32_IRQ_Disable>

  // turn off all board LEDs
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);
 8014300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014304:	2100      	movs	r1, #0
 8014306:	f000 fe2f 	bl	8014f68 <MIOS32_BOARD_LED_Set>
 801430a:	2432      	movs	r4, #50	; 0x32

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
      MIOS32_DELAY_Wait_uS(1000);
 801430c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014310:	f001 f840 	bl	8015394 <MIOS32_DELAY_Wait_uS>
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
 8014314:	3c01      	subs	r4, #1
 8014316:	d1f9      	bne.n	801430c <MIOS32_SYS_Reset+0x3c>
      MIOS32_DELAY_Wait_uS(1000);
  }

  // reset peripherals
  RCC_AHB1PeriphResetCmd(0xfffffffe, ENABLE); // don't reset GPIOA due to USB pins
 8014318:	f06f 0001 	mvn.w	r0, #1
 801431c:	2101      	movs	r1, #1
 801431e:	f002 fcf9 	bl	8016d14 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffff7f, ENABLE); // don't reset OTG_FS, so that the connectuion can survive
 8014322:	f06f 0080 	mvn.w	r0, #128	; 0x80
 8014326:	2101      	movs	r1, #1
 8014328:	f002 fd00 	bl	8016d2c <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, ENABLE);
 801432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014330:	2101      	movs	r1, #1
 8014332:	f002 fd07 	bl	8016d44 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, ENABLE);
 8014336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801433a:	2101      	movs	r1, #1
 801433c:	f002 fd0e 	bl	8016d5c <RCC_APB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(0xffffffff, DISABLE);
 8014340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014344:	4621      	mov	r1, r4
 8014346:	f002 fce5 	bl	8016d14 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffffff, DISABLE);
 801434a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801434e:	4621      	mov	r1, r4
 8014350:	f002 fcec 	bl	8016d2c <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, DISABLE);
 8014354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014358:	4621      	mov	r1, r4
 801435a:	f002 fcf3 	bl	8016d44 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, DISABLE);
 801435e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014362:	4621      	mov	r1, r4
 8014364:	f002 fcfa 	bl	8016d5c <RCC_APB2PeriphResetCmd>
  // not available in v3.0.0 library anymore? - copy from v2.0.1
  SCB->AIRCR = NVIC_AIRCR_VECTKEY | (1 << NVIC_VECTRESET);
#endif
#if 1
  // and this is the code for v3.3.0
  SCB->AIRCR = (0x5fa << SCB_AIRCR_VECTKEY_Pos) | (1 << SCB_AIRCR_VECTRESET_Pos);
 8014368:	4a02      	ldr	r2, [pc, #8]	; (8014374 <MIOS32_SYS_Reset+0xa4>)
 801436a:	4b03      	ldr	r3, [pc, #12]	; (8014378 <MIOS32_SYS_Reset+0xa8>)
 801436c:	60da      	str	r2, [r3, #12]
 801436e:	e7fe      	b.n	801436e <MIOS32_SYS_Reset+0x9e>
 8014370:	0801f733 	.word	0x0801f733
 8014374:	05fa0001 	.word	0x05fa0001
 8014378:	e000ed00 	.word	0xe000ed00

0801437c <MIOS32_SYS_ChipIDGet>:
//! \return the chip ID
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_ChipIDGet(void)
{
  // stored in DBGMCU_IDCODE register
  return MEM32(0xe0042000);
 801437c:	4b01      	ldr	r3, [pc, #4]	; (8014384 <MIOS32_SYS_ChipIDGet+0x8>)
 801437e:	6818      	ldr	r0, [r3, #0]
}
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop
 8014384:	e0042000 	.word	0xe0042000

08014388 <MIOS32_SYS_FlashSizeGet>:
//! \return the Flash size in bytes
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_FlashSizeGet(void)
{
  // stored in the so called "electronic signature"
  return (u32)MEM16(0x1fff7a22) * 0x400;
 8014388:	4b02      	ldr	r3, [pc, #8]	; (8014394 <MIOS32_SYS_FlashSizeGet+0xc>)
 801438a:	8818      	ldrh	r0, [r3, #0]
 801438c:	b281      	uxth	r1, r0
}
 801438e:	0288      	lsls	r0, r1, #10
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop
 8014394:	1fff7a22 	.word	0x1fff7a22

08014398 <MIOS32_SYS_RAMSizeGet>:
#elif defined(MIOS32_PROCESSOR_STM32F405RG)
  return 192*1024; // unfortunately not stored in signature...
#else
# error "Please define RAM size here"
#endif
}
 8014398:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 801439c:	4770      	bx	lr
	...

080143a0 <MIOS32_SYS_SerialNumberGet>:
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 80143a0:	2300      	movs	r3, #0
    u8 b = MEM8(0x1fff7a10 + (i/2));
 80143a2:	4a0b      	ldr	r2, [pc, #44]	; (80143d0 <MIOS32_SYS_SerialNumberGet+0x30>)
 80143a4:	1059      	asrs	r1, r3, #1
 80143a6:	1889      	adds	r1, r1, r2
 80143a8:	780a      	ldrb	r2, [r1, #0]
    if( !(i & 1) )
 80143aa:	07d9      	lsls	r1, r3, #31
      b >>= 4;
 80143ac:	bf58      	it	pl
 80143ae:	0912      	lsrpl	r2, r2, #4
    b &= 0x0f;
 80143b0:	f002 020f 	and.w	r2, r2, #15

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
 80143b4:	2a09      	cmp	r2, #9
 80143b6:	bf94      	ite	ls
 80143b8:	2130      	movls	r1, #48	; 0x30
 80143ba:	2137      	movhi	r1, #55	; 0x37
 80143bc:	188a      	adds	r2, r1, r2
 80143be:	54c2      	strb	r2, [r0, r3]
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 80143c0:	3301      	adds	r3, #1
 80143c2:	2b18      	cmp	r3, #24
 80143c4:	d1ed      	bne.n	80143a2 <MIOS32_SYS_SerialNumberGet+0x2>
      b >>= 4;
    b &= 0x0f;

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
  }
  str[i] = 0;
 80143c6:	2100      	movs	r1, #0
 80143c8:	7601      	strb	r1, [r0, #24]

  return 0; // no error
}
 80143ca:	4608      	mov	r0, r1
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	1fff7a10 	.word	0x1fff7a10

080143d4 <MIOS32_SYS_TimeSet>:
//! Note that this format isn't completely compatible to the NTP timestamp format,
//! as the fraction has only mS accuracy
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_TimeSet(mios32_sys_time_t t)
{
 80143d4:	b510      	push	{r4, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	4604      	mov	r4, r0
 80143da:	e88d 0003 	stmia.w	sp, {r0, r1}
  // taken from STM32 example "RTC/Calendar"
  // adapted to clock RTC via HSE  oscillator

  // Enable PWR and BKP clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80143de:	2101      	movs	r1, #1
 80143e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80143e4:	f002 fc7e 	bl	8016ce4 <RCC_APB1PeriphClockCmd>

  // Allow access to BKP Domain
  PWR_BackupAccessCmd(ENABLE);
 80143e8:	2001      	movs	r0, #1
 80143ea:	f002 fbf9 	bl	8016be0 <PWR_BackupAccessCmd>

  // Select HSE (divided by 16) as RTC Clock Source
#if EXT_CRYSTAL_FRQ == 16000000
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(16 MHz / 16) = 1 uS
#elif EXT_CRYSTAL_FRQ == 8000000
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(8 MHz / 16) = 2 uS
 80143ee:	4817      	ldr	r0, [pc, #92]	; (801444c <MIOS32_SYS_TimeSet+0x78>)
 80143f0:	f002 fc42 	bl	8016c78 <RCC_RTCCLKConfig>
#else
# error "Please configure alternative clock divider here"
#endif

  // Enable RTC Clock
  RCC_RTCCLKCmd(ENABLE);
 80143f4:	2001      	movs	r0, #1
 80143f6:	f002 fc57 	bl	8016ca8 <RCC_RTCCLKCmd>

  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);
 80143fa:	a803      	add	r0, sp, #12
 80143fc:	f002 fcce 	bl	8016d9c <RTC_StructInit>

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 8014400:	2063      	movs	r0, #99	; 0x63
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 8014402:	f241 3187 	movw	r1, #4999	; 0x1387
  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 8014406:	9004      	str	r0, [sp, #16]
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
  RTC_Init(&RTC_InitStruct);
 8014408:	a803      	add	r0, sp, #12
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 801440a:	9105      	str	r1, [sp, #20]
  RTC_Init(&RTC_InitStruct);
 801440c:	f002 fcf4 	bl	8016df8 <RTC_Init>

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
 8014410:	a802      	add	r0, sp, #8
 8014412:	f002 fd7d 	bl	8016f10 <RTC_TimeStructInit>
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 8014416:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801441a:	fbb4 f3f2 	udiv	r3, r4, r2
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 801441e:	213c      	movs	r1, #60	; 0x3c
 8014420:	fb02 4013 	mls	r0, r2, r3, r4
  RTC_Init(&RTC_InitStruct);

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 8014424:	f88d 3008 	strb.w	r3, [sp, #8]
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8014428:	fbb4 f3f1 	udiv	r3, r4, r1

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 801442c:	fbb0 f2f1 	udiv	r2, r0, r1
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8014430:	fb01 4413 	mls	r4, r1, r3, r4
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8014434:	2000      	movs	r0, #0
 8014436:	a902      	add	r1, sp, #8

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 8014438:	f88d 2009 	strb.w	r2, [sp, #9]
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 801443c:	f88d 400a 	strb.w	r4, [sp, #10]
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8014440:	f002 fd20 	bl	8016e84 <RTC_SetTime>
  // (fraction not taken into account here)

  return 0; // no error
}
 8014444:	2000      	movs	r0, #0
 8014446:	b006      	add	sp, #24
 8014448:	bd10      	pop	{r4, pc}
 801444a:	bf00      	nop
 801444c:	00100300 	.word	0x00100300

08014450 <MIOS32_SYS_Init>:
//! </UL>
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
 8014450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8014452:	4604      	mov	r4, r0
 8014454:	2800      	cmp	r0, #0
 8014456:	f040 8083 	bne.w	8014560 <MIOS32_SYS_Init+0x110>
    return -1; // unsupported mode

  // Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOE and AFIO clocks
  RCC_AHB1PeriphClockCmd(
 801445a:	201f      	movs	r0, #31
 801445c:	2101      	movs	r1, #1
 801445e:	f002 fc29 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8014462:	4b41      	ldr	r3, [pc, #260]	; (8014568 <MIOS32_SYS_Init+0x118>)
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
 8014464:	9400      	str	r4, [sp, #0]
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8014466:	689a      	ldr	r2, [r3, #8]
 8014468:	f002 000c 	and.w	r0, r2, #12
 801446c:	2808      	cmp	r0, #8
 801446e:	d102      	bne.n	8014476 <MIOS32_SYS_Init+0x26>
    HSEStatus = SUCCESS;
 8014470:	2001      	movs	r0, #1
 8014472:	9000      	str	r0, [sp, #0]
 8014474:	e05d      	b.n	8014532 <MIOS32_SYS_Init+0xe2>
  } else {
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8014476:	6819      	ldr	r1, [r3, #0]
 8014478:	f041 0201 	orr.w	r2, r1, #1
 801447c:	601a      	str	r2, [r3, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 801447e:	609c      	str	r4, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014480:	6818      	ldr	r0, [r3, #0]
 8014482:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8014486:	4839      	ldr	r0, [pc, #228]	; (801456c <MIOS32_SYS_Init+0x11c>)

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014488:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 801448c:	601a      	str	r2, [r3, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 801448e:	6058      	str	r0, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014490:	6819      	ldr	r1, [r3, #0]
 8014492:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8014496:	601a      	str	r2, [r3, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8014498:	60dc      	str	r4, [r3, #12]
       AHB/APBx prescalers and Flash settings ----------------------------------*/

    /******************************************************************************/
    /*            PLL (clocked by HSE) used as System clock source                */
    /******************************************************************************/
    __IO uint32_t StartUpCounter = 0;
 801449a:	9401      	str	r4, [sp, #4]
  
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801449c:	6818      	ldr	r0, [r3, #0]
 801449e:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 80144a2:	6019      	str	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80144a4:	4b30      	ldr	r3, [pc, #192]	; (8014568 <MIOS32_SYS_Init+0x118>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 80144ac:	9000      	str	r0, [sp, #0]
      StartUpCounter++;
 80144ae:	9901      	ldr	r1, [sp, #4]
 80144b0:	1c4a      	adds	r2, r1, #1
 80144b2:	9201      	str	r2, [sp, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80144b4:	9800      	ldr	r0, [sp, #0]
 80144b6:	b918      	cbnz	r0, 80144c0 <MIOS32_SYS_Init+0x70>
 80144b8:	9901      	ldr	r1, [sp, #4]
 80144ba:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80144be:	d1f1      	bne.n	80144a4 <MIOS32_SYS_Init+0x54>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
      HSEStatus = (uint32_t)0x01;
 80144c6:	bf18      	it	ne
 80144c8:	2201      	movne	r2, #1
    } else {
      HSEStatus = (uint32_t)0x00;
 80144ca:	9200      	str	r2, [sp, #0]
    }

    if (HSEStatus == (uint32_t)0x01) {
 80144cc:	9800      	ldr	r0, [sp, #0]
 80144ce:	2801      	cmp	r0, #1
 80144d0:	d12f      	bne.n	8014532 <MIOS32_SYS_Init+0xe2>
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80144d2:	4b25      	ldr	r3, [pc, #148]	; (8014568 <MIOS32_SYS_Init+0x118>)
      PWR->CR |= PWR_CR_VOS;
 80144d4:	4826      	ldr	r0, [pc, #152]	; (8014570 <MIOS32_SYS_Init+0x120>)
      HSEStatus = (uint32_t)0x00;
    }

    if (HSEStatus == (uint32_t)0x01) {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80144d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80144d8:	f041 5280 	orr.w	r2, r1, #268435456	; 0x10000000
 80144dc:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 80144de:	6801      	ldr	r1, [r0, #0]
 80144e0:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 80144e4:	6002      	str	r2, [r0, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80144e6:	6898      	ldr	r0, [r3, #8]
 80144e8:	6098      	str	r0, [r3, #8]
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80144ea:	6899      	ldr	r1, [r3, #8]
 80144ec:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 80144f0:	609a      	str	r2, [r3, #8]
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80144f2:	6898      	ldr	r0, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80144f4:	4a1f      	ldr	r2, [pc, #124]	; (8014574 <MIOS32_SYS_Init+0x124>)
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80144f6:	f440 51a0 	orr.w	r1, r0, #5120	; 0x1400
 80144fa:	6099      	str	r1, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80144fc:	605a      	str	r2, [r3, #4]
	             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 80144fe:	6818      	ldr	r0, [r3, #0]
 8014500:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 8014504:	6019      	str	r1, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8014506:	6818      	ldr	r0, [r3, #0]
 8014508:	4a17      	ldr	r2, [pc, #92]	; (8014568 <MIOS32_SYS_Init+0x118>)
 801450a:	0180      	lsls	r0, r0, #6
 801450c:	d5fb      	bpl.n	8014506 <MIOS32_SYS_Init+0xb6>
   
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 801450e:	4b1a      	ldr	r3, [pc, #104]	; (8014578 <MIOS32_SYS_Init+0x128>)
 8014510:	f240 6105 	movw	r1, #1541	; 0x605
 8014514:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8014516:	6890      	ldr	r0, [r2, #8]
 8014518:	f020 0103 	bic.w	r1, r0, #3
 801451c:	6091      	str	r1, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 801451e:	6893      	ldr	r3, [r2, #8]
 8014520:	f043 0002 	orr.w	r0, r3, #2
 8014524:	6090      	str	r0, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8014526:	4a10      	ldr	r2, [pc, #64]	; (8014568 <MIOS32_SYS_Init+0x118>)
 8014528:	6891      	ldr	r1, [r2, #8]
 801452a:	f001 030c 	and.w	r3, r1, #12
 801452e:	2b08      	cmp	r3, #8
 8014530:	d1f9      	bne.n	8014526 <MIOS32_SYS_Init+0xd6>
         configuration. User can add here some code to deal with this error */
    }
  }

  // Set the Vector Table base address as specified in .ld file (-> mios32_sys_isr_vector)
  NVIC_SetVectorTable((u32)&mios32_sys_isr_vector, 0x0);
 8014532:	2100      	movs	r1, #0
 8014534:	4811      	ldr	r0, [pc, #68]	; (801457c <MIOS32_SYS_Init+0x12c>)
 8014536:	f002 fa55 	bl	80169e4 <NVIC_SetVectorTable>
  NVIC_PriorityGroupConfig(MIOS32_IRQ_PRIGROUP);
 801453a:	f44f 7040 	mov.w	r0, #768	; 0x300
 801453e:	f002 fa47 	bl	80169d0 <NVIC_PriorityGroupConfig>

#ifndef MIOS32_SYS_DONT_INIT_RTC
  // initialize system clock
  mios32_sys_time_t t = { .seconds=0, .fraction_ms=0 };
 8014542:	2200      	movs	r2, #0
 8014544:	9202      	str	r2, [sp, #8]
 8014546:	9203      	str	r2, [sp, #12]
  MIOS32_SYS_TimeSet(t);
 8014548:	a904      	add	r1, sp, #16
 801454a:	e911 0003 	ldmdb	r1, {r0, r1}
 801454e:	f7ff ff41 	bl	80143d4 <MIOS32_SYS_TimeSet>
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
 8014552:	9b00      	ldr	r3, [sp, #0]
 8014554:	2b01      	cmp	r3, #1
 8014556:	bf14      	ite	ne
 8014558:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801455c:	2000      	moveq	r0, #0
 801455e:	e001      	b.n	8014564 <MIOS32_SYS_Init+0x114>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_SYS_TimeSet(t);
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
}
 8014564:	b004      	add	sp, #16
 8014566:	bd10      	pop	{r4, pc}
 8014568:	40023800 	.word	0x40023800
 801456c:	24003010 	.word	0x24003010
 8014570:	40007000 	.word	0x40007000
 8014574:	07405408 	.word	0x07405408
 8014578:	40023c00 	.word	0x40023c00
 801457c:	08004000 	.word	0x08004000

08014580 <MIOS32_SYS_TimeGet>:
//!   int milliseconds = t.fraction_ms;
//! \endcode
//! \return the system time in a mios32_sys_time_t structure
/////////////////////////////////////////////////////////////////////////////
mios32_sys_time_t MIOS32_SYS_TimeGet(void)
{
 8014580:	b513      	push	{r0, r1, r4, lr}
 8014582:	4604      	mov	r4, r0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_GetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8014584:	a901      	add	r1, sp, #4
 8014586:	2000      	movs	r0, #0
 8014588:	f002 fcc8 	bl	8016f1c <RTC_GetTime>

  mios32_sys_time_t t = {
    .seconds = RTC_TimeStruct.RTC_Hours * 3600 + RTC_TimeStruct.RTC_Minutes * 60 + RTC_TimeStruct.RTC_Seconds,
 801458c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014590:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014594:	0198      	lsls	r0, r3, #6
 8014596:	009a      	lsls	r2, r3, #2
 8014598:	1a82      	subs	r2, r0, r2
 801459a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801459e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80145a2:	fb03 2101 	mla	r1, r3, r1, r2
 80145a6:	180a      	adds	r2, r1, r0
    .fraction_ms = 0 // not supported
  };

  return t;
 80145a8:	2300      	movs	r3, #0
 80145aa:	6022      	str	r2, [r4, #0]
 80145ac:	6063      	str	r3, [r4, #4]
}
 80145ae:	4620      	mov	r0, r4
 80145b0:	bd1c      	pop	{r2, r3, r4, pc}
	...

080145b4 <MIOS32_IRQ_Disable>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Disable(void)
{
  // get current priority if nested level == 0
  if( !nested_ctr ) {
 80145b4:	4b07      	ldr	r3, [pc, #28]	; (80145d4 <MIOS32_IRQ_Disable+0x20>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	b91a      	cbnz	r2, 80145c2 <MIOS32_IRQ_Disable+0xe>
    __asm volatile (			   \
 80145ba:	f3ef 8110 	mrs	r1, PRIMASK
 80145be:	4806      	ldr	r0, [pc, #24]	; (80145d8 <MIOS32_IRQ_Disable+0x24>)
 80145c0:	6001      	str	r1, [r0, #0]
		    : "=r" (prev_primask)  \
		    );
  }

  // disable interrupts
  __asm volatile ( \
 80145c2:	f04f 0001 	mov.w	r0, #1
 80145c6:	f380 8810 	msr	PRIMASK, r0
		  "	mov r0, #1     \n" \
		  "	msr primask, r0\n" \
		  :::"r0"	 \
		  );

  ++nested_ctr;
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	1c51      	adds	r1, r2, #1
 80145ce:	6019      	str	r1, [r3, #0]

  return 0; // no error
}
 80145d0:	2000      	movs	r0, #0
 80145d2:	4770      	bx	lr
 80145d4:	20000c7c 	.word	0x20000c7c
 80145d8:	20000c78 	.word	0x20000c78

080145dc <MIOS32_IRQ_Enable>:
//! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
 80145dc:	4a07      	ldr	r2, [pc, #28]	; (80145fc <MIOS32_IRQ_Enable+0x20>)
 80145de:	6813      	ldr	r3, [r2, #0]
 80145e0:	b13b      	cbz	r3, 80145f2 <MIOS32_IRQ_Enable+0x16>
    return -1; // nesting error

  // decrease nesting level
  --nested_ctr;
 80145e2:	1e58      	subs	r0, r3, #1
 80145e4:	6010      	str	r0, [r2, #0]

  // set back previous priority once nested level reached 0 again
  if( nested_ctr == 0 ) {
 80145e6:	b938      	cbnz	r0, 80145f8 <MIOS32_IRQ_Enable+0x1c>
    __asm volatile ( \
 80145e8:	4905      	ldr	r1, [pc, #20]	; (8014600 <MIOS32_IRQ_Enable+0x24>)
 80145ea:	680a      	ldr	r2, [r1, #0]
 80145ec:	f382 8810 	msr	PRIMASK, r2
 80145f0:	e002      	b.n	80145f8 <MIOS32_IRQ_Enable+0x1c>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
    return -1; // nesting error
 80145f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145f6:	4770      	bx	lr
		    "	msr primask, %0\n" \
		    :: "r" (prev_primask)  \
		    );
  }

  return 0; // no error
 80145f8:	2000      	movs	r0, #0
}
 80145fa:	4770      	bx	lr
 80145fc:	20000c7c 	.word	0x20000c7c
 8014600:	20000c78 	.word	0x20000c78

08014604 <MIOS32_IRQ_Install>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
 8014604:	290f      	cmp	r1, #15
 8014606:	d81c      	bhi.n	8014642 <MIOS32_IRQ_Install+0x3e>
    return -1; // invalid priority

  u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 8014608:	4b0f      	ldr	r3, [pc, #60]	; (8014648 <MIOS32_IRQ_Install+0x44>)
 801460a:	68da      	ldr	r2, [r3, #12]
 801460c:	43d3      	mvns	r3, r2
 801460e:	f3c3 2202 	ubfx	r2, r3, #8, #3
  u32 tmppre = (4 - tmppriority);
 8014612:	f1c2 0304 	rsb	r3, r2, #4
  tmppriority = priority << tmppre;
 8014616:	fa01 f103 	lsl.w	r1, r1, r3
  tmppriority = tmppriority << 4;
 801461a:	0109      	lsls	r1, r1, #4
  NVIC->IP[IRQn] = tmppriority;
 801461c:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8014620:	b2ca      	uxtb	r2, r1
 8014622:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8014626:	2301      	movs	r3, #1
 8014628:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 801462c:	b242      	sxtb	r2, r0
 801462e:	f000 001f 	and.w	r0, r0, #31
 8014632:	0951      	lsrs	r1, r2, #5
 8014634:	fa03 f200 	lsl.w	r2, r3, r0
 8014638:	4804      	ldr	r0, [pc, #16]	; (801464c <MIOS32_IRQ_Install+0x48>)
 801463a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
 801463e:	2000      	movs	r0, #0
 8014640:	4770      	bx	lr
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
    return -1; // invalid priority
 8014642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  NVIC->IP[IRQn] = tmppriority;

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
}
 8014646:	4770      	bx	lr
 8014648:	e000ed00 	.word	0xe000ed00
 801464c:	e000e100 	.word	0xe000e100

08014650 <MIOS32_SPI_IO_Init>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported pin driver mode
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_IO_Init(u8 spi, mios32_spi_pin_driver_t spi_pin_driver)
{
 8014650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014654:	4605      	mov	r5, r0
 8014656:	460c      	mov	r4, r1
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8014658:	4668      	mov	r0, sp
 801465a:	f002 fa7c 	bl	8016b56 <GPIO_StructInit>

  // select pin driver and output mode
  u8 slave = 0;
  switch( spi_pin_driver ) {
 801465e:	2c07      	cmp	r4, #7
 8014660:	f200 8128 	bhi.w	80148b4 <MIOS32_SPI_IO_Init+0x264>
 8014664:	e8df f004 	tbb	[pc, r4]
 8014668:	0406080a 	.word	0x0406080a
 801466c:	1a15120c 	.word	0x1a15120c
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // select pin driver and output mode
  u8 slave = 0;
 8014670:	2400      	movs	r4, #0
 8014672:	e014      	b.n	801469e <MIOS32_SPI_IO_Init+0x4e>
 8014674:	2400      	movs	r4, #0
 8014676:	e00d      	b.n	8014694 <MIOS32_SPI_IO_Init+0x44>
 8014678:	2400      	movs	r4, #0
 801467a:	e008      	b.n	801468e <MIOS32_SPI_IO_Init+0x3e>
 801467c:	2400      	movs	r4, #0
 801467e:	e000      	b.n	8014682 <MIOS32_SPI_IO_Init+0x32>
  switch( spi_pin_driver ) {
    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG:
      slave = 1;
 8014680:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8014682:	2102      	movs	r1, #2
 8014684:	f88d 1005 	strb.w	r1, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8014688:	2000      	movs	r0, #0
 801468a:	e00c      	b.n	80146a6 <MIOS32_SPI_IO_Init+0x56>
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG_OD:
      slave = 1;
 801468c:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801468e:	2302      	movs	r3, #2
 8014690:	e006      	b.n	80146a0 <MIOS32_SPI_IO_Init+0x50>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK:
      slave = 1;
 8014692:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8014694:	2000      	movs	r0, #0
 8014696:	f88d 0005 	strb.w	r0, [sp, #5]
 801469a:	e004      	b.n	80146a6 <MIOS32_SPI_IO_Init+0x56>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
 801469c:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 801469e:	2300      	movs	r3, #0
 80146a0:	f88d 3005 	strb.w	r3, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80146a4:	2001      	movs	r0, #1

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 80146a6:	2d01      	cmp	r5, #1

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80146a8:	f88d 0006 	strb.w	r0, [sp, #6]

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 80146ac:	d04b      	beq.n	8014746 <MIOS32_SPI_IO_Init+0xf6>
 80146ae:	d303      	bcc.n	80146b8 <MIOS32_SPI_IO_Init+0x68>
 80146b0:	2d02      	cmp	r5, #2
 80146b2:	f040 80fc 	bne.w	80148ae <MIOS32_SPI_IO_Init+0x25e>
 80146b6:	e09f      	b.n	80147f8 <MIOS32_SPI_IO_Init+0x1a8>
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      MIOS32_SPI0_RCLK1_AF;
      MIOS32_SPI0_RCLK2_AF;
      MIOS32_SPI0_SCLK_AF;
 80146b8:	2105      	movs	r1, #5
 80146ba:	460a      	mov	r2, r1
 80146bc:	487f      	ldr	r0, [pc, #508]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
 80146be:	f002 fa57 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI0_MISO_AF;
 80146c2:	487e      	ldr	r0, [pc, #504]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
 80146c4:	2106      	movs	r1, #6
 80146c6:	2205      	movs	r2, #5
 80146c8:	f002 fa52 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI0_MOSI_AF;
 80146cc:	487b      	ldr	r0, [pc, #492]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
 80146ce:	2107      	movs	r1, #7
 80146d0:	2205      	movs	r2, #5
 80146d2:	f002 fa4d 	bl	8016b70 <GPIO_PinAFConfig>

      if( slave ) {
 80146d6:	2c00      	cmp	r4, #0
 80146d8:	f040 80ec 	bne.w	80148b4 <MIOS32_SPI_IO_Init+0x264>
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 80146dc:	ad02      	add	r5, sp, #8
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80146de:	2702      	movs	r7, #2
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 80146e0:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 80146e2:	4876      	ldr	r0, [pc, #472]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 80146e4:	f845 6d08 	str.w	r6, [r5, #-8]!
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 80146e8:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80146ea:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 80146ee:	f002 f9e5 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 80146f2:	2180      	movs	r1, #128	; 0x80
 80146f4:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 80146f6:	4871      	ldr	r0, [pc, #452]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 80146f8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80148c8 <MIOS32_SPI_IO_Init+0x278>
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 80146fc:	4669      	mov	r1, sp
 80146fe:	f002 f9dd 	bl	8016abc <GPIO_Init>
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8014702:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8014704:	2204      	movs	r2, #4
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8014706:	486e      	ldr	r0, [pc, #440]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8014708:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 801470a:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801470c:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8014710:	f002 f9d4 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8014714:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8014718:	486a      	ldr	r0, [pc, #424]	; (80148c4 <MIOS32_SPI_IO_Init+0x274>)
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 801471a:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 801471c:	4669      	mov	r1, sp
 801471e:	f002 f9cd 	bl	8016abc <GPIO_Init>

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8014722:	f04f 0908 	mov.w	r9, #8
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 8014726:	4640      	mov	r0, r8
 8014728:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 801472a:	f8cd 9000 	str.w	r9, [sp]
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 801472e:	f002 f9c5 	bl	8016abc <GPIO_Init>
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8014732:	2040      	movs	r0, #64	; 0x40

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
	MIOS32_SYS_STM_PINSET_1(GPIOE, GPIO_Pin_3);
 8014734:	f8a8 9018 	strh.w	r9, [r8, #24]
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8014738:	9000      	str	r0, [sp, #0]
#else
# warning "Please doublecheck if RE3 has to be set to 1 to disable MEMs"
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801473a:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 801473e:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
 8014742:	485e      	ldr	r0, [pc, #376]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
 8014744:	e090      	b.n	8014868 <MIOS32_SPI_IO_Init+0x218>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      MIOS32_SPI1_RCLK1_AF;
 8014746:	485e      	ldr	r0, [pc, #376]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014748:	210c      	movs	r1, #12
 801474a:	2205      	movs	r2, #5
 801474c:	f002 fa10 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
 8014750:	485b      	ldr	r0, [pc, #364]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014752:	210d      	movs	r1, #13
 8014754:	2205      	movs	r2, #5
 8014756:	f002 fa0b 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI1_MISO_AF;
 801475a:	4859      	ldr	r0, [pc, #356]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 801475c:	210e      	movs	r1, #14
 801475e:	2205      	movs	r2, #5
 8014760:	f002 fa06 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI1_MOSI_AF;
 8014764:	4856      	ldr	r0, [pc, #344]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014766:	210f      	movs	r1, #15
 8014768:	2205      	movs	r2, #5
 801476a:	f002 fa01 	bl	8016b70 <GPIO_PinAFConfig>
 801476e:	2602      	movs	r6, #2
 8014770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
#if defined(MIOS32_BOARD_MBHP_DIPCOREF4)
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
 8014774:	9100      	str	r1, [sp, #0]
      if( slave ) {
#if defined(MIOS32_BOARD_MBHP_DIPCOREF4)
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8014776:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 801477a:	4851      	ldr	r0, [pc, #324]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 801477c:	4669      	mov	r1, sp
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
 801477e:	b1dc      	cbz	r4, 80147b8 <MIOS32_SPI_IO_Init+0x168>
	return -3; // slave mode not supported for this pin
#else
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8014780:	f002 f99c 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8014784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014788:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 801478a:	484d      	ldr	r0, [pc, #308]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 801478c:	4669      	mov	r1, sp
 801478e:	f002 f995 	bl	8016abc <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8014792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8014796:	484a      	ldr	r0, [pc, #296]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8014798:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 801479a:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801479c:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 80147a0:	f002 f98c 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 80147a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 80147a8:	4846      	ldr	r0, [pc, #280]	; (80148c4 <MIOS32_SPI_IO_Init+0x274>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 80147aa:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 80147ac:	4669      	mov	r1, sp
 80147ae:	f002 f985 	bl	8016abc <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80147b2:	f88d 6004 	strb.w	r6, [sp, #4]
 80147b6:	e01c      	b.n	80147f2 <MIOS32_SPI_IO_Init+0x1a2>
#endif
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 80147b8:	f002 f980 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 80147bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 80147c0:	483f      	ldr	r0, [pc, #252]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 80147c2:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 80147c4:	4669      	mov	r1, sp
 80147c6:	f002 f979 	bl	8016abc <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 80147ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 80147ce:	483c      	ldr	r0, [pc, #240]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 80147d0:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 80147d2:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80147d4:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 80147d8:	f002 f970 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 80147dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80147e0:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 80147e2:	4669      	mov	r1, sp
 80147e4:	4837      	ldr	r0, [pc, #220]	; (80148c4 <MIOS32_SPI_IO_Init+0x274>)
 80147e6:	f002 f969 	bl	8016abc <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80147ea:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80147ee:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
 80147f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80147f6:	e035      	b.n	8014864 <MIOS32_SPI_IO_Init+0x214>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      MIOS32_SPI2_RCLK1_AF;
 80147f8:	4830      	ldr	r0, [pc, #192]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
 80147fa:	210f      	movs	r1, #15
 80147fc:	2206      	movs	r2, #6
 80147fe:	f002 f9b7 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
 8014802:	482f      	ldr	r0, [pc, #188]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014804:	2103      	movs	r1, #3
 8014806:	2206      	movs	r2, #6
 8014808:	f002 f9b2 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI2_MISO_AF;
 801480c:	482c      	ldr	r0, [pc, #176]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 801480e:	2104      	movs	r1, #4
 8014810:	2206      	movs	r2, #6
 8014812:	f002 f9ad 	bl	8016b70 <GPIO_PinAFConfig>
      MIOS32_SPI2_MOSI_AF;
 8014816:	482a      	ldr	r0, [pc, #168]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014818:	2105      	movs	r1, #5
 801481a:	2206      	movs	r2, #6
 801481c:	f002 f9a8 	bl	8016b70 <GPIO_PinAFConfig>
 8014820:	2208      	movs	r2, #8

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8014822:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
 8014826:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8014828:	4825      	ldr	r0, [pc, #148]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 801482a:	4669      	mov	r1, sp
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
      MIOS32_SPI2_MISO_AF;
      MIOS32_SPI2_MOSI_AF;

      if( slave ) {
 801482c:	b30c      	cbz	r4, 8014872 <MIOS32_SPI_IO_Init+0x222>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 801482e:	f002 f945 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8014832:	2120      	movs	r1, #32
 8014834:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8014836:	4822      	ldr	r0, [pc, #136]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014838:	4669      	mov	r1, sp
 801483a:	f002 f93f 	bl	8016abc <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 801483e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8014842:	481e      	ldr	r0, [pc, #120]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8014844:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8014846:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8014848:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 801484c:	f002 f936 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8014850:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8014854:	481a      	ldr	r0, [pc, #104]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8014856:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8014858:	4669      	mov	r1, sp
 801485a:	f002 f92f 	bl	8016abc <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801485e:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MISO_PIN;
 8014862:	2010      	movs	r0, #16
 8014864:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
 8014866:	4816      	ldr	r0, [pc, #88]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 8014868:	4669      	mov	r1, sp
 801486a:	f002 f927 	bl	8016abc <GPIO_Init>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 801486e:	2000      	movs	r0, #0
 8014870:	e022      	b.n	80148b8 <MIOS32_SPI_IO_Init+0x268>
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8014872:	f002 f923 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8014876:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8014878:	4811      	ldr	r0, [pc, #68]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 801487a:	9600      	str	r6, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 801487c:	4669      	mov	r1, sp
 801487e:	f002 f91d 	bl	8016abc <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8014882:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8014884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8014888:	480c      	ldr	r0, [pc, #48]	; (80148bc <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 801488a:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 801488c:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801488e:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8014892:	f002 f913 	bl	8016abc <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8014896:	f44f 7080 	mov.w	r0, #256	; 0x100
 801489a:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 801489c:	4669      	mov	r1, sp
 801489e:	4808      	ldr	r0, [pc, #32]	; (80148c0 <MIOS32_SPI_IO_Init+0x270>)
 80148a0:	f002 f90c 	bl	8016abc <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80148a4:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80148a8:	f88d 6007 	strb.w	r6, [sp, #7]
 80148ac:	e7d9      	b.n	8014862 <MIOS32_SPI_IO_Init+0x212>

      break;
#endif

    default:
      return -2; // unsupported SPI port
 80148ae:	f06f 0001 	mvn.w	r0, #1
 80148b2:	e001      	b.n	80148b8 <MIOS32_SPI_IO_Init+0x268>
      MIOS32_SPI0_MISO_AF;
      MIOS32_SPI0_MOSI_AF;

      if( slave ) {
#if 1
	return -3; // slave mode not supported for this pin
 80148b4:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 80148b8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 80148bc:	40020000 	.word	0x40020000
 80148c0:	40020400 	.word	0x40020400
 80148c4:	40020c00 	.word	0x40020c00
 80148c8:	40021000 	.word	0x40021000

080148cc <MIOS32_SPI_RC_PinSet>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported RCx pin selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_RC_PinSet(u8 spi, u8 rc_pin, u8 pin_value)
{
  switch( spi ) {
 80148cc:	2801      	cmp	r0, #1
 80148ce:	d00d      	beq.n	80148ec <MIOS32_SPI_RC_PinSet+0x20>
 80148d0:	d302      	bcc.n	80148d8 <MIOS32_SPI_RC_PinSet+0xc>
 80148d2:	2802      	cmp	r0, #2
 80148d4:	d12a      	bne.n	801492c <MIOS32_SPI_RC_PinSet+0x60>
 80148d6:	e014      	b.n	8014902 <MIOS32_SPI_RC_PinSet+0x36>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 80148d8:	b129      	cbz	r1, 80148e6 <MIOS32_SPI_RC_PinSet+0x1a>
 80148da:	2901      	cmp	r1, #1
 80148dc:	d129      	bne.n	8014932 <MIOS32_SPI_RC_PinSet+0x66>
 80148de:	4b16      	ldr	r3, [pc, #88]	; (8014938 <MIOS32_SPI_RC_PinSet+0x6c>)
 80148e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80148e4:	e01c      	b.n	8014920 <MIOS32_SPI_RC_PinSet+0x54>
 80148e6:	4b15      	ldr	r3, [pc, #84]	; (801493c <MIOS32_SPI_RC_PinSet+0x70>)
 80148e8:	2004      	movs	r0, #4
 80148ea:	e014      	b.n	8014916 <MIOS32_SPI_RC_PinSet+0x4a>

  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 80148ec:	b129      	cbz	r1, 80148fa <MIOS32_SPI_RC_PinSet+0x2e>
 80148ee:	2901      	cmp	r1, #1
 80148f0:	d11f      	bne.n	8014932 <MIOS32_SPI_RC_PinSet+0x66>
 80148f2:	4b11      	ldr	r3, [pc, #68]	; (8014938 <MIOS32_SPI_RC_PinSet+0x6c>)
 80148f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80148f8:	e012      	b.n	8014920 <MIOS32_SPI_RC_PinSet+0x54>
 80148fa:	4b10      	ldr	r3, [pc, #64]	; (801493c <MIOS32_SPI_RC_PinSet+0x70>)
 80148fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014900:	e009      	b.n	8014916 <MIOS32_SPI_RC_PinSet+0x4a>

  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8014902:	b129      	cbz	r1, 8014910 <MIOS32_SPI_RC_PinSet+0x44>
 8014904:	2901      	cmp	r1, #1
 8014906:	d114      	bne.n	8014932 <MIOS32_SPI_RC_PinSet+0x66>
 8014908:	4b0c      	ldr	r3, [pc, #48]	; (801493c <MIOS32_SPI_RC_PinSet+0x70>)
 801490a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801490e:	e007      	b.n	8014920 <MIOS32_SPI_RC_PinSet+0x54>
 8014910:	4b0b      	ldr	r3, [pc, #44]	; (8014940 <MIOS32_SPI_RC_PinSet+0x74>)
 8014912:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8014916:	b10a      	cbz	r2, 801491c <MIOS32_SPI_RC_PinSet+0x50>
 8014918:	8318      	strh	r0, [r3, #24]
 801491a:	e003      	b.n	8014924 <MIOS32_SPI_RC_PinSet+0x58>
 801491c:	8358      	strh	r0, [r3, #26]
 801491e:	e001      	b.n	8014924 <MIOS32_SPI_RC_PinSet+0x58>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8014920:	b112      	cbz	r2, 8014928 <MIOS32_SPI_RC_PinSet+0x5c>
 8014922:	8319      	strh	r1, [r3, #24]

  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
 8014924:	2000      	movs	r0, #0
 8014926:	4770      	bx	lr
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8014928:	8359      	strh	r1, [r3, #26]
 801492a:	e7fb      	b.n	8014924 <MIOS32_SPI_RC_PinSet+0x58>
    }
    break;
#endif

  default:
    return -2; // unsupported SPI port
 801492c:	f06f 0001 	mvn.w	r0, #1
 8014930:	4770      	bx	lr
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
    default: return -3; // unsupported RC pin
 8014932:	f06f 0002 	mvn.w	r0, #2
  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8014936:	4770      	bx	lr
 8014938:	40020c00 	.word	0x40020c00
 801493c:	40020400 	.word	0x40020400
 8014940:	40020000 	.word	0x40020000

08014944 <MIOS32_SPI_TransferByte>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferByte(u8 spi, u8 b)
{
  SPI_TypeDef *spi_ptr;

  switch( spi ) {
 8014944:	2801      	cmp	r0, #1
 8014946:	d006      	beq.n	8014956 <MIOS32_SPI_TransferByte+0x12>
 8014948:	d303      	bcc.n	8014952 <MIOS32_SPI_TransferByte+0xe>
 801494a:	2802      	cmp	r0, #2
 801494c:	d116      	bne.n	801497c <MIOS32_SPI_TransferByte+0x38>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 801494e:	4b0d      	ldr	r3, [pc, #52]	; (8014984 <MIOS32_SPI_TransferByte+0x40>)
      break;
 8014950:	e002      	b.n	8014958 <MIOS32_SPI_TransferByte+0x14>
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8014952:	4b0d      	ldr	r3, [pc, #52]	; (8014988 <MIOS32_SPI_TransferByte+0x44>)
 8014954:	e000      	b.n	8014958 <MIOS32_SPI_TransferByte+0x14>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8014956:	4b0d      	ldr	r3, [pc, #52]	; (801498c <MIOS32_SPI_TransferByte+0x48>)
    default:
      return -2; // unsupported SPI port
  }

  // send byte
  spi_ptr->DR = b;
 8014958:	8199      	strh	r1, [r3, #12]

  // TK update: the dummy read above becomes obsolete since we are checking for SPI Master mode now
  // which requires a read operation as well

  // wait until SPI transfer finished
  if( spi_ptr->CR1 & SPI_Mode_Master ) {
 801495a:	881a      	ldrh	r2, [r3, #0]
 801495c:	f402 7082 	and.w	r0, r2, #260	; 0x104
 8014960:	b130      	cbz	r0, 8014970 <MIOS32_SPI_TransferByte+0x2c>
    while( spi_ptr->SR & SPI_I2S_FLAG_BSY );
 8014962:	891a      	ldrh	r2, [r3, #8]
 8014964:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014968:	b281      	uxth	r1, r0
 801496a:	2900      	cmp	r1, #0
 801496c:	d1f9      	bne.n	8014962 <MIOS32_SPI_TransferByte+0x1e>
 801496e:	e002      	b.n	8014976 <MIOS32_SPI_TransferByte+0x32>
  } else {
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
 8014970:	8919      	ldrh	r1, [r3, #8]
 8014972:	07ca      	lsls	r2, r1, #31
 8014974:	d5fc      	bpl.n	8014970 <MIOS32_SPI_TransferByte+0x2c>
  }

  // return received byte
  return spi_ptr->DR;
 8014976:	899b      	ldrh	r3, [r3, #12]
 8014978:	b298      	uxth	r0, r3
 801497a:	4770      	bx	lr
      spi_ptr = MIOS32_SPI2_PTR;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 801497c:	f06f 0001 	mvn.w	r0, #1
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
  }

  // return received byte
  return spi_ptr->DR;
}
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	40003c00 	.word	0x40003c00
 8014988:	40013000 	.word	0x40013000
 801498c:	40003800 	.word	0x40003800

08014990 <MIOS32_SPI_TransferModeInit>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if invalid spi_prescaler selected
//! \return -4 if invalid spi_mode selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
 8014990:	b570      	push	{r4, r5, r6, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	4604      	mov	r4, r0
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
 8014996:	f44f 7082 	mov.w	r0, #260	; 0x104
 801499a:	f8ad 0006 	strh.w	r0, [sp, #6]
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 801499e:	f44f 7000 	mov.w	r0, #512	; 0x200
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 80149a2:	2300      	movs	r3, #0
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 80149a4:	f8ad 000e 	strh.w	r0, [sp, #14]
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80149a8:	2007      	movs	r0, #7
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 80149aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
 80149ae:	f8ad 3008 	strh.w	r3, [sp, #8]
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
 80149b2:	f8ad 3012 	strh.w	r3, [sp, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80149b6:	f8ad 0014 	strh.w	r0, [sp, #20]

  switch( spi_mode ) {
 80149ba:	2907      	cmp	r1, #7
 80149bc:	d860      	bhi.n	8014a80 <MIOS32_SPI_TransferModeInit+0xf0>
 80149be:	e8df f001 	tbb	[pc, r1]
 80149c2:	1e08      	.short	0x1e08
 80149c4:	0b041d14 	.word	0x0b041d14
 80149c8:	1910      	.short	0x1910
    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 80149ca:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 80149ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK0_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80149d2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80149d6:	e015      	b.n	8014a04 <MIOS32_SPI_TransferModeInit+0x74>
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 80149d8:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 80149dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80149e0:	e00d      	b.n	80149fe <MIOS32_SPI_TransferModeInit+0x6e>
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 80149e2:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 80149e6:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80149ea:	2302      	movs	r3, #2
 80149ec:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80149f0:	2300      	movs	r3, #0
 80149f2:	e007      	b.n	8014a04 <MIOS32_SPI_TransferModeInit+0x74>
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 80149f4:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 80149f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80149fc:	2302      	movs	r3, #2
 80149fe:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8014a02:	2301      	movs	r3, #1
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8014a04:	2a07      	cmp	r2, #7
    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8014a06:	f8ad 300c 	strh.w	r3, [sp, #12]
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8014a0a:	d83f      	bhi.n	8014a8c <MIOS32_SPI_TransferModeInit+0xfc>
    return -3; // invalid prescaler selected

  switch( spi ) {
 8014a0c:	2c01      	cmp	r4, #1
 8014a0e:	d01d      	beq.n	8014a4c <MIOS32_SPI_TransferModeInit+0xbc>
 8014a10:	d303      	bcc.n	8014a1a <MIOS32_SPI_TransferModeInit+0x8a>
 8014a12:	2c02      	cmp	r4, #2
 8014a14:	d137      	bne.n	8014a86 <MIOS32_SPI_TransferModeInit+0xf6>

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8014a16:	4d1f      	ldr	r5, [pc, #124]	; (8014a94 <MIOS32_SPI_TransferModeInit+0x104>)
 8014a18:	e019      	b.n	8014a4e <MIOS32_SPI_TransferModeInit+0xbe>
  switch( spi ) {
    case 0: {
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
 8014a1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8014a1e:	2900      	cmp	r1, #0
 8014a20:	d034      	beq.n	8014a8c <MIOS32_SPI_TransferModeInit+0xfc>
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8014a22:	4c1d      	ldr	r4, [pc, #116]	; (8014a98 <MIOS32_SPI_TransferModeInit+0x108>)
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8014a24:	00d2      	lsls	r2, r2, #3
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8014a26:	4620      	mov	r0, r4
 8014a28:	a901      	add	r1, sp, #4
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8014a2a:	8825      	ldrh	r5, [r4, #0]
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8014a2c:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8014a30:	f002 fa96 	bl	8016f60 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8014a34:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014a38:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8014a3c:	b2ad      	uxth	r5, r5
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8014a3e:	d11d      	bne.n	8014a7c <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI0_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8014a40:	8823      	ldrh	r3, [r4, #0]
 8014a42:	405d      	eors	r5, r3
 8014a44:	07a8      	lsls	r0, r5, #30
 8014a46:	d019      	beq.n	8014a7c <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8014a48:	2000      	movs	r0, #0
 8014a4a:	e014      	b.n	8014a76 <MIOS32_SPI_TransferModeInit+0xe6>
#if defined(MIOS32_BOARD_MBHP_DIPCOREF4)
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
#endif
      u16 prev_cr1 = MIOS32_SPI1_PTR->CR1;
 8014a4c:	4d13      	ldr	r5, [pc, #76]	; (8014a9c <MIOS32_SPI_TransferModeInit+0x10c>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8014a4e:	1e51      	subs	r1, r2, #1
 8014a50:	00ca      	lsls	r2, r1, #3
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8014a52:	4628      	mov	r0, r5
 8014a54:	a901      	add	r1, sp, #4

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8014a56:	882e      	ldrh	r6, [r5, #0]

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8014a58:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8014a5c:	f002 fa80 	bl	8016f60 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8014a60:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014a64:	f5b0 7f82 	cmp.w	r0, #260	; 0x104

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8014a68:	b2b6      	uxth	r6, r6

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8014a6a:	d107      	bne.n	8014a7c <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI2_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8014a6c:	882b      	ldrh	r3, [r5, #0]
 8014a6e:	405e      	eors	r6, r3
 8014a70:	07b1      	lsls	r1, r6, #30
 8014a72:	d003      	beq.n	8014a7c <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8014a74:	4620      	mov	r0, r4
 8014a76:	21ff      	movs	r1, #255	; 0xff
 8014a78:	f7ff ff64 	bl	8014944 <MIOS32_SPI_TransferByte>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e007      	b.n	8014a90 <MIOS32_SPI_TransferModeInit+0x100>
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;
    default:
      return -4; // invalid SPI clock/phase mode
 8014a80:	f06f 0003 	mvn.w	r0, #3
 8014a84:	e004      	b.n	8014a90 <MIOS32_SPI_TransferModeInit+0x100>
      }
#endif
    } break;

    default:
      return -2; // unsupported SPI port
 8014a86:	f06f 0001 	mvn.w	r0, #1
 8014a8a:	e001      	b.n	8014a90 <MIOS32_SPI_TransferModeInit+0x100>
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
    return -3; // invalid prescaler selected
 8014a8c:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8014a90:	b006      	add	sp, #24
 8014a92:	bd70      	pop	{r4, r5, r6, pc}
 8014a94:	40003c00 	.word	0x40003c00
 8014a98:	40013000 	.word	0x40013000
 8014a9c:	40003800 	.word	0x40003800

08014aa0 <MIOS32_SPI_Init>:
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8014aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8014aa4:	4604      	mov	r4, r0
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8014aa6:	b090      	sub	sp, #64	; 0x40
  // currently only mode 0 supported
  if( mode != 0 )
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	f040 80ff 	bne.w	8014cac <MIOS32_SPI_Init+0x20c>
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8014aae:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8014cec <MIOS32_SPI_Init+0x24c>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8014ab2:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8014cf0 <MIOS32_SPI_Init+0x250>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8014ab6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8014cf4 <MIOS32_SPI_Init+0x254>
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8014aba:	a801      	add	r0, sp, #4
 8014abc:	f001 ffc6 	bl	8016a4c <DMA_StructInit>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8014ac0:	2304      	movs	r3, #4
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8014ac2:	f44f 6000 	mov.w	r0, #2048	; 0x800
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8014ac6:	f8c9 4000 	str.w	r4, [r9]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014aca:	2102      	movs	r1, #2
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8014acc:	f8a8 3018 	strh.w	r3, [r8, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8014ad0:	f8aa 0018 	strh.w	r0, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f7ff fdbb 	bl	8014650 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8014ada:	2101      	movs	r1, #1
 8014adc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014ae0:	f002 f90c 	bl	8016cfc <RCC_APB2PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014aea:	f002 f8e3 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8014aee:	2101      	movs	r1, #1
 8014af0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014af4:	f002 f8de 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
 8014af8:	486f      	ldr	r0, [pc, #444]	; (8014cb8 <MIOS32_SPI_Init+0x218>)
 8014afa:	4621      	mov	r1, r4
 8014afc:	f001 ffb7 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 8014b00:	496e      	ldr	r1, [pc, #440]	; (8014cbc <MIOS32_SPI_Init+0x21c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8014b02:	486d      	ldr	r0, [pc, #436]	; (8014cb8 <MIOS32_SPI_Init+0x218>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 8014b04:	9102      	str	r1, [sp, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014b06:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8014b0a:	f04f 66c0 	mov.w	r6, #100663296	; 0x6000000
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8014b0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8014b12:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8014b14:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014b16:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8014b18:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014b1a:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014b1c:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014b1e:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8014b20:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8014b22:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8014b24:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8014b26:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8014b28:	f001 ff66 	bl	80169f8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
 8014b2c:	4864      	ldr	r0, [pc, #400]	; (8014cc0 <MIOS32_SPI_Init+0x220>)
 8014b2e:	4621      	mov	r1, r4
 8014b30:	f001 ff9d 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
 8014b34:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8014b36:	4862      	ldr	r0, [pc, #392]	; (8014cc0 <MIOS32_SPI_Init+0x220>)

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014b38:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8014b3a:	2640      	movs	r6, #64	; 0x40
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8014b3c:	a901      	add	r1, sp, #4
  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014b3e:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8014b40:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014b42:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8014b44:	f001 ff58 	bl	80169f8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI0_PTR, ENABLE);
 8014b48:	2101      	movs	r1, #1
 8014b4a:	485e      	ldr	r0, [pc, #376]	; (8014cc4 <MIOS32_SPI_Init+0x224>)
 8014b4c:	f002 fa27 	bl	8016f9e <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI0_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8014b50:	2201      	movs	r2, #1
 8014b52:	2103      	movs	r1, #3
 8014b54:	485b      	ldr	r0, [pc, #364]	; (8014cc4 <MIOS32_SPI_Init+0x224>)
 8014b56:	f002 fa2e 	bl	8016fb6 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI0_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8014b5a:	2105      	movs	r1, #5
 8014b5c:	203a      	movs	r0, #58	; 0x3a
 8014b5e:	f7ff fd51 	bl	8014604 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(0, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8014b62:	2103      	movs	r1, #3
 8014b64:	2206      	movs	r2, #6
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7ff ff12 	bl	8014990 <MIOS32_SPI_TransferModeInit>
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8014b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // SPI1
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI1

  // disable callback function
  spi_callback[1] = NULL;
 8014b70:	f8c9 4004 	str.w	r4, [r9, #4]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014b74:	2102      	movs	r1, #2
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8014b76:	f8a8 2018 	strh.w	r2, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014b7a:	2001      	movs	r0, #1
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK2_PORT, MIOS32_SPI1_RCLK2_PIN, pin_value); break;
 8014b7c:	f8aa 5018 	strh.w	r5, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014b80:	f7ff fd66 	bl	8014650 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8014b84:	2101      	movs	r1, #1
 8014b86:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014b8a:	f002 f8ab 	bl	8016ce4 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8014b8e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014b92:	2101      	movs	r1, #1
 8014b94:	f002 f88e 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8014b98:	2101      	movs	r1, #1
 8014b9a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014b9e:	f002 f889 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
 8014ba2:	4849      	ldr	r0, [pc, #292]	; (8014cc8 <MIOS32_SPI_Init+0x228>)
 8014ba4:	4621      	mov	r1, r4
 8014ba6:	f001 ff62 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 8014baa:	4b48      	ldr	r3, [pc, #288]	; (8014ccc <MIOS32_SPI_Init+0x22c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8014bac:	4846      	ldr	r0, [pc, #280]	; (8014cc8 <MIOS32_SPI_Init+0x228>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 8014bae:	9302      	str	r3, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8014bb0:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
 8014bb2:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014bb4:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8014bb6:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014bb8:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014bba:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014bbc:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8014bbe:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8014bc0:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8014bc2:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8014bc4:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8014bc6:	f001 ff17 	bl	80169f8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
 8014bca:	4841      	ldr	r0, [pc, #260]	; (8014cd0 <MIOS32_SPI_Init+0x230>)
 8014bcc:	4621      	mov	r1, r4
 8014bce:	f001 ff4e 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8014bd2:	483f      	ldr	r0, [pc, #252]	; (8014cd0 <MIOS32_SPI_Init+0x230>)
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
 8014bd4:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8014bd6:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014bd8:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014bda:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8014bdc:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014bde:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8014be0:	f001 ff0a 	bl	80169f8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI1_PTR, ENABLE);
 8014be4:	2101      	movs	r1, #1
 8014be6:	483b      	ldr	r0, [pc, #236]	; (8014cd4 <MIOS32_SPI_Init+0x234>)
 8014be8:	f002 f9d9 	bl	8016f9e <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI1_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8014bec:	2201      	movs	r2, #1
 8014bee:	2103      	movs	r1, #3
 8014bf0:	4838      	ldr	r0, [pc, #224]	; (8014cd4 <MIOS32_SPI_Init+0x234>)
 8014bf2:	f002 f9e0 	bl	8016fb6 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI1_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8014bf6:	2105      	movs	r1, #5
 8014bf8:	200e      	movs	r0, #14
 8014bfa:	f7ff fd03 	bl	8014604 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(1, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8014bfe:	2206      	movs	r2, #6
 8014c00:	2103      	movs	r1, #3
 8014c02:	2001      	movs	r0, #1
 8014c04:	f7ff fec4 	bl	8014990 <MIOS32_SPI_TransferModeInit>
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8014c08:	4833      	ldr	r0, [pc, #204]	; (8014cd8 <MIOS32_SPI_Init+0x238>)
  // SPI2
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI2

  // disable callback function
  spi_callback[2] = NULL;
 8014c0a:	f8c9 4008 	str.w	r4, [r9, #8]
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8014c0e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8014c12:	f8a0 9018 	strh.w	r9, [r0, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8014c16:	f44f 7180 	mov.w	r1, #256	; 0x100
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014c1a:	2002      	movs	r0, #2
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8014c1c:	f8a8 1018 	strh.w	r1, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8014c20:	4601      	mov	r1, r0
 8014c22:	f7ff fd15 	bl	8014650 <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8014c26:	2101      	movs	r1, #1
 8014c28:	4648      	mov	r0, r9
 8014c2a:	f002 f85b 	bl	8016ce4 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8014c2e:	2101      	movs	r1, #1
 8014c30:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014c34:	f002 f83e 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8014c38:	2101      	movs	r1, #1
 8014c3a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014c3e:	f002 f839 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
 8014c42:	4826      	ldr	r0, [pc, #152]	; (8014cdc <MIOS32_SPI_Init+0x23c>)
 8014c44:	4621      	mov	r1, r4
 8014c46:	f001 ff12 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8014c4a:	4a25      	ldr	r2, [pc, #148]	; (8014ce0 <MIOS32_SPI_Init+0x240>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8014c4c:	4823      	ldr	r0, [pc, #140]	; (8014cdc <MIOS32_SPI_Init+0x23c>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8014c4e:	9202      	str	r2, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8014c50:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
 8014c52:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014c54:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8014c56:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014c58:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014c5a:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014c5c:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8014c5e:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8014c60:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8014c62:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8014c64:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8014c66:	f001 fec7 	bl	80169f8 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
 8014c6a:	481e      	ldr	r0, [pc, #120]	; (8014ce4 <MIOS32_SPI_Init+0x244>)
 8014c6c:	4621      	mov	r1, r4
 8014c6e:	f001 fefe 	bl	8016a6e <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8014c72:	481c      	ldr	r0, [pc, #112]	; (8014ce4 <MIOS32_SPI_Init+0x244>)
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
 8014c74:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8014c76:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8014c78:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8014c7a:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8014c7c:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8014c7e:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8014c80:	f001 feba 	bl	80169f8 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI2_PTR, ENABLE);
 8014c84:	2101      	movs	r1, #1
 8014c86:	4818      	ldr	r0, [pc, #96]	; (8014ce8 <MIOS32_SPI_Init+0x248>)
 8014c88:	f002 f989 	bl	8016f9e <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI2_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8014c8c:	2103      	movs	r1, #3
 8014c8e:	4816      	ldr	r0, [pc, #88]	; (8014ce8 <MIOS32_SPI_Init+0x248>)
 8014c90:	2201      	movs	r2, #1
 8014c92:	f002 f990 	bl	8016fb6 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI2_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8014c96:	2105      	movs	r1, #5
 8014c98:	200d      	movs	r0, #13
 8014c9a:	f7ff fcb3 	bl	8014604 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8014c9e:	2002      	movs	r0, #2
 8014ca0:	2103      	movs	r1, #3
 8014ca2:	2206      	movs	r2, #6
 8014ca4:	f7ff fe74 	bl	8014990 <MIOS32_SPI_TransferModeInit>
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
 8014ca8:	4620      	mov	r0, r4
 8014caa:	e001      	b.n	8014cb0 <MIOS32_SPI_Init+0x210>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
}
 8014cb0:	b010      	add	sp, #64	; 0x40
 8014cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cb6:	bf00      	nop
 8014cb8:	40026440 	.word	0x40026440
 8014cbc:	4001300c 	.word	0x4001300c
 8014cc0:	40026458 	.word	0x40026458
 8014cc4:	40013000 	.word	0x40013000
 8014cc8:	40026058 	.word	0x40026058
 8014ccc:	4000380c 	.word	0x4000380c
 8014cd0:	40026070 	.word	0x40026070
 8014cd4:	40003800 	.word	0x40003800
 8014cd8:	40020000 	.word	0x40020000
 8014cdc:	40026040 	.word	0x40026040
 8014ce0:	40003c0c 	.word	0x40003c0c
 8014ce4:	40026088 	.word	0x40026088
 8014ce8:	40003c00 	.word	0x40003c00
 8014cec:	20000c80 	.word	0x20000c80
 8014cf0:	40020400 	.word	0x40020400
 8014cf4:	40020c00 	.word	0x40020c00

08014cf8 <MIOS32_SPI_TransferBlock>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 8014cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 8014cfc:	2801      	cmp	r0, #1
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 8014cfe:	468c      	mov	ip, r1
 8014d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 8014d04:	d00f      	beq.n	8014d26 <MIOS32_SPI_TransferBlock+0x2e>
 8014d06:	d307      	bcc.n	8014d18 <MIOS32_SPI_TransferBlock+0x20>
 8014d08:	2802      	cmp	r0, #2
 8014d0a:	d163      	bne.n	8014dd4 <MIOS32_SPI_TransferBlock+0xdc>
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
 8014d0c:	4935      	ldr	r1, [pc, #212]	; (8014de4 <MIOS32_SPI_TransferBlock+0xec>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
 8014d0e:	4f36      	ldr	r7, [pc, #216]	; (8014de8 <MIOS32_SPI_TransferBlock+0xf0>)
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
 8014d10:	4c36      	ldr	r4, [pc, #216]	; (8014dec <MIOS32_SPI_TransferBlock+0xf4>)
    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
 8014d12:	4d37      	ldr	r5, [pc, #220]	; (8014df0 <MIOS32_SPI_TransferBlock+0xf8>)

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8014d14:	4e37      	ldr	r6, [pc, #220]	; (8014df4 <MIOS32_SPI_TransferBlock+0xfc>)
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
 8014d16:	e00c      	b.n	8014d32 <MIOS32_SPI_TransferBlock+0x3a>
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI0_DMA_RX_IRQ_FLAGS;
 8014d18:	4932      	ldr	r1, [pc, #200]	; (8014de4 <MIOS32_SPI_TransferBlock+0xec>)
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
 8014d1a:	4c37      	ldr	r4, [pc, #220]	; (8014df8 <MIOS32_SPI_TransferBlock+0x100>)
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
 8014d1c:	4d37      	ldr	r5, [pc, #220]	; (8014dfc <MIOS32_SPI_TransferBlock+0x104>)
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8014d1e:	4e38      	ldr	r6, [pc, #224]	; (8014e00 <MIOS32_SPI_TransferBlock+0x108>)
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
 8014d20:	f04f 57f2 	mov.w	r7, #507510784	; 0x1e400000
 8014d24:	e005      	b.n	8014d32 <MIOS32_SPI_TransferBlock+0x3a>
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
 8014d26:	4f37      	ldr	r7, [pc, #220]	; (8014e04 <MIOS32_SPI_TransferBlock+0x10c>)
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
 8014d28:	4c37      	ldr	r4, [pc, #220]	; (8014e08 <MIOS32_SPI_TransferBlock+0x110>)
    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
 8014d2a:	4d38      	ldr	r5, [pc, #224]	; (8014e0c <MIOS32_SPI_TransferBlock+0x114>)

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8014d2c:	4e38      	ldr	r6, [pc, #224]	; (8014e10 <MIOS32_SPI_TransferBlock+0x118>)
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI1_DMA_RX_IRQ_FLAGS;
 8014d2e:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
    default:
      return -2; // unsupported SPI port
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
 8014d32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014d36:	f1b9 0f00 	cmp.w	r9, #0
 8014d3a:	d14f      	bne.n	8014ddc <MIOS32_SPI_TransferBlock+0xe4>
    return -3;

  // set callback function
  spi_callback[spi] = callback;
 8014d3c:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8014e1c <MIOS32_SPI_TransferBlock+0x124>
 8014d40:	f84e 8020 	str.w	r8, [lr, r0, lsl #2]

  // ensure that previously received value doesn't cause DMA access
  if( spi_ptr->DR );
 8014d44:	89b0      	ldrh	r0, [r6, #12]

  // configure Rx channel
  // TK: optimization method: read rx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 rx_CCR = dma_rx_ptr->CR & ~CCR_ENABLE;
 8014d46:	6820      	ldr	r0, [r4, #0]
 8014d48:	f020 0601 	bic.w	r6, r0, #1
  dma_rx_ptr->CR = rx_CCR;
 8014d4c:	6026      	str	r6, [r4, #0]
  if( receive_buffer != NULL ) {
 8014d4e:	b11a      	cbz	r2, 8014d58 <MIOS32_SPI_TransferBlock+0x60>
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
 8014d50:	60e2      	str	r2, [r4, #12]
    rx_CCR |= DMA_MemoryInc_Enable;
 8014d52:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 8014d56:	e007      	b.n	8014d68 <MIOS32_SPI_TransferBlock+0x70>
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 8014d58:	4a2e      	ldr	r2, [pc, #184]	; (8014e14 <MIOS32_SPI_TransferBlock+0x11c>)
 8014d5a:	26ff      	movs	r6, #255	; 0xff
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8014d5c:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
    rx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 8014d60:	7016      	strb	r6, [r2, #0]
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
 8014d62:	60e2      	str	r2, [r4, #12]
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8014d64:	f020 0601 	bic.w	r6, r0, #1
  }
  dma_rx_ptr->NDTR = len;
 8014d68:	6063      	str	r3, [r4, #4]


  // configure Tx channel
  // TK: optimization method: read tx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 tx_CCR = dma_tx_ptr->CR & ~CCR_ENABLE;
 8014d6a:	682a      	ldr	r2, [r5, #0]
 8014d6c:	f022 0001 	bic.w	r0, r2, #1
  dma_tx_ptr->CR = tx_CCR;
 8014d70:	6028      	str	r0, [r5, #0]
  if( send_buffer != NULL ) {
 8014d72:	f1bc 0f00 	cmp.w	ip, #0
 8014d76:	d004      	beq.n	8014d82 <MIOS32_SPI_TransferBlock+0x8a>
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
 8014d78:	f8c5 c00c 	str.w	ip, [r5, #12]
    tx_CCR |= DMA_MemoryInc_Enable;
 8014d7c:	f440 6980 	orr.w	r9, r0, #1024	; 0x400
 8014d80:	e009      	b.n	8014d96 <MIOS32_SPI_TransferBlock+0x9e>
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 8014d82:	4825      	ldr	r0, [pc, #148]	; (8014e18 <MIOS32_SPI_TransferBlock+0x120>)
 8014d84:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
    tx_CCR &= ~DMA_MemoryInc_Enable;
 8014d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
    tx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 8014d8c:	f880 9000 	strb.w	r9, [r0]
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
 8014d90:	60e8      	str	r0, [r5, #12]
    tx_CCR &= ~DMA_MemoryInc_Enable;
 8014d92:	f022 0901 	bic.w	r9, r2, #1
  }
  dma_tx_ptr->NDTR = len;
 8014d96:	606b      	str	r3, [r5, #4]

  // new for STM32F4 DMA: it's required to clear interrupt flags before DMA channel is enabled again
  DMA_ClearFlag(dma_rx_ptr, dma_rx_irq_flags);
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f001 fe71 	bl	8016a80 <DMA_ClearFlag>
  DMA_ClearFlag(dma_tx_ptr, dma_tx_irq_flags);
 8014d9e:	4628      	mov	r0, r5
 8014da0:	4639      	mov	r1, r7
 8014da2:	f001 fe6d 	bl	8016a80 <DMA_ClearFlag>
 8014da6:	f049 0301 	orr.w	r3, r9, #1

  // enable DMA interrupt if callback function active
  if( callback != NULL ) {
 8014daa:	f1b8 0f00 	cmp.w	r8, #0
 8014dae:	d006      	beq.n	8014dbe <MIOS32_SPI_TransferBlock+0xc6>
    rx_CCR |= DMA_IT_TC;
 8014db0:	f046 0611 	orr.w	r6, r6, #17
    dma_rx_ptr->CR = rx_CCR;
 8014db4:	6026      	str	r6, [r4, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
 8014db6:	2000      	movs	r0, #0
  if( callback != NULL ) {
    rx_CCR |= DMA_IT_TC;
    dma_rx_ptr->CR = rx_CCR;

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 8014db8:	602b      	str	r3, [r5, #0]
 8014dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    rx_CCR &= ~DMA_IT_TC;
 8014dbe:	f026 0110 	bic.w	r1, r6, #16
 8014dc2:	f041 0601 	orr.w	r6, r1, #1
    dma_rx_ptr->CR = rx_CCR;
 8014dc6:	6026      	str	r6, [r4, #0]

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 8014dc8:	602b      	str	r3, [r5, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
 8014dca:	6860      	ldr	r0, [r4, #4]
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d1fc      	bne.n	8014dca <MIOS32_SPI_TransferBlock+0xd2>
 8014dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 8014dd4:	f06f 0001 	mvn.w	r0, #1
 8014dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
    return -3;
 8014ddc:	f06f 0002 	mvn.w	r0, #2
    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
}
 8014de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de4:	10390000 	.word	0x10390000
 8014de8:	20000e40 	.word	0x20000e40
 8014dec:	40026040 	.word	0x40026040
 8014df0:	40026088 	.word	0x40026088
 8014df4:	40003c00 	.word	0x40003c00
 8014df8:	40026440 	.word	0x40026440
 8014dfc:	40026458 	.word	0x40026458
 8014e00:	40013000 	.word	0x40013000
 8014e04:	20000039 	.word	0x20000039
 8014e08:	40026058 	.word	0x40026058
 8014e0c:	40026070 	.word	0x40026070
 8014e10:	40003800 	.word	0x40003800
 8014e14:	20000c8d 	.word	0x20000c8d
 8014e18:	20000c8c 	.word	0x20000c8c
 8014e1c:	20000c80 	.word	0x20000c80

08014e20 <DMA2_Stream2_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Called when callback function has been defined and SPI transfer has finished
/////////////////////////////////////////////////////////////////////////////
MIOS32_SPI0_DMA_IRQHANDLER_FUNC
{
 8014e20:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI0_DMA_RX_PTR, MIOS32_SPI0_DMA_RX_IRQ_FLAGS);
 8014e22:	4804      	ldr	r0, [pc, #16]	; (8014e34 <DMA2_Stream2_IRQHandler+0x14>)
 8014e24:	4904      	ldr	r1, [pc, #16]	; (8014e38 <DMA2_Stream2_IRQHandler+0x18>)
 8014e26:	f001 fe2b 	bl	8016a80 <DMA_ClearFlag>

  if( spi_callback[0] != NULL )
 8014e2a:	4b04      	ldr	r3, [pc, #16]	; (8014e3c <DMA2_Stream2_IRQHandler+0x1c>)
 8014e2c:	6818      	ldr	r0, [r3, #0]
 8014e2e:	b100      	cbz	r0, 8014e32 <DMA2_Stream2_IRQHandler+0x12>
    spi_callback[0]();
 8014e30:	4780      	blx	r0
 8014e32:	bd08      	pop	{r3, pc}
 8014e34:	40026440 	.word	0x40026440
 8014e38:	10390000 	.word	0x10390000
 8014e3c:	20000c80 	.word	0x20000c80

08014e40 <DMA1_Stream3_IRQHandler>:
}

MIOS32_SPI1_DMA_IRQHANDLER_FUNC
{
 8014e40:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI1_DMA_RX_PTR, MIOS32_SPI1_DMA_RX_IRQ_FLAGS);
 8014e42:	4805      	ldr	r0, [pc, #20]	; (8014e58 <DMA1_Stream3_IRQHandler+0x18>)
 8014e44:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
 8014e48:	f001 fe1a 	bl	8016a80 <DMA_ClearFlag>

  if( spi_callback[1] != NULL )
 8014e4c:	4b03      	ldr	r3, [pc, #12]	; (8014e5c <DMA1_Stream3_IRQHandler+0x1c>)
 8014e4e:	6858      	ldr	r0, [r3, #4]
 8014e50:	b100      	cbz	r0, 8014e54 <DMA1_Stream3_IRQHandler+0x14>
    spi_callback[1]();
 8014e52:	4780      	blx	r0
 8014e54:	bd08      	pop	{r3, pc}
 8014e56:	bf00      	nop
 8014e58:	40026058 	.word	0x40026058
 8014e5c:	20000c80 	.word	0x20000c80

08014e60 <DMA1_Stream2_IRQHandler>:
}

MIOS32_SPI2_DMA_IRQHANDLER_FUNC
{
 8014e60:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI2_DMA_RX_PTR, MIOS32_SPI2_DMA_RX_IRQ_FLAGS);
 8014e62:	4804      	ldr	r0, [pc, #16]	; (8014e74 <DMA1_Stream2_IRQHandler+0x14>)
 8014e64:	4904      	ldr	r1, [pc, #16]	; (8014e78 <DMA1_Stream2_IRQHandler+0x18>)
 8014e66:	f001 fe0b 	bl	8016a80 <DMA_ClearFlag>

  if( spi_callback[2] != NULL )
 8014e6a:	4b04      	ldr	r3, [pc, #16]	; (8014e7c <DMA1_Stream2_IRQHandler+0x1c>)
 8014e6c:	6898      	ldr	r0, [r3, #8]
 8014e6e:	b100      	cbz	r0, 8014e72 <DMA1_Stream2_IRQHandler+0x12>
    spi_callback[2]();
 8014e70:	4780      	blx	r0
 8014e72:	bd08      	pop	{r3, pc}
 8014e74:	40026040 	.word	0x40026040
 8014e78:	10390000 	.word	0x10390000
 8014e7c:	20000c80 	.word	0x20000c80

08014e80 <MIOS32_BOARD_PinInitHlp>:

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 8014e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e82:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8014e84:	4668      	mov	r0, sp

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 8014e86:	460e      	mov	r6, r1
 8014e88:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8014e8a:	f001 fe64 	bl	8016b56 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8014e8e:	2302      	movs	r3, #2
 8014e90:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 8014e94:	9600      	str	r6, [sp, #0]

  switch( mode ) {
 8014e96:	2c06      	cmp	r4, #6
 8014e98:	d829      	bhi.n	8014eee <MIOS32_BOARD_PinInitHlp+0x6e>
 8014e9a:	e8df f004 	tbb	[pc, r4]
 8014e9e:	0426      	.short	0x0426
 8014ea0:	18130f09 	.word	0x18130f09
 8014ea4:	1d          	.byte	0x1d
 8014ea5:	00          	.byte	0x00
  case MIOS32_BOARD_PIN_MODE_IGNORE:
    return 0; // don't touch
  case MIOS32_BOARD_PIN_MODE_ANALOG:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8014ea6:	2003      	movs	r0, #3
 8014ea8:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	e002      	b.n	8014eb6 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8014eb6:	f88d 3007 	strb.w	r3, [sp, #7]
    break;
 8014eba:	e012      	b.n	8014ee2 <MIOS32_BOARD_PinInitHlp+0x62>
  case MIOS32_BOARD_PIN_MODE_INPUT_PD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f88d 2004 	strb.w	r2, [sp, #4]
 8014ec2:	e7f8      	b.n	8014eb6 <MIOS32_BOARD_PinInitHlp+0x36>
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8014ec4:	2100      	movs	r1, #0
 8014ec6:	f88d 1004 	strb.w	r1, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8014eca:	2301      	movs	r3, #1
 8014ecc:	e7f3      	b.n	8014eb6 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8014ece:	2001      	movs	r0, #1
 8014ed0:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	e002      	b.n	8014ede <MIOS32_BOARD_PinInitHlp+0x5e>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8014ede:	f88d 3006 	strb.w	r3, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	4669      	mov	r1, sp
 8014ee6:	f001 fde9 	bl	8016abc <GPIO_Init>

  return 0; // no error
 8014eea:	2000      	movs	r0, #0
 8014eec:	e001      	b.n	8014ef2 <MIOS32_BOARD_PinInitHlp+0x72>
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    break;
  default:
    return -2; // invalid pin mode
 8014eee:	f06f 0001 	mvn.w	r0, #1

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);

  return 0; // no error
}
 8014ef2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08014ef4 <MIOS32_BOARD_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8014ef4:	b920      	cbnz	r0, 8014f00 <MIOS32_BOARD_Init+0xc>
    return -1; // unsupported mode

  j5_enable_mask = 0;
 8014ef6:	4b04      	ldr	r3, [pc, #16]	; (8014f08 <MIOS32_BOARD_Init+0x14>)
  j10_enable_mask = 0;
 8014ef8:	4904      	ldr	r1, [pc, #16]	; (8014f0c <MIOS32_BOARD_Init+0x18>)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  j5_enable_mask = 0;
 8014efa:	8018      	strh	r0, [r3, #0]
  j10_enable_mask = 0;
 8014efc:	8008      	strh	r0, [r1, #0]

  return 0; // no error
 8014efe:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  j5_enable_mask = 0;
  j10_enable_mask = 0;

  return 0; // no error
}
 8014f04:	4770      	bx	lr
 8014f06:	bf00      	nop
 8014f08:	20000c90 	.word	0x20000c90
 8014f0c:	20000c8e 	.word	0x20000c8e

08014f10 <MIOS32_BOARD_LED_Init>:
//! \return 0 if initialisation passed
//! \return -1 if no LEDs specified for board
//! \return -2 if one or more LEDs not available on board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Init(u32 leds)
{
 8014f10:	b510      	push	{r4, lr}
 8014f12:	4604      	mov	r4, r0
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1

  // 4 LEDs are available
  if( leds & 1 ) {
 8014f14:	07e0      	lsls	r0, r4, #31
 8014f16:	d505      	bpl.n	8014f24 <MIOS32_BOARD_LED_Init+0x14>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED4 (Green)
 8014f18:	4812      	ldr	r0, [pc, #72]	; (8014f64 <MIOS32_BOARD_LED_Init+0x54>)
 8014f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f1e:	2205      	movs	r2, #5
 8014f20:	f7ff ffae 	bl	8014e80 <MIOS32_BOARD_PinInitHlp>
  }

#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) {
 8014f24:	07a1      	lsls	r1, r4, #30
 8014f26:	d505      	bpl.n	8014f34 <MIOS32_BOARD_LED_Init+0x24>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_13, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED3 (Orange)
 8014f28:	480e      	ldr	r0, [pc, #56]	; (8014f64 <MIOS32_BOARD_LED_Init+0x54>)
 8014f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014f2e:	2205      	movs	r2, #5
 8014f30:	f7ff ffa6 	bl	8014e80 <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) {
 8014f34:	0762      	lsls	r2, r4, #29
 8014f36:	d505      	bpl.n	8014f44 <MIOS32_BOARD_LED_Init+0x34>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_14, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED5 (Red)
 8014f38:	480a      	ldr	r0, [pc, #40]	; (8014f64 <MIOS32_BOARD_LED_Init+0x54>)
 8014f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014f3e:	2205      	movs	r2, #5
 8014f40:	f7ff ff9e 	bl	8014e80 <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) {
 8014f44:	0723      	lsls	r3, r4, #28
 8014f46:	d505      	bpl.n	8014f54 <MIOS32_BOARD_LED_Init+0x44>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_15, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED6 (Blue)
 8014f48:	4806      	ldr	r0, [pc, #24]	; (8014f64 <MIOS32_BOARD_LED_Init+0x54>)
 8014f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014f4e:	2205      	movs	r2, #5
 8014f50:	f7ff ff96 	bl	8014e80 <MIOS32_BOARD_PinInitHlp>
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 8014f54:	f034 030f 	bics.w	r3, r4, #15
  return 0; // no error
  
#else
  return -1; // no LED specified for board
#endif
}
 8014f58:	bf14      	ite	ne
 8014f5a:	f06f 0001 	mvnne.w	r0, #1
 8014f5e:	2000      	moveq	r0, #0
 8014f60:	bd10      	pop	{r4, pc}
 8014f62:	bf00      	nop
 8014f64:	40020c00 	.word	0x40020c00

08014f68 <MIOS32_BOARD_LED_Set>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Set(u32 leds, u32 value)
{
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( leds & 1 ) { // LED4 (Green)
 8014f68:	07c2      	lsls	r2, r0, #31
 8014f6a:	d507      	bpl.n	8014f7c <MIOS32_BOARD_LED_Set+0x14>
 8014f6c:	4b16      	ldr	r3, [pc, #88]	; (8014fc8 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_12, value & 1);
 8014f6e:	f011 0f01 	tst.w	r1, #1
 8014f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f76:	bf14      	ite	ne
 8014f78:	831a      	strhne	r2, [r3, #24]
 8014f7a:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) { // LED3 (Orange)
 8014f7c:	0783      	lsls	r3, r0, #30
 8014f7e:	d507      	bpl.n	8014f90 <MIOS32_BOARD_LED_Set+0x28>
 8014f80:	4b11      	ldr	r3, [pc, #68]	; (8014fc8 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_13, value & 2);
 8014f82:	f011 0f02 	tst.w	r1, #2
 8014f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014f8a:	bf14      	ite	ne
 8014f8c:	831a      	strhne	r2, [r3, #24]
 8014f8e:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) { // LED5 (Red)
 8014f90:	0742      	lsls	r2, r0, #29
 8014f92:	d507      	bpl.n	8014fa4 <MIOS32_BOARD_LED_Set+0x3c>
 8014f94:	4b0c      	ldr	r3, [pc, #48]	; (8014fc8 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_14, value & 4);
 8014f96:	f011 0f04 	tst.w	r1, #4
 8014f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014f9e:	bf14      	ite	ne
 8014fa0:	831a      	strhne	r2, [r3, #24]
 8014fa2:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) { // LED6 (Blue)
 8014fa4:	0703      	lsls	r3, r0, #28
 8014fa6:	d507      	bpl.n	8014fb8 <MIOS32_BOARD_LED_Set+0x50>
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_15, value & 8);
 8014fa8:	f011 0f08 	tst.w	r1, #8
 8014fac:	4906      	ldr	r1, [pc, #24]	; (8014fc8 <MIOS32_BOARD_LED_Set+0x60>)
 8014fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014fb2:	bf14      	ite	ne
 8014fb4:	830b      	strhne	r3, [r1, #24]
 8014fb6:	834b      	strheq	r3, [r1, #26]
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 8014fb8:	f030 030f 	bics.w	r3, r0, #15
  
  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 8014fbc:	bf14      	ite	ne
 8014fbe:	f06f 0001 	mvnne.w	r0, #1
 8014fc2:	2000      	moveq	r0, #0
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	40020c00 	.word	0x40020c00

08014fcc <MIOS32_BOARD_LED_Get>:
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 8014fcc:	4b09      	ldr	r3, [pc, #36]	; (8014ff4 <MIOS32_BOARD_LED_Get+0x28>)
 8014fce:	6958      	ldr	r0, [r3, #20]
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
 8014fd0:	695a      	ldr	r2, [r3, #20]
 8014fd2:	0491      	lsls	r1, r2, #18
    values |= (1 << 1);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 8014fd4:	6959      	ldr	r1, [r3, #20]
    values |= (1 << 2);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 8014fd6:	695b      	ldr	r3, [r3, #20]
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 8014fd8:	f3c0 3000 	ubfx	r0, r0, #12, #1
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
    values |= (1 << 1);
 8014fdc:	bf48      	it	mi
 8014fde:	f040 0002 	orrmi.w	r0, r0, #2
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 8014fe2:	044a      	lsls	r2, r1, #17
    values |= (1 << 2);
 8014fe4:	bf48      	it	mi
 8014fe6:	f040 0004 	orrmi.w	r0, r0, #4
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 8014fea:	0419      	lsls	r1, r3, #16
    values |= (1 << 3);
 8014fec:	bf48      	it	mi
 8014fee:	f040 0008 	orrmi.w	r0, r0, #8
    values |= (1 << 1);
#endif
#endif
  
  return values;
}
 8014ff2:	4770      	bx	lr
 8014ff4:	40020c00 	.word	0x40020c00

08014ff8 <MIOS32_BOARD_J10_PinInit>:
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 8014ff8:	280f      	cmp	r0, #15
//!     <LI>MIOS32_BOARD_PIN_MODE_OUTPUT_OD: pin is used as output in open drain mode
//!   </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J10_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	460a      	mov	r2, r1
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 8014ffe:	d817      	bhi.n	8015030 <MIOS32_BOARD_J10_PinInit+0x38>
 8015000:	4b0d      	ldr	r3, [pc, #52]	; (8015038 <MIOS32_BOARD_J10_PinInit+0x40>)
 8015002:	2101      	movs	r1, #1
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 8015004:	fa01 f100 	lsl.w	r1, r1, r0
 8015008:	881c      	ldrh	r4, [r3, #0]
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
 801500a:	b922      	cbnz	r2, 8015016 <MIOS32_BOARD_J10_PinInit+0x1e>
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 801500c:	ea24 0001 	bic.w	r0, r4, r1
 8015010:	8018      	strh	r0, [r3, #0]

    if( status < 0 )
      return status;
  }

  return 0; // no error
 8015012:	4610      	mov	r0, r2
 8015014:	bd10      	pop	{r4, pc}
  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
  } else {
    // enable pin
    j10_enable_mask |= (1 << pin);
 8015016:	4321      	orrs	r1, r4
 8015018:	8019      	strh	r1, [r3, #0]

    s32 status = MIOS32_BOARD_PinInitHlp(j10_pin[pin].port, j10_pin[pin].pin_mask, mode);
 801501a:	4b08      	ldr	r3, [pc, #32]	; (801503c <MIOS32_BOARD_J10_PinInit+0x44>)
 801501c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8015020:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8015024:	8889      	ldrh	r1, [r1, #4]
 8015026:	f7ff ff2b 	bl	8014e80 <MIOS32_BOARD_PinInitHlp>
 801502a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 801502e:	bd10      	pop	{r4, pc}
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 8015030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return status;
  }

  return 0; // no error
#endif
}
 8015034:	bd10      	pop	{r4, pc}
 8015036:	bf00      	nop
 8015038:	20000c8e 	.word	0x20000c8e
 801503c:	0801f744 	.word	0x0801f744

08015040 <MIOS32_BOARD_J10_PinSet>:
s32 MIOS32_BOARD_J10_PinSet(u8 pin, u8 value)
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
 8015040:	280f      	cmp	r0, #15
 8015042:	d815      	bhi.n	8015070 <MIOS32_BOARD_J10_PinSet+0x30>
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
 8015044:	4b0d      	ldr	r3, [pc, #52]	; (801507c <MIOS32_BOARD_J10_PinSet+0x3c>)
 8015046:	881a      	ldrh	r2, [r3, #0]
 8015048:	fa42 f200 	asr.w	r2, r2, r0
 801504c:	07d3      	lsls	r3, r2, #31
 801504e:	d512      	bpl.n	8015076 <MIOS32_BOARD_J10_PinSet+0x36>
 8015050:	4b0b      	ldr	r3, [pc, #44]	; (8015080 <MIOS32_BOARD_J10_PinSet+0x40>)
 8015052:	00c2      	lsls	r2, r0, #3
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8015054:	b131      	cbz	r1, 8015064 <MIOS32_BOARD_J10_PinSet+0x24>
 8015056:	189a      	adds	r2, r3, r2
 8015058:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 801505c:	8891      	ldrh	r1, [r2, #4]
 801505e:	8301      	strh	r1, [r0, #24]

  return 0; // no error
 8015060:	2000      	movs	r0, #0
 8015062:	4770      	bx	lr
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8015064:	1899      	adds	r1, r3, r2
 8015066:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 801506a:	888b      	ldrh	r3, [r1, #4]
 801506c:	8343      	strh	r3, [r0, #26]
 801506e:	e7f7      	b.n	8015060 <MIOS32_BOARD_J10_PinSet+0x20>
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 8015070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015074:	4770      	bx	lr

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 8015076:	f06f 0001 	mvn.w	r0, #1

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 801507a:	4770      	bx	lr
 801507c:	20000c8e 	.word	0x20000c8e
 8015080:	0801f744 	.word	0x0801f744

08015084 <MIOS32_BOARD_J15_PortInit>:
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 8015084:	2801      	cmp	r0, #1
//!   <LI>1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
//! </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PortInit(u32 mode)
{
 8015086:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801508a:	4606      	mov	r6, r0
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 801508c:	d850      	bhi.n	8015130 <MIOS32_BOARD_J15_PortInit+0xac>
    return -1; // unsupported mode

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 801508e:	4668      	mov	r0, sp
 8015090:	f001 fd61 	bl	8016b56 <GPIO_StructInit>

#if J15_MODE == 2
  J15_PIN_SCLK_0;
 8015094:	4c28      	ldr	r4, [pc, #160]	; (8015138 <MIOS32_BOARD_J15_PortInit+0xb4>)
  J15_PIN_RCLK_0;
  J15_PIN_E2(0);
 8015096:	4b29      	ldr	r3, [pc, #164]	; (801513c <MIOS32_BOARD_J15_PortInit+0xb8>)

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

#if J15_MODE == 2
  J15_PIN_SCLK_0;
 8015098:	2240      	movs	r2, #64	; 0x40
  J15_PIN_RCLK_0;
 801509a:	f04f 0808 	mov.w	r8, #8
  J15_PIN_E2(0);
 801509e:	f44f 7100 	mov.w	r1, #512	; 0x200
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
  J15_PIN_CS2(0);
#endif
  J15_PIN_RW(0);
 80150a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
  J15_PIN_E1(0);
 80150a6:	f44f 7780 	mov.w	r7, #256	; 0x100

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

#if J15_MODE == 2
  J15_PIN_SCLK_0;
 80150aa:	8362      	strh	r2, [r4, #26]
  J15_PIN_RW(0);
  J15_PIN_E1(0);


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80150ac:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

#if J15_MODE == 2
  J15_PIN_SCLK_0;
  J15_PIN_RCLK_0;
 80150ae:	f8a4 801a 	strh.w	r8, [r4, #26]
  J15_PIN_E2(0);
 80150b2:	8359      	strh	r1, [r3, #26]
#endif
#elif J15_MODE == 1
  J15_PIN_CS1(0);
  J15_PIN_CS2(0);
#endif
  J15_PIN_RW(0);
 80150b4:	8358      	strh	r0, [r3, #26]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80150b6:	4669      	mov	r1, sp
#elif J15_MODE == 1
  J15_PIN_CS1(0);
  J15_PIN_CS2(0);
#endif
  J15_PIN_RW(0);
  J15_PIN_E1(0);
 80150b8:	835f      	strh	r7, [r3, #26]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80150ba:	4620      	mov	r0, r4
  J15_PIN_E1(0);


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80150bc:	2300      	movs	r3, #0
 80150be:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
 80150c2:	9200      	str	r2, [sp, #0]
  J15_PIN_RW(0);
  J15_PIN_E1(0);


  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80150c4:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
 80150c8:	f88d 5005 	strb.w	r5, [sp, #5]
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80150cc:	f001 fcf6 	bl	8016abc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
 80150d0:	4620      	mov	r0, r4
 80150d2:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
 80150d4:	f8cd 8000 	str.w	r8, [sp]
 80150d8:	463c      	mov	r4, r7
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
 80150da:	f001 fcef 	bl	8016abc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_CS2_PIN;
  GPIO_Init(J15_CS2_PORT, &GPIO_InitStructure);
#endif
  // configure open-drain pins (if OD option enabled)
  if( mode )
 80150de:	b10e      	cbz	r6, 80150e4 <MIOS32_BOARD_J15_PortInit+0x60>
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80150e0:	f88d 5006 	strb.w	r5, [sp, #6]

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);
 80150e4:	4816      	ldr	r0, [pc, #88]	; (8015140 <MIOS32_BOARD_J15_PortInit+0xbc>)
#endif
  // configure open-drain pins (if OD option enabled)
  if( mode )
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
 80150e6:	9400      	str	r4, [sp, #0]
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);
 80150e8:	4669      	mov	r1, sp
 80150ea:	f001 fce7 	bl	8016abc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80150ee:	4813      	ldr	r0, [pc, #76]	; (801513c <MIOS32_BOARD_J15_PortInit+0xb8>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
 80150f0:	9400      	str	r4, [sp, #0]
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80150f2:	4669      	mov	r1, sp
 80150f4:	f001 fce2 	bl	8016abc <GPIO_Init>
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_E2_PIN;
 80150f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_Init(J15_E2_PORT, &GPIO_InitStructure);
 80150fc:	480f      	ldr	r0, [pc, #60]	; (801513c <MIOS32_BOARD_J15_PortInit+0xb8>)
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
#if J15_MODE == 2
  GPIO_InitStructure.GPIO_Pin = J15_E2_PIN;
 80150fe:	9200      	str	r2, [sp, #0]
  GPIO_Init(J15_E2_PORT, &GPIO_InitStructure);
 8015100:	4669      	mov	r1, sp
 8015102:	f001 fcdb 	bl	8016abc <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = LCD_E4_PIN;
  GPIO_Init(LCD_E4_PORT, &GPIO_InitStructure);
#endif
#endif

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
 8015106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801510a:	9100      	str	r1, [sp, #0]
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);
 801510c:	480b      	ldr	r0, [pc, #44]	; (801513c <MIOS32_BOARD_J15_PortInit+0xb8>)
 801510e:	4669      	mov	r1, sp
 8015110:	f001 fcd4 	bl	8016abc <GPIO_Init>

#if J15_MODE >= 2
  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015114:	2001      	movs	r0, #1
  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);

#if J15_MODE >= 2
  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8015116:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015118:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
 801511c:	2380      	movs	r3, #128	; 0x80
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 801511e:	4806      	ldr	r0, [pc, #24]	; (8015138 <MIOS32_BOARD_J15_PortInit+0xb4>)
  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);

#if J15_MODE >= 2
  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8015120:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 8015124:	4669      	mov	r1, sp

#if J15_MODE >= 2
  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
 8015126:	9300      	str	r3, [sp, #0]
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 8015128:	f001 fcc8 	bl	8016abc <GPIO_Init>
#endif
  return 0; // no error
 801512c:	4620      	mov	r0, r4
 801512e:	e001      	b.n	8015134 <MIOS32_BOARD_J15_PortInit+0xb0>
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
    return -1; // unsupported mode
 8015130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
#endif
  return 0; // no error
#endif
}
 8015134:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8015138:	40020c00 	.word	0x40020c00
 801513c:	40020800 	.word	0x40020800
 8015140:	40020000 	.word	0x40020000

08015144 <MIOS32_BOARD_J15_DataSet>:
//! to output an 8bit value on the data lines
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_DataSet(u8 data)
{
 8015144:	2108      	movs	r1, #8
 8015146:	4b0e      	ldr	r3, [pc, #56]	; (8015180 <MIOS32_BOARD_J15_DataSet+0x3c>)

  return 0; // no error
#elif J15_MODE == 2
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SER(data & 0x80);
 8015148:	f010 0f80 	tst.w	r0, #128	; 0x80
 801514c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015150:	bf14      	ite	ne
 8015152:	831a      	strhne	r2, [r3, #24]
 8015154:	835a      	strheq	r2, [r3, #26]
    J15_PIN_SCLK_0; // setup delay
 8015156:	4b0b      	ldr	r3, [pc, #44]	; (8015184 <MIOS32_BOARD_J15_DataSet+0x40>)
 8015158:	2240      	movs	r2, #64	; 0x40
  J15_PIN_CS2((data>>1) & 1);

  return 0; // no error
#elif J15_MODE == 2
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801515a:	0040      	lsls	r0, r0, #1
 801515c:	3901      	subs	r1, #1
    J15_PIN_SER(data & 0x80);
    J15_PIN_SCLK_0; // setup delay
 801515e:	835a      	strh	r2, [r3, #26]
  J15_PIN_CS2((data>>1) & 1);

  return 0; // no error
#elif J15_MODE == 2
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 8015160:	b2c0      	uxtb	r0, r0
    J15_PIN_SER(data & 0x80);
    J15_PIN_SCLK_0; // setup delay
    J15_PIN_SCLK_0; // stretch...
 8015162:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8015164:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8015166:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8015168:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_1;
 801516a:	831a      	strh	r2, [r3, #24]
    J15_PIN_SCLK_1;
 801516c:	831a      	strh	r2, [r3, #24]
    J15_PIN_SCLK_1;
 801516e:	831a      	strh	r2, [r3, #24]
  J15_PIN_CS2((data>>1) & 1);

  return 0; // no error
#elif J15_MODE == 2
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 8015170:	d1e9      	bne.n	8015146 <MIOS32_BOARD_J15_DataSet+0x2>
    J15_PIN_SCLK_1;
    J15_PIN_SCLK_1;
  }

  // transfer to output register
  J15_PIN_RCLK_1;
 8015172:	2208      	movs	r2, #8
 8015174:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_0;

  return 0; // no error
#endif
}
 8015176:	4608      	mov	r0, r1
    J15_PIN_SCLK_1;
  }

  // transfer to output register
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_1;
 8015178:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_1;
 801517a:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_0;
 801517c:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 801517e:	4770      	bx	lr
 8015180:	40020000 	.word	0x40020000
 8015184:	40020c00 	.word	0x40020c00

08015188 <MIOS32_BOARD_J15_SerDataShift>:
//! (SCLK connected to J15A:E, Data line connected to J15A:RW)
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_SerDataShift(u8 data)
{
 8015188:	b570      	push	{r4, r5, r6, lr}
 801518a:	4606      	mov	r6, r0
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();
 801518c:	f7ff fa12 	bl	80145b4 <MIOS32_IRQ_Disable>
 8015190:	2508      	movs	r5, #8
 8015192:	4b16      	ldr	r3, [pc, #88]	; (80151ec <MIOS32_BOARD_J15_SerDataShift+0x64>)

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 8015194:	4c15      	ldr	r4, [pc, #84]	; (80151ec <MIOS32_BOARD_J15_SerDataShift+0x64>)
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
 8015196:	f016 0f80 	tst.w	r6, #128	; 0x80
 801519a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801519e:	bf14      	ite	ne
 80151a0:	831a      	strhne	r2, [r3, #24]
 80151a2:	835a      	strheq	r2, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // setup delay
 80151a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80151a8:	f44f 7000 	mov.w	r0, #512	; 0x200
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 80151ac:	0076      	lsls	r6, r6, #1
 80151ae:	3d01      	subs	r5, #1
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 80151b0:	8359      	strh	r1, [r3, #26]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 80151b2:	b2f6      	uxtb	r6, r6
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 80151b4:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80151b6:	8359      	strh	r1, [r3, #26]
 80151b8:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80151ba:	8359      	strh	r1, [r3, #26]
 80151bc:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80151be:	8359      	strh	r1, [r3, #26]
 80151c0:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80151c2:	8359      	strh	r1, [r3, #26]
 80151c4:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_1;
 80151c6:	8319      	strh	r1, [r3, #24]
 80151c8:	8318      	strh	r0, [r3, #24]
    J15_PIN_SERLCD_SCLK_1;
 80151ca:	8319      	strh	r1, [r3, #24]
 80151cc:	8318      	strh	r0, [r3, #24]
    J15_PIN_SERLCD_SCLK_1;
 80151ce:	8319      	strh	r1, [r3, #24]
 80151d0:	8318      	strh	r0, [r3, #24]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 80151d2:	d1de      	bne.n	8015192 <MIOS32_BOARD_J15_SerDataShift+0xa>
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_DATAOUT(0); 
 80151d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  // With RW=1 the CS lines will go into high impedance state, and after 100..200 uS we will
  // see on the scope how CS line levels are changing, e.g. from high to mid level.
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
 80151d8:	8361      	strh	r1, [r4, #26]
 80151da:	8360      	strh	r0, [r4, #26]
  J15_PIN_SERLCD_SCLK_0;
 80151dc:	8361      	strh	r1, [r4, #26]
 80151de:	8360      	strh	r0, [r4, #26]
  J15_PIN_SERLCD_DATAOUT(0); 
 80151e0:	8363      	strh	r3, [r4, #26]

  MIOS32_IRQ_Enable();
 80151e2:	f7ff f9fb 	bl	80145dc <MIOS32_IRQ_Enable>

  return 0; // no error
#endif
}
 80151e6:	4628      	mov	r0, r5
 80151e8:	bd70      	pop	{r4, r5, r6, pc}
 80151ea:	bf00      	nop
 80151ec:	40020800 	.word	0x40020800

080151f0 <MIOS32_BOARD_J15_RS_Set>:
//! to set the RS pin
//! \param[in] rs state of the RS pin
//! \return < 0 if access to RS pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
 80151f0:	4b04      	ldr	r3, [pc, #16]	; (8015204 <MIOS32_BOARD_J15_RS_Set+0x14>)
 80151f2:	f44f 7280 	mov.w	r2, #256	; 0x100
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 80151f6:	b108      	cbz	r0, 80151fc <MIOS32_BOARD_J15_RS_Set+0xc>
 80151f8:	831a      	strh	r2, [r3, #24]
 80151fa:	e000      	b.n	80151fe <MIOS32_BOARD_J15_RS_Set+0xe>
 80151fc:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 80151fe:	2000      	movs	r0, #0
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	40020000 	.word	0x40020000

08015208 <MIOS32_BOARD_J15_RW_Set>:
//! to set the RW pin
//! \param[in] rw state of the RW pin
//! \return < 0 if access to RW pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
 8015208:	4b04      	ldr	r3, [pc, #16]	; (801521c <MIOS32_BOARD_J15_RW_Set+0x14>)
 801520a:	f44f 6200 	mov.w	r2, #2048	; 0x800
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 801520e:	b108      	cbz	r0, 8015214 <MIOS32_BOARD_J15_RW_Set+0xc>
 8015210:	831a      	strh	r2, [r3, #24]
 8015212:	e000      	b.n	8015216 <MIOS32_BOARD_J15_RW_Set+0xe>
 8015214:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 8015216:	2000      	movs	r0, #0
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	40020800 	.word	0x40020800

08015220 <MIOS32_BOARD_J15_E_Set>:
s32 MIOS32_BOARD_J15_E_Set(u8 lcd, u8 e)
{
#if J15_MODE < 2
  return -1; // LCD port not available
#elif J15_MODE == 2
  switch( lcd ) {
 8015220:	b110      	cbz	r0, 8015228 <MIOS32_BOARD_J15_E_Set+0x8>
 8015222:	2801      	cmp	r0, #1
 8015224:	d10f      	bne.n	8015246 <MIOS32_BOARD_J15_E_Set+0x26>
 8015226:	e005      	b.n	8015234 <MIOS32_BOARD_J15_E_Set+0x14>
 8015228:	4b08      	ldr	r3, [pc, #32]	; (801524c <MIOS32_BOARD_J15_E_Set+0x2c>)
 801522a:	f44f 7280 	mov.w	r2, #256	; 0x100
    case 0: 
      J15_PIN_E1(e);
 801522e:	b141      	cbz	r1, 8015242 <MIOS32_BOARD_J15_E_Set+0x22>
 8015230:	831a      	strh	r2, [r3, #24]
 8015232:	4770      	bx	lr
 8015234:	4b05      	ldr	r3, [pc, #20]	; (801524c <MIOS32_BOARD_J15_E_Set+0x2c>)
 8015236:	f44f 7200 	mov.w	r2, #512	; 0x200
      return 0; // no error

    case 1: 
      J15_PIN_E2(e);
 801523a:	b111      	cbz	r1, 8015242 <MIOS32_BOARD_J15_E_Set+0x22>
 801523c:	831a      	strh	r2, [r3, #24]
      return 0; // no error
 801523e:	2000      	movs	r0, #0
 8015240:	4770      	bx	lr
    case 0: 
      J15_PIN_E1(e);
      return 0; // no error

    case 1: 
      J15_PIN_E2(e);
 8015242:	835a      	strh	r2, [r3, #26]
 8015244:	e7fb      	b.n	801523e <MIOS32_BOARD_J15_E_Set+0x1e>
      return 0; // no error
#endif

  }

  return -1; // pin not available
 8015246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif
}
 801524a:	4770      	bx	lr
 801524c:	40020800 	.word	0x40020800

08015250 <MIOS32_BOARD_J15_GetD7In>:
s32 MIOS32_BOARD_J15_GetD7In(void)
{
#if J15_MODE <2
  return -1; // LCD port not available
#elif J15_MODE == 2
  return J15_PIN_D7_IN ? 1 : 0;
 8015250:	4b02      	ldr	r3, [pc, #8]	; (801525c <MIOS32_BOARD_J15_GetD7In+0xc>)
 8015252:	6918      	ldr	r0, [r3, #16]
#endif
}
 8015254:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop
 801525c:	40020c00 	.word	0x40020c00

08015260 <MIOS32_BOARD_J15_D7InPullUpEnable>:
  return -1; // LCD port not available
#elif J15_MODE == 2
  return 0; // not relevant for MBHP_CORE_STM32 board
  // TODO: check if this is true 
#endif
}
 8015260:	2000      	movs	r0, #0
 8015262:	4770      	bx	lr

08015264 <MIOS32_BOARD_J15_PollUnbusy>:
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8015264:	4b1d      	ldr	r3, [pc, #116]	; (80152dc <MIOS32_BOARD_J15_PollUnbusy+0x78>)
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 8015266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 801526a:	f44f 7280 	mov.w	r2, #256	; 0x100
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 801526e:	460c      	mov	r4, r1
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8015270:	f44f 6100 	mov.w	r1, #2048	; 0x800
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8015274:	835a      	strh	r2, [r3, #26]
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8015276:	f8a3 1818 	strh.w	r1, [r3, #2072]	; 0x818

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
 801527a:	2101      	movs	r1, #1
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 801527c:	4607      	mov	r7, r0

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
 801527e:	f7ff ffcf 	bl	8015220 <MIOS32_BOARD_J15_E_Set>
 8015282:	2800      	cmp	r0, #0
 8015284:	db25      	blt.n	80152d2 <MIOS32_BOARD_J15_PollUnbusy+0x6e>
 8015286:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8015288:	b1c4      	cbz	r4, 80152bc <MIOS32_BOARD_J15_PollUnbusy+0x58>
    MIOS32_BOARD_J15_E_Set(lcd, 1);
 801528a:	4638      	mov	r0, r7
 801528c:	2101      	movs	r1, #1
 801528e:	f7ff ffc7 	bl	8015220 <MIOS32_BOARD_J15_E_Set>
 8015292:	250a      	movs	r5, #10
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8015294:	4a12      	ldr	r2, [pc, #72]	; (80152e0 <MIOS32_BOARD_J15_PollUnbusy+0x7c>)
 8015296:	f44f 6000 	mov.w	r0, #2048	; 0x800
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    MIOS32_BOARD_J15_E_Set(lcd, 1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 801529a:	3d01      	subs	r5, #1
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 801529c:	8310      	strh	r0, [r2, #24]
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    MIOS32_BOARD_J15_E_Set(lcd, 1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 801529e:	d1f9      	bne.n	8015294 <MIOS32_BOARD_J15_PollUnbusy+0x30>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 80152a0:	f7ff ffd6 	bl	8015250 <MIOS32_BOARD_J15_GetD7In>
    MIOS32_BOARD_J15_E_Set(lcd, 0);
 80152a4:	4629      	mov	r1, r5

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 80152a6:	4680      	mov	r8, r0
    MIOS32_BOARD_J15_E_Set(lcd, 0);
 80152a8:	4638      	mov	r0, r7
 80152aa:	f7ff ffb9 	bl	8015220 <MIOS32_BOARD_J15_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 80152ae:	f1b8 0f00 	cmp.w	r8, #0
 80152b2:	d101      	bne.n	80152b8 <MIOS32_BOARD_J15_PollUnbusy+0x54>
 80152b4:	b916      	cbnz	r6, 80152bc <MIOS32_BOARD_J15_PollUnbusy+0x58>
 80152b6:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 80152b8:	3c01      	subs	r4, #1
 80152ba:	e7e5      	b.n	8015288 <MIOS32_BOARD_J15_PollUnbusy+0x24>
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 80152bc:	4b08      	ldr	r3, [pc, #32]	; (80152e0 <MIOS32_BOARD_J15_PollUnbusy+0x7c>)
 80152be:	f44f 6100 	mov.w	r1, #2048	; 0x800
  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 80152c2:	2c00      	cmp	r4, #0
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_MODE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 80152c4:	8359      	strh	r1, [r3, #26]
  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 80152c6:	bf14      	ite	ne
 80152c8:	2000      	movne	r0, #0
 80152ca:	f06f 0001 	mvneq.w	r0, #1
 80152ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
    return -1; // LCD port not available
 80152d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
#endif
}
 80152d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152da:	bf00      	nop
 80152dc:	40020000 	.word	0x40020000
 80152e0:	40020800 	.word	0x40020800

080152e4 <TIM2_IRQHandler>:
//! Interrupt handlers
//! \note don't call them directly from application
/////////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_ALLOCATE_TIM2_IRQn
TIMER0_IRQ_HANDLER
{
 80152e4:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER0_BASE, TIM_IT_Update) != RESET ) {
 80152e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80152ea:	2101      	movs	r1, #1
 80152ec:	f001 feb6 	bl	801705c <TIM_GetITStatus>
 80152f0:	b138      	cbz	r0, 8015302 <TIM2_IRQHandler+0x1e>
    TIM_ClearITPendingBit(TIMER0_BASE, TIM_IT_Update);
 80152f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80152f6:	2101      	movs	r1, #1
 80152f8:	f001 febb 	bl	8017072 <TIM_ClearITPendingBit>
    timer_callback[0]();
 80152fc:	4b01      	ldr	r3, [pc, #4]	; (8015304 <TIM2_IRQHandler+0x20>)
 80152fe:	6818      	ldr	r0, [r3, #0]
 8015300:	4780      	blx	r0
 8015302:	bd08      	pop	{r3, pc}
 8015304:	20000c94 	.word	0x20000c94

08015308 <TIM3_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM3_IRQn
TIMER1_IRQ_HANDLER
{
 8015308:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER1_BASE, TIM_IT_Update) != RESET ) {
 801530a:	4806      	ldr	r0, [pc, #24]	; (8015324 <TIM3_IRQHandler+0x1c>)
 801530c:	2101      	movs	r1, #1
 801530e:	f001 fea5 	bl	801705c <TIM_GetITStatus>
 8015312:	b130      	cbz	r0, 8015322 <TIM3_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER1_BASE, TIM_IT_Update);
 8015314:	4803      	ldr	r0, [pc, #12]	; (8015324 <TIM3_IRQHandler+0x1c>)
 8015316:	2101      	movs	r1, #1
 8015318:	f001 feab 	bl	8017072 <TIM_ClearITPendingBit>
    timer_callback[1]();
 801531c:	4b02      	ldr	r3, [pc, #8]	; (8015328 <TIM3_IRQHandler+0x20>)
 801531e:	6858      	ldr	r0, [r3, #4]
 8015320:	4780      	blx	r0
 8015322:	bd08      	pop	{r3, pc}
 8015324:	40000400 	.word	0x40000400
 8015328:	20000c94 	.word	0x20000c94

0801532c <TIM5_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM5_IRQn
TIMER2_IRQ_HANDLER
{
 801532c:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER2_BASE, TIM_IT_Update) != RESET ) {
 801532e:	4806      	ldr	r0, [pc, #24]	; (8015348 <TIM5_IRQHandler+0x1c>)
 8015330:	2101      	movs	r1, #1
 8015332:	f001 fe93 	bl	801705c <TIM_GetITStatus>
 8015336:	b130      	cbz	r0, 8015346 <TIM5_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER2_BASE, TIM_IT_Update);
 8015338:	4803      	ldr	r0, [pc, #12]	; (8015348 <TIM5_IRQHandler+0x1c>)
 801533a:	2101      	movs	r1, #1
 801533c:	f001 fe99 	bl	8017072 <TIM_ClearITPendingBit>
    timer_callback[2]();
 8015340:	4b02      	ldr	r3, [pc, #8]	; (801534c <TIM5_IRQHandler+0x20>)
 8015342:	6898      	ldr	r0, [r3, #8]
 8015344:	4780      	blx	r0
 8015346:	bd08      	pop	{r3, pc}
 8015348:	40000c00 	.word	0x40000c00
 801534c:	20000c94 	.word	0x20000c94

08015350 <MIOS32_DELAY_Init>:
//!
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
 8015350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8015352:	4604      	mov	r4, r0
 8015354:	b9b8      	cbnz	r0, 8015386 <MIOS32_DELAY_Init+0x36>
    return -1; // unsupported mode

  // enable timer clock
  if( MIOS32_DELAY_TIMER == TIM1 || MIOS32_DELAY_TIMER == TIM8 )
    RCC_APB2PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);
 8015356:	2001      	movs	r0, #1
 8015358:	4601      	mov	r1, r0
 801535a:	f001 fccf 	bl	8016cfc <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 801535e:	20a7      	movs	r0, #167	; 0xa7
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 8015360:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 8015364:	f8ad 0004 	strh.w	r0, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8015368:	a901      	add	r1, sp, #4
 801536a:	4809      	ldr	r0, [pc, #36]	; (8015390 <MIOS32_DELAY_Init+0x40>)
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 801536c:	9302      	str	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801536e:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8015372:	f8ad 4006 	strh.w	r4, [sp, #6]
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8015376:	f001 fe27 	bl	8016fc8 <TIM_TimeBaseInit>

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);
 801537a:	4805      	ldr	r0, [pc, #20]	; (8015390 <MIOS32_DELAY_Init+0x40>)
 801537c:	2101      	movs	r1, #1
 801537e:	f001 fe61 	bl	8017044 <TIM_Cmd>

  return 0; // no error
 8015382:	4620      	mov	r0, r4
 8015384:	e001      	b.n	801538a <MIOS32_DELAY_Init+0x3a>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8015386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);

  return 0; // no error
}
 801538a:	b004      	add	sp, #16
 801538c:	bd10      	pop	{r4, pc}
 801538e:	bf00      	nop
 8015390:	40010000 	.word	0x40010000

08015394 <MIOS32_DELAY_Wait_uS>:
//! \param[in] uS delay (1..65535 microseconds)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Wait_uS(u16 uS)
{
  u16 start = MIOS32_DELAY_TIMER->CNT;
 8015394:	4b04      	ldr	r3, [pc, #16]	; (80153a8 <MIOS32_DELAY_Wait_uS+0x14>)
 8015396:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015398:	b289      	uxth	r1, r1

  // note that this even works on 16bit counter wrap-arounds
  while( (u16)(MIOS32_DELAY_TIMER->CNT - start) <= uS );
 801539a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801539c:	1a52      	subs	r2, r2, r1
 801539e:	b292      	uxth	r2, r2
 80153a0:	4282      	cmp	r2, r0
 80153a2:	d9fa      	bls.n	801539a <MIOS32_DELAY_Wait_uS+0x6>

  return 0; // no error
}
 80153a4:	2000      	movs	r0, #0
 80153a6:	4770      	bx	lr
 80153a8:	40010000 	.word	0x40010000

080153ac <MIOS32_AIN_Init>:
  // finally start initial conversion
  MIOS32_AIN_StartConversions();

  return 0;
#endif
}
 80153ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153b0:	4770      	bx	lr

080153b2 <MIOS32_AIN_Handler>:
  // start next scan
  MIOS32_AIN_StartConversions();

  return 0; // no error
#endif
}
 80153b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153b6:	4770      	bx	lr

080153b8 <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(MIOS32_USB_DeviceDescriptor);
 80153b8:	2312      	movs	r3, #18
 80153ba:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_DeviceDescriptor;
}
 80153bc:	4800      	ldr	r0, [pc, #0]	; (80153c0 <USBD_USR_DeviceDescriptor+0x8>)
 80153be:	4770      	bx	lr
 80153c0:	0801f844 	.word	0x0801f844

080153c4 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80153c4:	2304      	movs	r3, #4
 80153c6:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)USBD_LangIDDesc;
}
 80153c8:	4800      	ldr	r0, [pc, #0]	; (80153cc <USBD_USR_LangIDStrDescriptor+0x8>)
 80153ca:	4770      	bx	lr
 80153cc:	0801f840 	.word	0x0801f840

080153d0 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
static void USBD_USR_Init(void)
{   
 80153d0:	4770      	bx	lr

080153d2 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
static void USBD_USR_DeviceReset(uint8_t speed )
{
 80153d2:	4770      	bx	lr

080153d4 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
static void USBD_USR_DeviceConnected (void)
{
 80153d4:	4770      	bx	lr

080153d6 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceSuspended(void)
{
 80153d6:	4770      	bx	lr

080153d8 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceResumed(void)
{
 80153d8:	4770      	bx	lr

080153da <USBH_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_USR_Init(void)
{
 80153da:	4770      	bx	lr

080153dc <USBH_USR_DeviceAttached>:
 *         Displays the message on LCD on device attached
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAttached(void)
{  
 80153dc:	4770      	bx	lr

080153de <USBH_USR_UnrecoveredError>:
 * @brief  USBH_USR_UnrecoveredError
 * @param  None
 * @retval None
 */
static void USBH_USR_UnrecoveredError (void)
{
 80153de:	4770      	bx	lr

080153e0 <USBH_USR_ResetDevice>:
 *         Reset USB Device
 * @param  None
 * @retval None
 */
static void USBH_USR_ResetDevice(void)
{
 80153e0:	4770      	bx	lr

080153e2 <USBH_USR_DeviceSpeedDetected>:
 *         Displays the message on LCD for device speed
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 80153e2:	4770      	bx	lr

080153e4 <USBH_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 80153e4:	4770      	bx	lr

080153e6 <USBH_USR_DeviceAddressAssigned>:
 *         USB device is successfully assigned the Address
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAddressAssigned(void)
{
 80153e6:	4770      	bx	lr

080153e8 <USBH_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
						 USBH_InterfaceDesc_TypeDef *itfDesc,
						 USBH_EpDesc_TypeDef *epDesc)
{
 80153e8:	4770      	bx	lr

080153ea <USBH_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 80153ea:	4770      	bx	lr

080153ec <USBH_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_USR_Product_String(void *ProductString)
{
 80153ec:	4770      	bx	lr

080153ee <USBH_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_USR_SerialNum_String(void *SerialNumString)
{
 80153ee:	4770      	bx	lr

080153f0 <USBH_USR_EnumerationDone>:
 *         application jump to class
 * @param  None
 * @retval None
 */
static void USBH_USR_EnumerationDone(void)
{
 80153f0:	4770      	bx	lr

080153f2 <USBH_USR_DeviceNotSupported>:
 *         Device is not supported
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceNotSupported(void)
{
 80153f2:	4770      	bx	lr

080153f4 <USBH_USR_UserInput>:
 * @retval USBH_USR_Status : User response for key button
 */
static USBH_USR_Status USBH_USR_UserInput(void)
{
  return USBH_USR_RESP_OK;
}
 80153f4:	2001      	movs	r0, #1
 80153f6:	4770      	bx	lr

080153f8 <USBH_USR_OverCurrentDetected>:
 *         Device Overcurrent detection event
 * @param  None
 * @retval None
 */
static void USBH_USR_OverCurrentDetected (void)
{
 80153f8:	4770      	bx	lr

080153fa <USBH_USR_Application>:
* @retval Staus
*/
static int USBH_USR_Application(void)
{
  return (0);
}
 80153fa:	2000      	movs	r0, #0
 80153fc:	4770      	bx	lr

080153fe <USBH_USR_DeInit>:
 *         Deinit User state and associated variables
 * @param  None
 * @retval None
 */
static void USBH_USR_DeInit(void)
{
 80153fe:	4770      	bx	lr

08015400 <MIOS32_USB_CLASS_Setup>:
					USB_SETUP_REQ *req)
{
  // not relevant for USB MIDI

  return USBD_OK;
}
 8015400:	2000      	movs	r0, #0
 8015402:	4770      	bx	lr

08015404 <MIOS32_USB_CLASS_EP0_RxReady>:
static uint8_t  MIOS32_USB_CLASS_EP0_RxReady (void  *pdev)
{ 
  // not relevant for USB MIDI
  
  return USBD_OK;
}
 8015404:	2000      	movs	r0, #0
 8015406:	4770      	bx	lr

08015408 <MIOS32_USB_CLASS_GetCfgDesc>:
  if( MIOS32_USB_ForceSingleUSB() ) {
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
    return (uint8_t *)MIOS32_USB_ConfigDescriptor_SingleUSB;
  }
#endif
  *length = sizeof (MIOS32_USB_ConfigDescriptor);
 8015408:	2365      	movs	r3, #101	; 0x65
 801540a:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_ConfigDescriptor;
}
 801540c:	4800      	ldr	r0, [pc, #0]	; (8015410 <MIOS32_USB_CLASS_GetCfgDesc+0x8>)
 801540e:	4770      	bx	lr
 8015410:	0801f883 	.word	0x0801f883

08015414 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8015414:	b510      	push	{r4, lr}
  const u8 serial_number_dummy_str[] = "42";
 8015416:	4b0b      	ldr	r3, [pc, #44]	; (8015444 <USBD_USR_SerialStrDescriptor+0x30>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8015418:	b08c      	sub	sp, #48	; 0x30
  const u8 serial_number_dummy_str[] = "42";
 801541a:	7898      	ldrb	r0, [r3, #2]
 801541c:	881a      	ldrh	r2, [r3, #0]
 801541e:	f88d 0006 	strb.w	r0, [sp, #6]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 8015422:	a802      	add	r0, sp, #8
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8015424:	460c      	mov	r4, r1
  const u8 serial_number_dummy_str[] = "42";
 8015426:	f8ad 2004 	strh.w	r2, [sp, #4]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 801542a:	f7fe ffb9 	bl	80143a0 <MIOS32_SYS_SerialNumberGet>
 801542e:	2800      	cmp	r0, #0
    USBD_GetString ((uint8_t*)serial_number_str, USBD_StrDesc, length);
 8015430:	bfac      	ite	ge
 8015432:	a802      	addge	r0, sp, #8
  } else {
    USBD_GetString ((uint8_t*)serial_number_dummy_str, USBD_StrDesc, length);
 8015434:	a801      	addlt	r0, sp, #4
 8015436:	4904      	ldr	r1, [pc, #16]	; (8015448 <USBD_USR_SerialStrDescriptor+0x34>)
 8015438:	4622      	mov	r2, r4
 801543a:	f002 fa3f 	bl	80178bc <USBD_GetString>
  }

  return USBD_StrDesc;
}
 801543e:	4802      	ldr	r0, [pc, #8]	; (8015448 <USBD_USR_SerialStrDescriptor+0x34>)
 8015440:	b00c      	add	sp, #48	; 0x30
 8015442:	bd10      	pop	{r4, pc}
 8015444:	0801f874 	.word	0x0801f874
 8015448:	20004a84 	.word	0x20004a84

0801544c <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 801544c:	b507      	push	{r0, r1, r2, lr}
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 801544e:	4b13      	ldr	r3, [pc, #76]	; (801549c <USBD_USR_ProductStrDescriptor+0x50>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8015450:	460a      	mov	r2, r1
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	8899      	ldrh	r1, [r3, #4]
 8015456:	799b      	ldrb	r3, [r3, #6]
 8015458:	9000      	str	r0, [sp, #0]
 801545a:	f88d 3006 	strb.w	r3, [sp, #6]
 801545e:	f8ad 1004 	strh.w	r1, [sp, #4]
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8015462:	2300      	movs	r3, #0
*         return the product string descriptor
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
 8015464:	480e      	ldr	r0, [pc, #56]	; (80154a0 <USBD_USR_ProductStrDescriptor+0x54>)
 8015466:	1819      	adds	r1, r3, r0
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8015468:	7808      	ldrb	r0, [r1, #0]
 801546a:	b158      	cbz	r0, 8015484 <USBD_USR_ProductStrDescriptor+0x38>
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
 801546c:	3820      	subs	r0, #32
      valid_str = 0;
 801546e:	285f      	cmp	r0, #95	; 0x5f
 8015470:	bf8c      	ite	hi
 8015472:	2000      	movhi	r0, #0
 8015474:	2001      	movls	r0, #1
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8015476:	3301      	adds	r3, #1
 8015478:	2b20      	cmp	r3, #32
 801547a:	d006      	beq.n	801548a <USBD_USR_ProductStrDescriptor+0x3e>
 801547c:	2800      	cmp	r0, #0
 801547e:	d1f1      	bne.n	8015464 <USBD_USR_ProductStrDescriptor+0x18>
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
  int len;

  // buffer[0] and [1] initialized below
  // check for user defined product string
  char *product_str_ptr = (char *)product_str;
 8015480:	4668      	mov	r0, sp
 8015482:	e005      	b.n	8015490 <USBD_USR_ProductStrDescriptor+0x44>
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
      valid_str = 0;
  }
  if( valid_str && len )
 8015484:	2b00      	cmp	r3, #0
 8015486:	d0fb      	beq.n	8015480 <USBD_USR_ProductStrDescriptor+0x34>
 8015488:	e001      	b.n	801548e <USBD_USR_ProductStrDescriptor+0x42>
 801548a:	2800      	cmp	r0, #0
 801548c:	d0f8      	beq.n	8015480 <USBD_USR_ProductStrDescriptor+0x34>
    product_str_ptr = product_str_user;
 801548e:	4804      	ldr	r0, [pc, #16]	; (80154a0 <USBD_USR_ProductStrDescriptor+0x54>)
#endif

  USBD_GetString ((uint8_t*)product_str_ptr, USBD_StrDesc, length);
 8015490:	4904      	ldr	r1, [pc, #16]	; (80154a4 <USBD_USR_ProductStrDescriptor+0x58>)
 8015492:	f002 fa13 	bl	80178bc <USBD_GetString>

  return USBD_StrDesc;
}
 8015496:	4803      	ldr	r0, [pc, #12]	; (80154a4 <USBD_USR_ProductStrDescriptor+0x58>)
 8015498:	bd0e      	pop	{r1, r2, r3, pc}
 801549a:	bf00      	nop
 801549c:	0801f6ad 	.word	0x0801f6ad
 80154a0:	08003fe0 	.word	0x08003fe0
 80154a4:	20004a84 	.word	0x20004a84

080154a8 <USBD_USR_InterfaceStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80154a8:	f7ff bfd0 	b.w	801544c <USBD_USR_ProductStrDescriptor>

080154ac <USBD_USR_ConfigStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80154ac:	f7ff bfce 	b.w	801544c <USBD_USR_ProductStrDescriptor>

080154b0 <MIOS32_USB_CLASS_GetUsrStrDesc>:
}


static uint8_t *MIOS32_USB_CLASS_GetUsrStrDesc(uint8_t speed, uint8_t index, uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80154b0:	4611      	mov	r1, r2
 80154b2:	f7ff bfcb 	b.w	801544c <USBD_USR_ProductStrDescriptor>
	...

080154b8 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80154b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80154ba:	4c08      	ldr	r4, [pc, #32]	; (80154dc <USBD_USR_ManufacturerStrDescriptor+0x24>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80154bc:	460a      	mov	r2, r1
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80154be:	6820      	ldr	r0, [r4, #0]
 80154c0:	6861      	ldr	r1, [r4, #4]
 80154c2:	ab01      	add	r3, sp, #4
 80154c4:	c303      	stmia	r3!, {r0, r1}
 80154c6:	68a0      	ldr	r0, [r4, #8]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80154c8:	4c05      	ldr	r4, [pc, #20]	; (80154e0 <USBD_USR_ManufacturerStrDescriptor+0x28>)
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80154ca:	6018      	str	r0, [r3, #0]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80154cc:	4621      	mov	r1, r4
 80154ce:	a801      	add	r0, sp, #4
 80154d0:	f002 f9f4 	bl	80178bc <USBD_GetString>
  return USBD_StrDesc;
}
 80154d4:	4620      	mov	r0, r4
 80154d6:	b004      	add	sp, #16
 80154d8:	bd10      	pop	{r4, pc}
 80154da:	bf00      	nop
 80154dc:	0801f877 	.word	0x0801f877
 80154e0:	20004a84 	.word	0x20004a84

080154e4 <MIOS32_USB_CLASS_DataOut>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80154e4:	2902      	cmp	r1, #2
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
 80154e6:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80154e8:	d103      	bne.n	80154f2 <MIOS32_USB_CLASS_DataOut+0xe>
    MIOS32_USB_MIDI_EP2_OUT_Callback(epnum, 0); // parameters not relevant for STM32F4
 80154ea:	4608      	mov	r0, r1
 80154ec:	2100      	movs	r1, #0
 80154ee:	f000 fc9f 	bl	8015e30 <MIOS32_USB_MIDI_EP2_OUT_Callback>
#endif

  return USBD_OK;
}
 80154f2:	2000      	movs	r0, #0
 80154f4:	bd08      	pop	{r3, pc}

080154f6 <MIOS32_USB_CLASS_DataIn>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80154f6:	2901      	cmp	r1, #1
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
 80154f8:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80154fa:	d103      	bne.n	8015504 <MIOS32_USB_CLASS_DataIn+0xe>
    MIOS32_USB_MIDI_EP1_IN_Callback(epnum, 0); // parameters not relevant for STM32F4
 80154fc:	4608      	mov	r0, r1
 80154fe:	2100      	movs	r1, #0
 8015500:	f000 fc8e 	bl	8015e20 <MIOS32_USB_MIDI_EP1_IN_Callback>
#endif
  
  return USBD_OK;
}
 8015504:	2000      	movs	r0, #0
 8015506:	bd08      	pop	{r3, pc}

08015508 <MIOS32_USB_CLASS_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8015508:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 801550a:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 801550c:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 801550e:	f003 fe29 	bl	8019164 <DCD_EP_Close>
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_IN_EP);
 8015512:	4620      	mov	r0, r4
 8015514:	2181      	movs	r1, #129	; 0x81
 8015516:	f003 fe25 	bl	8019164 <DCD_EP_Close>
#endif
  
  return USBD_OK;
}
 801551a:	2000      	movs	r0, #0
 801551c:	bd10      	pop	{r4, pc}

0801551e <USBH_USR_DeviceDisconnected>:
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 801551e:	2000      	movs	r0, #0
 8015520:	f000 bb2c 	b.w	8015b7c <MIOS32_USB_MIDI_ChangeConnectionState>

08015524 <USBD_USR_DeviceDisconnected>:
* @retval Staus
*/
static void USBD_USR_DeviceDisconnected (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8015524:	2000      	movs	r0, #0
 8015526:	f000 bb29 	b.w	8015b7c <MIOS32_USB_MIDI_ChangeConnectionState>

0801552a <USBD_USR_DeviceConfigured>:
* @retval Staus
*/
static void USBD_USR_DeviceConfigured (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(1);
 801552a:	2001      	movs	r0, #1
 801552c:	f000 bb26 	b.w	8015b7c <MIOS32_USB_MIDI_ChangeConnectionState>

08015530 <MIOS32_USB_CLASS_Init>:
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8015530:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8015532:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8015534:	2240      	movs	r2, #64	; 0x40
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8015536:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8015538:	460b      	mov	r3, r1
 801553a:	f003 fdf2 	bl	8019122 <DCD_EP_Open>
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_IN_EP, MIOS32_USB_MIDI_DATA_IN_SIZE, USB_OTG_EP_BULK);
 801553e:	2181      	movs	r1, #129	; 0x81
 8015540:	2240      	movs	r2, #64	; 0x40
 8015542:	2302      	movs	r3, #2
 8015544:	4620      	mov	r0, r4
 8015546:	f003 fdec 	bl	8019122 <DCD_EP_Open>

  // configuration for next transfer
  DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 801554a:	2102      	movs	r1, #2
 801554c:	4a03      	ldr	r2, [pc, #12]	; (801555c <MIOS32_USB_CLASS_Init+0x2c>)
 801554e:	4804      	ldr	r0, [pc, #16]	; (8015560 <MIOS32_USB_CLASS_Init+0x30>)
 8015550:	2340      	movs	r3, #64	; 0x40
 8015552:	f003 fe20 	bl	8019196 <DCD_EP_PrepareRx>
		   (uint8_t*)(USB_rx_buffer),
		   MIOS32_USB_MIDI_DATA_OUT_SIZE);
#endif

  return USBD_OK;
}
 8015556:	2000      	movs	r0, #0
 8015558:	bd10      	pop	{r4, pc}
 801555a:	bf00      	nop
 801555c:	20004a40 	.word	0x20004a40
 8015560:	20003fac 	.word	0x20003fac

08015564 <USB_OTG_BSP_Init>:
*/
static u8 USB_OTG_FS_BSP_Initialised = 0;
static u8 USB_OTG_HS_BSP_Initialised = 0;

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8015564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  
  GPIO_InitTypeDef GPIO_InitStructure;

  if(USB_OTG_FS_BSP_Initialised == 0){
 8015566:	4b27      	ldr	r3, [pc, #156]	; (8015604 <USB_OTG_BSP_Init+0xa0>)
 8015568:	781d      	ldrb	r5, [r3, #0]
 801556a:	2d00      	cmp	r5, #0
 801556c:	d148      	bne.n	8015600 <USB_OTG_BSP_Init+0x9c>
    USB_OTG_FS_BSP_Initialised =1;
 801556e:	2401      	movs	r4, #1
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8015570:	4620      	mov	r0, r4
 8015572:	4621      	mov	r1, r4
{
  
  GPIO_InitTypeDef GPIO_InitStructure;

  if(USB_OTG_FS_BSP_Initialised == 0){
    USB_OTG_FS_BSP_Initialised =1;
 8015574:	701c      	strb	r4, [r3, #0]
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8015576:	f001 fb9d 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 801557a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801557e:	9000      	str	r0, [sp, #0]

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8015580:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015582:	2702      	movs	r7, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8015584:	4820      	ldr	r0, [pc, #128]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8015586:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801558a:	4669      	mov	r1, sp

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801558c:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015590:	f88d 5006 	strb.w	r5, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8015594:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8015598:	f001 fa90 	bl	8016abc <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 801559c:	481a      	ldr	r0, [pc, #104]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
 801559e:	2108      	movs	r1, #8
 80155a0:	220a      	movs	r2, #10
 80155a2:	f001 fae5 	bl	8016b70 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 80155a6:	4818      	ldr	r0, [pc, #96]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
 80155a8:	2109      	movs	r1, #9
 80155aa:	220a      	movs	r2, #10
 80155ac:	f001 fae0 	bl	8016b70 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 80155b0:	4815      	ldr	r0, [pc, #84]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
 80155b2:	210b      	movs	r1, #11
 80155b4:	220a      	movs	r2, #10
 80155b6:	f001 fadb 	bl	8016b70 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 80155ba:	220a      	movs	r2, #10
 80155bc:	4812      	ldr	r0, [pc, #72]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
 80155be:	210c      	movs	r1, #12
 80155c0:	f001 fad6 	bl	8016b70 <GPIO_PinAFConfig>

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 80155c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80155c8:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80155ca:	480f      	ldr	r0, [pc, #60]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80155cc:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80155d0:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80155d2:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80155d6:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80155da:	f001 fa6f 	bl	8016abc <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 80155de:	210a      	movs	r1, #10
 80155e0:	460a      	mov	r2, r1
 80155e2:	4809      	ldr	r0, [pc, #36]	; (8015608 <USB_OTG_BSP_Init+0xa4>)
 80155e4:	f001 fac4 	bl	8016b70 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80155e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80155ec:	4621      	mov	r1, r4
 80155ee:	f001 fb85 	bl	8016cfc <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 80155f2:	2080      	movs	r0, #128	; 0x80
 80155f4:	4621      	mov	r1, r4
 80155f6:	f001 fb69 	bl	8016ccc <RCC_AHB2PeriphClockCmd>

  EXTI_ClearITPendingBit(EXTI_Line0);
 80155fa:	4620      	mov	r0, r4
 80155fc:	f001 fa58 	bl	8016ab0 <EXTI_ClearITPendingBit>
  GPIO_PinAFConfig(GPIOB,GPIO_PinSource15,GPIO_AF_OTG2_FS) ;
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_OTG_HS, ENABLE) ;
    
  }
#endif
}
 8015600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015602:	bf00      	nop
 8015604:	20000ca0 	.word	0x20000ca0
 8015608:	40020000 	.word	0x40020000

0801560c <USB_OTG_BSP_EnableInterrupt>:
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
  MIOS32_IRQ_Install(OTG_FS_IRQn, MIOS32_IRQ_USB_PRIORITY);
 801560c:	2043      	movs	r0, #67	; 0x43
 801560e:	2108      	movs	r1, #8
 8015610:	f7fe bff8 	b.w	8014604 <MIOS32_IRQ_Install>

08015614 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_FS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8015614:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if( USB_OTG_IsHostMode(&USB_OTG_FS_dev) ) {
 8015616:	4808      	ldr	r0, [pc, #32]	; (8015638 <OTG_FS_IRQHandler+0x24>)
 8015618:	f003 f890 	bl	801873c <USB_OTG_IsHostMode>
 801561c:	b118      	cbz	r0, 8015626 <OTG_FS_IRQHandler+0x12>
    USBH_OTG_ISR_Handler(&USB_OTG_FS_dev);
 801561e:	4806      	ldr	r0, [pc, #24]	; (8015638 <OTG_FS_IRQHandler+0x24>)
 8015620:	f005 face 	bl	801abc0 <USBH_OTG_ISR_Handler>
 8015624:	e002      	b.n	801562c <OTG_FS_IRQHandler+0x18>
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8015626:	4804      	ldr	r0, [pc, #16]	; (8015638 <OTG_FS_IRQHandler+0x24>)
 8015628:	f003 fe80 	bl	801932c <USBD_OTG_ISR_Handler>
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_FS_dev);
 801562c:	4802      	ldr	r0, [pc, #8]	; (8015638 <OTG_FS_IRQHandler+0x24>)
#else
  USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
#endif
}
 801562e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBH_OTG_ISR_Handler(&USB_OTG_FS_dev);
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_FS_dev);
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_FS_dev);
 8015632:	f005 bb4f 	b.w	801acd4 <STM32_USBO_OTG_ISR_Handler>
 8015636:	bf00      	nop
 8015638:	20003fac 	.word	0x20003fac

0801563c <USB_OTG_BSP_uDelay>:
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 801563c:	b280      	uxth	r0, r0
 801563e:	f7ff bea9 	b.w	8015394 <MIOS32_DELAY_Wait_uS>

08015642 <USB_OTG_BSP_mDelay>:
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);
 8015642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015646:	4358      	muls	r0, r3
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8015648:	b280      	uxth	r0, r0
 801564a:	f7ff bea3 	b.w	8015394 <MIOS32_DELAY_Wait_uS>
	...

08015650 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8015650:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8015652:	2004      	movs	r0, #4
 8015654:	2101      	movs	r1, #1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8015656:	4d0e      	ldr	r5, [pc, #56]	; (8015690 <USB_OTG_BSP_ConfigVBUS+0x40>)
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8015658:	f001 fb2c 	bl	8016cb4 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801565c:	2000      	movs	r0, #0
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 801565e:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8015660:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015662:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8015666:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801566a:	4669      	mov	r1, sp
 801566c:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801566e:	f88d 3005 	strb.w	r3, [sp, #5]
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8015672:	9400      	str	r4, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8015674:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8015678:	f001 fa20 	bl	8016abc <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 801567c:	4628      	mov	r0, r5
 801567e:	4621      	mov	r1, r4
 8015680:	f001 fa72 	bl	8016b68 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8015684:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8015688:	f7ff fe84 	bl	8015394 <MIOS32_DELAY_Wait_uS>
  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
  
  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 801568c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801568e:	bf00      	nop
 8015690:	40020800 	.word	0x40020800

08015694 <USB_OTG_BSP_DriveVBUS>:
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8015694:	4803      	ldr	r0, [pc, #12]	; (80156a4 <USB_OTG_BSP_DriveVBUS+0x10>)
  
  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8015696:	b911      	cbnz	r1, 801569e <USB_OTG_BSP_DriveVBUS+0xa>
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8015698:	2101      	movs	r1, #1
 801569a:	f001 ba65 	b.w	8016b68 <GPIO_SetBits>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 801569e:	2101      	movs	r1, #1
 80156a0:	f001 ba64 	b.w	8016b6c <GPIO_ResetBits>
 80156a4:	40020800 	.word	0x40020800

080156a8 <MIOS32_USB_IsInitialized>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_IsInitialized(void)
{
  // we assume that initialisation has been done when B-Session valid flag is set
  __IO USB_OTG_GREGS *GREGS = (USB_OTG_GREGS *)(USB_OTG_FS_BASE_ADDR + USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  return (GREGS->GOTGCTL & (1 << 19)) ? 1 : 0;
 80156a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80156ac:	6818      	ldr	r0, [r3, #0]
}
 80156ae:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 80156b2:	4770      	bx	lr

080156b4 <MIOS32_USB_ForceSingleUSB>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_ForceSingleUSB(void)
{
  u8 *single_usb_confirm = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB_CONFIRM;
  u8 *single_usb = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB;
  if( *single_usb_confirm == 0x42 && *single_usb < 0x80 )
 80156b4:	4b06      	ldr	r3, [pc, #24]	; (80156d0 <MIOS32_USB_ForceSingleUSB+0x1c>)
 80156b6:	7818      	ldrb	r0, [r3, #0]
 80156b8:	2842      	cmp	r0, #66	; 0x42
 80156ba:	d106      	bne.n	80156ca <MIOS32_USB_ForceSingleUSB+0x16>
 80156bc:	4905      	ldr	r1, [pc, #20]	; (80156d4 <MIOS32_USB_ForceSingleUSB+0x20>)
 80156be:	7808      	ldrb	r0, [r1, #0]
 80156c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *single_usb;
 80156c4:	bf18      	it	ne
 80156c6:	2000      	movne	r0, #0
 80156c8:	4770      	bx	lr

  return 0;
 80156ca:	2000      	movs	r0, #0
}
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	08003fd4 	.word	0x08003fd4
 80156d4:	08003fd5 	.word	0x08003fd5

080156d8 <MIOS32_USB_ForceDeviceMode>:
#ifdef MIOS32_DONT_USE_USB_HOST
  return 1;
#else
  u8 *enforce_usb_device_confirm = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE_CONFIRM;
  u8 *enforce_usb_device = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE;
  if( *enforce_usb_device_confirm == 0x42 && *enforce_usb_device < 0x80 )
 80156d8:	4b06      	ldr	r3, [pc, #24]	; (80156f4 <MIOS32_USB_ForceDeviceMode+0x1c>)
 80156da:	7818      	ldrb	r0, [r3, #0]
 80156dc:	2842      	cmp	r0, #66	; 0x42
 80156de:	d106      	bne.n	80156ee <MIOS32_USB_ForceDeviceMode+0x16>
 80156e0:	4905      	ldr	r1, [pc, #20]	; (80156f8 <MIOS32_USB_ForceDeviceMode+0x20>)
 80156e2:	7808      	ldrb	r0, [r1, #0]
 80156e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *enforce_usb_device;
 80156e8:	bf18      	it	ne
 80156ea:	2000      	movne	r0, #0
 80156ec:	4770      	bx	lr

  return 0;
 80156ee:	2000      	movs	r0, #0
#endif
}
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	08003fd6 	.word	0x08003fd6
 80156f8:	08003fd7 	.word	0x08003fd7

080156fc <MIOS32_USB_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
 80156fc:	2802      	cmp	r0, #2
//!   </UL>
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
 80156fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015700:	4605      	mov	r5, r0
  // currently only mode 0..2 supported
  if( mode >= 3 )
 8015702:	d85d      	bhi.n	80157c0 <MIOS32_USB_Init+0xc4>
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8015704:	f7ff ffd0 	bl	80156a8 <MIOS32_USB_IsInitialized>

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev, 
 8015708:	4c2f      	ldr	r4, [pc, #188]	; (80157c8 <MIOS32_USB_Init+0xcc>)
            USB_OTG_FS_CORE_ID,
            &USB_FS_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
 801570a:	4b30      	ldr	r3, [pc, #192]	; (80157cc <MIOS32_USB_Init+0xd0>)

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev, 
 801570c:	4a30      	ldr	r2, [pc, #192]	; (80157d0 <MIOS32_USB_Init+0xd4>)
 801570e:	9300      	str	r3, [sp, #0]
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8015710:	4606      	mov	r6, r0

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_FS_dev, 
 8015712:	2101      	movs	r1, #1
 8015714:	4620      	mov	r0, r4
 8015716:	4b2f      	ldr	r3, [pc, #188]	; (80157d4 <MIOS32_USB_Init+0xd8>)
 8015718:	f002 f911 	bl	801793e <USBH_Init>
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
#endif

  // change connection state to disconnected
  USBD_USR_DeviceDisconnected();
 801571c:	f7ff ff02 	bl	8015524 <USBD_USR_DeviceDisconnected>

  if( mode == 0 && usb_is_initialized ) {
 8015720:	bb3d      	cbnz	r5, 8015772 <MIOS32_USB_Init+0x76>
 8015722:	f016 0fff 	tst.w	r6, #255	; 0xff
 8015726:	d024      	beq.n	8015772 <MIOS32_USB_Init+0x76>
#else

    // don't run complete driver init sequence to ensure that the connection doesn't get lost!

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);
 8015728:	4620      	mov	r0, r4
 801572a:	f7ff ff1b 	bl	8015564 <USB_OTG_BSP_Init>

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 801572e:	492a      	ldr	r1, [pc, #168]	; (80157d8 <MIOS32_USB_Init+0xdc>)
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8015730:	4a2a      	ldr	r2, [pc, #168]	; (80157dc <MIOS32_USB_Init+0xe0>)
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8015732:	4b2b      	ldr	r3, [pc, #172]	; (80157e0 <MIOS32_USB_Init+0xe4>)

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8015734:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_FS_dev, USB_OTG_FS_CORE_ID);
 8015738:	4620      	mov	r0, r4
 801573a:	2101      	movs	r1, #1
    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_FS_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_FS_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
    USB_OTG_FS_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 801573c:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    USB_OTG_FS_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8015740:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_FS_dev, USB_OTG_FS_CORE_ID);
 8015744:	f002 fee6 	bl	8018514 <USB_OTG_SelectCore>

    // enable interrupts
    USB_OTG_EnableGlobalInt(&USB_OTG_FS_dev);
 8015748:	4620      	mov	r0, r4
 801574a:	f002 ff94 	bl	8018676 <USB_OTG_EnableGlobalInt>
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
 801574e:	4620      	mov	r0, r4
 8015750:	f003 fa00 	bl	8018b54 <USB_OTG_EnableDevInt>
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
 8015754:	4620      	mov	r0, r4
 8015756:	f7ff ff59 	bl	801560c <USB_OTG_BSP_EnableInterrupt>
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;
 801575a:	2003      	movs	r0, #3
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
 801575c:	2101      	movs	r1, #1
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;
 801575e:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_FS_dev, 1);
 8015762:	4620      	mov	r0, r4
    USB_OTG_EnableDevInt(&USB_OTG_FS_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_FS_dev);
#endif

    // select configuration
    USB_OTG_FS_dev.dev.device_config = 1;
 8015764:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
    USB_OTG_FS_dev.dev.device_status = USB_OTG_CONFIGURED;

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_FS_dev, 1);
 8015768:	f7ff fee2 	bl	8015530 <MIOS32_USB_CLASS_Init>

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
 801576c:	f7ff fedd 	bl	801552a <USBD_USR_DeviceConfigured>
 8015770:	e011      	b.n	8015796 <MIOS32_USB_Init+0x9a>
    // init USB device and driver
    USBD_Init(&USB_OTG_FS_dev,
	      USB_OTG_FS_CORE_ID,
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);
 8015772:	481a      	ldr	r0, [pc, #104]	; (80157dc <MIOS32_USB_Init+0xe0>)

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
  } else {
    // init USB device and driver
    USBD_Init(&USB_OTG_FS_dev,
 8015774:	4a1a      	ldr	r2, [pc, #104]	; (80157e0 <MIOS32_USB_Init+0xe4>)
 8015776:	4b18      	ldr	r3, [pc, #96]	; (80157d8 <MIOS32_USB_Init+0xdc>)
 8015778:	9000      	str	r0, [sp, #0]
 801577a:	2101      	movs	r1, #1
 801577c:	4812      	ldr	r0, [pc, #72]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 801577e:	f001 fdfd 	bl	801737c <USBD_Init>
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);

    // disconnect device
    DCD_DevDisconnect(&USB_OTG_FS_dev);
 8015782:	4811      	ldr	r0, [pc, #68]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 8015784:	f003 fd84 	bl	8019290 <DCD_DevDisconnect>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8015788:	f24c 3050 	movw	r0, #50000	; 0xc350
 801578c:	f7ff fe02 	bl	8015394 <MIOS32_DELAY_Wait_uS>

    // wait 50 mS
    USB_OTG_BSP_mDelay(50);

    // connect device
    DCD_DevConnect(&USB_OTG_FS_dev);
 8015790:	480d      	ldr	r0, [pc, #52]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 8015792:	f003 fd7c 	bl	801928e <DCD_DevConnect>
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
 8015796:	f7ff ff9f 	bl	80156d8 <MIOS32_USB_ForceDeviceMode>
 801579a:	b920      	cbnz	r0, 80157a6 <MIOS32_USB_Init+0xaa>
 801579c:	4c11      	ldr	r4, [pc, #68]	; (80157e4 <MIOS32_USB_Init+0xe8>)
 801579e:	6921      	ldr	r1, [r4, #16]
 80157a0:	f411 6480 	ands.w	r4, r1, #1024	; 0x400
 80157a4:	d005      	beq.n	80157b2 <MIOS32_USB_Init+0xb6>
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, DEVICE_MODE);
 80157a6:	4808      	ldr	r0, [pc, #32]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 80157a8:	2100      	movs	r1, #0
 80157aa:	f002 ffab 	bl	8018704 <USB_OTG_SetCurrentMode>
    USB_OTG_DriveVbus(&USB_OTG_FS_dev, 1);
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, HOST_MODE);
  }
#endif

  return 0; // no error
 80157ae:	2000      	movs	r0, #0
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, DEVICE_MODE);
 80157b0:	e008      	b.n	80157c4 <MIOS32_USB_Init+0xc8>
  } else {
    USB_OTG_DriveVbus(&USB_OTG_FS_dev, 1);
 80157b2:	4805      	ldr	r0, [pc, #20]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 80157b4:	2101      	movs	r1, #1
 80157b6:	f002 fffc 	bl	80187b2 <USB_OTG_DriveVbus>
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, HOST_MODE);
 80157ba:	4803      	ldr	r0, [pc, #12]	; (80157c8 <MIOS32_USB_Init+0xcc>)
 80157bc:	2101      	movs	r1, #1
 80157be:	e7f4      	b.n	80157aa <MIOS32_USB_Init+0xae>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode
 80157c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USB_OTG_SetCurrentMode(&USB_OTG_FS_dev, HOST_MODE);
  }
#endif

  return 0; // no error
}
 80157c4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80157c6:	bf00      	nop
 80157c8:	20003fac 	.word	0x20003fac
 80157cc:	0801f7c4 	.word	0x0801f7c4
 80157d0:	20003f08 	.word	0x20003f08
 80157d4:	0801f904 	.word	0x0801f904
 80157d8:	0801f80c 	.word	0x0801f80c
 80157dc:	0801f8e8 	.word	0x0801f8e8
 80157e0:	0801f858 	.word	0x0801f858
 80157e4:	40020000 	.word	0x40020000

080157e8 <USBH_ClassRequest>:
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_Status status = USBH_OK;
  return status;
}
 80157e8:	2000      	movs	r0, #0
 80157ea:	4770      	bx	lr

080157ec <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80157ec:	b538      	push	{r3, r4, r5, lr}
  if( USBH_hc_num_out ) {
 80157ee:	4d0c      	ldr	r5, [pc, #48]	; (8015820 <USBH_InterfaceDeInit+0x34>)
 80157f0:	7829      	ldrb	r1, [r5, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80157f2:	4604      	mov	r4, r0
  if( USBH_hc_num_out ) {
 80157f4:	b139      	cbz	r1, 8015806 <USBH_InterfaceDeInit+0x1a>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_out);
 80157f6:	f003 f976 	bl	8018ae6 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_out);
 80157fa:	4620      	mov	r0, r4
 80157fc:	7829      	ldrb	r1, [r5, #0]
 80157fe:	f002 fbb9 	bl	8017f74 <USBH_Free_Channel>
    USBH_hc_num_out = 0;     /* Reset the Channel as Free */
 8015802:	2300      	movs	r3, #0
 8015804:	702b      	strb	r3, [r5, #0]
  }

  if( USBH_hc_num_in ) {
 8015806:	4d07      	ldr	r5, [pc, #28]	; (8015824 <USBH_InterfaceDeInit+0x38>)
 8015808:	7829      	ldrb	r1, [r5, #0]
 801580a:	b141      	cbz	r1, 801581e <USBH_InterfaceDeInit+0x32>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_in);
 801580c:	4620      	mov	r0, r4
 801580e:	f003 f96a 	bl	8018ae6 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_in);
 8015812:	4620      	mov	r0, r4
 8015814:	7829      	ldrb	r1, [r5, #0]
 8015816:	f002 fbad 	bl	8017f74 <USBH_Free_Channel>
    USBH_hc_num_in = 0;     /* Reset the Channel as Free */
 801581a:	2000      	movs	r0, #0
 801581c:	7028      	strb	r0, [r5, #0]
 801581e:	bd38      	pop	{r3, r4, r5, pc}
 8015820:	20000f03 	.word	0x20000f03
 8015824:	20000efc 	.word	0x20000efc

08015828 <MIOS32_USB_MIDI_RxBufferHandler>:
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
{
 8015828:	b570      	push	{r4, r5, r6, lr}
  s16 count;

  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL ) {
 801582a:	4c24      	ldr	r4, [pc, #144]	; (80158bc <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
 801582c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8015830:	2b00      	cmp	r3, #0
 8015832:	d042      	beq.n	80158ba <MIOS32_USB_MIDI_RxBufferHandler+0x92>
    return;
  }

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8015834:	f7fe febe 	bl	80145b4 <MIOS32_IRQ_Disable>

  // check if we can receive new data and get packages to be received from OUT pipe
  u32 ep_num = MIOS32_USB_MIDI_DATA_OUT_EP & 0x7f;
  USB_OTG_EP *ep = &USB_OTG_FS_dev.dev.out_ep[ep_num];
  if( rx_buffer_new_data && (count=ep->xfer_count>>2) ) {
 8015838:	4821      	ldr	r0, [pc, #132]	; (80158c0 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)
 801583a:	7801      	ldrb	r1, [r0, #0]
 801583c:	2900      	cmp	r1, #0
 801583e:	d038      	beq.n	80158b2 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8015840:	f8d4 63dc 	ldr.w	r6, [r4, #988]	; 0x3dc
 8015844:	08b6      	lsrs	r6, r6, #2
 8015846:	b2b3      	uxth	r3, r6
 8015848:	2b00      	cmp	r3, #0
 801584a:	d032      	beq.n	80158b2 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
    // check if buffer is free
    if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 801584c:	4a1d      	ldr	r2, [pc, #116]	; (80158c4 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 801584e:	8810      	ldrh	r0, [r2, #0]
 8015850:	b281      	uxth	r1, r0
 8015852:	b21b      	sxth	r3, r3
 8015854:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 8015858:	4293      	cmp	r3, r2
 801585a:	da2a      	bge.n	80158b2 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 801585c:	2400      	movs	r4, #0

      // copy received packages into receive buffer
      // this operation should be atomic
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;
 801585e:	4d1a      	ldr	r5, [pc, #104]	; (80158c8 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8015860:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8015864:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8015868:	3010      	adds	r0, #16
 801586a:	4629      	mov	r1, r5
 801586c:	f7fd fc1e 	bl	80130ac <MIOS32_MIDI_SendPackageToRxCallback>
 8015870:	b988      	cbnz	r0, 8015896 <MIOS32_USB_MIDI_RxBufferHandler+0x6e>
	  rx_buffer[rx_buffer_head] = package.ALL;
 8015872:	4b16      	ldr	r3, [pc, #88]	; (80158cc <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
 8015874:	4a16      	ldr	r2, [pc, #88]	; (80158d0 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 8015876:	8819      	ldrh	r1, [r3, #0]
 8015878:	b289      	uxth	r1, r1
 801587a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 801587e:	8819      	ldrh	r1, [r3, #0]
 8015880:	1c4a      	adds	r2, r1, #1
 8015882:	b291      	uxth	r1, r2
 8015884:	293f      	cmp	r1, #63	; 0x3f
 8015886:	8019      	strh	r1, [r3, #0]
	    rx_buffer_head = 0;
 8015888:	bf88      	it	hi
 801588a:	8018      	strhhi	r0, [r3, #0]
	  ++rx_buffer_size;
 801588c:	480d      	ldr	r0, [pc, #52]	; (80158c4 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 801588e:	8803      	ldrh	r3, [r0, #0]
 8015890:	1c5a      	adds	r2, r3, #1
 8015892:	b291      	uxth	r1, r2
 8015894:	8001      	strh	r1, [r0, #0]
 8015896:	3401      	adds	r4, #1
/////////////////////////////////////////////////////////////////////////////
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
 8015898:	1b30      	subs	r0, r6, r4

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
	    rx_buffer_head = 0;
	  ++rx_buffer_size;
	}
      } while( --count > 0 );
 801589a:	b203      	sxth	r3, r0
 801589c:	2b00      	cmp	r3, #0
 801589e:	dcde      	bgt.n	801585e <MIOS32_USB_MIDI_RxBufferHandler+0x36>

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 80158a0:	4907      	ldr	r1, [pc, #28]	; (80158c0 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 80158a2:	4806      	ldr	r0, [pc, #24]	; (80158bc <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
	  ++rx_buffer_size;
	}
      } while( --count > 0 );

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 80158a4:	2200      	movs	r2, #0
 80158a6:	700a      	strb	r2, [r1, #0]

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_FS_dev,
 80158a8:	2340      	movs	r3, #64	; 0x40
 80158aa:	2102      	movs	r1, #2
 80158ac:	4a06      	ldr	r2, [pc, #24]	; (80158c8 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 80158ae:	f003 fc72 	bl	8019196 <DCD_EP_PrepareRx>
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
}
 80158b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		       (uint8_t*)(USB_rx_buffer),
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
 80158b6:	f7fe be91 	b.w	80145dc <MIOS32_IRQ_Enable>
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	20003fac 	.word	0x20003fac
 80158c0:	20000ef2 	.word	0x20000ef2
 80158c4:	20000da6 	.word	0x20000da6
 80158c8:	20004a40 	.word	0x20004a40
 80158cc:	20000ef4 	.word	0x20000ef4
 80158d0:	20000df0 	.word	0x20000df0

080158d4 <MIOS32_USB_MIDI_TxBufferHandler>:
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL )
 80158d4:	4b23      	ldr	r3, [pc, #140]	; (8015964 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 80158d6:	f8d3 05e4 	ldr.w	r0, [r3, #1508]	; 0x5e4
//!
//! This handler sends the new packages through the IN pipe if the buffer 
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
 80158da:	b510      	push	{r4, lr}
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_FS_dev.dev.class_cb == NULL )
 80158dc:	2800      	cmp	r0, #0
 80158de:	d03f      	beq.n	8015960 <MIOS32_USB_MIDI_TxBufferHandler+0x8c>
  //   - last transfer finished
  //   - new packages are in the buffer
  //   - the device is configured

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 80158e0:	f7fe fe68 	bl	80145b4 <MIOS32_IRQ_Disable>

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
 80158e4:	4920      	ldr	r1, [pc, #128]	; (8015968 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)
 80158e6:	780a      	ldrb	r2, [r1, #0]
 80158e8:	2a00      	cmp	r2, #0
 80158ea:	d135      	bne.n	8015958 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 80158ec:	4b1f      	ldr	r3, [pc, #124]	; (801596c <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 80158ee:	8818      	ldrh	r0, [r3, #0]
 80158f0:	b281      	uxth	r1, r0
 80158f2:	2900      	cmp	r1, #0
 80158f4:	d030      	beq.n	8015958 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 80158f6:	4a1e      	ldr	r2, [pc, #120]	; (8015970 <MIOS32_USB_MIDI_TxBufferHandler+0x9c>)
 80158f8:	7810      	ldrb	r0, [r2, #0]
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d02c      	beq.n	8015958 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 80158fe:	8819      	ldrh	r1, [r3, #0]
 8015900:	b28a      	uxth	r2, r1
 8015902:	2a10      	cmp	r2, #16
 8015904:	bf98      	it	ls
 8015906:	8819      	ldrhls	r1, [r3, #0]

    // notify that new package is sent
    tx_buffer_busy = 1;
 8015908:	4b17      	ldr	r3, [pc, #92]	; (8015968 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 801590a:	bf94      	ite	ls
 801590c:	b289      	uxthls	r1, r1
 801590e:	2110      	movhi	r1, #16

    // notify that new package is sent
    tx_buffer_busy = 1;
 8015910:	2001      	movs	r0, #1
 8015912:	7018      	strb	r0, [r3, #0]

    // send to IN pipe
    tx_buffer_size -= count;
 8015914:	4815      	ldr	r0, [pc, #84]	; (801596c <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 8015916:	8802      	ldrh	r2, [r0, #0]
 8015918:	1a53      	subs	r3, r2, r1
 801591a:	b29a      	uxth	r2, r3
 801591c:	8002      	strh	r2, [r0, #0]

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 801591e:	2200      	movs	r2, #0
 8015920:	b20b      	sxth	r3, r1
 8015922:	429a      	cmp	r2, r3
 8015924:	da12      	bge.n	801594c <MIOS32_USB_MIDI_TxBufferHandler+0x78>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8015926:	4b13      	ldr	r3, [pc, #76]	; (8015974 <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 8015928:	4813      	ldr	r0, [pc, #76]	; (8015978 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 801592a:	881c      	ldrh	r4, [r3, #0]
 801592c:	b2a4      	uxth	r4, r4
 801592e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8015932:	4812      	ldr	r0, [pc, #72]	; (801597c <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8015934:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8015938:	8818      	ldrh	r0, [r3, #0]
 801593a:	3001      	adds	r0, #1
 801593c:	b280      	uxth	r0, r0
 801593e:	283f      	cmp	r0, #63	; 0x3f
 8015940:	8018      	strh	r0, [r3, #0]
 8015942:	d901      	bls.n	8015948 <MIOS32_USB_MIDI_TxBufferHandler+0x74>
	tx_buffer_tail = 0;
 8015944:	2000      	movs	r0, #0
 8015946:	8018      	strh	r0, [r3, #0]
    // send to IN pipe
    tx_buffer_size -= count;

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8015948:	3201      	adds	r2, #1
 801594a:	e7e9      	b.n	8015920 <MIOS32_USB_MIDI_TxBufferHandler+0x4c>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	tx_buffer_tail = 0;
    }

    DCD_EP_Tx(&USB_OTG_FS_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
 801594c:	4805      	ldr	r0, [pc, #20]	; (8015964 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 801594e:	4a0b      	ldr	r2, [pc, #44]	; (801597c <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8015950:	2181      	movs	r1, #129	; 0x81
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	f003 fc3c 	bl	80191d0 <DCD_EP_Tx>
  }

  MIOS32_IRQ_Enable();
}
 8015958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    DCD_EP_Tx(&USB_OTG_FS_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
  }

  MIOS32_IRQ_Enable();
 801595c:	f7fe be3e 	b.w	80145dc <MIOS32_IRQ_Enable>
 8015960:	bd10      	pop	{r4, pc}
 8015962:	bf00      	nop
 8015964:	20003fac 	.word	0x20003fac
 8015968:	20000dec 	.word	0x20000dec
 801596c:	20000ef8 	.word	0x20000ef8
 8015970:	20000efd 	.word	0x20000efd
 8015974:	20000efa 	.word	0x20000efa
 8015978:	20000ca4 	.word	0x20000ca4
 801597c:	20000dac 	.word	0x20000dac

08015980 <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8015980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( transfer_possible ) {
 8015982:	4b68      	ldr	r3, [pc, #416]	; (8015b24 <USBH_Handle+0x1a4>)
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8015984:	460f      	mov	r7, r1
  if( transfer_possible ) {
 8015986:	7819      	ldrb	r1, [r3, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8015988:	4605      	mov	r5, r0
  if( transfer_possible ) {
 801598a:	2900      	cmp	r1, #0
 801598c:	f000 80c8 	beq.w	8015b20 <USBH_Handle+0x1a0>
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {
 8015990:	f003 ff0b 	bl	80197aa <HCD_IsDeviceConnected>
 8015994:	2800      	cmp	r0, #0
 8015996:	f000 80c3 	beq.w	8015b20 <USBH_Handle+0x1a0>

      u8 force_rx_req = 0;

      if( USBH_MIDI_transfer_state == USBH_MIDI_TX ) {
 801599a:	4c63      	ldr	r4, [pc, #396]	; (8015b28 <USBH_Handle+0x1a8>)
 801599c:	7820      	ldrb	r0, [r4, #0]
 801599e:	2802      	cmp	r0, #2
 80159a0:	d11b      	bne.n	80159da <USBH_Handle+0x5a>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_out);
 80159a2:	4e62      	ldr	r6, [pc, #392]	; (8015b2c <USBH_Handle+0x1ac>)
 80159a4:	4628      	mov	r0, r5
 80159a6:	7831      	ldrb	r1, [r6, #0]
 80159a8:	f003 ff06 	bl	80197b8 <HCD_GetURB_State>

        if( URB_State == URB_IDLE ) {
 80159ac:	b180      	cbz	r0, 80159d0 <USBH_Handle+0x50>
	  // wait...
	} else if( URB_State == URB_DONE ) {
 80159ae:	2801      	cmp	r0, #1
 80159b0:	d063      	beq.n	8015a7a <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	} else if( URB_State == URB_STALL ) {
 80159b2:	2804      	cmp	r0, #4
 80159b4:	d103      	bne.n	80159be <USBH_Handle+0x3e>
	  // Issue Clear Feature on OUT endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkOutEp, USBH_hc_num_out) == USBH_OK ) {
 80159b6:	4628      	mov	r0, r5
 80159b8:	4639      	mov	r1, r7
 80159ba:	4a5d      	ldr	r2, [pc, #372]	; (8015b30 <USBH_Handle+0x1b0>)
 80159bc:	e052      	b.n	8015a64 <USBH_Handle+0xe4>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
 80159be:	2802      	cmp	r0, #2
 80159c0:	d108      	bne.n	80159d4 <USBH_Handle+0x54>
	  // send again
	  USBH_BulkSendData(&USB_OTG_FS_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 80159c2:	4b5c      	ldr	r3, [pc, #368]	; (8015b34 <USBH_Handle+0x1b4>)
 80159c4:	485c      	ldr	r0, [pc, #368]	; (8015b38 <USBH_Handle+0x1b8>)
 80159c6:	781a      	ldrb	r2, [r3, #0]
 80159c8:	495c      	ldr	r1, [pc, #368]	; (8015b3c <USBH_Handle+0x1bc>)
 80159ca:	7833      	ldrb	r3, [r6, #0]
 80159cc:	f002 fb5e 	bl	801808c <USBH_BulkSendData>
  if( transfer_possible ) {
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {

      u8 force_rx_req = 0;
 80159d0:	2000      	movs	r0, #0
 80159d2:	e054      	b.n	8015a7e <USBH_Handle+0xfe>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
	  // send again
	  USBH_BulkSendData(&USB_OTG_FS_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
	} else if( URB_State == URB_ERROR ) {
 80159d4:	2803      	cmp	r0, #3
 80159d6:	d1fb      	bne.n	80159d0 <USBH_Handle+0x50>
 80159d8:	e04f      	b.n	8015a7a <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	}
      } else if( USBH_MIDI_transfer_state == USBH_MIDI_RX ) {
 80159da:	2801      	cmp	r0, #1
 80159dc:	d1f8      	bne.n	80159d0 <USBH_Handle+0x50>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_in);
 80159de:	4e58      	ldr	r6, [pc, #352]	; (8015b40 <USBH_Handle+0x1c0>)
 80159e0:	4628      	mov	r0, r5
 80159e2:	7831      	ldrb	r1, [r6, #0]
 80159e4:	f003 fee8 	bl	80197b8 <HCD_GetURB_State>
        if( URB_State == URB_IDLE || URB_State == URB_DONE ) {
 80159e8:	2801      	cmp	r0, #1
 80159ea:	d836      	bhi.n	8015a5a <USBH_Handle+0xda>
	  // data received from receive
	  //u32 count = HCD_GetXferCnt(pdev, USBH_hc_num_in) / 4;
	  // Note: HCD_GetXferCnt returns a counter which isn't zeroed immediately on a USBH_BulkReceiveData() call
	  u32 count = USB_OTG_FS_dev.host.hc[USBH_hc_num_in].xfer_count / 4;
 80159ec:	7835      	ldrb	r5, [r6, #0]
 80159ee:	4952      	ldr	r1, [pc, #328]	; (8015b38 <USBH_Handle+0x1b8>)
 80159f0:	eb01 1045 	add.w	r0, r1, r5, lsl #5
 80159f4:	f8d0 38a4 	ldr.w	r3, [r0, #2212]	; 0x8a4

	  // push data into FIFO
	  if( !count ) {
 80159f8:	089d      	lsrs	r5, r3, #2
 80159fa:	d101      	bne.n	8015a00 <USBH_Handle+0x80>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 80159fc:	7025      	strb	r5, [r4, #0]
 80159fe:	e7e7      	b.n	80159d0 <USBH_Handle+0x50>
	  } else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 8015a00:	4a50      	ldr	r2, [pc, #320]	; (8015b44 <USBH_Handle+0x1c4>)
 8015a02:	8811      	ldrh	r1, [r2, #0]
 8015a04:	b288      	uxth	r0, r1
 8015a06:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 8015a0a:	429d      	cmp	r5, r3
 8015a0c:	d2e0      	bcs.n	80159d0 <USBH_Handle+0x50>
	    u32 *buf_addr = (u32 *)USB_rx_buffer;

	    // copy received packages into receive buffer
	    // this operation should be atomic
	    MIOS32_IRQ_Disable();
 8015a0e:	f7fe fdd1 	bl	80145b4 <MIOS32_IRQ_Disable>
 8015a12:	4e4d      	ldr	r6, [pc, #308]	; (8015b48 <USBH_Handle+0x1c8>)
	    do {
	      mios32_midi_package_t package;
	      package.ALL = *buf_addr++;
 8015a14:	f856 4f04 	ldr.w	r4, [r6, #4]!

	      if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8015a18:	f3c4 1003 	ubfx	r0, r4, #4, #4
 8015a1c:	3010      	adds	r0, #16
 8015a1e:	4621      	mov	r1, r4
 8015a20:	f7fd fb44 	bl	80130ac <MIOS32_MIDI_SendPackageToRxCallback>
 8015a24:	b988      	cbnz	r0, 8015a4a <USBH_Handle+0xca>
		rx_buffer[rx_buffer_head] = package.ALL;
 8015a26:	4b49      	ldr	r3, [pc, #292]	; (8015b4c <USBH_Handle+0x1cc>)
 8015a28:	881a      	ldrh	r2, [r3, #0]
 8015a2a:	b291      	uxth	r1, r2
 8015a2c:	4a48      	ldr	r2, [pc, #288]	; (8015b50 <USBH_Handle+0x1d0>)
 8015a2e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]

		if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8015a32:	8819      	ldrh	r1, [r3, #0]
 8015a34:	1c4a      	adds	r2, r1, #1
 8015a36:	b291      	uxth	r1, r2
 8015a38:	293f      	cmp	r1, #63	; 0x3f
 8015a3a:	8019      	strh	r1, [r3, #0]
		  rx_buffer_head = 0;
 8015a3c:	bf88      	it	hi
 8015a3e:	8018      	strhhi	r0, [r3, #0]
		++rx_buffer_size;
 8015a40:	4840      	ldr	r0, [pc, #256]	; (8015b44 <USBH_Handle+0x1c4>)
 8015a42:	8803      	ldrh	r3, [r0, #0]
 8015a44:	1c5a      	adds	r2, r3, #1
 8015a46:	b291      	uxth	r1, r2
 8015a48:	8001      	strh	r1, [r0, #0]
	      }
	    } while( --count > 0 );
 8015a4a:	3d01      	subs	r5, #1
 8015a4c:	d1e2      	bne.n	8015a14 <USBH_Handle+0x94>
	    MIOS32_IRQ_Enable();
 8015a4e:	f7fe fdc5 	bl	80145dc <MIOS32_IRQ_Enable>

	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8015a52:	4835      	ldr	r0, [pc, #212]	; (8015b28 <USBH_Handle+0x1a8>)
 8015a54:	7005      	strb	r5, [r0, #0]
	    force_rx_req = 1;
 8015a56:	2001      	movs	r0, #1
 8015a58:	e011      	b.n	8015a7e <USBH_Handle+0xfe>
	  }
	} else if( URB_State == URB_STALL ) {
 8015a5a:	2804      	cmp	r0, #4
 8015a5c:	d109      	bne.n	8015a72 <USBH_Handle+0xf2>
	  // Issue Clear Feature on IN endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkInEp, USBH_hc_num_in) == USBH_OK ) {
 8015a5e:	4a3d      	ldr	r2, [pc, #244]	; (8015b54 <USBH_Handle+0x1d4>)
 8015a60:	4628      	mov	r0, r5
 8015a62:	4639      	mov	r1, r7
 8015a64:	7812      	ldrb	r2, [r2, #0]
 8015a66:	7833      	ldrb	r3, [r6, #0]
 8015a68:	f002 fce6 	bl	8018438 <USBH_ClrFeature>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	d1af      	bne.n	80159d0 <USBH_Handle+0x50>
 8015a70:	e004      	b.n	8015a7c <USBH_Handle+0xfc>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_ERROR || URB_State == URB_NOTREADY ) {
 8015a72:	1e82      	subs	r2, r0, #2
 8015a74:	b2d3      	uxtb	r3, r2
 8015a76:	2b01      	cmp	r3, #1
 8015a78:	d8aa      	bhi.n	80159d0 <USBH_Handle+0x50>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	7020      	strb	r0, [r4, #0]
	}
      }


      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
 8015a7e:	4a2a      	ldr	r2, [pc, #168]	; (8015b28 <USBH_Handle+0x1a8>)
 8015a80:	7811      	ldrb	r1, [r2, #0]
 8015a82:	2900      	cmp	r1, #0
 8015a84:	d14c      	bne.n	8015b20 <USBH_Handle+0x1a0>
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
 8015a86:	2800      	cmp	r0, #0
 8015a88:	d13f      	bne.n	8015b0a <USBH_Handle+0x18a>
 8015a8a:	4c33      	ldr	r4, [pc, #204]	; (8015b58 <USBH_Handle+0x1d8>)
 8015a8c:	8820      	ldrh	r0, [r4, #0]
 8015a8e:	b283      	uxth	r3, r0
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d03a      	beq.n	8015b0a <USBH_Handle+0x18a>
 8015a94:	4a23      	ldr	r2, [pc, #140]	; (8015b24 <USBH_Handle+0x1a4>)
 8015a96:	7811      	ldrb	r1, [r2, #0]
 8015a98:	2900      	cmp	r1, #0
 8015a9a:	d036      	beq.n	8015b0a <USBH_Handle+0x18a>
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();
 8015a9c:	f7fe fd8a 	bl	80145b4 <MIOS32_IRQ_Disable>

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8015aa0:	482e      	ldr	r0, [pc, #184]	; (8015b5c <USBH_Handle+0x1dc>)
 8015aa2:	8821      	ldrh	r1, [r4, #0]
 8015aa4:	8802      	ldrh	r2, [r0, #0]
 8015aa6:	b28b      	uxth	r3, r1
 8015aa8:	0891      	lsrs	r1, r2, #2
 8015aaa:	428b      	cmp	r3, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8015aac:	4b2a      	ldr	r3, [pc, #168]	; (8015b58 <USBH_Handle+0x1d8>)
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8015aae:	bf98      	it	ls
 8015ab0:	8821      	ldrhls	r1, [r4, #0]

	  // send to IN pipe
	  tx_buffer_size -= count;
 8015ab2:	8818      	ldrh	r0, [r3, #0]
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8015ab4:	b28a      	uxth	r2, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8015ab6:	1a81      	subs	r1, r0, r2
 8015ab8:	b288      	uxth	r0, r1
 8015aba:	8018      	strh	r0, [r3, #0]

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8015abc:	2300      	movs	r3, #0
 8015abe:	b211      	sxth	r1, r2
 8015ac0:	428b      	cmp	r3, r1
 8015ac2:	da12      	bge.n	8015aea <USBH_Handle+0x16a>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8015ac4:	4926      	ldr	r1, [pc, #152]	; (8015b60 <USBH_Handle+0x1e0>)
 8015ac6:	4827      	ldr	r0, [pc, #156]	; (8015b64 <USBH_Handle+0x1e4>)
 8015ac8:	880c      	ldrh	r4, [r1, #0]
 8015aca:	b2a4      	uxth	r4, r4
 8015acc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8015ad0:	481a      	ldr	r0, [pc, #104]	; (8015b3c <USBH_Handle+0x1bc>)
 8015ad2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8015ad6:	8808      	ldrh	r0, [r1, #0]
 8015ad8:	3001      	adds	r0, #1
 8015ada:	b280      	uxth	r0, r0
 8015adc:	283f      	cmp	r0, #63	; 0x3f
 8015ade:	8008      	strh	r0, [r1, #0]
 8015ae0:	d901      	bls.n	8015ae6 <USBH_Handle+0x166>
	      tx_buffer_tail = 0;
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	8008      	strh	r0, [r1, #0]
	  // send to IN pipe
	  tx_buffer_size -= count;

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	e7e9      	b.n	8015abe <USBH_Handle+0x13e>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8015aea:	0092      	lsls	r2, r2, #2
 8015aec:	4b11      	ldr	r3, [pc, #68]	; (8015b34 <USBH_Handle+0x1b4>)
	  USBH_BulkSendData(&USB_OTG_FS_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8015aee:	4913      	ldr	r1, [pc, #76]	; (8015b3c <USBH_Handle+0x1bc>)
 8015af0:	4811      	ldr	r0, [pc, #68]	; (8015b38 <USBH_Handle+0x1b8>)
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8015af2:	b2d2      	uxtb	r2, r2
 8015af4:	701a      	strb	r2, [r3, #0]
	  USBH_BulkSendData(&USB_OTG_FS_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8015af6:	4b0d      	ldr	r3, [pc, #52]	; (8015b2c <USBH_Handle+0x1ac>)
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	f002 fac7 	bl	801808c <USBH_BulkSendData>

	  USBH_MIDI_transfer_state = USBH_MIDI_TX;
 8015afe:	490a      	ldr	r1, [pc, #40]	; (8015b28 <USBH_Handle+0x1a8>)
 8015b00:	2002      	movs	r0, #2
 8015b02:	7008      	strb	r0, [r1, #0]

	  MIOS32_IRQ_Enable();
 8015b04:	f7fe fd6a 	bl	80145dc <MIOS32_IRQ_Enable>
 8015b08:	e00a      	b.n	8015b20 <USBH_Handle+0x1a0>
	} else {
	  // request data from device
	  USBH_BulkReceiveData(&USB_OTG_FS_dev, (u8 *)USB_rx_buffer, USBH_BulkInEpSize, USBH_hc_num_in);
 8015b0a:	4b17      	ldr	r3, [pc, #92]	; (8015b68 <USBH_Handle+0x1e8>)
 8015b0c:	480a      	ldr	r0, [pc, #40]	; (8015b38 <USBH_Handle+0x1b8>)
 8015b0e:	781a      	ldrb	r2, [r3, #0]
 8015b10:	4b0b      	ldr	r3, [pc, #44]	; (8015b40 <USBH_Handle+0x1c0>)
 8015b12:	4916      	ldr	r1, [pc, #88]	; (8015b6c <USBH_Handle+0x1ec>)
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	f002 fad3 	bl	80180c0 <USBH_BulkReceiveData>
	  USBH_MIDI_transfer_state = USBH_MIDI_RX;
 8015b1a:	4a03      	ldr	r2, [pc, #12]	; (8015b28 <USBH_Handle+0x1a8>)
 8015b1c:	2001      	movs	r0, #1
 8015b1e:	7010      	strb	r0, [r2, #0]
      }
    }
  }

  return USBH_OK;
}
 8015b20:	2000      	movs	r0, #0
 8015b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b24:	20000efd 	.word	0x20000efd
 8015b28:	20000f02 	.word	0x20000f02
 8015b2c:	20000f03 	.word	0x20000f03
 8015b30:	20000da8 	.word	0x20000da8
 8015b34:	20000ef6 	.word	0x20000ef6
 8015b38:	20003fac 	.word	0x20003fac
 8015b3c:	20000dac 	.word	0x20000dac
 8015b40:	20000efc 	.word	0x20000efc
 8015b44:	20000da6 	.word	0x20000da6
 8015b48:	20004a3c 	.word	0x20004a3c
 8015b4c:	20000ef4 	.word	0x20000ef4
 8015b50:	20000df0 	.word	0x20000df0
 8015b54:	20000da9 	.word	0x20000da9
 8015b58:	20000ef8 	.word	0x20000ef8
 8015b5c:	20000f00 	.word	0x20000f00
 8015b60:	20000efa 	.word	0x20000efa
 8015b64:	20000ca4 	.word	0x20000ca4
 8015b68:	20000ef7 	.word	0x20000ef7
 8015b6c:	20004a40 	.word	0x20004a40

08015b70 <MIOS32_USB_MIDI_Init>:
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  return 0; // no error
}
 8015b70:	2800      	cmp	r0, #0
 8015b72:	bf14      	ite	ne
 8015b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8015b78:	2000      	moveq	r0, #0
 8015b7a:	4770      	bx	lr

08015b7c <MIOS32_USB_MIDI_ChangeConnectionState>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8015b7c:	490e      	ldr	r1, [pc, #56]	; (8015bb8 <MIOS32_USB_MIDI_ChangeConnectionState+0x3c>)
 8015b7e:	2300      	movs	r3, #0
//! \param[in] connected status (1 if connected)
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
 8015b80:	b510      	push	{r4, lr}
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8015b82:	800b      	strh	r3, [r1, #0]
 8015b84:	4c0d      	ldr	r4, [pc, #52]	; (8015bbc <MIOS32_USB_MIDI_ChangeConnectionState+0x40>)
 8015b86:	490e      	ldr	r1, [pc, #56]	; (8015bc0 <MIOS32_USB_MIDI_ChangeConnectionState+0x44>)
 8015b88:	8023      	strh	r3, [r4, #0]
 8015b8a:	800b      	strh	r3, [r1, #0]
  rx_buffer_new_data = 0; // no data received yet
 8015b8c:	4c0d      	ldr	r4, [pc, #52]	; (8015bc4 <MIOS32_USB_MIDI_ChangeConnectionState+0x48>)
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8015b8e:	490e      	ldr	r1, [pc, #56]	; (8015bc8 <MIOS32_USB_MIDI_ChangeConnectionState+0x4c>)
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
 8015b90:	7023      	strb	r3, [r4, #0]
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8015b92:	800b      	strh	r3, [r1, #0]
 8015b94:	4c0d      	ldr	r4, [pc, #52]	; (8015bcc <MIOS32_USB_MIDI_ChangeConnectionState+0x50>)
 8015b96:	490e      	ldr	r1, [pc, #56]	; (8015bd0 <MIOS32_USB_MIDI_ChangeConnectionState+0x54>)
 8015b98:	8023      	strh	r3, [r4, #0]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8015b9a:	461a      	mov	r2, r3
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8015b9c:	800b      	strh	r3, [r1, #0]
 8015b9e:	4c0d      	ldr	r4, [pc, #52]	; (8015bd4 <MIOS32_USB_MIDI_ChangeConnectionState+0x58>)
 8015ba0:	4b0d      	ldr	r3, [pc, #52]	; (8015bd8 <MIOS32_USB_MIDI_ChangeConnectionState+0x5c>)
 8015ba2:	2101      	movs	r1, #1

  if( connected ) {
 8015ba4:	b120      	cbz	r0, 8015bb0 <MIOS32_USB_MIDI_ChangeConnectionState+0x34>
    transfer_possible = 1;
    tx_buffer_busy = 0; // buffer not busy anymore

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8015ba6:	480d      	ldr	r0, [pc, #52]	; (8015bdc <MIOS32_USB_MIDI_ChangeConnectionState+0x60>)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;

  if( connected ) {
    transfer_possible = 1;
 8015ba8:	7021      	strb	r1, [r4, #0]
    tx_buffer_busy = 0; // buffer not busy anymore
 8015baa:	701a      	strb	r2, [r3, #0]

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8015bac:	7002      	strb	r2, [r0, #0]
 8015bae:	e001      	b.n	8015bb4 <MIOS32_USB_MIDI_ChangeConnectionState+0x38>
#endif
  } else {
    // cable disconnected: disable transfers
    transfer_possible = 0;
 8015bb0:	7022      	strb	r2, [r4, #0]
    tx_buffer_busy = 1; // buffer busy
 8015bb2:	7019      	strb	r1, [r3, #0]
  }

  return 0; // no error
}
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	bd10      	pop	{r4, pc}
 8015bb8:	20000da6 	.word	0x20000da6
 8015bbc:	20000ef4 	.word	0x20000ef4
 8015bc0:	20000da4 	.word	0x20000da4
 8015bc4:	20000ef2 	.word	0x20000ef2
 8015bc8:	20000ef8 	.word	0x20000ef8
 8015bcc:	20000ef0 	.word	0x20000ef0
 8015bd0:	20000efa 	.word	0x20000efa
 8015bd4:	20000efd 	.word	0x20000efd
 8015bd8:	20000dec 	.word	0x20000dec
 8015bdc:	20000f02 	.word	0x20000f02

08015be0 <MIOS32_USB_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
 8015be0:	b510      	push	{r4, lr}
 8015be2:	4604      	mov	r4, r0
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
 8015be4:	f7ff fd66 	bl	80156b4 <MIOS32_USB_ForceSingleUSB>
 8015be8:	b92c      	cbnz	r4, 8015bf6 <MIOS32_USB_MIDI_CheckAvailable+0x16>
#endif

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
 8015bea:	4b04      	ldr	r3, [pc, #16]	; (8015bfc <MIOS32_USB_MIDI_CheckAvailable+0x1c>)
 8015bec:	7818      	ldrb	r0, [r3, #0]
 8015bee:	3000      	adds	r0, #0
 8015bf0:	bf18      	it	ne
 8015bf2:	2001      	movne	r0, #1
 8015bf4:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
    return 0;
 8015bf6:	2000      	movs	r0, #0

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
}
 8015bf8:	bd10      	pop	{r4, pc}
 8015bfa:	bf00      	nop
 8015bfc:	20000efd 	.word	0x20000efd

08015c00 <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8015c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c02:	460c      	mov	r4, r1
 8015c04:	4605      	mov	r5, r0
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8015c06:	2000      	movs	r0, #0
 8015c08:	f7ff ffb8 	bl	8015b7c <MIOS32_USB_MIDI_ChangeConnectionState>

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8015c0c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d061      	beq.n	8015cd8 <USBH_InterfaceInit+0xd8>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8015c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c18:	2a01      	cmp	r2, #1
 8015c1a:	d103      	bne.n	8015c24 <USBH_InterfaceInit+0x24>
 8015c1c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8015c20:	2803      	cmp	r0, #3
 8015c22:	d00a      	beq.n	8015c3a <USBH_InterfaceInit+0x3a>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	dd57      	ble.n	8015cd8 <USBH_InterfaceInit+0xd8>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8015c28:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d153      	bne.n	8015cd8 <USBH_InterfaceInit+0xd8>
 8015c30:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8015c34:	2903      	cmp	r1, #3
 8015c36:	d14f      	bne.n	8015cd8 <USBH_InterfaceInit+0xd8>
 8015c38:	e000      	b.n	8015c3c <USBH_InterfaceInit+0x3c>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8015c3a:	2300      	movs	r3, #0
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
	(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
 8015c3c:	eb04 1643 	add.w	r6, r4, r3, lsl #5
 8015c40:	f896 7052 	ldrb.w	r7, [r6, #82]	; 0x52
 8015c44:	3650      	adds	r6, #80	; 0x50
 8015c46:	f017 0f80 	tst.w	r7, #128	; 0x80
 8015c4a:	88b1      	ldrh	r1, [r6, #4]
 8015c4c:	d004      	beq.n	8015c58 <USBH_InterfaceInit+0x58>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8015c4e:	4e27      	ldr	r6, [pc, #156]	; (8015cec <USBH_InterfaceInit+0xec>)
 8015c50:	7037      	strb	r7, [r6, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 8015c52:	4f27      	ldr	r7, [pc, #156]	; (8015cf0 <USBH_InterfaceInit+0xf0>)
 8015c54:	7039      	strb	r1, [r7, #0]
 8015c56:	e003      	b.n	8015c60 <USBH_InterfaceInit+0x60>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8015c58:	4a26      	ldr	r2, [pc, #152]	; (8015cf4 <USBH_InterfaceInit+0xf4>)
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8015c5a:	4827      	ldr	r0, [pc, #156]	; (8015cf8 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8015c5c:	7017      	strb	r7, [r2, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8015c5e:	8001      	strh	r1, [r0, #0]
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
 8015c60:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8015c64:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8015c68:	f893 605a 	ldrb.w	r6, [r3, #90]	; 0x5a
 8015c6c:	4a21      	ldr	r2, [pc, #132]	; (8015cf4 <USBH_InterfaceInit+0xf4>)
 8015c6e:	888f      	ldrh	r7, [r1, #4]
 8015c70:	f016 0f80 	tst.w	r6, #128	; 0x80
 8015c74:	d004      	beq.n	8015c80 <USBH_InterfaceInit+0x80>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8015c76:	4b1d      	ldr	r3, [pc, #116]	; (8015cec <USBH_InterfaceInit+0xec>)
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8015c78:	491d      	ldr	r1, [pc, #116]	; (8015cf0 <USBH_InterfaceInit+0xf0>)
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8015c7a:	701e      	strb	r6, [r3, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8015c7c:	700f      	strb	r7, [r1, #0]
 8015c7e:	e002      	b.n	8015c86 <USBH_InterfaceInit+0x86>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8015c80:	481d      	ldr	r0, [pc, #116]	; (8015cf8 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8015c82:	7016      	strb	r6, [r2, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8015c84:	8007      	strh	r7, [r0, #0]
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8015c86:	7811      	ldrb	r1, [r2, #0]
 8015c88:	4e1c      	ldr	r6, [pc, #112]	; (8015cfc <USBH_InterfaceInit+0xfc>)
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8015c8a:	4f1d      	ldr	r7, [pc, #116]	; (8015d00 <USBH_InterfaceInit+0x100>)
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	f002 f958 	bl	8017f42 <USBH_Alloc_Channel>
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8015c92:	4a16      	ldr	r2, [pc, #88]	; (8015cec <USBH_InterfaceInit+0xec>)
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8015c94:	7030      	strb	r0, [r6, #0]
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8015c96:	7811      	ldrb	r1, [r2, #0]
 8015c98:	4628      	mov	r0, r5
 8015c9a:	f002 f952 	bl	8017f42 <USBH_Alloc_Channel>

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8015c9e:	7831      	ldrb	r1, [r6, #0]
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8015ca0:	7038      	strb	r0, [r7, #0]

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8015ca2:	2602      	movs	r6, #2
 8015ca4:	4814      	ldr	r0, [pc, #80]	; (8015cf8 <USBH_InterfaceInit+0xf8>)
 8015ca6:	9600      	str	r6, [sp, #0]
 8015ca8:	8800      	ldrh	r0, [r0, #0]
 8015caa:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015cae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015cb2:	9001      	str	r0, [sp, #4]
 8015cb4:	4628      	mov	r0, r5
 8015cb6:	f002 f8fd 	bl	8017eb4 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkOutEpSize);

      USBH_Open_Channel(pdev,
 8015cba:	480d      	ldr	r0, [pc, #52]	; (8015cf0 <USBH_InterfaceInit+0xf0>)
 8015cbc:	7839      	ldrb	r1, [r7, #0]
 8015cbe:	9600      	str	r6, [sp, #0]
 8015cc0:	7800      	ldrb	r0, [r0, #0]
 8015cc2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015cc6:	9001      	str	r0, [sp, #4]
 8015cc8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015ccc:	4628      	mov	r0, r5
 8015cce:	f002 f8f1 	bl	8017eb4 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkInEpSize);

      MIOS32_USB_MIDI_ChangeConnectionState(1);
 8015cd2:	2001      	movs	r0, #1
 8015cd4:	f7ff ff52 	bl	8015b7c <MIOS32_USB_MIDI_ChangeConnectionState>
      break;
    }
  }

  if( MIOS32_USB_MIDI_CheckAvailable(0) ) {
 8015cd8:	2000      	movs	r0, #0
 8015cda:	f7ff ff81 	bl	8015be0 <MIOS32_USB_MIDI_CheckAvailable>
 8015cde:	b118      	cbz	r0, 8015ce8 <USBH_InterfaceInit+0xe8>
    pphost->usr_cb->DeviceNotSupported();
 8015ce0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8015ce4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8015ce6:	4788      	blx	r1
  }
	
  return USBH_OK;

}
 8015ce8:	2000      	movs	r0, #0
 8015cea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015cec:	20000da9 	.word	0x20000da9
 8015cf0:	20000ef7 	.word	0x20000ef7
 8015cf4:	20000da8 	.word	0x20000da8
 8015cf8:	20000f00 	.word	0x20000f00
 8015cfc:	20000f03 	.word	0x20000f03
 8015d00:	20000efc 	.word	0x20000efc

08015d04 <MIOS32_USB_MIDI_PackageSend_NonBlocking>:
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8015d04:	b538      	push	{r3, r4, r5, lr}
  // device available?
  if( !transfer_possible )
 8015d06:	4c17      	ldr	r4, [pc, #92]	; (8015d64 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x60>)
 8015d08:	7823      	ldrb	r3, [r4, #0]
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8015d0a:	4605      	mov	r5, r0
  // device available?
  if( !transfer_possible )
 8015d0c:	b913      	cbnz	r3, 8015d14 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x10>
    return -1;
 8015d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d12:	bd38      	pop	{r3, r4, r5, pc}

  // buffer full?
  if( tx_buffer_size >= (MIOS32_USB_MIDI_TX_BUFFER_SIZE-1) ) {
 8015d14:	4814      	ldr	r0, [pc, #80]	; (8015d68 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 8015d16:	8801      	ldrh	r1, [r0, #0]
 8015d18:	b28a      	uxth	r2, r1
 8015d1a:	2a3e      	cmp	r2, #62	; 0x3e
 8015d1c:	d907      	bls.n	8015d2e <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x2a>
    // call USB handler, so that we are able to get the buffer free again on next execution
    // (this call simplifies polling loops!)
    MIOS32_USB_MIDI_TxBufferHandler();
 8015d1e:	f7ff fdd9 	bl	80158d4 <MIOS32_USB_MIDI_TxBufferHandler>

    // device still available?
    // (ensures that polling loop terminates if cable has been disconnected)
    if( !transfer_possible )
 8015d22:	7823      	ldrb	r3, [r4, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d0f2      	beq.n	8015d0e <MIOS32_USB_MIDI_PackageSend_NonBlocking+0xa>
      return -1;

    // notify that buffer was full (request retry)
    return -2;
 8015d28:	f06f 0001 	mvn.w	r0, #1
 8015d2c:	bd38      	pop	{r3, r4, r5, pc}
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8015d2e:	f7fe fc41 	bl	80145b4 <MIOS32_IRQ_Disable>
  tx_buffer[tx_buffer_head++] = package.ALL;
 8015d32:	4b0e      	ldr	r3, [pc, #56]	; (8015d6c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x68>)
 8015d34:	490e      	ldr	r1, [pc, #56]	; (8015d70 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 8015d36:	8818      	ldrh	r0, [r3, #0]
 8015d38:	b282      	uxth	r2, r0
 8015d3a:	1c50      	adds	r0, r2, #1
 8015d3c:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8015d40:	b282      	uxth	r2, r0
 8015d42:	801a      	strh	r2, [r3, #0]
  if( tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8015d44:	8819      	ldrh	r1, [r3, #0]
 8015d46:	b288      	uxth	r0, r1
 8015d48:	283f      	cmp	r0, #63	; 0x3f
 8015d4a:	d901      	bls.n	8015d50 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x4c>
    tx_buffer_head = 0;
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	801a      	strh	r2, [r3, #0]
  ++tx_buffer_size;
 8015d50:	4b05      	ldr	r3, [pc, #20]	; (8015d68 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 8015d52:	8819      	ldrh	r1, [r3, #0]
 8015d54:	1c48      	adds	r0, r1, #1
 8015d56:	b282      	uxth	r2, r0
 8015d58:	801a      	strh	r2, [r3, #0]
  MIOS32_IRQ_Enable();
 8015d5a:	f7fe fc3f 	bl	80145dc <MIOS32_IRQ_Enable>

  return 0;
 8015d5e:	2000      	movs	r0, #0
}
 8015d60:	bd38      	pop	{r3, r4, r5, pc}
 8015d62:	bf00      	nop
 8015d64:	20000efd 	.word	0x20000efd
 8015d68:	20000ef8 	.word	0x20000ef8
 8015d6c:	20000ef0 	.word	0x20000ef0
 8015d70:	20000ca4 	.word	0x20000ca4

08015d74 <MIOS32_USB_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: USB not connected
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend(mios32_midi_package_t package)
{
 8015d74:	b510      	push	{r4, lr}
 8015d76:	4604      	mov	r4, r0
  // was successfull (MIDI port will be used by host), timeout value is
  // reset again

  s32 error;

  while( (error=MIOS32_USB_MIDI_PackageSend_NonBlocking(package)) == -2 ) {
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f7ff ffc3 	bl	8015d04 <MIOS32_USB_MIDI_PackageSend_NonBlocking>
 8015d7e:	1c83      	adds	r3, r0, #2
 8015d80:	d108      	bne.n	8015d94 <MIOS32_USB_MIDI_PackageSend+0x20>
    if( timeout_ctr >= 10000 )
 8015d82:	4b07      	ldr	r3, [pc, #28]	; (8015da0 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8015d84:	881a      	ldrh	r2, [r3, #0]
 8015d86:	f242 710f 	movw	r1, #9999	; 0x270f
 8015d8a:	428a      	cmp	r2, r1
 8015d8c:	d807      	bhi.n	8015d9e <MIOS32_USB_MIDI_PackageSend+0x2a>
      break;
    ++timeout_ctr;
 8015d8e:	1c50      	adds	r0, r2, #1
 8015d90:	8018      	strh	r0, [r3, #0]
 8015d92:	e7f1      	b.n	8015d78 <MIOS32_USB_MIDI_PackageSend+0x4>
  }

  if( error >= 0 ) // no error: reset timeout counter
 8015d94:	2800      	cmp	r0, #0
 8015d96:	db02      	blt.n	8015d9e <MIOS32_USB_MIDI_PackageSend+0x2a>
    timeout_ctr = 0;
 8015d98:	4b01      	ldr	r3, [pc, #4]	; (8015da0 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	801a      	strh	r2, [r3, #0]

  return error;
}
 8015d9e:	bd10      	pop	{r4, pc}
 8015da0:	20000efe 	.word	0x20000efe

08015da4 <MIOS32_USB_MIDI_PackageReceive>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
 8015da4:	4b11      	ldr	r3, [pc, #68]	; (8015dec <MIOS32_USB_MIDI_PackageReceive+0x48>)
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 8015da6:	b510      	push	{r4, lr}
 8015da8:	4604      	mov	r4, r0
  // package received?
  if( !rx_buffer_size )
 8015daa:	8818      	ldrh	r0, [r3, #0]
 8015dac:	b281      	uxth	r1, r0
 8015dae:	b1d1      	cbz	r1, 8015de6 <MIOS32_USB_MIDI_PackageReceive+0x42>
    return -1;

  // get package - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8015db0:	f7fe fc00 	bl	80145b4 <MIOS32_IRQ_Disable>
  package->ALL = rx_buffer[rx_buffer_tail];
 8015db4:	4b0e      	ldr	r3, [pc, #56]	; (8015df0 <MIOS32_USB_MIDI_PackageReceive+0x4c>)
 8015db6:	490f      	ldr	r1, [pc, #60]	; (8015df4 <MIOS32_USB_MIDI_PackageReceive+0x50>)
 8015db8:	881a      	ldrh	r2, [r3, #0]
 8015dba:	b290      	uxth	r0, r2
 8015dbc:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8015dc0:	6022      	str	r2, [r4, #0]
  if( ++rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8015dc2:	881c      	ldrh	r4, [r3, #0]
 8015dc4:	1c60      	adds	r0, r4, #1
 8015dc6:	b281      	uxth	r1, r0
 8015dc8:	293f      	cmp	r1, #63	; 0x3f
 8015dca:	8019      	strh	r1, [r3, #0]
 8015dcc:	d901      	bls.n	8015dd2 <MIOS32_USB_MIDI_PackageReceive+0x2e>
    rx_buffer_tail = 0;
 8015dce:	2200      	movs	r2, #0
 8015dd0:	801a      	strh	r2, [r3, #0]
  --rx_buffer_size;
 8015dd2:	4c06      	ldr	r4, [pc, #24]	; (8015dec <MIOS32_USB_MIDI_PackageReceive+0x48>)
 8015dd4:	8823      	ldrh	r3, [r4, #0]
 8015dd6:	1e58      	subs	r0, r3, #1
 8015dd8:	b281      	uxth	r1, r0
 8015dda:	8021      	strh	r1, [r4, #0]
  MIOS32_IRQ_Enable();
 8015ddc:	f7fe fbfe 	bl	80145dc <MIOS32_IRQ_Enable>

  return rx_buffer_size;
 8015de0:	8822      	ldrh	r2, [r4, #0]
 8015de2:	b290      	uxth	r0, r2
 8015de4:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
    return -1;
 8015de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    rx_buffer_tail = 0;
  --rx_buffer_size;
  MIOS32_IRQ_Enable();

  return rx_buffer_size;
}
 8015dea:	bd10      	pop	{r4, pc}
 8015dec:	20000da6 	.word	0x20000da6
 8015df0:	20000da4 	.word	0x20000da4
 8015df4:	20000df0 	.word	0x20000df0

08015df8 <MIOS32_USB_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Periodic_mS(void)
{
 8015df8:	b508      	push	{r3, lr}
  if( USB_OTG_IsHostMode(&USB_OTG_FS_dev) ) {
 8015dfa:	4807      	ldr	r0, [pc, #28]	; (8015e18 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8015dfc:	f002 fc9e 	bl	801873c <USB_OTG_IsHostMode>
 8015e00:	b120      	cbz	r0, 8015e0c <MIOS32_USB_MIDI_Periodic_mS+0x14>
#ifndef MIOS32_DONT_USE_USB_HOST
    // process the USB host events
    USBH_Process(&USB_OTG_FS_dev, &USB_FS_Host);
 8015e02:	4805      	ldr	r0, [pc, #20]	; (8015e18 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8015e04:	4905      	ldr	r1, [pc, #20]	; (8015e1c <MIOS32_USB_MIDI_Periodic_mS+0x24>)
 8015e06:	f001 fead 	bl	8017b64 <USBH_Process>
 8015e0a:	e003      	b.n	8015e14 <MIOS32_USB_MIDI_Periodic_mS+0x1c>
#endif
  } else {
    // check for received packages
    MIOS32_USB_MIDI_RxBufferHandler();
 8015e0c:	f7ff fd0c 	bl	8015828 <MIOS32_USB_MIDI_RxBufferHandler>

    // check for packages which should be transmitted
    MIOS32_USB_MIDI_TxBufferHandler();
 8015e10:	f7ff fd60 	bl	80158d4 <MIOS32_USB_MIDI_TxBufferHandler>
  }

  return 0;
}
 8015e14:	2000      	movs	r0, #0
 8015e16:	bd08      	pop	{r3, pc}
 8015e18:	20003fac 	.word	0x20003fac
 8015e1c:	20003f08 	.word	0x20003f08

08015e20 <MIOS32_USB_MIDI_EP1_IN_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP1_IN_Callback(u8 bEP, u8 bEPStatus)
{
  // package has been sent
  tx_buffer_busy = 0;
 8015e20:	4b02      	ldr	r3, [pc, #8]	; (8015e2c <MIOS32_USB_MIDI_EP1_IN_Callback+0xc>)
 8015e22:	2200      	movs	r2, #0
 8015e24:	701a      	strb	r2, [r3, #0]

  // check for next package
  MIOS32_USB_MIDI_TxBufferHandler();
 8015e26:	f7ff bd55 	b.w	80158d4 <MIOS32_USB_MIDI_TxBufferHandler>
 8015e2a:	bf00      	nop
 8015e2c:	20000dec 	.word	0x20000dec

08015e30 <MIOS32_USB_MIDI_EP2_OUT_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP2_OUT_Callback(u8 bEP, u8 bEPStatus)
{
  // put package into buffer
  rx_buffer_new_data = 1;
 8015e30:	4b02      	ldr	r3, [pc, #8]	; (8015e3c <MIOS32_USB_MIDI_EP2_OUT_Callback+0xc>)
 8015e32:	2201      	movs	r2, #1
 8015e34:	701a      	strb	r2, [r3, #0]
  MIOS32_USB_MIDI_RxBufferHandler();
 8015e36:	f7ff bcf7 	b.w	8015828 <MIOS32_USB_MIDI_RxBufferHandler>
 8015e3a:	bf00      	nop
 8015e3c:	20000ef2 	.word	0x20000ef2

08015e40 <MIOS32_UART_IsAssignedToMIDI>:
s32 MIOS32_UART_IsAssignedToMIDI(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return 0; // no UART available
#else
  return (uart_assigned_to_midi & (1 << uart)) ? 1 : 0;
 8015e40:	4b03      	ldr	r3, [pc, #12]	; (8015e50 <MIOS32_UART_IsAssignedToMIDI+0x10>)
 8015e42:	7819      	ldrb	r1, [r3, #0]
 8015e44:	fa41 f000 	asr.w	r0, r1, r0
#endif
}
 8015e48:	f000 0001 	and.w	r0, r0, #1
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	20001128 	.word	0x20001128

08015e54 <MIOS32_UART_BaudrateSet>:
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015e54:	2803      	cmp	r0, #3
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8015e56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015e58:	4605      	mov	r5, r0
 8015e5a:	460e      	mov	r6, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8015e5c:	d826      	bhi.n	8015eac <MIOS32_UART_BaudrateSet+0x58>
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;
 8015e5e:	ac04      	add	r4, sp, #16
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8015e60:	2300      	movs	r3, #0
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8015e62:	210c      	movs	r1, #12

  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
 8015e64:	2802      	cmp	r0, #2
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8015e66:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8015e6a:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8015e6e:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8015e72:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8015e76:	f8ad 100a 	strh.w	r1, [sp, #10]

  USART_InitStructure.USART_BaudRate = baudrate;
 8015e7a:	f844 6d10 	str.w	r6, [r4, #-16]!

  switch( uart ) {
 8015e7e:	d006      	beq.n	8015e8e <MIOS32_UART_BaudrateSet+0x3a>
 8015e80:	2803      	cmp	r0, #3
 8015e82:	d00a      	beq.n	8015e9a <MIOS32_UART_BaudrateSet+0x46>
 8015e84:	2801      	cmp	r0, #1
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
 8015e86:	bf14      	ite	ne
 8015e88:	480a      	ldrne	r0, [pc, #40]	; (8015eb4 <MIOS32_UART_BaudrateSet+0x60>)
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8015e8a:	480b      	ldreq	r0, [pc, #44]	; (8015eb8 <MIOS32_UART_BaudrateSet+0x64>)
 8015e8c:	e006      	b.n	8015e9c <MIOS32_UART_BaudrateSet+0x48>
#endif
#if NUM_SUPPORTED_UARTS >= 3
  case 2: USART_Init(MIOS32_UART2_TX, &USART_InitStructure); USART_Init(MIOS32_UART2_RX, &USART_InitStructure); break;
 8015e8e:	480b      	ldr	r0, [pc, #44]	; (8015ebc <MIOS32_UART_BaudrateSet+0x68>)
 8015e90:	4669      	mov	r1, sp
 8015e92:	f001 f8f3 	bl	801707c <USART_Init>
 8015e96:	480a      	ldr	r0, [pc, #40]	; (8015ec0 <MIOS32_UART_BaudrateSet+0x6c>)
 8015e98:	e000      	b.n	8015e9c <MIOS32_UART_BaudrateSet+0x48>
#endif
#if NUM_SUPPORTED_UARTS >= 4
  case 3: USART_Init(MIOS32_UART3, &USART_InitStructure); break;
 8015e9a:	480a      	ldr	r0, [pc, #40]	; (8015ec4 <MIOS32_UART_BaudrateSet+0x70>)
 8015e9c:	4669      	mov	r1, sp
 8015e9e:	f001 f8ed 	bl	801707c <USART_Init>
  default:
    return -2; // not prepared
  }

  // store baudrate in array
  uart_baudrate[uart] = baudrate;
 8015ea2:	4809      	ldr	r0, [pc, #36]	; (8015ec8 <MIOS32_UART_BaudrateSet+0x74>)
 8015ea4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

  return 0;
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	e001      	b.n	8015eb0 <MIOS32_UART_BaudrateSet+0x5c>
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;
 8015eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  // store baudrate in array
  uart_baudrate[uart] = baudrate;

  return 0;
#endif
}
 8015eb0:	b004      	add	sp, #16
 8015eb2:	bd70      	pop	{r4, r5, r6, pc}
 8015eb4:	40004400 	.word	0x40004400
 8015eb8:	40004800 	.word	0x40004800
 8015ebc:	40011400 	.word	0x40011400
 8015ec0:	40011000 	.word	0x40011000
 8015ec4:	40005000 	.word	0x40005000
 8015ec8:	20001118 	.word	0x20001118

08015ecc <MIOS32_UART_InitPort>:
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8015ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ece:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8015ed0:	4668      	mov	r0, sp
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8015ed2:	461f      	mov	r7, r3
 8015ed4:	460d      	mov	r5, r1
 8015ed6:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8015ed8:	f000 fe3d 	bl	8016b56 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8015edc:	2300      	movs	r3, #0

  if( uart >= NUM_SUPPORTED_UARTS )
 8015ede:	2c03      	cmp	r4, #3
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8015ee0:	f88d 3005 	strb.w	r3, [sp, #5]

  if( uart >= NUM_SUPPORTED_UARTS )
 8015ee4:	d877      	bhi.n	8015fd6 <MIOS32_UART_InitPort+0x10a>
 8015ee6:	4a3d      	ldr	r2, [pc, #244]	; (8015fdc <MIOS32_UART_InitPort+0x110>)
 8015ee8:	2101      	movs	r1, #1
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
 8015eea:	fa01 f104 	lsl.w	r1, r1, r4
 8015eee:	7810      	ldrb	r0, [r2, #0]

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
 8015ef0:	b10f      	cbz	r7, 8015ef6 <MIOS32_UART_InitPort+0x2a>
    uart_assigned_to_midi |= (1 << uart);
 8015ef2:	4301      	orrs	r1, r0
 8015ef4:	e001      	b.n	8015efa <MIOS32_UART_InitPort+0x2e>
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8015ef6:	ea20 0101 	bic.w	r1, r0, r1
  }

  switch( uart ) {
 8015efa:	2c02      	cmp	r4, #2

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8015efc:	7011      	strb	r1, [r2, #0]
  }

  switch( uart ) {
 8015efe:	d034      	beq.n	8015f6a <MIOS32_UART_InitPort+0x9e>
 8015f00:	2c03      	cmp	r4, #3
 8015f02:	d050      	beq.n	8015fa6 <MIOS32_UART_InitPort+0xda>
 8015f04:	2c01      	cmp	r4, #1
 8015f06:	f04f 0702 	mov.w	r7, #2
 8015f0a:	d019      	beq.n	8015f40 <MIOS32_UART_InitPort+0x74>
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8015f0c:	2304      	movs	r3, #4
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f0e:	3e05      	subs	r6, #5
 8015f10:	bf18      	it	ne
 8015f12:	2601      	movne	r6, #1
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8015f14:	4832      	ldr	r0, [pc, #200]	; (8015fe0 <MIOS32_UART_InitPort+0x114>)

  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8015f16:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8015f18:	4669      	mov	r1, sp
  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f1a:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f1e:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8015f22:	f000 fdcb 	bl	8016abc <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8015f26:	2008      	movs	r0, #8
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015f28:	2201      	movs	r2, #1
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8015f2a:	9000      	str	r0, [sp, #0]
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8015f2c:	4669      	mov	r1, sp
 8015f2e:	482c      	ldr	r0, [pc, #176]	; (8015fe0 <MIOS32_UART_InitPort+0x114>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f30:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015f34:	f88d 2007 	strb.w	r2, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8015f38:	f000 fdc0 	bl	8016abc <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8015f3c:	2000      	movs	r0, #0
 8015f3e:	e02d      	b.n	8015f9c <MIOS32_UART_InitPort+0xd0>
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f40:	3e05      	subs	r6, #5
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8015f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015f46:	9100      	str	r1, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f48:	bf18      	it	ne
 8015f4a:	2601      	movne	r6, #1
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8015f4c:	4825      	ldr	r0, [pc, #148]	; (8015fe4 <MIOS32_UART_InitPort+0x118>)

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f4e:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8015f52:	4669      	mov	r1, sp
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f54:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8015f58:	f000 fdb0 	bl	8016abc <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f5c:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015f60:	f88d 4007 	strb.w	r4, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8015f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f68:	e032      	b.n	8015fd0 <MIOS32_UART_InitPort+0x104>
#endif

#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  case 2: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_TX_PIN;
 8015f6a:	2040      	movs	r0, #64	; 0x40
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f6c:	3e05      	subs	r6, #5
 8015f6e:	bf18      	it	ne
 8015f70:	2601      	movne	r6, #1
#endif

#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  case 2: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_TX_PIN;
 8015f72:	9000      	str	r0, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART2_TX_PORT, &GPIO_InitStructure);
 8015f74:	4669      	mov	r1, sp
 8015f76:	481c      	ldr	r0, [pc, #112]	; (8015fe8 <MIOS32_UART_InitPort+0x11c>)

#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  case 2: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f78:	f88d 4004 	strb.w	r4, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015f7c:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(MIOS32_UART2_TX_PORT, &GPIO_InitStructure);
 8015f80:	f000 fd9c 	bl	8016abc <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015f84:	2101      	movs	r1, #1
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_RX_PIN;
 8015f86:	2380      	movs	r3, #128	; 0x80
    GPIO_Init(MIOS32_UART2_RX_PORT, &GPIO_InitStructure);
 8015f88:	4818      	ldr	r0, [pc, #96]	; (8015fec <MIOS32_UART_InitPort+0x120>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART2_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015f8a:	f88d 4004 	strb.w	r4, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015f8e:	f88d 1007 	strb.w	r1, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_RX_PIN;
 8015f92:	9300      	str	r3, [sp, #0]
    GPIO_Init(MIOS32_UART2_RX_PORT, &GPIO_InitStructure);
 8015f94:	4669      	mov	r1, sp
 8015f96:	f000 fd91 	bl	8016abc <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	4629      	mov	r1, r5
 8015f9e:	f7ff ff59 	bl	8015e54 <MIOS32_UART_BaudrateSet>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 8015fa2:	2000      	movs	r0, #0
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART2_RX_PIN;
    GPIO_Init(MIOS32_UART2_RX_PORT, &GPIO_InitStructure);

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
  } break;
 8015fa4:	e019      	b.n	8015fda <MIOS32_UART_InitPort+0x10e>
#endif

#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  case 3: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART3_TX_PIN;
 8015fa6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8015faa:	9700      	str	r7, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015fac:	2702      	movs	r7, #2
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015fae:	3e05      	subs	r6, #5
 8015fb0:	bf18      	it	ne
 8015fb2:	2601      	movne	r6, #1
    GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);
 8015fb4:	480c      	ldr	r0, [pc, #48]	; (8015fe8 <MIOS32_UART_InitPort+0x11c>)

#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  case 3: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART3_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015fb6:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);
 8015fba:	4669      	mov	r1, sp
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  case 3: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART3_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8015fbc:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);
 8015fc0:	f000 fd7c 	bl	8016abc <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015fc4:	2301      	movs	r3, #1
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8015fc6:	f88d 7004 	strb.w	r7, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8015fca:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART3_RX_PIN;
 8015fce:	2204      	movs	r2, #4
 8015fd0:	9200      	str	r2, [sp, #0]
    GPIO_Init(MIOS32_UART3_RX_PORT, &GPIO_InitStructure);
 8015fd2:	4804      	ldr	r0, [pc, #16]	; (8015fe4 <MIOS32_UART_InitPort+0x118>)
 8015fd4:	e7de      	b.n	8015f94 <MIOS32_UART_InitPort+0xc8>
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART
 8015fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return -1; // unsupported UART
  }

  return 0; // no error
#endif
}
 8015fda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015fdc:	20001128 	.word	0x20001128
 8015fe0:	40020000 	.word	0x40020000
 8015fe4:	40020c00 	.word	0x40020c00
 8015fe8:	40020800 	.word	0x40020800
 8015fec:	40020400 	.word	0x40020400

08015ff0 <MIOS32_UART_InitPortDefault>:
//! Initializes a given UART interface based on default settings
//! \param[in] uart UART number (0..2)
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPortDefault(u8 uart)
{
 8015ff0:	b508      	push	{r3, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  switch( uart ) {
 8015ff2:	2803      	cmp	r0, #3
 8015ff4:	d816      	bhi.n	8016024 <MIOS32_UART_InitPortDefault+0x34>
 8015ff6:	e8df f000 	tbb	[pc, r0]
 8015ffa:	0402      	.short	0x0402
 8015ffc:	130a      	.short	0x130a
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
# if MIOS32_UART0_TX_OD
    MIOS32_UART_InitPort(0, MIOS32_UART0_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART0_ASSIGNMENT == 1);
 8015ffe:	2000      	movs	r0, #0
 8016000:	e006      	b.n	8016010 <MIOS32_UART_InitPortDefault+0x20>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
 8016002:	2001      	movs	r0, #1
 8016004:	f647 2112 	movw	r1, #31250	; 0x7a12
 8016008:	2206      	movs	r2, #6
 801600a:	4603      	mov	r3, r0
 801600c:	e004      	b.n	8016018 <MIOS32_UART_InitPortDefault+0x28>
#endif

#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  case 2: {
# if MIOS32_UART2_TX_OD
    MIOS32_UART_InitPort(2, MIOS32_UART2_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART2_ASSIGNMENT == 1);
 801600e:	2002      	movs	r0, #2
 8016010:	f647 2112 	movw	r1, #31250	; 0x7a12
 8016014:	2206      	movs	r2, #6
 8016016:	2301      	movs	r3, #1
 8016018:	f7ff ff58 	bl	8015ecc <MIOS32_UART_InitPort>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 801601c:	2000      	movs	r0, #0
# if MIOS32_UART2_TX_OD
    MIOS32_UART_InitPort(2, MIOS32_UART2_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART2_ASSIGNMENT == 1);
# else
    MIOS32_UART_InitPort(2, MIOS32_UART2_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_PP, MIOS32_UART2_ASSIGNMENT == 1);
# endif
  } break;
 801601e:	bd08      	pop	{r3, pc}
#endif

#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  case 3: {
# if MIOS32_UART3_TX_OD
    MIOS32_UART_InitPort(3, MIOS32_UART3_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART3_ASSIGNMENT == 1);
 8016020:	2003      	movs	r0, #3
 8016022:	e7f5      	b.n	8016010 <MIOS32_UART_InitPortDefault+0x20>
# endif
  } break;
#endif

  default:
    return -1; // unsupported UART
 8016024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }

  return 0; // no error
#endif
}
 8016028:	bd08      	pop	{r3, pc}
	...

0801602c <MIOS32_UART_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
 801602c:	b538      	push	{r3, r4, r5, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 801602e:	4604      	mov	r4, r0
 8016030:	2800      	cmp	r0, #0
 8016032:	f040 8086 	bne.w	8016142 <MIOS32_UART_Init+0x116>
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 8016036:	4844      	ldr	r0, [pc, #272]	; (8016148 <MIOS32_UART_Init+0x11c>)
 8016038:	2102      	movs	r1, #2
 801603a:	2207      	movs	r2, #7
 801603c:	f000 fd98 	bl	8016b70 <GPIO_PinAFConfig>
 8016040:	4841      	ldr	r0, [pc, #260]	; (8016148 <MIOS32_UART_Init+0x11c>)
 8016042:	2103      	movs	r1, #3
 8016044:	2207      	movs	r2, #7
 8016046:	f000 fd93 	bl	8016b70 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART1_REMAP_FUNC;
 801604a:	4840      	ldr	r0, [pc, #256]	; (801614c <MIOS32_UART_Init+0x120>)
 801604c:	2108      	movs	r1, #8
 801604e:	2207      	movs	r2, #7
 8016050:	f000 fd8e 	bl	8016b70 <GPIO_PinAFConfig>
 8016054:	483d      	ldr	r0, [pc, #244]	; (801614c <MIOS32_UART_Init+0x120>)
 8016056:	2109      	movs	r1, #9
 8016058:	2207      	movs	r2, #7
 801605a:	f000 fd89 	bl	8016b70 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART2_REMAP_FUNC;
 801605e:	483c      	ldr	r0, [pc, #240]	; (8016150 <MIOS32_UART_Init+0x124>)
 8016060:	2106      	movs	r1, #6
 8016062:	2208      	movs	r2, #8
 8016064:	f000 fd84 	bl	8016b70 <GPIO_PinAFConfig>
 8016068:	2107      	movs	r1, #7
 801606a:	460a      	mov	r2, r1
 801606c:	4839      	ldr	r0, [pc, #228]	; (8016154 <MIOS32_UART_Init+0x128>)
 801606e:	f000 fd7f 	bl	8016b70 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART3_REMAP_FUNC;
 8016072:	4837      	ldr	r0, [pc, #220]	; (8016150 <MIOS32_UART_Init+0x124>)
 8016074:	210c      	movs	r1, #12
 8016076:	2208      	movs	r2, #8
 8016078:	f000 fd7a 	bl	8016b70 <GPIO_PinAFConfig>
 801607c:	4833      	ldr	r0, [pc, #204]	; (801614c <MIOS32_UART_Init+0x120>)
 801607e:	2102      	movs	r1, #2
 8016080:	2208      	movs	r2, #8
 8016082:	f000 fd75 	bl	8016b70 <GPIO_PinAFConfig>
#endif

  // enable all USART clocks
  // TODO: more generic approach for different UART selections
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_USART6, ENABLE);
 8016086:	2030      	movs	r0, #48	; 0x30
 8016088:	2101      	movs	r1, #1
 801608a:	f000 fe37 	bl	8016cfc <RCC_APB2PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);
 801608e:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8016092:	2101      	movs	r1, #1
 8016094:	f000 fe26 	bl	8016ce4 <RCC_APB1PeriphClockCmd>

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8016098:	4b2f      	ldr	r3, [pc, #188]	; (8016158 <MIOS32_UART_Init+0x12c>)
 801609a:	4830      	ldr	r0, [pc, #192]	; (801615c <MIOS32_UART_Init+0x130>)
 801609c:	4930      	ldr	r1, [pc, #192]	; (8016160 <MIOS32_UART_Init+0x134>)
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 801609e:	4a31      	ldr	r2, [pc, #196]	; (8016164 <MIOS32_UART_Init+0x138>)

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 80160a0:	2500      	movs	r5, #0
 80160a2:	551d      	strb	r5, [r3, r4]
 80160a4:	5505      	strb	r5, [r0, r4]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 80160a6:	4b30      	ldr	r3, [pc, #192]	; (8016168 <MIOS32_UART_Init+0x13c>)
 80160a8:	4830      	ldr	r0, [pc, #192]	; (801616c <MIOS32_UART_Init+0x140>)

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 80160aa:	550d      	strb	r5, [r1, r4]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 80160ac:	5515      	strb	r5, [r2, r4]
 80160ae:	551d      	strb	r5, [r3, r4]
 80160b0:	5505      	strb	r5, [r0, r4]

      MIOS32_UART_InitPortDefault(uart);
 80160b2:	b2e0      	uxtb	r0, r4
 80160b4:	3401      	adds	r4, #1
 80160b6:	f7ff ff9b 	bl	8015ff0 <MIOS32_UART_InitPortDefault>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
 80160ba:	2c04      	cmp	r4, #4
 80160bc:	d1ec      	bne.n	8016098 <MIOS32_UART_Init+0x6c>
    }
  }

  // configure and enable UART interrupts
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART0_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80160be:	4621      	mov	r1, r4
 80160c0:	2026      	movs	r0, #38	; 0x26
 80160c2:	f7fe fa9f 	bl	8014604 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
 80160c6:	2201      	movs	r2, #1
 80160c8:	4829      	ldr	r0, [pc, #164]	; (8016170 <MIOS32_UART_Init+0x144>)
 80160ca:	f240 5125 	movw	r1, #1317	; 0x525
 80160ce:	f001 f83d 	bl	801714c <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80160d2:	4621      	mov	r1, r4
 80160d4:	2027      	movs	r0, #39	; 0x27
 80160d6:	f7fe fa95 	bl	8014604 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 80160da:	2201      	movs	r2, #1
 80160dc:	4825      	ldr	r0, [pc, #148]	; (8016174 <MIOS32_UART_Init+0x148>)
 80160de:	f240 5125 	movw	r1, #1317	; 0x525
 80160e2:	f001 f833 	bl	801714c <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART2_TX_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80160e6:	4621      	mov	r1, r4
 80160e8:	2047      	movs	r0, #71	; 0x47
 80160ea:	f7fe fa8b 	bl	8014604 <MIOS32_IRQ_Install>
  MIOS32_IRQ_Install(MIOS32_UART2_RX_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80160ee:	4621      	mov	r1, r4
 80160f0:	2025      	movs	r0, #37	; 0x25
 80160f2:	f7fe fa87 	bl	8014604 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART2_RX, USART_IT_RXNE, ENABLE);
 80160f6:	2201      	movs	r2, #1
 80160f8:	481f      	ldr	r0, [pc, #124]	; (8016178 <MIOS32_UART_Init+0x14c>)
 80160fa:	f240 5125 	movw	r1, #1317	; 0x525
 80160fe:	f001 f825 	bl	801714c <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART3_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8016102:	4621      	mov	r1, r4
 8016104:	2035      	movs	r0, #53	; 0x35
 8016106:	f7fe fa7d 	bl	8014604 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART3, USART_IT_RXNE, ENABLE);
 801610a:	2201      	movs	r2, #1
 801610c:	481b      	ldr	r0, [pc, #108]	; (801617c <MIOS32_UART_Init+0x150>)
 801610e:	f240 5125 	movw	r1, #1317	; 0x525
 8016112:	f001 f81b 	bl	801714c <USART_ITConfig>
#endif

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 8016116:	2101      	movs	r1, #1
 8016118:	4815      	ldr	r0, [pc, #84]	; (8016170 <MIOS32_UART_Init+0x144>)
 801611a:	f001 f80b 	bl	8017134 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART1, ENABLE);
 801611e:	2101      	movs	r1, #1
 8016120:	4814      	ldr	r0, [pc, #80]	; (8016174 <MIOS32_UART_Init+0x148>)
 8016122:	f001 f807 	bl	8017134 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 3 && MIOS32_UART2_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART2_RX, ENABLE);
 8016126:	2101      	movs	r1, #1
 8016128:	4813      	ldr	r0, [pc, #76]	; (8016178 <MIOS32_UART_Init+0x14c>)
 801612a:	f001 f803 	bl	8017134 <USART_Cmd>
  USART_Cmd(MIOS32_UART2_TX, ENABLE);
 801612e:	2101      	movs	r1, #1
 8016130:	4813      	ldr	r0, [pc, #76]	; (8016180 <MIOS32_UART_Init+0x154>)
 8016132:	f000 ffff 	bl	8017134 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART3, ENABLE);
 8016136:	4811      	ldr	r0, [pc, #68]	; (801617c <MIOS32_UART_Init+0x150>)
 8016138:	2101      	movs	r1, #1
 801613a:	f000 fffb 	bl	8017134 <USART_Cmd>
#endif

  return 0; // no error
 801613e:	4628      	mov	r0, r5
 8016140:	bd38      	pop	{r3, r4, r5, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8016142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
#endif
}
 8016146:	bd38      	pop	{r3, r4, r5, pc}
 8016148:	40020000 	.word	0x40020000
 801614c:	40020c00 	.word	0x40020c00
 8016150:	40020800 	.word	0x40020800
 8016154:	40020400 	.word	0x40020400
 8016158:	20000f08 	.word	0x20000f08
 801615c:	20001110 	.word	0x20001110
 8016160:	20000f0c 	.word	0x20000f0c
 8016164:	20001114 	.word	0x20001114
 8016168:	20001129 	.word	0x20001129
 801616c:	20000f04 	.word	0x20000f04
 8016170:	40004400 	.word	0x40004400
 8016174:	40004800 	.word	0x40004800
 8016178:	40011000 	.word	0x40011000
 801617c:	40005000 	.word	0x40005000
 8016180:	40011400 	.word	0x40011400

08016184 <MIOS32_UART_RxBufferGet>:
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8016184:	2803      	cmp	r0, #3
//! \return -2 if no new byte available
//! \return >= 0: number of received bytes
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
 8016186:	b538      	push	{r3, r4, r5, lr}
 8016188:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801618a:	d81b      	bhi.n	80161c4 <MIOS32_UART_RxBufferGet+0x40>
    return -1; // UART not available

  if( !rx_buffer_size[uart] )
 801618c:	4b10      	ldr	r3, [pc, #64]	; (80161d0 <MIOS32_UART_RxBufferGet+0x4c>)
 801618e:	5c18      	ldrb	r0, [r3, r0]
 8016190:	b1d8      	cbz	r0, 80161ca <MIOS32_UART_RxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8016192:	f7fe fa0f 	bl	80145b4 <MIOS32_IRQ_Disable>
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8016196:	4b0f      	ldr	r3, [pc, #60]	; (80161d4 <MIOS32_UART_RxBufferGet+0x50>)
 8016198:	490f      	ldr	r1, [pc, #60]	; (80161d8 <MIOS32_UART_RxBufferGet+0x54>)
 801619a:	5d1a      	ldrb	r2, [r3, r4]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 801619c:	5d18      	ldrb	r0, [r3, r4]
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 801619e:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80161a2:	1c42      	adds	r2, r0, #1
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 80161a4:	5d4d      	ldrb	r5, [r1, r5]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80161a6:	b2d1      	uxtb	r1, r2
 80161a8:	293f      	cmp	r1, #63	; 0x3f
 80161aa:	5519      	strb	r1, [r3, r4]
 80161ac:	d901      	bls.n	80161b2 <MIOS32_UART_RxBufferGet+0x2e>
    rx_buffer_tail[uart] = 0;
 80161ae:	2000      	movs	r0, #0
 80161b0:	5518      	strb	r0, [r3, r4]
  --rx_buffer_size[uart];
 80161b2:	4b07      	ldr	r3, [pc, #28]	; (80161d0 <MIOS32_UART_RxBufferGet+0x4c>)
 80161b4:	5d1a      	ldrb	r2, [r3, r4]
 80161b6:	1e51      	subs	r1, r2, #1
 80161b8:	b2c8      	uxtb	r0, r1
 80161ba:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 80161bc:	f7fe fa0e 	bl	80145dc <MIOS32_IRQ_Enable>

  return b; // return received byte
 80161c0:	4628      	mov	r0, r5
 80161c2:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80161c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161c8:	bd38      	pop	{r3, r4, r5, pc}

  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer
 80161ca:	f06f 0001 	mvn.w	r0, #1
  --rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return received byte
#endif
}
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	20000f08 	.word	0x20000f08
 80161d4:	20000f0c 	.word	0x20000f0c
 80161d8:	20001010 	.word	0x20001010

080161dc <MIOS32_UART_RxBufferPut>:
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80161dc:	2803      	cmp	r0, #3
//! \return -1 if UART not available
//! \return -2 if buffer full (retry)
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
 80161de:	b538      	push	{r3, r4, r5, lr}
 80161e0:	4604      	mov	r4, r0
 80161e2:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80161e4:	d81c      	bhi.n	8016220 <MIOS32_UART_RxBufferPut+0x44>
    return -1; // UART not available

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80161e6:	4b11      	ldr	r3, [pc, #68]	; (801622c <MIOS32_UART_RxBufferPut+0x50>)
 80161e8:	5c18      	ldrb	r0, [r3, r0]
 80161ea:	283f      	cmp	r0, #63	; 0x3f
 80161ec:	d81b      	bhi.n	8016226 <MIOS32_UART_RxBufferPut+0x4a>
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 80161ee:	f7fe f9e1 	bl	80145b4 <MIOS32_IRQ_Disable>
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80161f2:	4b0f      	ldr	r3, [pc, #60]	; (8016230 <MIOS32_UART_RxBufferPut+0x54>)
 80161f4:	490f      	ldr	r1, [pc, #60]	; (8016234 <MIOS32_UART_RxBufferPut+0x58>)
 80161f6:	5d1a      	ldrb	r2, [r3, r4]
 80161f8:	eb02 1084 	add.w	r0, r2, r4, lsl #6
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80161fc:	5d1a      	ldrb	r2, [r3, r4]
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80161fe:	540d      	strb	r5, [r1, r0]
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8016200:	1c50      	adds	r0, r2, #1
 8016202:	b2c1      	uxtb	r1, r0
 8016204:	293f      	cmp	r1, #63	; 0x3f
 8016206:	5519      	strb	r1, [r3, r4]
 8016208:	d901      	bls.n	801620e <MIOS32_UART_RxBufferPut+0x32>
    rx_buffer_head[uart] = 0;
 801620a:	2200      	movs	r2, #0
 801620c:	551a      	strb	r2, [r3, r4]
  ++rx_buffer_size[uart];
 801620e:	4b07      	ldr	r3, [pc, #28]	; (801622c <MIOS32_UART_RxBufferPut+0x50>)
 8016210:	5d18      	ldrb	r0, [r3, r4]
 8016212:	1c41      	adds	r1, r0, #1
 8016214:	b2ca      	uxtb	r2, r1
 8016216:	551a      	strb	r2, [r3, r4]
  MIOS32_IRQ_Enable();
 8016218:	f7fe f9e0 	bl	80145dc <MIOS32_IRQ_Enable>

  return 0; // no error
 801621c:	2000      	movs	r0, #0
 801621e:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8016220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016224:	bd38      	pop	{r3, r4, r5, pc}

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
    return -2; // buffer full (retry)
 8016226:	f06f 0001 	mvn.w	r0, #1
  ++rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 801622a:	bd38      	pop	{r3, r4, r5, pc}
 801622c:	20000f08 	.word	0x20000f08
 8016230:	20001110 	.word	0x20001110
 8016234:	20001010 	.word	0x20001010

08016238 <MIOS32_UART_TxBufferGet>:
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8016238:	2803      	cmp	r0, #3
//! \return -2 if no new byte available
//! \return >= 0: transmitted byte
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
 801623a:	b538      	push	{r3, r4, r5, lr}
 801623c:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801623e:	d81b      	bhi.n	8016278 <MIOS32_UART_TxBufferGet+0x40>
    return -1; // UART not available

  if( !tx_buffer_size[uart] )
 8016240:	4b10      	ldr	r3, [pc, #64]	; (8016284 <MIOS32_UART_TxBufferGet+0x4c>)
 8016242:	5c18      	ldrb	r0, [r3, r0]
 8016244:	b1d8      	cbz	r0, 801627e <MIOS32_UART_TxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8016246:	f7fe f9b5 	bl	80145b4 <MIOS32_IRQ_Disable>
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 801624a:	4b0f      	ldr	r3, [pc, #60]	; (8016288 <MIOS32_UART_TxBufferGet+0x50>)
 801624c:	490f      	ldr	r1, [pc, #60]	; (801628c <MIOS32_UART_TxBufferGet+0x54>)
 801624e:	5d1a      	ldrb	r2, [r3, r4]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8016250:	5d18      	ldrb	r0, [r3, r4]
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8016252:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8016256:	1c42      	adds	r2, r0, #1
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8016258:	5d4d      	ldrb	r5, [r1, r5]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 801625a:	b2d1      	uxtb	r1, r2
 801625c:	293f      	cmp	r1, #63	; 0x3f
 801625e:	5519      	strb	r1, [r3, r4]
 8016260:	d901      	bls.n	8016266 <MIOS32_UART_TxBufferGet+0x2e>
    tx_buffer_tail[uart] = 0;
 8016262:	2000      	movs	r0, #0
 8016264:	5518      	strb	r0, [r3, r4]
  --tx_buffer_size[uart];
 8016266:	4b07      	ldr	r3, [pc, #28]	; (8016284 <MIOS32_UART_TxBufferGet+0x4c>)
 8016268:	5d1a      	ldrb	r2, [r3, r4]
 801626a:	1e51      	subs	r1, r2, #1
 801626c:	b2c8      	uxtb	r0, r1
 801626e:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8016270:	f7fe f9b4 	bl	80145dc <MIOS32_IRQ_Enable>

  return b; // return transmitted byte
 8016274:	4628      	mov	r0, r5
 8016276:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8016278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801627c:	bd38      	pop	{r3, r4, r5, pc}

  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer
 801627e:	f06f 0001 	mvn.w	r0, #1
  --tx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return transmitted byte
#endif
}
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	20001114 	.word	0x20001114
 8016288:	20000f04 	.word	0x20000f04
 801628c:	20000f10 	.word	0x20000f10

08016290 <MIOS32_UART_TxBufferPutMore_NonBlocking>:
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8016290:	2803      	cmp	r0, #3
//! \return -2 if buffer full or cannot get all requested bytes (retry)
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
 8016292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016294:	4604      	mov	r4, r0
 8016296:	460d      	mov	r5, r1
 8016298:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801629a:	d838      	bhi.n	801630e <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7e>
    return -1; // UART not available

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
 801629c:	4b1f      	ldr	r3, [pc, #124]	; (801631c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 801629e:	5c18      	ldrb	r0, [r3, r0]
 80162a0:	1881      	adds	r1, r0, r2
 80162a2:	293f      	cmp	r1, #63	; 0x3f
 80162a4:	dc36      	bgt.n	8016314 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x84>
    return -2; // buffer full or cannot get all requested bytes (retry)

  // copy bytes to be transmitted into transmit buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 80162a6:	f7fe f985 	bl	80145b4 <MIOS32_IRQ_Disable>

  u16 i;
  for(i=0; i<len; ++i) {
 80162aa:	4628      	mov	r0, r5
 80162ac:	1b42      	subs	r2, r0, r5
 80162ae:	b293      	uxth	r3, r2
 80162b0:	42b3      	cmp	r3, r6
 80162b2:	d228      	bcs.n	8016306 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x76>
    tx_buffer[uart][tx_buffer_head[uart]] = *buffer++;
 80162b4:	4b1a      	ldr	r3, [pc, #104]	; (8016320 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x90>)
 80162b6:	491b      	ldr	r1, [pc, #108]	; (8016324 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x94>)
 80162b8:	5d1f      	ldrb	r7, [r3, r4]
 80162ba:	eb07 1284 	add.w	r2, r7, r4, lsl #6
 80162be:	f810 7b01 	ldrb.w	r7, [r0], #1
 80162c2:	548f      	strb	r7, [r1, r2]

    if( ++tx_buffer_head[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 80162c4:	5d1a      	ldrb	r2, [r3, r4]
 80162c6:	1c51      	adds	r1, r2, #1
 80162c8:	b2ca      	uxtb	r2, r1
 80162ca:	2a3f      	cmp	r2, #63	; 0x3f
 80162cc:	551a      	strb	r2, [r3, r4]
 80162ce:	d901      	bls.n	80162d4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x44>
      tx_buffer_head[uart] = 0;
 80162d0:	2100      	movs	r1, #0
 80162d2:	5519      	strb	r1, [r3, r4]

    // enable Tx interrupt if buffer was empty
    if( ++tx_buffer_size[uart] == 1 ) {
 80162d4:	4a11      	ldr	r2, [pc, #68]	; (801631c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 80162d6:	5d13      	ldrb	r3, [r2, r4]
 80162d8:	1c59      	adds	r1, r3, #1
 80162da:	b2cb      	uxtb	r3, r1
 80162dc:	2b01      	cmp	r3, #1
 80162de:	5513      	strb	r3, [r2, r4]
 80162e0:	d1e4      	bne.n	80162ac <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
      switch( uart ) {
 80162e2:	2c02      	cmp	r4, #2
 80162e4:	d006      	beq.n	80162f4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x64>
 80162e6:	2c03      	cmp	r4, #3
 80162e8:	d006      	beq.n	80162f8 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x68>
 80162ea:	2c01      	cmp	r4, #1
        case 0: MIOS32_UART0->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80162ec:	bf14      	ite	ne
 80162ee:	4b0e      	ldrne	r3, [pc, #56]	; (8016328 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x98>)
        case 1: MIOS32_UART1->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80162f0:	4b0e      	ldreq	r3, [pc, #56]	; (801632c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x9c>)
 80162f2:	e002      	b.n	80162fa <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6a>
        case 2: MIOS32_UART2_TX->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80162f4:	4b0e      	ldr	r3, [pc, #56]	; (8016330 <MIOS32_UART_TxBufferPutMore_NonBlocking+0xa0>)
 80162f6:	e000      	b.n	80162fa <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6a>
        case 3: MIOS32_UART3->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80162f8:	4b0e      	ldr	r3, [pc, #56]	; (8016334 <MIOS32_UART_TxBufferPutMore_NonBlocking+0xa4>)
 80162fa:	899a      	ldrh	r2, [r3, #12]
 80162fc:	b291      	uxth	r1, r2
 80162fe:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8016302:	819a      	strh	r2, [r3, #12]
 8016304:	e7d2      	b.n	80162ac <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
        default: MIOS32_IRQ_Enable(); return -3; // uart not supported by routine (yet)
      }
    }
  }

  MIOS32_IRQ_Enable();
 8016306:	f7fe f969 	bl	80145dc <MIOS32_IRQ_Enable>

  return 0; // no error
 801630a:	2000      	movs	r0, #0
 801630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 801630e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
    return -2; // buffer full or cannot get all requested bytes (retry)
 8016314:	f06f 0001 	mvn.w	r0, #1

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 8016318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801631a:	bf00      	nop
 801631c:	20001114 	.word	0x20001114
 8016320:	20001129 	.word	0x20001129
 8016324:	20000f10 	.word	0x20000f10
 8016328:	40004400 	.word	0x40004400
 801632c:	40004800 	.word	0x40004800
 8016330:	40011400 	.word	0x40011400
 8016334:	40005000 	.word	0x40005000

08016338 <MIOS32_UART_TxBufferPutMore>:
//! \return -1 if UART not available
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore(u8 uart, u8 *buffer, u16 len)
{
 8016338:	b570      	push	{r4, r5, r6, lr}
 801633a:	4606      	mov	r6, r0
 801633c:	460d      	mov	r5, r1
 801633e:	4614      	mov	r4, r2
  s32 error;

  while( (error=MIOS32_UART_TxBufferPutMore_NonBlocking(uart, buffer, len)) == -2 );
 8016340:	4630      	mov	r0, r6
 8016342:	4629      	mov	r1, r5
 8016344:	4622      	mov	r2, r4
 8016346:	f7ff ffa3 	bl	8016290 <MIOS32_UART_TxBufferPutMore_NonBlocking>
 801634a:	1c83      	adds	r3, r0, #2
 801634c:	d0f8      	beq.n	8016340 <MIOS32_UART_TxBufferPutMore+0x8>

  return error;
}
 801634e:	bd70      	pop	{r4, r5, r6, pc}

08016350 <USART2_IRQHandler>:
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8016350:	4b19      	ldr	r3, [pc, #100]	; (80163b8 <USART2_IRQHandler+0x68>)
 8016352:	881a      	ldrh	r2, [r3, #0]
 8016354:	f002 0020 	and.w	r0, r2, #32
 8016358:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
 801635a:	b510      	push	{r4, lr}
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 801635c:	b181      	cbz	r1, 8016380 <USART2_IRQHandler+0x30>
    u8 b = MIOS32_UART0->DR;
 801635e:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8016360:	2000      	movs	r0, #0
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;
 8016362:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8016364:	f7ff fd6c 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 8016368:	b920      	cbnz	r0, 8016374 <USART2_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 801636a:	2000      	movs	r0, #0
 801636c:	4621      	mov	r1, r4
 801636e:	f7ff ff35 	bl	80161dc <MIOS32_UART_RxBufferPut>
 8016372:	e005      	b.n	8016380 <USART2_IRQHandler+0x30>
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8016374:	2020      	movs	r0, #32
 8016376:	4621      	mov	r1, r4
 8016378:	f7fc fe8e 	bl	8013098 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 801637c:	2800      	cmp	r0, #0
 801637e:	d0f4      	beq.n	801636a <USART2_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
 8016380:	4c0d      	ldr	r4, [pc, #52]	; (80163b8 <USART2_IRQHandler+0x68>)
 8016382:	8823      	ldrh	r3, [r4, #0]
 8016384:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8016388:	b290      	uxth	r0, r2
 801638a:	b198      	cbz	r0, 80163b4 <USART2_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 801638c:	490b      	ldr	r1, [pc, #44]	; (80163bc <USART2_IRQHandler+0x6c>)
 801638e:	780b      	ldrb	r3, [r1, #0]
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(0) > 0 ) {
 8016390:	b153      	cbz	r3, 80163a8 <USART2_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(0);
 8016392:	2000      	movs	r0, #0
 8016394:	f7ff ff50 	bl	8016238 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8016398:	2800      	cmp	r0, #0
 801639a:	da02      	bge.n	80163a2 <USART2_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART0->DR = 0xff;
 801639c:	20ff      	movs	r0, #255	; 0xff
 801639e:	80a0      	strh	r0, [r4, #4]
 80163a0:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART0->DR = b;
 80163a2:	b282      	uxth	r2, r0
 80163a4:	80a2      	strh	r2, [r4, #4]
 80163a6:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART0->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80163a8:	89a2      	ldrh	r2, [r4, #12]
 80163aa:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80163ae:	0401      	lsls	r1, r0, #16
 80163b0:	0c0b      	lsrs	r3, r1, #16
 80163b2:	81a3      	strh	r3, [r4, #12]
 80163b4:	bd10      	pop	{r4, pc}
 80163b6:	bf00      	nop
 80163b8:	40004400 	.word	0x40004400
 80163bc:	20001114 	.word	0x20001114

080163c0 <USART3_IRQHandler>:
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 80163c0:	4b19      	ldr	r3, [pc, #100]	; (8016428 <USART3_IRQHandler+0x68>)
 80163c2:	881a      	ldrh	r2, [r3, #0]
 80163c4:	f002 0020 	and.w	r0, r2, #32
 80163c8:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
 80163ca:	b510      	push	{r4, lr}
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 80163cc:	b181      	cbz	r1, 80163f0 <USART3_IRQHandler+0x30>
    u8 b = MIOS32_UART1->DR;
 80163ce:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80163d0:	2001      	movs	r0, #1
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;
 80163d2:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80163d4:	f7ff fd34 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80163d8:	b920      	cbnz	r0, 80163e4 <USART3_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80163da:	2001      	movs	r0, #1
 80163dc:	4621      	mov	r1, r4
 80163de:	f7ff fefd 	bl	80161dc <MIOS32_UART_RxBufferPut>
 80163e2:	e005      	b.n	80163f0 <USART3_IRQHandler+0x30>
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80163e4:	2021      	movs	r0, #33	; 0x21
 80163e6:	4621      	mov	r1, r4
 80163e8:	f7fc fe56 	bl	8013098 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80163ec:	2800      	cmp	r0, #0
 80163ee:	d0f4      	beq.n	80163da <USART3_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
 80163f0:	4c0d      	ldr	r4, [pc, #52]	; (8016428 <USART3_IRQHandler+0x68>)
 80163f2:	8823      	ldrh	r3, [r4, #0]
 80163f4:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80163f8:	b290      	uxth	r0, r2
 80163fa:	b198      	cbz	r0, 8016424 <USART3_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 80163fc:	490b      	ldr	r1, [pc, #44]	; (801642c <USART3_IRQHandler+0x6c>)
 80163fe:	784b      	ldrb	r3, [r1, #1]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(1) > 0 ) {
 8016400:	b153      	cbz	r3, 8016418 <USART3_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(1);
 8016402:	2001      	movs	r0, #1
 8016404:	f7ff ff18 	bl	8016238 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8016408:	2800      	cmp	r0, #0
 801640a:	da02      	bge.n	8016412 <USART3_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART1->DR = 0xff;
 801640c:	20ff      	movs	r0, #255	; 0xff
 801640e:	80a0      	strh	r0, [r4, #4]
 8016410:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART1->DR = b;
 8016412:	b282      	uxth	r2, r0
 8016414:	80a2      	strh	r2, [r4, #4]
 8016416:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART1->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8016418:	89a2      	ldrh	r2, [r4, #12]
 801641a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 801641e:	0401      	lsls	r1, r0, #16
 8016420:	0c0b      	lsrs	r3, r1, #16
 8016422:	81a3      	strh	r3, [r4, #12]
 8016424:	bd10      	pop	{r4, pc}
 8016426:	bf00      	nop
 8016428:	40004800 	.word	0x40004800
 801642c:	20001114 	.word	0x20001114

08016430 <USART6_IRQHandler>:
// Interrupt handler for third UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 3
MIOS32_UART2_TX_IRQHANDLER_FUNC
{
  if( MIOS32_UART2_TX->SR & (1 << 5) ) { // check if RXNE flag is set
 8016430:	4b11      	ldr	r3, [pc, #68]	; (8016478 <USART6_IRQHandler+0x48>)
 8016432:	881a      	ldrh	r2, [r3, #0]
 8016434:	f002 0020 	and.w	r0, r2, #32
 8016438:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for third UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 3
MIOS32_UART2_TX_IRQHANDLER_FUNC
{
 801643a:	b510      	push	{r4, lr}
  if( MIOS32_UART2_TX->SR & (1 << 5) ) { // check if RXNE flag is set
 801643c:	b101      	cbz	r1, 8016440 <USART6_IRQHandler+0x10>
    // dummy... this UART is only used for output transfers
    u8 b = MIOS32_UART2_TX->DR;
 801643e:	889a      	ldrh	r2, [r3, #4]
    if( b ); // prevent "unused variable" warning
  }
  
  if( MIOS32_UART2_TX->SR & (1 << 7) ) { // check if TXE flag is set
 8016440:	881b      	ldrh	r3, [r3, #0]
 8016442:	4c0d      	ldr	r4, [pc, #52]	; (8016478 <USART6_IRQHandler+0x48>)
 8016444:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8016448:	b290      	uxth	r0, r2
 801644a:	b198      	cbz	r0, 8016474 <USART6_IRQHandler+0x44>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 801644c:	490b      	ldr	r1, [pc, #44]	; (801647c <USART6_IRQHandler+0x4c>)
 801644e:	788b      	ldrb	r3, [r1, #2]
    u8 b = MIOS32_UART2_TX->DR;
    if( b ); // prevent "unused variable" warning
  }
  
  if( MIOS32_UART2_TX->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(2) > 0 ) {
 8016450:	b153      	cbz	r3, 8016468 <USART6_IRQHandler+0x38>
      s32 b = MIOS32_UART_TxBufferGet(2);
 8016452:	2002      	movs	r0, #2
 8016454:	f7ff fef0 	bl	8016238 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8016458:	2800      	cmp	r0, #0
 801645a:	da02      	bge.n	8016462 <USART6_IRQHandler+0x32>
	// here we could add some error handling
	MIOS32_UART2_TX->DR = 0xff;
 801645c:	20ff      	movs	r0, #255	; 0xff
 801645e:	80a0      	strh	r0, [r4, #4]
 8016460:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART2_TX->DR = b;
 8016462:	b282      	uxth	r2, r0
 8016464:	80a2      	strh	r2, [r4, #4]
 8016466:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART2_TX->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8016468:	89a2      	ldrh	r2, [r4, #12]
 801646a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 801646e:	0401      	lsls	r1, r0, #16
 8016470:	0c0b      	lsrs	r3, r1, #16
 8016472:	81a3      	strh	r3, [r4, #12]
 8016474:	bd10      	pop	{r4, pc}
 8016476:	bf00      	nop
 8016478:	40011400 	.word	0x40011400
 801647c:	20001114 	.word	0x20001114

08016480 <USART1_IRQHandler>:
  }
}

MIOS32_UART2_RX_IRQHANDLER_FUNC
{
  if( MIOS32_UART2_RX->SR & (1 << 5) ) { // check if RXNE flag is set
 8016480:	4b12      	ldr	r3, [pc, #72]	; (80164cc <USART1_IRQHandler+0x4c>)
 8016482:	881a      	ldrh	r2, [r3, #0]
 8016484:	f002 0020 	and.w	r0, r2, #32
 8016488:	b281      	uxth	r1, r0
    }
  }
}

MIOS32_UART2_RX_IRQHANDLER_FUNC
{
 801648a:	b510      	push	{r4, lr}
  if( MIOS32_UART2_RX->SR & (1 << 5) ) { // check if RXNE flag is set
 801648c:	b181      	cbz	r1, 80164b0 <USART1_IRQHandler+0x30>
    u8 b = MIOS32_UART2_RX->DR;
 801648e:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(2) ? MIOS32_MIDI_SendByteToRxCallback(UART2, b) : 0;
 8016490:	2002      	movs	r0, #2
}

MIOS32_UART2_RX_IRQHANDLER_FUNC
{
  if( MIOS32_UART2_RX->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART2_RX->DR;
 8016492:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(2) ? MIOS32_MIDI_SendByteToRxCallback(UART2, b) : 0;
 8016494:	f7ff fcd4 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 8016498:	b920      	cbnz	r0, 80164a4 <USART1_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(2, b) < 0 ) {
 801649a:	2002      	movs	r0, #2
 801649c:	4621      	mov	r1, r4
 801649e:	f7ff fe9d 	bl	80161dc <MIOS32_UART_RxBufferPut>
 80164a2:	e005      	b.n	80164b0 <USART1_IRQHandler+0x30>
MIOS32_UART2_RX_IRQHANDLER_FUNC
{
  if( MIOS32_UART2_RX->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART2_RX->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(2) ? MIOS32_MIDI_SendByteToRxCallback(UART2, b) : 0;
 80164a4:	2022      	movs	r0, #34	; 0x22
 80164a6:	4621      	mov	r1, r4
 80164a8:	f7fc fdf6 	bl	8013098 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(2, b) < 0 ) {
 80164ac:	2800      	cmp	r0, #0
 80164ae:	d0f4      	beq.n	801649a <USART1_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART2_RX->SR & (1 << 7) ) { // check if TXE flag is set
 80164b0:	4a06      	ldr	r2, [pc, #24]	; (80164cc <USART1_IRQHandler+0x4c>)
 80164b2:	8813      	ldrh	r3, [r2, #0]
 80164b4:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80164b8:	b281      	uxth	r1, r0
 80164ba:	b129      	cbz	r1, 80164c8 <USART1_IRQHandler+0x48>
    // dummy... this UART is only used for output transfers
    MIOS32_UART2_RX->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80164bc:	8993      	ldrh	r3, [r2, #12]
 80164be:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 80164c2:	0401      	lsls	r1, r0, #16
 80164c4:	0c0b      	lsrs	r3, r1, #16
 80164c6:	8193      	strh	r3, [r2, #12]
 80164c8:	bd10      	pop	{r4, pc}
 80164ca:	bf00      	nop
 80164cc:	40011000 	.word	0x40011000

080164d0 <UART5_IRQHandler>:
// Interrupt handler for fourth UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 4
MIOS32_UART3_IRQHANDLER_FUNC
{
  if( MIOS32_UART3->SR & (1 << 5) ) { // check if RXNE flag is set
 80164d0:	4b19      	ldr	r3, [pc, #100]	; (8016538 <UART5_IRQHandler+0x68>)
 80164d2:	881a      	ldrh	r2, [r3, #0]
 80164d4:	f002 0020 	and.w	r0, r2, #32
 80164d8:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for fourth UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 4
MIOS32_UART3_IRQHANDLER_FUNC
{
 80164da:	b510      	push	{r4, lr}
  if( MIOS32_UART3->SR & (1 << 5) ) { // check if RXNE flag is set
 80164dc:	b181      	cbz	r1, 8016500 <UART5_IRQHandler+0x30>
    u8 b = MIOS32_UART3->DR;
 80164de:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(3) ? MIOS32_MIDI_SendByteToRxCallback(UART3, b) : 0;
 80164e0:	2003      	movs	r0, #3
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 4
MIOS32_UART3_IRQHANDLER_FUNC
{
  if( MIOS32_UART3->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART3->DR;
 80164e2:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(3) ? MIOS32_MIDI_SendByteToRxCallback(UART3, b) : 0;
 80164e4:	f7ff fcac 	bl	8015e40 <MIOS32_UART_IsAssignedToMIDI>
 80164e8:	b920      	cbnz	r0, 80164f4 <UART5_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(3, b) < 0 ) {
 80164ea:	2003      	movs	r0, #3
 80164ec:	4621      	mov	r1, r4
 80164ee:	f7ff fe75 	bl	80161dc <MIOS32_UART_RxBufferPut>
 80164f2:	e005      	b.n	8016500 <UART5_IRQHandler+0x30>
MIOS32_UART3_IRQHANDLER_FUNC
{
  if( MIOS32_UART3->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART3->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(3) ? MIOS32_MIDI_SendByteToRxCallback(UART3, b) : 0;
 80164f4:	2023      	movs	r0, #35	; 0x23
 80164f6:	4621      	mov	r1, r4
 80164f8:	f7fc fdce 	bl	8013098 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(3, b) < 0 ) {
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d0f4      	beq.n	80164ea <UART5_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART3->SR & (1 << 7) ) { // check if TXE flag is set
 8016500:	4c0d      	ldr	r4, [pc, #52]	; (8016538 <UART5_IRQHandler+0x68>)
 8016502:	8823      	ldrh	r3, [r4, #0]
 8016504:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8016508:	b290      	uxth	r0, r2
 801650a:	b198      	cbz	r0, 8016534 <UART5_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 801650c:	490b      	ldr	r1, [pc, #44]	; (801653c <UART5_IRQHandler+0x6c>)
 801650e:	78cb      	ldrb	r3, [r1, #3]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART3->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(3) > 0 ) {
 8016510:	b153      	cbz	r3, 8016528 <UART5_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(3);
 8016512:	2003      	movs	r0, #3
 8016514:	f7ff fe90 	bl	8016238 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8016518:	2800      	cmp	r0, #0
 801651a:	da02      	bge.n	8016522 <UART5_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART3->DR = 0xff;
 801651c:	20ff      	movs	r0, #255	; 0xff
 801651e:	80a0      	strh	r0, [r4, #4]
 8016520:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART3->DR = b;
 8016522:	b282      	uxth	r2, r0
 8016524:	80a2      	strh	r2, [r4, #4]
 8016526:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART3->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8016528:	89a2      	ldrh	r2, [r4, #12]
 801652a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 801652e:	0401      	lsls	r1, r0, #16
 8016530:	0c0b      	lsrs	r3, r1, #16
 8016532:	81a3      	strh	r3, [r4, #12]
 8016534:	bd10      	pop	{r4, pc}
 8016536:	bf00      	nop
 8016538:	40005000 	.word	0x40005000
 801653c:	20001114 	.word	0x20001114

08016540 <EV_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8016540:	6803      	ldr	r3, [r0, #0]
 8016542:	8a9a      	ldrh	r2, [r3, #20]

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags
 8016544:	8b19      	ldrh	r1, [r3, #24]
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8016546:	b292      	uxth	r2, r2

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8016548:	07d1      	lsls	r1, r2, #31

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
 801654a:	b510      	push	{r4, lr}
  u32 SR1Register = iicx->base->SR1;

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 801654c:	d50d      	bpl.n	801656a <EV_IRQHandler+0x2a>
    // don't send address if stop was requested (WRITE_WITHOUT_STOP - mode, start condition was sent)
    // we have to wait for the application to start the next transfer
    if( iicx->transfer_state.STOP_REQUESTED ) {
 801654e:	6941      	ldr	r1, [r0, #20]
 8016550:	078a      	lsls	r2, r1, #30
 8016552:	d507      	bpl.n	8016564 <EV_IRQHandler+0x24>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 8016554:	7d02      	ldrb	r2, [r0, #20]
 8016556:	f022 0101 	bic.w	r1, r2, #1
 801655a:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801655c:	8898      	ldrh	r0, [r3, #4]
 801655e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8016562:	e027      	b.n	80165b4 <EV_IRQHandler+0x74>
      return;
    }

    /* Send the slave address for transmssion or for reception (according to the configured value
       in the write master write routine */
    iicx->base->DR = iicx->iic_address;
 8016564:	7900      	ldrb	r0, [r0, #4]
 8016566:	8218      	strh	r0, [r3, #16]
    return;
 8016568:	bd10      	pop	{r4, pc}
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
 801656a:	f002 0102 	and.w	r1, r2, #2
 801656e:	b289      	uxth	r1, r1
 8016570:	2900      	cmp	r1, #0
 8016572:	d031      	beq.n	80165d8 <EV_IRQHandler+0x98>
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8016574:	7901      	ldrb	r1, [r0, #4]
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8016576:	8a02      	ldrh	r2, [r0, #16]
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8016578:	f011 0f01 	tst.w	r1, #1
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 801657c:	b291      	uxth	r1, r2
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 801657e:	d11d      	bne.n	80165bc <EV_IRQHandler+0x7c>
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8016580:	2900      	cmp	r1, #0
 8016582:	d036      	beq.n	80165f2 <EV_IRQHandler+0xb2>
	iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

	// transfer finished
	iicx->transfer_state.BUSY = 0;	
      } else {
	if( iicx->buffer_ix < iicx->buffer_len ) {
 8016584:	8a42      	ldrh	r2, [r0, #18]
 8016586:	b291      	uxth	r1, r2
 8016588:	8a02      	ldrh	r2, [r0, #16]
 801658a:	b292      	uxth	r2, r2
 801658c:	4291      	cmp	r1, r2
 801658e:	d208      	bcs.n	80165a2 <EV_IRQHandler+0x62>
	  /* Write the first data in the data register */
	  iicx->base->DR = (iicx->tx_buffer_ptr == NULL) ? 0 : iicx->tx_buffer_ptr[iicx->buffer_ix++];
 8016590:	6882      	ldr	r2, [r0, #8]
 8016592:	b12a      	cbz	r2, 80165a0 <EV_IRQHandler+0x60>
 8016594:	8a41      	ldrh	r1, [r0, #18]
 8016596:	b289      	uxth	r1, r1
 8016598:	5c52      	ldrb	r2, [r2, r1]
 801659a:	3101      	adds	r1, #1
 801659c:	b289      	uxth	r1, r1
 801659e:	8241      	strh	r1, [r0, #18]
 80165a0:	821a      	strh	r2, [r3, #16]
	}

	/* If no further data to be sent, disable the I2C BUF IT
	   in order to not have a TxE interrupt */
	if( iicx->buffer_ix >= iicx->buffer_len ) {
 80165a2:	8a42      	ldrh	r2, [r0, #18]
 80165a4:	8a00      	ldrh	r0, [r0, #16]
 80165a6:	b291      	uxth	r1, r2
 80165a8:	b282      	uxth	r2, r0
 80165aa:	4291      	cmp	r1, r2
 80165ac:	d378      	bcc.n	80166a0 <EV_IRQHandler+0x160>
	  iicx->base->CR2 &= (u16)~I2C_IT_BUF;
 80165ae:	8899      	ldrh	r1, [r3, #4]
 80165b0:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80165b4:	0402      	lsls	r2, r0, #16
 80165b6:	0c11      	lsrs	r1, r2, #16
 80165b8:	8099      	strh	r1, [r3, #4]
 80165ba:	bd10      	pop	{r4, pc}
      /* Master Receiver */

      /* At this stage, ADDR is cleared because both SR1 and SR2 were read.*/
      /* EV6_1: used for single byte reception. The ACK disable and the STOP
	 Programming should be done just after ADDR is cleared. */
      if( iicx->buffer_len == 1 ) {
 80165bc:	2901      	cmp	r1, #1
 80165be:	d16f      	bne.n	80166a0 <EV_IRQHandler+0x160>
	/* Clear ACK */
	iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 80165c0:	881a      	ldrh	r2, [r3, #0]
 80165c2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80165c6:	040a      	lsls	r2, r1, #16
 80165c8:	0c11      	lsrs	r1, r2, #16
 80165ca:	8019      	strh	r1, [r3, #0]
	/* Program the STOP */
	iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80165cc:	881a      	ldrh	r2, [r3, #0]
 80165ce:	b291      	uxth	r1, r2
 80165d0:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80165d4:	801a      	strh	r2, [r3, #0]
 80165d6:	e05f      	b.n	8016698 <EV_IRQHandler+0x158>
    return;
  }

  /* Master transmits the remaing data: from data2 until the last one.  */
  /* If TXE is set */
  if( (SR1Register &0x0084) == 0x0080 ) {
 80165d8:	f002 0184 	and.w	r1, r2, #132	; 0x84
 80165dc:	2980      	cmp	r1, #128	; 0x80
 80165de:	d106      	bne.n	80165ee <EV_IRQHandler+0xae>
    /* If there is still data to write */
    if( iicx->buffer_ix < iicx->buffer_len ) {
 80165e0:	8a42      	ldrh	r2, [r0, #18]
 80165e2:	b291      	uxth	r1, r2
 80165e4:	8a02      	ldrh	r2, [r0, #16]
 80165e6:	b292      	uxth	r2, r2
 80165e8:	4291      	cmp	r1, r2
 80165ea:	d3d1      	bcc.n	8016590 <EV_IRQHandler+0x50>
 80165ec:	e058      	b.n	80166a0 <EV_IRQHandler+0x160>

    return;
  }

  /* If BTF and TXE are set (EV8_2), program the STOP */
  if( (SR1Register & 0x0084) == 0x0084 ) {
 80165ee:	2984      	cmp	r1, #132	; 0x84
 80165f0:	d112      	bne.n	8016618 <EV_IRQHandler+0xd8>
    /* Program the STOP */
    iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80165f2:	881a      	ldrh	r2, [r3, #0]
 80165f4:	b291      	uxth	r1, r2
 80165f6:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80165fa:	801a      	strh	r2, [r3, #0]
    iicx->transfer_state.STOP_REQUESTED = 1;
 80165fc:	7d01      	ldrb	r1, [r0, #20]
 80165fe:	f041 0202 	orr.w	r2, r1, #2
 8016602:	7502      	strb	r2, [r0, #20]

    // disable all interrupts
    iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016604:	8899      	ldrh	r1, [r3, #4]
 8016606:	f421 62e0 	bic.w	r2, r1, #1792	; 0x700
 801660a:	0411      	lsls	r1, r2, #16
 801660c:	0c0a      	lsrs	r2, r1, #16
 801660e:	809a      	strh	r2, [r3, #4]

    // transfer finished
    iicx->transfer_state.BUSY = 0;
 8016610:	7d03      	ldrb	r3, [r0, #20]
 8016612:	f023 0101 	bic.w	r1, r3, #1
 8016616:	e042      	b.n	801669e <EV_IRQHandler+0x15e>

    return;
  }

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
 8016618:	f002 0240 	and.w	r2, r2, #64	; 0x40
 801661c:	b291      	uxth	r1, r2
 801661e:	2900      	cmp	r1, #0
 8016620:	d03e      	beq.n	80166a0 <EV_IRQHandler+0x160>
 8016622:	68c1      	ldr	r1, [r0, #12]
 8016624:	2900      	cmp	r1, #0
 8016626:	d03b      	beq.n	80166a0 <EV_IRQHandler+0x160>
    /* Read the data register */

    u8 b = iicx->base->DR;
 8016628:	8a1c      	ldrh	r4, [r3, #16]

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 801662a:	8a42      	ldrh	r2, [r0, #18]

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
    /* Read the data register */

    u8 b = iicx->base->DR;
 801662c:	b2e3      	uxtb	r3, r4

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 801662e:	b294      	uxth	r4, r2
 8016630:	8a02      	ldrh	r2, [r0, #16]
 8016632:	b292      	uxth	r2, r2
 8016634:	4294      	cmp	r4, r2
 8016636:	d205      	bcs.n	8016644 <EV_IRQHandler+0x104>
      iicx->rx_buffer_ptr[iicx->buffer_ix++] = b;
 8016638:	8a42      	ldrh	r2, [r0, #18]
 801663a:	b292      	uxth	r2, r2
 801663c:	548b      	strb	r3, [r1, r2]
 801663e:	1c51      	adds	r1, r2, #1
 8016640:	b28a      	uxth	r2, r1
 8016642:	8242      	strh	r2, [r0, #18]

    // last byte received, disable interrupts and return.
    if( iicx->transfer_state.STOP_REQUESTED ) {
 8016644:	6941      	ldr	r1, [r0, #20]
 8016646:	0789      	lsls	r1, r1, #30
 8016648:	d50b      	bpl.n	8016662 <EV_IRQHandler+0x122>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 801664a:	7d02      	ldrb	r2, [r0, #20]
 801664c:	f022 0101 	bic.w	r1, r2, #1
 8016650:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016652:	6800      	ldr	r0, [r0, #0]
 8016654:	8883      	ldrh	r3, [r0, #4]
 8016656:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801665a:	0411      	lsls	r1, r2, #16
 801665c:	0c0b      	lsrs	r3, r1, #16
 801665e:	8083      	strh	r3, [r0, #4]
      return;
 8016660:	bd10      	pop	{r4, pc}
    }
 
    // request NAK and stop condition before receiving last data
    if( (iicx->buffer_ix >= iicx->buffer_len-1) || (iicx->transfer_state.ABORT_IF_FIRST_BYTE_0 && iicx->buffer_ix == 1 && b == 0x00) ) {
 8016662:	8a42      	ldrh	r2, [r0, #18]
 8016664:	b291      	uxth	r1, r2
 8016666:	8a02      	ldrh	r2, [r0, #16]
 8016668:	b292      	uxth	r2, r2
 801666a:	3a01      	subs	r2, #1
 801666c:	4291      	cmp	r1, r2
 801666e:	da07      	bge.n	8016680 <EV_IRQHandler+0x140>
 8016670:	6941      	ldr	r1, [r0, #20]
 8016672:	074a      	lsls	r2, r1, #29
 8016674:	d514      	bpl.n	80166a0 <EV_IRQHandler+0x160>
 8016676:	8a42      	ldrh	r2, [r0, #18]
 8016678:	b291      	uxth	r1, r2
 801667a:	2901      	cmp	r1, #1
 801667c:	d110      	bne.n	80166a0 <EV_IRQHandler+0x160>
 801667e:	b97b      	cbnz	r3, 80166a0 <EV_IRQHandler+0x160>
      /* Clear ACK */
      iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8016680:	6802      	ldr	r2, [r0, #0]
 8016682:	8813      	ldrh	r3, [r2, #0]
 8016684:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8016688:	040b      	lsls	r3, r1, #16
 801668a:	0c19      	lsrs	r1, r3, #16
 801668c:	8011      	strh	r1, [r2, #0]
      /* Program the STOP */
      iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 801668e:	8813      	ldrh	r3, [r2, #0]
 8016690:	b299      	uxth	r1, r3
 8016692:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8016696:	8013      	strh	r3, [r2, #0]
      iicx->transfer_state.STOP_REQUESTED = 1;
 8016698:	7d03      	ldrb	r3, [r0, #20]
 801669a:	f043 0102 	orr.w	r1, r3, #2
 801669e:	7501      	strb	r1, [r0, #20]
 80166a0:	bd10      	pop	{r4, pc}
	...

080166a4 <ER_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
 80166a4:	b538      	push	{r3, r4, r5, lr}
 80166a6:	4604      	mov	r4, r0
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 80166a8:	6800      	ldr	r0, [r0, #0]
 80166aa:	f000 fa8d 	bl	8016bc8 <I2C_GetLastEvent>
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 80166ae:	4b17      	ldr	r3, [pc, #92]	; (801670c <ER_IRQHandler+0x68>)
 80166b0:	4003      	ands	r3, r0
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 80166b2:	4605      	mov	r5, r0
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 80166b4:	b13b      	cbz	r3, 80166c6 <ER_IRQHandler+0x22>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_BERR);
 80166b6:	6820      	ldr	r0, [r4, #0]
 80166b8:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 80166bc:	f000 fa8c 	bl	8016bd8 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_BUS;
 80166c0:	f06f 0005 	mvn.w	r0, #5
 80166c4:	61a0      	str	r0, [r4, #24]
  }

  // arbitration lost
  if( event & I2C_FLAG_ARLO ) {
 80166c6:	4912      	ldr	r1, [pc, #72]	; (8016710 <ER_IRQHandler+0x6c>)
 80166c8:	4029      	ands	r1, r5
 80166ca:	b131      	cbz	r1, 80166da <ER_IRQHandler+0x36>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_ARLO);
 80166cc:	6820      	ldr	r0, [r4, #0]
 80166ce:	4911      	ldr	r1, [pc, #68]	; (8016714 <ER_IRQHandler+0x70>)
 80166d0:	f000 fa82 	bl	8016bd8 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_ARBITRATION_LOST;
 80166d4:	f06f 0204 	mvn.w	r2, #4
 80166d8:	61a2      	str	r2, [r4, #24]
  }

  // no acknowledge received from slave (e.g. slave not connected)
  if( event & I2C_FLAG_AF ) {
 80166da:	4b0f      	ldr	r3, [pc, #60]	; (8016718 <ER_IRQHandler+0x74>)
 80166dc:	402b      	ands	r3, r5
 80166de:	b153      	cbz	r3, 80166f6 <ER_IRQHandler+0x52>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_AF);
 80166e0:	6820      	ldr	r0, [r4, #0]
 80166e2:	490e      	ldr	r1, [pc, #56]	; (801671c <ER_IRQHandler+0x78>)
 80166e4:	f000 fa78 	bl	8016bd8 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_SLAVE_NOT_CONNECTED;
 80166e8:	f06f 0006 	mvn.w	r0, #6
 80166ec:	61a0      	str	r0, [r4, #24]
    // send stop condition to release bus
    I2C_GenerateSTOP(iicx->base, ENABLE);
 80166ee:	2101      	movs	r1, #1
 80166f0:	6820      	ldr	r0, [r4, #0]
 80166f2:	f000 fa54 	bl	8016b9e <I2C_GenerateSTOP>
  }

  // disable interrupts
  I2C_ITConfig(iicx->base, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR, DISABLE);
 80166f6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80166fa:	2200      	movs	r2, #0
 80166fc:	6820      	ldr	r0, [r4, #0]
 80166fe:	f000 fa5a 	bl	8016bb6 <I2C_ITConfig>

  // notify that transfer has finished (due to the error)
  iicx->transfer_state.BUSY = 0;
 8016702:	7d21      	ldrb	r1, [r4, #20]
 8016704:	f021 0201 	bic.w	r2, r1, #1
 8016708:	7522      	strb	r2, [r4, #20]
 801670a:	bd38      	pop	{r3, r4, r5, pc}
 801670c:	10000100 	.word	0x10000100
 8016710:	10000200 	.word	0x10000200
 8016714:	01000200 	.word	0x01000200
 8016718:	10000400 	.word	0x10000400
 801671c:	01000400 	.word	0x01000400

08016720 <I2C2_EV_IRQHandler>:
// interrupt vectors
/////////////////////////////////////////////////////////////////////////////

void I2C2_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[0]);
 8016720:	4801      	ldr	r0, [pc, #4]	; (8016728 <I2C2_EV_IRQHandler+0x8>)
 8016722:	f7ff bf0d 	b.w	8016540 <EV_IRQHandler>
 8016726:	bf00      	nop
 8016728:	20001130 	.word	0x20001130

0801672c <I2C2_ER_IRQHandler>:
}

void I2C2_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[0]);
 801672c:	4801      	ldr	r0, [pc, #4]	; (8016734 <I2C2_ER_IRQHandler+0x8>)
 801672e:	f7ff bfb9 	b.w	80166a4 <ER_IRQHandler>
 8016732:	bf00      	nop
 8016734:	20001130 	.word	0x20001130

08016738 <I2C1_EV_IRQHandler>:


#if MIOS32_IIC_NUM >= 2
void I2C1_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[1]);
 8016738:	4801      	ldr	r0, [pc, #4]	; (8016740 <I2C1_EV_IRQHandler+0x8>)
 801673a:	f7ff bf01 	b.w	8016540 <EV_IRQHandler>
 801673e:	bf00      	nop
 8016740:	20001154 	.word	0x20001154

08016744 <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[1]);
 8016744:	4801      	ldr	r0, [pc, #4]	; (801674c <I2C1_ER_IRQHandler+0x8>)
 8016746:	f7ff bfad 	b.w	80166a4 <ER_IRQHandler>
 801674a:	bf00      	nop
 801674c:	20001154 	.word	0x20001154

08016750 <printchar>:

static void printchar(char **str, int c)
{
  //	extern int putchar(int c);
	
	if (str) {
 8016750:	b128      	cbz	r0, 801675e <printchar+0xe>
		**str = c;
 8016752:	6803      	ldr	r3, [r0, #0]
 8016754:	7019      	strb	r1, [r3, #0]
		++(*str);
 8016756:	6801      	ldr	r1, [r0, #0]
 8016758:	1c4a      	adds	r2, r1, #1
 801675a:	6002      	str	r2, [r0, #0]
 801675c:	4770      	bx	lr
	}
#ifndef MIOS32_DONT_USE_COM
	else MIOS32_COM_SendChar(1, c); // (void)putchar(c);
 801675e:	2001      	movs	r0, #1
 8016760:	b2c9      	uxtb	r1, r1
 8016762:	f7fd b807 	b.w	8013774 <MIOS32_COM_SendChar>

08016766 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8016766:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 801676a:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 801676c:	4680      	mov	r8, r0
 801676e:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8016770:	dc01      	bgt.n	8016776 <prints+0x10>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8016772:	2720      	movs	r7, #32
 8016774:	e00f      	b.n	8016796 <prints+0x30>

	if (width > 0) {
 8016776:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8016778:	f819 1002 	ldrb.w	r1, [r9, r2]
 801677c:	b109      	cbz	r1, 8016782 <prints+0x1c>
 801677e:	3201      	adds	r2, #1
 8016780:	e7fa      	b.n	8016778 <prints+0x12>
		if (len >= width) width = 0;
 8016782:	42a2      	cmp	r2, r4
		else width -= len;
 8016784:	bfb4      	ite	lt
 8016786:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 801678a:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 801678c:	f013 0f02 	tst.w	r3, #2
 8016790:	bf0c      	ite	eq
 8016792:	2720      	moveq	r7, #32
 8016794:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8016796:	07db      	lsls	r3, r3, #31
 8016798:	d40c      	bmi.n	80167b4 <prints+0x4e>
 801679a:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 801679c:	2d00      	cmp	r5, #0
 801679e:	dd05      	ble.n	80167ac <prints+0x46>
			printchar (out, padchar);
 80167a0:	4640      	mov	r0, r8
 80167a2:	4639      	mov	r1, r7
 80167a4:	f7ff ffd4 	bl	8016750 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 80167a8:	3d01      	subs	r5, #1
 80167aa:	e7f7      	b.n	801679c <prints+0x36>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 80167ac:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80167b0:	1ba4      	subs	r4, r4, r6
 80167b2:	e000      	b.n	80167b6 <prints+0x50>
{
	register int pc = 0, padchar = ' ';
 80167b4:	2600      	movs	r6, #0
 80167b6:	4635      	mov	r5, r6
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 80167b8:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80167bc:	5d59      	ldrb	r1, [r3, r5]
 80167be:	b121      	cbz	r1, 80167ca <prints+0x64>
		printchar (out, *string);
 80167c0:	4640      	mov	r0, r8
 80167c2:	f7ff ffc5 	bl	8016750 <printchar>
		++pc;
 80167c6:	3501      	adds	r5, #1
 80167c8:	e7f6      	b.n	80167b8 <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80167ca:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80167cc:	2e00      	cmp	r6, #0
 80167ce:	dd05      	ble.n	80167dc <prints+0x76>
		printchar (out, padchar);
 80167d0:	4640      	mov	r0, r8
 80167d2:	4639      	mov	r1, r7
 80167d4:	f7ff ffbc 	bl	8016750 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80167d8:	3e01      	subs	r6, #1
 80167da:	e7f7      	b.n	80167cc <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 80167dc:	2c00      	cmp	r4, #0
 80167de:	bfac      	ite	ge
 80167e0:	1928      	addge	r0, r5, r4
 80167e2:	1c28      	addlt	r0, r5, #0
 80167e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080167e8 <printi>:
/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12
#endif

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80167e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80167ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80167f2:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80167f4:	460c      	mov	r4, r1

	if (i == 0) {
 80167f6:	b951      	cbnz	r1, 801680e <printi+0x26>
		print_buf[0] = '0';
 80167f8:	2230      	movs	r2, #48	; 0x30
 80167fa:	f88d 2004 	strb.w	r2, [sp, #4]
		print_buf[1] = '\0';
 80167fe:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8016802:	4632      	mov	r2, r6
 8016804:	a901      	add	r1, sp, #4
 8016806:	4643      	mov	r3, r8
 8016808:	f7ff ffad 	bl	8016766 <prints>
 801680c:	e035      	b.n	801687a <printi+0x92>
	}

	if (sg && b == 10 && i < 0) {
 801680e:	b133      	cbz	r3, 801681e <printi+0x36>
 8016810:	2a0a      	cmp	r2, #10
 8016812:	d104      	bne.n	801681e <printi+0x36>
 8016814:	2900      	cmp	r1, #0
 8016816:	da02      	bge.n	801681e <printi+0x36>
		neg = 1;
		u = -i;
 8016818:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 801681a:	2701      	movs	r7, #1
 801681c:	e000      	b.n	8016820 <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 801681e:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8016820:	ad04      	add	r5, sp, #16
 8016822:	2300      	movs	r3, #0
 8016824:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016828:	46aa      	mov	sl, r5

	while (u) {
 801682a:	b16c      	cbz	r4, 8016848 <printi+0x60>
		t = u % b;
 801682c:	fbb4 f3f2 	udiv	r3, r4, r2
 8016830:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 8016834:	2c09      	cmp	r4, #9
 8016836:	dd02      	ble.n	801683e <printi+0x56>
			t += letbase - '0' - 10;
 8016838:	990e      	ldr	r1, [sp, #56]	; 0x38
 801683a:	393a      	subs	r1, #58	; 0x3a
 801683c:	1864      	adds	r4, r4, r1
		*--s = t + '0';
 801683e:	3430      	adds	r4, #48	; 0x30
 8016840:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 8016844:	461c      	mov	r4, r3
 8016846:	e7ef      	b.n	8016828 <printi+0x40>
	}

	if (neg) {
 8016848:	b187      	cbz	r7, 801686c <printi+0x84>
		if( width && (pad & PAD_ZERO) ) {
 801684a:	b14e      	cbz	r6, 8016860 <printi+0x78>
 801684c:	f018 0f02 	tst.w	r8, #2
 8016850:	d006      	beq.n	8016860 <printi+0x78>
			printchar (out, '-');
 8016852:	4648      	mov	r0, r9
 8016854:	212d      	movs	r1, #45	; 0x2d
 8016856:	f7ff ff7b 	bl	8016750 <printchar>
			++pc;
			--width;
 801685a:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 801685c:	2701      	movs	r7, #1
			--width;
 801685e:	e005      	b.n	801686c <printi+0x84>
		}
		else {
			*--s = '-';
 8016860:	202d      	movs	r0, #45	; 0x2d
 8016862:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8016866:	f805 0c01 	strb.w	r0, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 801686a:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 801686c:	4648      	mov	r0, r9
 801686e:	4651      	mov	r1, sl
 8016870:	4632      	mov	r2, r6
 8016872:	4643      	mov	r3, r8
 8016874:	f7ff ff77 	bl	8016766 <prints>
 8016878:	1838      	adds	r0, r7, r0
}
 801687a:	b004      	add	sp, #16
 801687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016880 <print>:

static int print( char **out, const char *format, va_list args )
{
 8016880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016882:	b089      	sub	sp, #36	; 0x24
 8016884:	4606      	mov	r6, r0
 8016886:	460d      	mov	r5, r1
 8016888:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 801688a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 801688c:	782b      	ldrb	r3, [r5, #0]
 801688e:	b123      	cbz	r3, 801689a <print+0x1a>
		if (*format == '%') {
 8016890:	2b25      	cmp	r3, #37	; 0x25
 8016892:	d179      	bne.n	8016988 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8016894:	7868      	ldrb	r0, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8016896:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8016898:	b928      	cbnz	r0, 80168a6 <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 801689a:	2e00      	cmp	r6, #0
 801689c:	d07b      	beq.n	8016996 <print+0x116>
 801689e:	6830      	ldr	r0, [r6, #0]
 80168a0:	2200      	movs	r2, #0
 80168a2:	7002      	strb	r2, [r0, #0]
 80168a4:	e077      	b.n	8016996 <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 80168a6:	2825      	cmp	r0, #37	; 0x25
 80168a8:	d06d      	beq.n	8016986 <print+0x106>
			if (*format == '-') {
 80168aa:	282d      	cmp	r0, #45	; 0x2d
 80168ac:	d102      	bne.n	80168b4 <print+0x34>
				++format;
 80168ae:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 80168b0:	2301      	movs	r3, #1
 80168b2:	e000      	b.n	80168b6 <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 80168b4:	2300      	movs	r3, #0
 80168b6:	4617      	mov	r7, r2
 80168b8:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80168ba:	7839      	ldrb	r1, [r7, #0]
 80168bc:	2930      	cmp	r1, #48	; 0x30
 80168be:	d102      	bne.n	80168c6 <print+0x46>
				++format;
				pad |= PAD_ZERO;
 80168c0:	f043 0302 	orr.w	r3, r3, #2
 80168c4:	e7f7      	b.n	80168b6 <print+0x36>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80168c6:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80168c8:	7839      	ldrb	r1, [r7, #0]
 80168ca:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80168ce:	fa5f fc80 	uxtb.w	ip, r0
 80168d2:	463d      	mov	r5, r7
 80168d4:	3701      	adds	r7, #1
 80168d6:	f1bc 0f09 	cmp.w	ip, #9
 80168da:	d803      	bhi.n	80168e4 <print+0x64>
				width *= 10;
				width += *format - '0';
 80168dc:	250a      	movs	r5, #10
 80168de:	fb05 0202 	mla	r2, r5, r2, r0
 80168e2:	e7f1      	b.n	80168c8 <print+0x48>
			}
			if( *format == 's' ) {
 80168e4:	2973      	cmp	r1, #115	; 0x73
 80168e6:	d109      	bne.n	80168fc <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 80168e8:	9f05      	ldr	r7, [sp, #20]
 80168ea:	1d39      	adds	r1, r7, #4
 80168ec:	9105      	str	r1, [sp, #20]
 80168ee:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 80168f0:	4f2a      	ldr	r7, [pc, #168]	; (801699c <print+0x11c>)
 80168f2:	4630      	mov	r0, r6
 80168f4:	2900      	cmp	r1, #0
 80168f6:	bf08      	it	eq
 80168f8:	4639      	moveq	r1, r7
 80168fa:	e041      	b.n	8016980 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 80168fc:	2964      	cmp	r1, #100	; 0x64
 80168fe:	d10e      	bne.n	801691e <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8016900:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016904:	9905      	ldr	r1, [sp, #20]
 8016906:	2361      	movs	r3, #97	; 0x61
 8016908:	9302      	str	r3, [sp, #8]
 801690a:	1d08      	adds	r0, r1, #4
 801690c:	6809      	ldr	r1, [r1, #0]
 801690e:	9005      	str	r0, [sp, #20]
 8016910:	220a      	movs	r2, #10
 8016912:	4630      	mov	r0, r6
 8016914:	2301      	movs	r3, #1
 8016916:	f7ff ff67 	bl	80167e8 <printi>
 801691a:	1824      	adds	r4, r4, r0
				continue;
 801691c:	e039      	b.n	8016992 <print+0x112>
			}
			if( *format == 'x' ) {
 801691e:	2978      	cmp	r1, #120	; 0x78
 8016920:	d106      	bne.n	8016930 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8016922:	9905      	ldr	r1, [sp, #20]
 8016924:	1d08      	adds	r0, r1, #4
 8016926:	e88d 000c 	stmia.w	sp, {r2, r3}
 801692a:	9005      	str	r0, [sp, #20]
 801692c:	2261      	movs	r2, #97	; 0x61
 801692e:	e007      	b.n	8016940 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8016930:	2958      	cmp	r1, #88	; 0x58
 8016932:	d10a      	bne.n	801694a <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8016934:	9905      	ldr	r1, [sp, #20]
 8016936:	1d08      	adds	r0, r1, #4
 8016938:	e88d 000c 	stmia.w	sp, {r2, r3}
 801693c:	9005      	str	r0, [sp, #20]
 801693e:	2241      	movs	r2, #65	; 0x41
 8016940:	9202      	str	r2, [sp, #8]
 8016942:	4630      	mov	r0, r6
 8016944:	6809      	ldr	r1, [r1, #0]
 8016946:	2210      	movs	r2, #16
 8016948:	e00b      	b.n	8016962 <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 801694a:	2975      	cmp	r1, #117	; 0x75
 801694c:	d10b      	bne.n	8016966 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 801694e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016952:	9905      	ldr	r1, [sp, #20]
 8016954:	2361      	movs	r3, #97	; 0x61
 8016956:	9302      	str	r3, [sp, #8]
 8016958:	1d08      	adds	r0, r1, #4
 801695a:	6809      	ldr	r1, [r1, #0]
 801695c:	9005      	str	r0, [sp, #20]
 801695e:	220a      	movs	r2, #10
 8016960:	4630      	mov	r0, r6
 8016962:	2300      	movs	r3, #0
 8016964:	e7d7      	b.n	8016916 <print+0x96>
			if( *format == 'b' ) {
				pc += printi (out, va_arg( args, int ), 2, 0, width, pad, 'A');
				continue;
			}
			#endif
			if( *format == 'c' ) {
 8016966:	2963      	cmp	r1, #99	; 0x63
 8016968:	d113      	bne.n	8016992 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 801696a:	9905      	ldr	r1, [sp, #20]
 801696c:	1d08      	adds	r0, r1, #4
 801696e:	6809      	ldr	r1, [r1, #0]
 8016970:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8016972:	2000      	movs	r0, #0
				continue;
			}
			#endif
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8016974:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8016978:	f88d 001d 	strb.w	r0, [sp, #29]
				pc += prints (out, scr, width, pad);
 801697c:	a907      	add	r1, sp, #28
 801697e:	4630      	mov	r0, r6
 8016980:	f7ff fef1 	bl	8016766 <prints>
 8016984:	e7c9      	b.n	801691a <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8016986:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8016988:	4630      	mov	r0, r6
 801698a:	7829      	ldrb	r1, [r5, #0]
 801698c:	f7ff fee0 	bl	8016750 <printchar>
			++pc;
 8016990:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8016992:	3501      	adds	r5, #1
 8016994:	e77a      	b.n	801688c <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8016996:	4620      	mov	r0, r4
 8016998:	b009      	add	sp, #36	; 0x24
 801699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801699c:	0801f914 	.word	0x0801f914

080169a0 <sprintf>:
{
  return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 80169a0:	b40e      	push	{r1, r2, r3}
 80169a2:	b50f      	push	{r0, r1, r2, r3, lr}
 80169a4:	aa05      	add	r2, sp, #20
 80169a6:	9001      	str	r0, [sp, #4]
 80169a8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 80169ac:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 80169ae:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 80169b0:	f7ff ff66 	bl	8016880 <print>
}
 80169b4:	b004      	add	sp, #16
 80169b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80169ba:	b003      	add	sp, #12
 80169bc:	4770      	bx	lr

080169be <vsprintf>:

// TK: added for alternative parameter passing
int vsprintf(char *out, const char *format, va_list args)
{
 80169be:	b507      	push	{r0, r1, r2, lr}
  char *_out;
  _out = out;
 80169c0:	ab02      	add	r3, sp, #8
 80169c2:	f843 0d04 	str.w	r0, [r3, #-4]!
  return print( &_out, format, args );
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7ff ff5a 	bl	8016880 <print>
}
 80169cc:	bd0e      	pop	{r1, r2, r3, pc}
	...

080169d0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80169d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80169d4:	4b02      	ldr	r3, [pc, #8]	; (80169e0 <NVIC_PriorityGroupConfig+0x10>)
 80169d6:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 80169da:	60d9      	str	r1, [r3, #12]
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	e000ed00 	.word	0xe000ed00

080169e4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80169e4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80169e8:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 80169ec:	4b01      	ldr	r3, [pc, #4]	; (80169f4 <NVIC_SetVectorTable+0x10>)
 80169ee:	4310      	orrs	r0, r2
 80169f0:	6098      	str	r0, [r3, #8]
 80169f2:	4770      	bx	lr
 80169f4:	e000ed00 	.word	0xe000ed00

080169f8 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80169f8:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80169fa:	4b13      	ldr	r3, [pc, #76]	; (8016a48 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80169fc:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80169fe:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8016a00:	68cc      	ldr	r4, [r1, #12]
 8016a02:	680a      	ldr	r2, [r1, #0]
 8016a04:	4314      	orrs	r4, r2
 8016a06:	694a      	ldr	r2, [r1, #20]
 8016a08:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8016a0a:	698a      	ldr	r2, [r1, #24]
 8016a0c:	4314      	orrs	r4, r2
 8016a0e:	69ca      	ldr	r2, [r1, #28]
 8016a10:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8016a12:	6a0a      	ldr	r2, [r1, #32]
 8016a14:	4314      	orrs	r4, r2
 8016a16:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8016a18:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8016a1a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8016a1c:	4314      	orrs	r4, r2
 8016a1e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8016a20:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8016a22:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8016a24:	4314      	orrs	r4, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8016a26:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8016a28:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8016a2a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8016a2c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016a2e:	f022 0407 	bic.w	r4, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8016a32:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8016a34:	431a      	orrs	r2, r3
 8016a36:	4322      	orrs	r2, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8016a38:	6142      	str	r2, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8016a3a:	690b      	ldr	r3, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8016a3c:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8016a3e:	6889      	ldr	r1, [r1, #8]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8016a40:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8016a42:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8016a44:	60c1      	str	r1, [r0, #12]
 8016a46:	bd10      	pop	{r4, pc}
 8016a48:	f01c803f 	.word	0xf01c803f

08016a4c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8016a50:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8016a52:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8016a54:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8016a56:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8016a58:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8016a5a:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8016a5c:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8016a5e:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8016a60:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8016a62:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8016a64:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8016a66:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8016a68:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8016a6a:	6383      	str	r3, [r0, #56]	; 0x38
 8016a6c:	4770      	bx	lr

08016a6e <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8016a6e:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016a70:	b111      	cbz	r1, 8016a78 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8016a72:	f043 0101 	orr.w	r1, r3, #1
 8016a76:	e001      	b.n	8016a7c <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8016a78:	f023 0101 	bic.w	r1, r3, #1
 8016a7c:	6001      	str	r1, [r0, #0]
 8016a7e:	4770      	bx	lr

08016a80 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8016a80:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8016a82:	4b08      	ldr	r3, [pc, #32]	; (8016aa4 <DMA_ClearFlag+0x24>)
 8016a84:	4a08      	ldr	r2, [pc, #32]	; (8016aa8 <DMA_ClearFlag+0x28>)
 8016a86:	4c09      	ldr	r4, [pc, #36]	; (8016aac <DMA_ClearFlag+0x2c>)
 8016a88:	42a0      	cmp	r0, r4
 8016a8a:	bf8c      	ite	hi
 8016a8c:	4610      	movhi	r0, r2
 8016a8e:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8016a90:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8016a94:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8016a98:	f021 1382 	bic.w	r3, r1, #8519810	; 0x820082
 8016a9c:	bf14      	ite	ne
 8016a9e:	60c3      	strne	r3, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8016aa0:	6083      	streq	r3, [r0, #8]
 8016aa2:	bd10      	pop	{r4, pc}
 8016aa4:	40026000 	.word	0x40026000
 8016aa8:	40026400 	.word	0x40026400
 8016aac:	4002640f 	.word	0x4002640f

08016ab0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8016ab0:	4b01      	ldr	r3, [pc, #4]	; (8016ab8 <EXTI_ClearITPendingBit+0x8>)
 8016ab2:	6158      	str	r0, [r3, #20]
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop
 8016ab8:	40013c00 	.word	0x40013c00

08016abc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8016abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8016abe:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8016ac0:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	fa03 f302 	lsl.w	r3, r3, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8016ac8:	ea03 0506 	and.w	r5, r3, r6

    if (currentpin == pos)
 8016acc:	429d      	cmp	r5, r3
 8016ace:	d13e      	bne.n	8016b4e <GPIO_Init+0x92>
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8016ad0:	6807      	ldr	r7, [r0, #0]
 8016ad2:	790c      	ldrb	r4, [r1, #4]
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8016ad4:	0053      	lsls	r3, r2, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8016ad6:	fa27 f703 	lsr.w	r7, r7, r3
 8016ada:	f007 0703 	and.w	r7, r7, #3
 8016ade:	42a7      	cmp	r7, r4
 8016ae0:	d00d      	beq.n	8016afe <GPIO_Init+0x42>
	GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8016ae2:	6807      	ldr	r7, [r0, #0]
 8016ae4:	f04f 0c03 	mov.w	ip, #3
 8016ae8:	fa0c fc03 	lsl.w	ip, ip, r3
 8016aec:	ea27 070c 	bic.w	r7, r7, ip
 8016af0:	6007      	str	r7, [r0, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8016af2:	6807      	ldr	r7, [r0, #0]
 8016af4:	fa04 fc03 	lsl.w	ip, r4, r3
 8016af8:	ea4c 0707 	orr.w	r7, ip, r7
 8016afc:	6007      	str	r7, [r0, #0]
      }

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8016afe:	3c01      	subs	r4, #1
 8016b00:	2c01      	cmp	r4, #1
 8016b02:	d817      	bhi.n	8016b34 <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8016b04:	6887      	ldr	r7, [r0, #8]
 8016b06:	2403      	movs	r4, #3
 8016b08:	fa04 f403 	lsl.w	r4, r4, r3
 8016b0c:	ea27 0704 	bic.w	r7, r7, r4
 8016b10:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8016b12:	794c      	ldrb	r4, [r1, #5]
 8016b14:	6887      	ldr	r7, [r0, #8]
 8016b16:	fa04 f403 	lsl.w	r4, r4, r3
 8016b1a:	433c      	orrs	r4, r7
 8016b1c:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8016b1e:	6844      	ldr	r4, [r0, #4]
 8016b20:	ea24 0505 	bic.w	r5, r4, r5
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8016b24:	798c      	ldrb	r4, [r1, #6]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8016b26:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8016b28:	6845      	ldr	r5, [r0, #4]
 8016b2a:	fa04 f402 	lsl.w	r4, r4, r2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8016b2e:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8016b30:	432c      	orrs	r4, r5
 8016b32:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8016b34:	68c5      	ldr	r5, [r0, #12]
 8016b36:	2403      	movs	r4, #3
 8016b38:	fa04 f403 	lsl.w	r4, r4, r3
 8016b3c:	ea25 0504 	bic.w	r5, r5, r4
 8016b40:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8016b42:	79cd      	ldrb	r5, [r1, #7]
 8016b44:	68c4      	ldr	r4, [r0, #12]
 8016b46:	fa05 f303 	lsl.w	r3, r5, r3
 8016b4a:	4323      	orrs	r3, r4
 8016b4c:	60c3      	str	r3, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8016b4e:	3201      	adds	r2, #1
 8016b50:	2a10      	cmp	r2, #16
 8016b52:	d1b6      	bne.n	8016ac2 <GPIO_Init+0x6>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8016b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b56 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8016b56:	2100      	movs	r1, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8016b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b5c:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8016b5e:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8016b60:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8016b62:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8016b64:	71c1      	strb	r1, [r0, #7]
 8016b66:	4770      	bx	lr

08016b68 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8016b68:	8301      	strh	r1, [r0, #24]
 8016b6a:	4770      	bx	lr

08016b6c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8016b6c:	8341      	strh	r1, [r0, #26]
 8016b6e:	4770      	bx	lr

08016b70 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8016b70:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8016b74:	08c9      	lsrs	r1, r1, #3
 8016b76:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8016b78:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8016b7a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8016b7c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8016b80:	240f      	movs	r4, #15
 8016b82:	fa04 f403 	lsl.w	r4, r4, r3
 8016b86:	ea25 0404 	bic.w	r4, r5, r4
 8016b8a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8016b8e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8016b92:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8016b96:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8016b98:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8016b9c:	bd30      	pop	{r4, r5, pc}

08016b9e <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8016b9e:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016ba0:	b119      	cbz	r1, 8016baa <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8016ba2:	b299      	uxth	r1, r3
 8016ba4:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8016ba8:	e003      	b.n	8016bb2 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8016baa:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8016bae:	040a      	lsls	r2, r1, #16
 8016bb0:	0c13      	lsrs	r3, r2, #16
 8016bb2:	8003      	strh	r3, [r0, #0]
 8016bb4:	4770      	bx	lr

08016bb6 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8016bb6:	8883      	ldrh	r3, [r0, #4]
 8016bb8:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8016bba:	b10a      	cbz	r2, 8016bc0 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8016bbc:	4319      	orrs	r1, r3
 8016bbe:	e001      	b.n	8016bc4 <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8016bc0:	ea23 0101 	bic.w	r1, r3, r1
 8016bc4:	8081      	strh	r1, [r0, #4]
 8016bc6:	4770      	bx	lr

08016bc8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8016bc8:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8016bca:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8016bcc:	b299      	uxth	r1, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8016bce:	ea41 4200 	orr.w	r2, r1, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8016bd2:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8016bd6:	4770      	bx	lr

08016bd8 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8016bd8:	43c9      	mvns	r1, r1
 8016bda:	b28a      	uxth	r2, r1
 8016bdc:	8282      	strh	r2, [r0, #20]
 8016bde:	4770      	bx	lr

08016be0 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8016be0:	4b01      	ldr	r3, [pc, #4]	; (8016be8 <PWR_BackupAccessCmd+0x8>)
 8016be2:	6018      	str	r0, [r3, #0]
 8016be4:	4770      	bx	lr
 8016be6:	bf00      	nop
 8016be8:	420e0020 	.word	0x420e0020

08016bec <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8016bec:	4b1e      	ldr	r3, [pc, #120]	; (8016c68 <RCC_GetClocksFreq+0x7c>)
 8016bee:	689a      	ldr	r2, [r3, #8]
 8016bf0:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 8016bf4:	2904      	cmp	r1, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8016bf6:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8016bf8:	d003      	beq.n	8016c02 <RCC_GetClocksFreq+0x16>
 8016bfa:	2908      	cmp	r1, #8
 8016bfc:	d003      	beq.n	8016c06 <RCC_GetClocksFreq+0x1a>
 8016bfe:	4b1b      	ldr	r3, [pc, #108]	; (8016c6c <RCC_GetClocksFreq+0x80>)
 8016c00:	e018      	b.n	8016c34 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8016c02:	4b1b      	ldr	r3, [pc, #108]	; (8016c70 <RCC_GetClocksFreq+0x84>)
 8016c04:	e016      	b.n	8016c34 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8016c06:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016c08:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8016c0a:	6859      	ldr	r1, [r3, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8016c0c:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8016c10:	bf14      	ite	ne
 8016c12:	4b17      	ldrne	r3, [pc, #92]	; (8016c70 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8016c14:	4b15      	ldreq	r3, [pc, #84]	; (8016c6c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016c16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8016c1a:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8016c1e:	4a12      	ldr	r2, [pc, #72]	; (8016c68 <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8016c20:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8016c24:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8016c26:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8016c28:	f3c1 4401 	ubfx	r4, r1, #16, #2
 8016c2c:	1c62      	adds	r2, r4, #1
 8016c2e:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8016c30:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8016c34:	490c      	ldr	r1, [pc, #48]	; (8016c68 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8016c36:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8016c38:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8016c3a:	4a0e      	ldr	r2, [pc, #56]	; (8016c74 <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8016c3c:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8016c40:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8016c42:	6803      	ldr	r3, [r0, #0]
 8016c44:	fa23 f304 	lsr.w	r3, r3, r4
 8016c48:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8016c4a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8016c4c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8016c50:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8016c52:	fa23 f404 	lsr.w	r4, r3, r4
 8016c56:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8016c58:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8016c5a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8016c5e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8016c60:	fa23 f302 	lsr.w	r3, r3, r2
 8016c64:	60c3      	str	r3, [r0, #12]
 8016c66:	bd10      	pop	{r4, pc}
 8016c68:	40023800 	.word	0x40023800
 8016c6c:	00f42400 	.word	0x00f42400
 8016c70:	007a1200 	.word	0x007a1200
 8016c74:	20000018 	.word	0x20000018

08016c78 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8016c78:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8016c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016c80:	4b08      	ldr	r3, [pc, #32]	; (8016ca4 <RCC_RTCCLKConfig+0x2c>)
 8016c82:	d108      	bne.n	8016c96 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8016c84:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8016c86:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8016c8a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8016c8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8016c92:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8016c94:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8016c96:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016c98:	0500      	lsls	r0, r0, #20
 8016c9a:	ea41 5210 	orr.w	r2, r1, r0, lsr #20
 8016c9e:	671a      	str	r2, [r3, #112]	; 0x70
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop
 8016ca4:	40023800 	.word	0x40023800

08016ca8 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8016ca8:	4b01      	ldr	r3, [pc, #4]	; (8016cb0 <RCC_RTCCLKCmd+0x8>)
 8016caa:	6018      	str	r0, [r3, #0]
 8016cac:	4770      	bx	lr
 8016cae:	bf00      	nop
 8016cb0:	42470e3c 	.word	0x42470e3c

08016cb4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8016cb4:	4b04      	ldr	r3, [pc, #16]	; (8016cc8 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8016cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016cb8:	b109      	cbz	r1, 8016cbe <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8016cba:	4310      	orrs	r0, r2
 8016cbc:	e001      	b.n	8016cc2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8016cbe:	ea22 0000 	bic.w	r0, r2, r0
 8016cc2:	6318      	str	r0, [r3, #48]	; 0x30
 8016cc4:	4770      	bx	lr
 8016cc6:	bf00      	nop
 8016cc8:	40023800 	.word	0x40023800

08016ccc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8016ccc:	4b04      	ldr	r3, [pc, #16]	; (8016ce0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8016cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016cd0:	b109      	cbz	r1, 8016cd6 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8016cd2:	4310      	orrs	r0, r2
 8016cd4:	e001      	b.n	8016cda <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8016cd6:	ea22 0000 	bic.w	r0, r2, r0
 8016cda:	6358      	str	r0, [r3, #52]	; 0x34
 8016cdc:	4770      	bx	lr
 8016cde:	bf00      	nop
 8016ce0:	40023800 	.word	0x40023800

08016ce4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8016ce4:	4b04      	ldr	r3, [pc, #16]	; (8016cf8 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8016ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016ce8:	b109      	cbz	r1, 8016cee <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8016cea:	4310      	orrs	r0, r2
 8016cec:	e001      	b.n	8016cf2 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8016cee:	ea22 0000 	bic.w	r0, r2, r0
 8016cf2:	6418      	str	r0, [r3, #64]	; 0x40
 8016cf4:	4770      	bx	lr
 8016cf6:	bf00      	nop
 8016cf8:	40023800 	.word	0x40023800

08016cfc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8016cfc:	4b04      	ldr	r3, [pc, #16]	; (8016d10 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8016cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016d00:	b109      	cbz	r1, 8016d06 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8016d02:	4310      	orrs	r0, r2
 8016d04:	e001      	b.n	8016d0a <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8016d06:	ea22 0000 	bic.w	r0, r2, r0
 8016d0a:	6458      	str	r0, [r3, #68]	; 0x44
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	40023800 	.word	0x40023800

08016d14 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8016d14:	4b04      	ldr	r3, [pc, #16]	; (8016d28 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8016d16:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016d18:	b109      	cbz	r1, 8016d1e <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8016d1a:	4310      	orrs	r0, r2
 8016d1c:	e001      	b.n	8016d22 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8016d1e:	ea22 0000 	bic.w	r0, r2, r0
 8016d22:	6118      	str	r0, [r3, #16]
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop
 8016d28:	40023800 	.word	0x40023800

08016d2c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8016d2c:	4b04      	ldr	r3, [pc, #16]	; (8016d40 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8016d2e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8016d30:	b109      	cbz	r1, 8016d36 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8016d32:	4310      	orrs	r0, r2
 8016d34:	e001      	b.n	8016d3a <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8016d36:	ea22 0000 	bic.w	r0, r2, r0
 8016d3a:	6158      	str	r0, [r3, #20]
 8016d3c:	4770      	bx	lr
 8016d3e:	bf00      	nop
 8016d40:	40023800 	.word	0x40023800

08016d44 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8016d44:	4b04      	ldr	r3, [pc, #16]	; (8016d58 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8016d46:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016d48:	b109      	cbz	r1, 8016d4e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8016d4a:	4310      	orrs	r0, r2
 8016d4c:	e001      	b.n	8016d52 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8016d4e:	ea22 0000 	bic.w	r0, r2, r0
 8016d52:	6218      	str	r0, [r3, #32]
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	40023800 	.word	0x40023800

08016d5c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8016d5c:	4b04      	ldr	r3, [pc, #16]	; (8016d70 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8016d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016d60:	b109      	cbz	r1, 8016d66 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8016d62:	4310      	orrs	r0, r2
 8016d64:	e001      	b.n	8016d6a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8016d66:	ea22 0000 	bic.w	r0, r2, r0
 8016d6a:	6258      	str	r0, [r3, #36]	; 0x24
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop
 8016d70:	40023800 	.word	0x40023800

08016d74 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8016d74:	2100      	movs	r1, #0
  
  while (Value >= 10)
 8016d76:	2809      	cmp	r0, #9
 8016d78:	d904      	bls.n	8016d84 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8016d7a:	1c4b      	adds	r3, r1, #1
    Value -= 10;
 8016d7c:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8016d7e:	b2d9      	uxtb	r1, r3
    Value -= 10;
 8016d80:	b2c0      	uxtb	r0, r0
 8016d82:	e7f8      	b.n	8016d76 <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8016d84:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
 8016d88:	b2c0      	uxtb	r0, r0
 8016d8a:	4770      	bx	lr

08016d8c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8016d8c:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8016d8e:	f000 030f 	and.w	r3, r0, #15
 8016d92:	200a      	movs	r0, #10
 8016d94:	fb00 3102 	mla	r1, r0, r2, r3
}
 8016d98:	b2c8      	uxtb	r0, r1
 8016d9a:	4770      	bx	lr

08016d9c <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	227f      	movs	r2, #127	; 0x7f
 8016da0:	23ff      	movs	r3, #255	; 0xff
 8016da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016da6:	4770      	bx	lr

08016da8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8016da8:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8016daa:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8016dac:	490d      	ldr	r1, [pc, #52]	; (8016de4 <RTC_EnterInitMode+0x3c>)
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 8016dae:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8016db0:	68ca      	ldr	r2, [r1, #12]
 8016db2:	0650      	lsls	r0, r2, #25
 8016db4:	d413      	bmi.n	8016dde <RTC_EnterInitMode+0x36>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8016db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dba:	60c8      	str	r0, [r1, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8016dbc:	4b09      	ldr	r3, [pc, #36]	; (8016de4 <RTC_EnterInitMode+0x3c>)
 8016dbe:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 8016dc0:	9801      	ldr	r0, [sp, #4]
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8016dc2:	f001 0240 	and.w	r2, r1, #64	; 0x40
      initcounter++;  
 8016dc6:	1c41      	adds	r1, r0, #1
 8016dc8:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8016dca:	9801      	ldr	r0, [sp, #4]
 8016dcc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016dd0:	d001      	beq.n	8016dd6 <RTC_EnterInitMode+0x2e>
 8016dd2:	2a00      	cmp	r2, #0
 8016dd4:	d0f2      	beq.n	8016dbc <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8016dd6:	68db      	ldr	r3, [r3, #12]
    {
      status = SUCCESS;
 8016dd8:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8016ddc:	e000      	b.n	8016de0 <RTC_EnterInitMode+0x38>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8016dde:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8016de0:	b002      	add	sp, #8
 8016de2:	4770      	bx	lr
 8016de4:	40002800 	.word	0x40002800

08016de8 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8016de8:	4b02      	ldr	r3, [pc, #8]	; (8016df4 <RTC_ExitInitMode+0xc>)
 8016dea:	68da      	ldr	r2, [r3, #12]
 8016dec:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8016df0:	60d8      	str	r0, [r3, #12]
 8016df2:	4770      	bx	lr
 8016df4:	40002800 	.word	0x40002800

08016df8 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8016df8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016dfa:	4c10      	ldr	r4, [pc, #64]	; (8016e3c <RTC_Init+0x44>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8016dfc:	4605      	mov	r5, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016dfe:	23ca      	movs	r3, #202	; 0xca
  RTC->WPR = 0x53;
 8016e00:	2053      	movs	r0, #83	; 0x53
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016e02:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8016e04:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8016e06:	f7ff ffcf 	bl	8016da8 <RTC_EnterInitMode>
 8016e0a:	b190      	cbz	r0, 8016e32 <RTC_Init+0x3a>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8016e0c:	68a1      	ldr	r1, [r4, #8]
 8016e0e:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8016e12:	60a2      	str	r2, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8016e14:	68a0      	ldr	r0, [r4, #8]
 8016e16:	682b      	ldr	r3, [r5, #0]
 8016e18:	ea40 0103 	orr.w	r1, r0, r3
 8016e1c:	60a1      	str	r1, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8016e1e:	68aa      	ldr	r2, [r5, #8]
 8016e20:	6122      	str	r2, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8016e22:	6920      	ldr	r0, [r4, #16]
 8016e24:	686b      	ldr	r3, [r5, #4]
 8016e26:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8016e2a:	6121      	str	r1, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8016e2c:	f7ff ffdc 	bl	8016de8 <RTC_ExitInitMode>

    status = SUCCESS;    
 8016e30:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8016e32:	4b02      	ldr	r3, [pc, #8]	; (8016e3c <RTC_Init+0x44>)
 8016e34:	22ff      	movs	r2, #255	; 0xff
 8016e36:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8016e38:	bd38      	pop	{r3, r4, r5, pc}
 8016e3a:	bf00      	nop
 8016e3c:	40002800 	.word	0x40002800

08016e40 <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016e40:	480f      	ldr	r0, [pc, #60]	; (8016e80 <RTC_WaitForSynchro+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8016e42:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8016e44:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016e46:	22ca      	movs	r2, #202	; 0xca
  RTC->WPR = 0x53;
 8016e48:	2153      	movs	r1, #83	; 0x53
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 8016e4a:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016e4c:	6242      	str	r2, [r0, #36]	; 0x24
  RTC->WPR = 0x53;
 8016e4e:	6241      	str	r1, [r0, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8016e50:	68c3      	ldr	r3, [r0, #12]
 8016e52:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 8016e56:	60c2      	str	r2, [r0, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8016e58:	4b09      	ldr	r3, [pc, #36]	; (8016e80 <RTC_WaitForSynchro+0x40>)
 8016e5a:	68d8      	ldr	r0, [r3, #12]
    synchrocounter++;  
 8016e5c:	9901      	ldr	r1, [sp, #4]
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8016e5e:	f000 0220 	and.w	r2, r0, #32
    synchrocounter++;  
 8016e62:	1c48      	adds	r0, r1, #1
 8016e64:	9001      	str	r0, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8016e66:	9901      	ldr	r1, [sp, #4]
 8016e68:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8016e6c:	d001      	beq.n	8016e72 <RTC_WaitForSynchro+0x32>
 8016e6e:	2a00      	cmp	r2, #0
 8016e70:	d0f2      	beq.n	8016e58 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8016e72:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8016e74:	22ff      	movs	r2, #255	; 0xff
 8016e76:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 8016e78:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8016e7c:	b002      	add	sp, #8
 8016e7e:	4770      	bx	lr
 8016e80:	40002800 	.word	0x40002800

08016e84 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	4b21      	ldr	r3, [pc, #132]	; (8016f0c <RTC_SetTime+0x88>)
 8016e88:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8016e8a:	6899      	ldr	r1, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8016e8c:	b920      	cbnz	r0, 8016e98 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8016e8e:	f011 0640 	ands.w	r6, r1, #64	; 0x40
 8016e92:	d127      	bne.n	8016ee4 <RTC_SetTime+0x60>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8016e94:	70e6      	strb	r6, [r4, #3]
 8016e96:	e025      	b.n	8016ee4 <RTC_SetTime+0x60>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8016e98:	f011 0040 	ands.w	r0, r1, #64	; 0x40
 8016e9c:	d100      	bne.n	8016ea0 <RTC_SetTime+0x1c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8016e9e:	70e0      	strb	r0, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8016ea0:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016ea2:	7822      	ldrb	r2, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8016ea4:	78a0      	ldrb	r0, [r4, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8016ea6:	78e4      	ldrb	r4, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8016ea8:	022b      	lsls	r3, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016eaa:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8016eae:	4301      	orrs	r1, r0
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016eb0:	ea41 4504 	orr.w	r5, r1, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016eb4:	4c15      	ldr	r4, [pc, #84]	; (8016f0c <RTC_SetTime+0x88>)
 8016eb6:	21ca      	movs	r1, #202	; 0xca
  RTC->WPR = 0x53;
 8016eb8:	2053      	movs	r0, #83	; 0x53
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8016eba:	6261      	str	r1, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8016ebc:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8016ebe:	f7ff ff73 	bl	8016da8 <RTC_EnterInitMode>
 8016ec2:	b158      	cbz	r0, 8016edc <RTC_SetTime+0x58>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016ec4:	f005 327f 	and.w	r2, r5, #2139062143	; 0x7f7f7f7f
 8016ec8:	f022 45fe 	bic.w	r5, r2, #2130706432	; 0x7f000000
 8016ecc:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8016ece:	f7ff ff8b 	bl	8016de8 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8016ed2:	f7ff ffb5 	bl	8016e40 <RTC_WaitForSynchro>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8016ed6:	3000      	adds	r0, #0
 8016ed8:	bf18      	it	ne
 8016eda:	2001      	movne	r0, #1
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8016edc:	4b0b      	ldr	r3, [pc, #44]	; (8016f0c <RTC_SetTime+0x88>)
 8016ede:	21ff      	movs	r1, #255	; 0xff
 8016ee0:	6259      	str	r1, [r3, #36]	; 0x24
 8016ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016ee4:	7820      	ldrb	r0, [r4, #0]
 8016ee6:	f7ff ff45 	bl	8016d74 <RTC_ByteToBcd2>
 8016eea:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8016eec:	7860      	ldrb	r0, [r4, #1]
 8016eee:	f7ff ff41 	bl	8016d74 <RTC_ByteToBcd2>
 8016ef2:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8016ef4:	78a0      	ldrb	r0, [r4, #2]
 8016ef6:	f7ff ff3d 	bl	8016d74 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8016efa:	78e2      	ldrb	r2, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016efc:	ea40 4502 	orr.w	r5, r0, r2, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8016f00:	ea45 4307 	orr.w	r3, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8016f04:	ea43 2506 	orr.w	r5, r3, r6, lsl #8
 8016f08:	e7d4      	b.n	8016eb4 <RTC_SetTime+0x30>
 8016f0a:	bf00      	nop
 8016f0c:	40002800 	.word	0x40002800

08016f10 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8016f10:	2300      	movs	r3, #0
 8016f12:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8016f14:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8016f16:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8016f18:	7083      	strb	r3, [r0, #2]
 8016f1a:	4770      	bx	lr

08016f1c <RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8016f1c:	4b0f      	ldr	r3, [pc, #60]	; (8016f5c <RTC_GetTime+0x40>)
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8016f1e:	b570      	push	{r4, r5, r6, lr}
 8016f20:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8016f22:	6819      	ldr	r1, [r3, #0]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8016f24:	f401 0380 	and.w	r3, r1, #4194304	; 0x400000

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8016f28:	f3c1 4205 	ubfx	r2, r1, #16, #6
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8016f2c:	f3c1 2606 	ubfx	r6, r1, #8, #7
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8016f30:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8016f34:	0c19      	lsrs	r1, r3, #16

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8016f36:	7022      	strb	r2, [r4, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8016f38:	7066      	strb	r6, [r4, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8016f3a:	70a5      	strb	r5, [r4, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8016f3c:	70e1      	strb	r1, [r4, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8016f3e:	b958      	cbnz	r0, 8016f58 <RTC_GetTime+0x3c>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8016f40:	4610      	mov	r0, r2
 8016f42:	f7ff ff23 	bl	8016d8c <RTC_Bcd2ToByte>
 8016f46:	7020      	strb	r0, [r4, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8016f48:	4630      	mov	r0, r6
 8016f4a:	f7ff ff1f 	bl	8016d8c <RTC_Bcd2ToByte>
 8016f4e:	7060      	strb	r0, [r4, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8016f50:	4628      	mov	r0, r5
 8016f52:	f7ff ff1b 	bl	8016d8c <RTC_Bcd2ToByte>
 8016f56:	70a0      	strb	r0, [r4, #2]
 8016f58:	bd70      	pop	{r4, r5, r6, pc}
 8016f5a:	bf00      	nop
 8016f5c:	40002800 	.word	0x40002800

08016f60 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8016f60:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8016f62:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8016f64:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8016f66:	884c      	ldrh	r4, [r1, #2]
 8016f68:	4323      	orrs	r3, r4
 8016f6a:	888c      	ldrh	r4, [r1, #4]
 8016f6c:	4323      	orrs	r3, r4
 8016f6e:	88cc      	ldrh	r4, [r1, #6]
 8016f70:	4323      	orrs	r3, r4
 8016f72:	890c      	ldrh	r4, [r1, #8]
 8016f74:	4323      	orrs	r3, r4
 8016f76:	894c      	ldrh	r4, [r1, #10]
 8016f78:	4323      	orrs	r3, r4
 8016f7a:	898c      	ldrh	r4, [r1, #12]
 8016f7c:	4323      	orrs	r3, r4
 8016f7e:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8016f80:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8016f82:	4323      	orrs	r3, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8016f84:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8016f88:	431a      	orrs	r2, r3
 8016f8a:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8016f8c:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8016f8e:	8b82      	ldrh	r2, [r0, #28]
 8016f90:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8016f94:	041a      	lsls	r2, r3, #16
 8016f96:	0c13      	lsrs	r3, r2, #16
 8016f98:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8016f9a:	8201      	strh	r1, [r0, #16]
 8016f9c:	bd10      	pop	{r4, pc}

08016f9e <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8016f9e:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016fa0:	b119      	cbz	r1, 8016faa <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8016fa2:	b299      	uxth	r1, r3
 8016fa4:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8016fa8:	e003      	b.n	8016fb2 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8016faa:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8016fae:	040a      	lsls	r2, r1, #16
 8016fb0:	0c13      	lsrs	r3, r2, #16
 8016fb2:	8003      	strh	r3, [r0, #0]
 8016fb4:	4770      	bx	lr

08016fb6 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8016fb6:	8883      	ldrh	r3, [r0, #4]
 8016fb8:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8016fba:	b10a      	cbz	r2, 8016fc0 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8016fbc:	4319      	orrs	r1, r3
 8016fbe:	e001      	b.n	8016fc4 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8016fc0:	ea23 0101 	bic.w	r1, r3, r1
 8016fc4:	8081      	strh	r1, [r0, #4]
 8016fc6:	4770      	bx	lr

08016fc8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8016fc8:	4a1c      	ldr	r2, [pc, #112]	; (801703c <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8016fca:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8016fcc:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8016fce:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8016fd0:	d012      	beq.n	8016ff8 <TIM_TimeBaseInit+0x30>
 8016fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fd6:	4290      	cmp	r0, r2
 8016fd8:	d00e      	beq.n	8016ff8 <TIM_TimeBaseInit+0x30>
 8016fda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016fde:	d00b      	beq.n	8016ff8 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8016fe0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8016fe4:	4290      	cmp	r0, r2
 8016fe6:	d007      	beq.n	8016ff8 <TIM_TimeBaseInit+0x30>
 8016fe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fec:	4290      	cmp	r0, r2
 8016fee:	d003      	beq.n	8016ff8 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8016ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016ff4:	4290      	cmp	r0, r2
 8016ff6:	d103      	bne.n	8017000 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8016ff8:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8016ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8016ffe:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8017000:	4a0f      	ldr	r2, [pc, #60]	; (8017040 <TIM_TimeBaseInit+0x78>)
 8017002:	4290      	cmp	r0, r2
 8017004:	d008      	beq.n	8017018 <TIM_TimeBaseInit+0x50>
 8017006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801700a:	4290      	cmp	r0, r2
 801700c:	d004      	beq.n	8017018 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8017012:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8017014:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8017016:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8017018:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801701a:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801701c:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801701e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8017020:	4b06      	ldr	r3, [pc, #24]	; (801703c <TIM_TimeBaseInit+0x74>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8017022:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8017024:	4298      	cmp	r0, r3
 8017026:	d003      	beq.n	8017030 <TIM_TimeBaseInit+0x68>
 8017028:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 801702c:	4290      	cmp	r0, r2
 801702e:	d101      	bne.n	8017034 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8017030:	7a89      	ldrb	r1, [r1, #10]
 8017032:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8017034:	2301      	movs	r3, #1
 8017036:	8283      	strh	r3, [r0, #20]
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop
 801703c:	40010000 	.word	0x40010000
 8017040:	40001000 	.word	0x40001000

08017044 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8017044:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8017046:	b119      	cbz	r1, 8017050 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8017048:	b299      	uxth	r1, r3
 801704a:	f041 0301 	orr.w	r3, r1, #1
 801704e:	e003      	b.n	8017058 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8017050:	f023 0101 	bic.w	r1, r3, #1
 8017054:	040a      	lsls	r2, r1, #16
 8017056:	0c13      	lsrs	r3, r2, #16
 8017058:	8003      	strh	r3, [r0, #0]
 801705a:	4770      	bx	lr

0801705c <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 801705c:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 801705e:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8017060:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8017064:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8017066:	d003      	beq.n	8017070 <TIM_GetITStatus+0x14>
 8017068:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 801706a:	bf0c      	ite	eq
 801706c:	2000      	moveq	r0, #0
 801706e:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8017070:	4770      	bx	lr

08017072 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8017072:	43c9      	mvns	r1, r1
 8017074:	b28a      	uxth	r2, r1
 8017076:	8202      	strh	r2, [r0, #16]
 8017078:	4770      	bx	lr
	...

0801707c <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801707c:	8a03      	ldrh	r3, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 801707e:	b530      	push	{r4, r5, lr}
 8017080:	460d      	mov	r5, r1
 8017082:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8017084:	88ea      	ldrh	r2, [r5, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8017086:	b298      	uxth	r0, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8017088:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801708c:	4311      	orrs	r1, r2
 801708e:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8017090:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8017092:	f423 50b0 	bic.w	r0, r3, #5632	; 0x1600
 8017096:	f020 010c 	bic.w	r1, r0, #12
 801709a:	040a      	lsls	r2, r1, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 801709c:	8928      	ldrh	r0, [r5, #8]
 801709e:	88a9      	ldrh	r1, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80170a0:	0c13      	lsrs	r3, r2, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80170a2:	ea40 0201 	orr.w	r2, r0, r1
 80170a6:	8968      	ldrh	r0, [r5, #10]
 80170a8:	4302      	orrs	r2, r0
 80170aa:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80170ac:	430b      	orrs	r3, r1
 80170ae:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80170b0:	8aa2      	ldrh	r2, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80170b2:	89ab      	ldrh	r3, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80170b4:	b290      	uxth	r0, r2

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80170b6:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80170ba:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80170bc:	4319      	orrs	r1, r3
 80170be:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80170c0:	4668      	mov	r0, sp
 80170c2:	f7ff fd93 	bl	8016bec <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80170c6:	4a1a      	ldr	r2, [pc, #104]	; (8017130 <USART_Init+0xb4>)
 80170c8:	4294      	cmp	r4, r2
 80170ca:	d003      	beq.n	80170d4 <USART_Init+0x58>
 80170cc:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80170d0:	4284      	cmp	r4, r0
 80170d2:	d101      	bne.n	80170d8 <USART_Init+0x5c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80170d4:	9b03      	ldr	r3, [sp, #12]
 80170d6:	e000      	b.n	80170da <USART_Init+0x5e>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80170d8:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80170da:	89a1      	ldrh	r1, [r4, #12]
 80170dc:	b20a      	sxth	r2, r1
 80170de:	2a00      	cmp	r2, #0
 80170e0:	f04f 0019 	mov.w	r0, #25
 80170e4:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80170e6:	fb00 f303 	mul.w	r3, r0, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80170ea:	da01      	bge.n	80170f0 <USART_Init+0x74>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80170ec:	0051      	lsls	r1, r2, #1
 80170ee:	e000      	b.n	80170f2 <USART_Init+0x76>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80170f0:	0091      	lsls	r1, r2, #2
 80170f2:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 80170f6:	2364      	movs	r3, #100	; 0x64
 80170f8:	fbb1 f0f3 	udiv	r0, r1, r3
 80170fc:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80170fe:	0910      	lsrs	r0, r2, #4
 8017100:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8017104:	89a0      	ldrh	r0, [r4, #12]
 8017106:	b200      	sxth	r0, r0
 8017108:	2800      	cmp	r0, #0
 801710a:	da06      	bge.n	801711a <USART_Init+0x9e>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 801710c:	00c9      	lsls	r1, r1, #3
 801710e:	3132      	adds	r1, #50	; 0x32
 8017110:	fbb1 f3f3 	udiv	r3, r1, r3
 8017114:	f003 0007 	and.w	r0, r3, #7
 8017118:	e005      	b.n	8017126 <USART_Init+0xaa>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 801711a:	0109      	lsls	r1, r1, #4
 801711c:	3132      	adds	r1, #50	; 0x32
 801711e:	fbb1 f3f3 	udiv	r3, r1, r3
 8017122:	f003 000f 	and.w	r0, r3, #15
 8017126:	4302      	orrs	r2, r0
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8017128:	b290      	uxth	r0, r2
 801712a:	8120      	strh	r0, [r4, #8]
}
 801712c:	b005      	add	sp, #20
 801712e:	bd30      	pop	{r4, r5, pc}
 8017130:	40011000 	.word	0x40011000

08017134 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8017134:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8017136:	b119      	cbz	r1, 8017140 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8017138:	b299      	uxth	r1, r3
 801713a:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 801713e:	e003      	b.n	8017148 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8017140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8017144:	040a      	lsls	r2, r1, #16
 8017146:	0c13      	lsrs	r3, r2, #16
 8017148:	8183      	strh	r3, [r0, #12]
 801714a:	4770      	bx	lr

0801714c <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 801714c:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8017150:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8017152:	2401      	movs	r4, #1
 8017154:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8017158:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 801715a:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 801715e:	d101      	bne.n	8017164 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8017160:	300c      	adds	r0, #12
 8017162:	e004      	b.n	801716e <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8017164:	2b02      	cmp	r3, #2
 8017166:	d101      	bne.n	801716c <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8017168:	3010      	adds	r0, #16
 801716a:	e000      	b.n	801716e <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 801716c:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 801716e:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8017170:	b112      	cbz	r2, 8017178 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8017172:	ea43 0201 	orr.w	r2, r3, r1
 8017176:	e001      	b.n	801717c <USART_ITConfig+0x30>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8017178:	ea23 0201 	bic.w	r2, r3, r1
 801717c:	6002      	str	r2, [r0, #0]
 801717e:	bd10      	pop	{r4, pc}

08017180 <USBD_Resume>:
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8017180:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8017184:	b510      	push	{r4, lr}
 8017186:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8017188:	6918      	ldr	r0, [r3, #16]
 801718a:	4780      	blx	r0
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 801718c:	2103      	movs	r1, #3
 801718e:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  return USBD_OK;
}
 8017192:	2000      	movs	r0, #0
 8017194:	bd10      	pop	{r4, pc}

08017196 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8017196:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
 8017198:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 801719c:	2104      	movs	r1, #4
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.device_old_status = pdev->dev.device_status;
 801719e:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 80171a2:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 80171a6:	f8d0 05e8 	ldr.w	r0, [r0, #1512]	; 0x5e8
 80171aa:	68c2      	ldr	r2, [r0, #12]
 80171ac:	4790      	blx	r2
  return USBD_OK;
}
 80171ae:	2000      	movs	r0, #0
 80171b0:	bd08      	pop	{r3, pc}

080171b2 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 80171b2:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 80171b4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80171b8:	69d9      	ldr	r1, [r3, #28]
 80171ba:	b101      	cbz	r1, 80171be <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 80171bc:	4788      	blx	r1
  }
  return USBD_OK;
}
 80171be:	2000      	movs	r0, #0
 80171c0:	bd08      	pop	{r3, pc}

080171c2 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80171c2:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 80171c4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80171c8:	6a19      	ldr	r1, [r3, #32]
 80171ca:	4788      	blx	r1
  return USBD_OK;
}
 80171cc:	2000      	movs	r0, #0
 80171ce:	bd08      	pop	{r3, pc}

080171d0 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80171d0:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 80171d2:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80171d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80171d8:	4788      	blx	r1
  return USBD_OK;
}
 80171da:	2000      	movs	r0, #0
 80171dc:	bd08      	pop	{r3, pc}

080171de <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 80171de:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 80171e0:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 80171e2:	2240      	movs	r2, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 80171e4:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 80171e6:	460b      	mov	r3, r1
 80171e8:	f001 ff9b 	bl	8019122 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 80171ec:	2180      	movs	r1, #128	; 0x80
 80171ee:	2240      	movs	r2, #64	; 0x40
 80171f0:	2300      	movs	r3, #0
 80171f2:	4620      	mov	r0, r4
 80171f4:	f001 ff95 	bl	8019122 <DCD_EP_Open>
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80171f8:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80171fc:	2301      	movs	r3, #1
 80171fe:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8017202:	6841      	ldr	r1, [r0, #4]
 8017204:	78a0      	ldrb	r0, [r4, #2]
 8017206:	4788      	blx	r1
  
  return USBD_OK;
}
 8017208:	2000      	movs	r0, #0
 801720a:	bd10      	pop	{r4, pc}

0801720c <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 801720c:	b513      	push	{r0, r1, r4, lr}
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 801720e:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8017210:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8017212:	f000 f923 	bl	801745c <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8017216:	f89d 1000 	ldrb.w	r1, [sp]
 801721a:	f001 031f 	and.w	r3, r1, #31
 801721e:	2b01      	cmp	r3, #1
 8017220:	d00c      	beq.n	801723c <USBD_SetupStage+0x30>
 8017222:	d306      	bcc.n	8017232 <USBD_SetupStage+0x26>
 8017224:	2b02      	cmp	r3, #2
 8017226:	d10e      	bne.n	8017246 <USBD_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8017228:	4620      	mov	r0, r4
 801722a:	4669      	mov	r1, sp
 801722c:	f000 f946 	bl	80174bc <USBD_StdEPReq>
    break;
 8017230:	e00e      	b.n	8017250 <USBD_SetupStage+0x44>
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8017232:	4620      	mov	r0, r4
 8017234:	4669      	mov	r1, sp
 8017236:	f000 f9bb 	bl	80175b0 <USBD_StdDevReq>
    break;
 801723a:	e009      	b.n	8017250 <USBD_SetupStage+0x44>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 801723c:	4620      	mov	r0, r4
 801723e:	4669      	mov	r1, sp
 8017240:	f000 f99e 	bl	8017580 <USBD_StdItfReq>
    break;
 8017244:	e004      	b.n	8017250 <USBD_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8017246:	4620      	mov	r0, r4
 8017248:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801724c:	f001 ffdb 	bl	8019206 <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 8017250:	2000      	movs	r0, #0
 8017252:	bd1c      	pop	{r2, r3, r4, pc}

08017254 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8017258:	2900      	cmp	r1, #0
 801725a:	d147      	bne.n	80172ec <USBD_DataInStage+0x98>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 801725c:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8017260:	2b02      	cmp	r3, #2
 8017262:	d137      	bne.n	80172d4 <USBD_DataInStage+0x80>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8017264:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8017268:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 801726c:	429a      	cmp	r2, r3
 801726e:	d911      	bls.n	8017294 <USBD_DataInStage+0x40>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8017270:	1ad2      	subs	r2, r2, r3
 8017272:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
        if(pdev->cfg.dma_enable == 1)
 8017276:	78c0      	ldrb	r0, [r0, #3]
 8017278:	2801      	cmp	r0, #1
 801727a:	d104      	bne.n	8017286 <USBD_DataInStage+0x32>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 801727c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8017280:	18cb      	adds	r3, r1, r3
 8017282:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        }
        USBD_CtlContinueSendData (pdev, 
 8017286:	4620      	mov	r0, r4
 8017288:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 801728c:	b292      	uxth	r2, r2
 801728e:	f000 f8b5 	bl	80173fc <USBD_CtlContinueSendData>
 8017292:	e01f      	b.n	80172d4 <USBD_DataInStage+0x80>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8017294:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c
 8017298:	fbb5 f6f3 	udiv	r6, r5, r3
 801729c:	fb03 5616 	mls	r6, r3, r6, r5
 80172a0:	b95e      	cbnz	r6, 80172ba <USBD_DataInStage+0x66>
 80172a2:	429d      	cmp	r5, r3
 80172a4:	d309      	bcc.n	80172ba <USBD_DataInStage+0x66>
           (ep->total_data_len >= ep->maxpacket) &&
 80172a6:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 80172aa:	4295      	cmp	r5, r2
 80172ac:	d205      	bcs.n	80172ba <USBD_DataInStage+0x66>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80172ae:	4632      	mov	r2, r6
 80172b0:	f000 f8a4 	bl	80173fc <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 80172b4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 80172b8:	e00c      	b.n	80172d4 <USBD_DataInStage+0x80>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80172ba:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 80172be:	68c1      	ldr	r1, [r0, #12]
 80172c0:	b129      	cbz	r1, 80172ce <USBD_DataInStage+0x7a>
 80172c2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80172c6:	2b03      	cmp	r3, #3
 80172c8:	d101      	bne.n	80172ce <USBD_DataInStage+0x7a>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 80172ca:	4620      	mov	r0, r4
 80172cc:	4788      	blx	r1
          }          
          USBD_CtlReceiveStatus(pdev);
 80172ce:	4620      	mov	r0, r4
 80172d0:	f000 f8b5 	bl	801743e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 80172d4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 80172d8:	2a01      	cmp	r2, #1
 80172da:	d110      	bne.n	80172fe <USBD_DataInStage+0xaa>
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 80172dc:	4909      	ldr	r1, [pc, #36]	; (8017304 <USBD_DataInStage+0xb0>)
 80172de:	6920      	ldr	r0, [r4, #16]
 80172e0:	680b      	ldr	r3, [r1, #0]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 80172e2:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 80172e4:	6043      	str	r3, [r0, #4]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 80172e6:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
 80172ea:	e008      	b.n	80172fe <USBD_DataInStage+0xaa>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80172ec:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80172f0:	695b      	ldr	r3, [r3, #20]
 80172f2:	b123      	cbz	r3, 80172fe <USBD_DataInStage+0xaa>
 80172f4:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80172f8:	2a03      	cmp	r2, #3
 80172fa:	d100      	bne.n	80172fe <USBD_DataInStage+0xaa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 80172fc:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80172fe:	2000      	movs	r0, #0
 8017300:	bd70      	pop	{r4, r5, r6, pc}
 8017302:	bf00      	nop
 8017304:	20004a80 	.word	0x20004a80

08017308 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8017308:	b510      	push	{r4, lr}
 801730a:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 801730c:	bb59      	cbnz	r1, 8017366 <USBD_DataOutStage+0x5e>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 801730e:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
 8017312:	2903      	cmp	r1, #3
 8017314:	d130      	bne.n	8017378 <USBD_DataOutStage+0x70>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8017316:	f8d0 2390 	ldr.w	r2, [r0, #912]	; 0x390
 801731a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 801731e:	429a      	cmp	r2, r3
 8017320:	d914      	bls.n	801734c <USBD_DataOutStage+0x44>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8017322:	1ad2      	subs	r2, r2, r3
 8017324:	f8c0 2390 	str.w	r2, [r0, #912]	; 0x390
        
        if(pdev->cfg.dma_enable == 1)
 8017328:	78c0      	ldrb	r0, [r0, #3]
 801732a:	2801      	cmp	r0, #1
 801732c:	d104      	bne.n	8017338 <USBD_DataOutStage+0x30>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 801732e:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8017332:	18c8      	adds	r0, r1, r3
 8017334:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8017338:	429a      	cmp	r2, r3
 801733a:	bf28      	it	cs
 801733c:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 801733e:	4620      	mov	r0, r4
 8017340:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8017344:	b292      	uxth	r2, r2
 8017346:	f000 f862 	bl	801740e <USBD_CtlContinueRx>
 801734a:	e015      	b.n	8017378 <USBD_DataOutStage+0x70>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 801734c:	f8d0 15e4 	ldr.w	r1, [r0, #1508]	; 0x5e4
 8017350:	690b      	ldr	r3, [r1, #16]
 8017352:	b123      	cbz	r3, 801735e <USBD_DataOutStage+0x56>
 8017354:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8017358:	2a03      	cmp	r2, #3
 801735a:	d100      	bne.n	801735e <USBD_DataOutStage+0x56>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 801735c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801735e:	4620      	mov	r0, r4
 8017360:	f000 f85e 	bl	8017420 <USBD_CtlSendStatus>
 8017364:	e008      	b.n	8017378 <USBD_DataOutStage+0x70>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8017366:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 801736a:	699b      	ldr	r3, [r3, #24]
 801736c:	b123      	cbz	r3, 8017378 <USBD_DataOutStage+0x70>
 801736e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8017372:	2a03      	cmp	r2, #3
 8017374:	d100      	bne.n	8017378 <USBD_DataOutStage+0x70>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8017376:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8017378:	2000      	movs	r0, #0
 801737a:	bd10      	pop	{r4, pc}

0801737c <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 801737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017380:	9f06      	ldr	r7, [sp, #24]
 8017382:	4604      	mov	r4, r0
 8017384:	4616      	mov	r6, r2
 8017386:	4698      	mov	r8, r3
 8017388:	460d      	mov	r5, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 801738a:	f7fe f8eb 	bl	8015564 <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801738e:	4620      	mov	r0, r4
 8017390:	4629      	mov	r1, r5
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8017392:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8017396:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 801739a:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801739e:	f001 fe75 	bl	801908c <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 80173a2:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 80173a6:	6818      	ldr	r0, [r3, #0]
 80173a8:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80173aa:	4620      	mov	r0, r4
}
 80173ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80173b0:	f7fe b92c 	b.w	801560c <USB_OTG_BSP_EnableInterrupt>

080173b4 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80173b4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 80173b8:	b510      	push	{r4, lr}
 80173ba:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	4790      	blx	r2
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 80173c0:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
 80173c4:	6881      	ldr	r1, [r0, #8]
 80173c6:	4788      	blx	r1
  return USBD_OK; 
}
 80173c8:	2000      	movs	r0, #0
 80173ca:	bd10      	pop	{r4, pc}

080173cc <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 80173cc:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 80173ce:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80173d2:	685a      	ldr	r2, [r3, #4]
 80173d4:	4790      	blx	r2
  return USBD_OK;
}
 80173d6:	2000      	movs	r0, #0
 80173d8:	bd08      	pop	{r3, pc}

080173da <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80173da:	b538      	push	{r3, r4, r5, lr}
 80173dc:	4604      	mov	r4, r0
 80173de:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 80173e0:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 80173e4:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80173e8:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 80173ea:	2202      	movs	r2, #2
 80173ec:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 80173f0:	2100      	movs	r1, #0
 80173f2:	462a      	mov	r2, r5
 80173f4:	f001 feec 	bl	80191d0 <DCD_EP_Tx>
 
  return ret;
}
 80173f8:	2000      	movs	r0, #0
 80173fa:	bd38      	pop	{r3, r4, r5, pc}

080173fc <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80173fc:	b510      	push	{r4, lr}
 80173fe:	460c      	mov	r4, r1
 8017400:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8017402:	2100      	movs	r1, #0
 8017404:	4622      	mov	r2, r4
 8017406:	f001 fee3 	bl	80191d0 <DCD_EP_Tx>
  
  
  return ret;
}
 801740a:	2000      	movs	r0, #0
 801740c:	bd10      	pop	{r4, pc}

0801740e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801740e:	b510      	push	{r4, lr}
 8017410:	460c      	mov	r4, r1
 8017412:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 8017414:	2100      	movs	r1, #0
 8017416:	4622      	mov	r2, r4
 8017418:	f001 febd 	bl	8019196 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 801741c:	2000      	movs	r0, #0
 801741e:	bd10      	pop	{r4, pc}

08017420 <USBD_CtlSendStatus>:
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8017420:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8017422:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8017424:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8017426:	460a      	mov	r2, r1
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8017428:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 801742a:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 801742e:	460b      	mov	r3, r1
 8017430:	f001 fece 	bl	80191d0 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8017434:	4620      	mov	r0, r4
 8017436:	f001 fe0b 	bl	8019050 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 801743a:	2000      	movs	r0, #0
 801743c:	bd10      	pop	{r4, pc}

0801743e <USBD_CtlReceiveStatus>:
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 801743e:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8017440:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8017442:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8017444:	460a      	mov	r2, r1
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8017446:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8017448:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 801744c:	460b      	mov	r3, r1
 801744e:	f001 fea2 	bl	8019196 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8017452:	4620      	mov	r0, r4
 8017454:	f001 fdfc 	bl	8019050 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8017458:	2000      	movs	r0, #0
 801745a:	bd10      	pop	{r4, pc}

0801745c <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 801745c:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 8017460:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8017462:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 8017466:	704a      	strb	r2, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8017468:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 801746c:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 8017470:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8017474:	804a      	strh	r2, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8017476:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 801747a:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 801747e:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8017482:	808a      	strh	r2, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8017484:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 8017488:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 801748c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8017490:	b293      	uxth	r3, r2
 8017492:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8017494:	2101      	movs	r1, #1
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8017496:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 801749a:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
 801749e:	4770      	bx	lr

080174a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80174a0:	b510      	push	{r4, lr}
  
  DCD_EP_Stall(pdev , 0x80);
 80174a2:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80174a4:	4604      	mov	r4, r0
  
  DCD_EP_Stall(pdev , 0x80);
 80174a6:	f001 feae 	bl	8019206 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 80174aa:	4620      	mov	r0, r4
 80174ac:	2100      	movs	r1, #0
 80174ae:	f001 feaa 	bl	8019206 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 80174b2:	4620      	mov	r0, r4
}
 80174b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
  DCD_EP_Stall(pdev , 0);
  USB_OTG_EP0_OutStart(pdev);  
 80174b8:	f001 bdca 	b.w	8019050 <USB_OTG_EP0_OutStart>

080174bc <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80174bc:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 80174be:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 80174c0:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 80174c2:	2e01      	cmp	r6, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80174c4:	4604      	mov	r4, r0
 80174c6:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 80174c8:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 80174ca:	d011      	beq.n	80174f0 <USBD_StdEPReq+0x34>
 80174cc:	d329      	bcc.n	8017522 <USBD_StdEPReq+0x66>
 80174ce:	2e03      	cmp	r6, #3
 80174d0:	d151      	bne.n	8017576 <USBD_StdEPReq+0xba>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 80174d2:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80174d6:	2a02      	cmp	r2, #2
 80174d8:	d02a      	beq.n	8017530 <USBD_StdEPReq+0x74>
 80174da:	2a03      	cmp	r2, #3
 80174dc:	d149      	bne.n	8017572 <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80174de:	8849      	ldrh	r1, [r1, #2]
 80174e0:	b9a9      	cbnz	r1, 801750e <USBD_StdEPReq+0x52>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80174e2:	b1a3      	cbz	r3, 801750e <USBD_StdEPReq+0x52>
 80174e4:	2b80      	cmp	r3, #128	; 0x80
 80174e6:	d012      	beq.n	801750e <USBD_StdEPReq+0x52>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80174e8:	4619      	mov	r1, r3
 80174ea:	f001 fe8c 	bl	8019206 <DCD_EP_Stall>
 80174ee:	e00e      	b.n	801750e <USBD_StdEPReq+0x52>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80174f0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80174f4:	2a02      	cmp	r2, #2
 80174f6:	d01b      	beq.n	8017530 <USBD_StdEPReq+0x74>
 80174f8:	2a03      	cmp	r2, #3
 80174fa:	d13a      	bne.n	8017572 <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80174fc:	8849      	ldrh	r1, [r1, #2]
 80174fe:	2900      	cmp	r1, #0
 8017500:	d139      	bne.n	8017576 <USBD_StdEPReq+0xba>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8017502:	b153      	cbz	r3, 801751a <USBD_StdEPReq+0x5e>
 8017504:	2b80      	cmp	r3, #128	; 0x80
 8017506:	d008      	beq.n	801751a <USBD_StdEPReq+0x5e>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8017508:	4619      	mov	r1, r3
 801750a:	f001 fe9a 	bl	8019242 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 801750e:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 8017512:	4629      	mov	r1, r5
 8017514:	6883      	ldr	r3, [r0, #8]
 8017516:	4620      	mov	r0, r4
 8017518:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801751a:	4620      	mov	r0, r4
 801751c:	f7ff ff80 	bl	8017420 <USBD_CtlSendStatus>
 8017520:	e029      	b.n	8017576 <USBD_StdEPReq+0xba>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8017522:	f890 5112 	ldrb.w	r5, [r0, #274]	; 0x112
 8017526:	2d02      	cmp	r5, #2
 8017528:	d002      	beq.n	8017530 <USBD_StdEPReq+0x74>
 801752a:	2d03      	cmp	r5, #3
 801752c:	d121      	bne.n	8017572 <USBD_StdEPReq+0xb6>
 801752e:	e006      	b.n	801753e <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8017530:	b30b      	cbz	r3, 8017576 <USBD_StdEPReq+0xba>
 8017532:	2b80      	cmp	r3, #128	; 0x80
 8017534:	d01f      	beq.n	8017576 <USBD_StdEPReq+0xba>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8017536:	4619      	mov	r1, r3
 8017538:	f001 fe65 	bl	8019206 <DCD_EP_Stall>
 801753c:	e01b      	b.n	8017576 <USBD_StdEPReq+0xba>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 801753e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8017542:	f04f 0028 	mov.w	r0, #40	; 0x28
 8017546:	d006      	beq.n	8017556 <USBD_StdEPReq+0x9a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8017548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801754c:	fb00 4102 	mla	r1, r0, r2, r4
 8017550:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 8017554:	e003      	b.n	801755e <USBD_StdEPReq+0xa2>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8017556:	fb00 4303 	mla	r3, r0, r3, r4
 801755a:	f893 3376 	ldrb.w	r3, [r3, #886]	; 0x376
 801755e:	4807      	ldr	r0, [pc, #28]	; (801757c <USBD_StdEPReq+0xc0>)
 8017560:	b103      	cbz	r3, 8017564 <USBD_StdEPReq+0xa8>
        {
          USBD_ep_status = 0x0001;     
 8017562:	2301      	movs	r3, #1
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8017564:	6003      	str	r3, [r0, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 8017566:	4905      	ldr	r1, [pc, #20]	; (801757c <USBD_StdEPReq+0xc0>)
 8017568:	4620      	mov	r0, r4
 801756a:	2202      	movs	r2, #2
 801756c:	f7ff ff35 	bl	80173da <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 8017570:	e001      	b.n	8017576 <USBD_StdEPReq+0xba>
      
    default:                         
       USBD_CtlError(pdev , req);
 8017572:	f7ff ff95 	bl	80174a0 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8017576:	2000      	movs	r0, #0
 8017578:	bd70      	pop	{r4, r5, r6, pc}
 801757a:	bf00      	nop
 801757c:	20001180 	.word	0x20001180

08017580 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8017580:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 8017582:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8017586:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8017588:	4604      	mov	r4, r0
 801758a:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 801758c:	d10c      	bne.n	80175a8 <USBD_StdItfReq+0x28>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 801758e:	790a      	ldrb	r2, [r1, #4]
 8017590:	2a01      	cmp	r2, #1
 8017592:	d809      	bhi.n	80175a8 <USBD_StdItfReq+0x28>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8017594:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8017598:	689a      	ldr	r2, [r3, #8]
 801759a:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 801759c:	88e8      	ldrh	r0, [r5, #6]
 801759e:	b928      	cbnz	r0, 80175ac <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7ff ff3d 	bl	8017420 <USBD_CtlSendStatus>
 80175a6:	e001      	b.n	80175ac <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80175a8:	f7ff ff7a 	bl	80174a0 <USBD_CtlError>
    break;
  }
  return ret;
}
 80175ac:	2000      	movs	r0, #0
 80175ae:	bd38      	pop	{r3, r4, r5, pc}

080175b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80175b0:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 80175b2:	784b      	ldrb	r3, [r1, #1]
 80175b4:	2b05      	cmp	r3, #5
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80175b6:	b0a2      	sub	sp, #136	; 0x88
 80175b8:	4604      	mov	r4, r0
 80175ba:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 80175bc:	f000 80b1 	beq.w	8017722 <USBD_StdDevReq+0x172>
 80175c0:	d808      	bhi.n	80175d4 <USBD_StdDevReq+0x24>
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	f000 8143 	beq.w	801784e <USBD_StdDevReq+0x29e>
 80175c8:	f0c0 8108 	bcc.w	80177dc <USBD_StdDevReq+0x22c>
 80175cc:	2b03      	cmp	r3, #3
 80175ce:	f040 8161 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
 80175d2:	e114      	b.n	80177fe <USBD_StdDevReq+0x24e>
 80175d4:	2b08      	cmp	r3, #8
 80175d6:	f000 80f3 	beq.w	80177c0 <USBD_StdDevReq+0x210>
 80175da:	d803      	bhi.n	80175e4 <USBD_StdDevReq+0x34>
 80175dc:	2b06      	cmp	r3, #6
 80175de:	f040 8159 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
 80175e2:	e006      	b.n	80175f2 <USBD_StdDevReq+0x42>
 80175e4:	2b09      	cmp	r3, #9
 80175e6:	f000 80bc 	beq.w	8017762 <USBD_StdDevReq+0x1b2>
 80175ea:	2b55      	cmp	r3, #85	; 0x55
 80175ec:	f040 8152 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
 80175f0:	e13d      	b.n	801786e <USBD_StdDevReq+0x2be>
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 80175f2:	8848      	ldrh	r0, [r1, #2]
 80175f4:	0a01      	lsrs	r1, r0, #8
 80175f6:	1e4b      	subs	r3, r1, #1
 80175f8:	2b06      	cmp	r3, #6
 80175fa:	f200 814b 	bhi.w	8017894 <USBD_StdDevReq+0x2e4>
 80175fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017602:	0007      	.short	0x0007
 8017604:	00320018 	.word	0x00320018
 8017608:	01490149 	.word	0x01490149
 801760c:	0073005e 	.word	0x0073005e
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8017610:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8017614:	78a0      	ldrb	r0, [r4, #2]
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	f10d 0106 	add.w	r1, sp, #6
 801761c:	4790      	blx	r2
 801761e:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8017620:	88e8      	ldrh	r0, [r5, #6]
 8017622:	2840      	cmp	r0, #64	; 0x40
 8017624:	d003      	beq.n	801762e <USBD_StdDevReq+0x7e>
 8017626:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 801762a:	2b01      	cmp	r3, #1
 801762c:	d169      	bne.n	8017702 <USBD_StdDevReq+0x152>
    {                  
      len = 8;
 801762e:	2308      	movs	r3, #8
 8017630:	e057      	b.n	80176e2 <USBD_StdDevReq+0x132>
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8017632:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 8017636:	f10d 0106 	add.w	r1, sp, #6
 801763a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801763c:	78a0      	ldrb	r0, [r4, #2]
 801763e:	4790      	blx	r2
#ifdef USB_OTG_HS_CORE
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 8017640:	78a3      	ldrb	r3, [r4, #2]
 8017642:	2b01      	cmp	r3, #1
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8017644:	4601      	mov	r1, r0
#ifdef USB_OTG_HS_CORE
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 8017646:	d109      	bne.n	801765c <USBD_StdDevReq+0xac>
 8017648:	7a20      	ldrb	r0, [r4, #8]
 801764a:	2801      	cmp	r0, #1
 801764c:	d106      	bne.n	801765c <USBD_StdDevReq+0xac>
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 801764e:	f8d4 15e4 	ldr.w	r1, [r4, #1508]	; 0x5e4
 8017652:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017654:	f10d 0106 	add.w	r1, sp, #6
 8017658:	4790      	blx	r2
 801765a:	4601      	mov	r1, r0
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801765c:	2002      	movs	r0, #2
 801765e:	7048      	strb	r0, [r1, #1]
    pdev->dev.pConfig_descriptor = pbuf;    
 8017660:	f8c4 15f0 	str.w	r1, [r4, #1520]	; 0x5f0
 8017664:	e04d      	b.n	8017702 <USBD_StdDevReq+0x152>
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8017666:	b2c1      	uxtb	r1, r0
 8017668:	78a0      	ldrb	r0, [r4, #2]
 801766a:	2905      	cmp	r1, #5
 801766c:	d820      	bhi.n	80176b0 <USBD_StdDevReq+0x100>
 801766e:	e8df f001 	tbb	[pc, r1]
 8017672:	0703      	.short	0x0703
 8017674:	1b17130f 	.word	0x1b17130f
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8017678:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 801767c:	684a      	ldr	r2, [r1, #4]
 801767e:	e002      	b.n	8017686 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8017680:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8017684:	689a      	ldr	r2, [r3, #8]
 8017686:	f10d 0106 	add.w	r1, sp, #6
 801768a:	4790      	blx	r2
 801768c:	4601      	mov	r1, r0
 801768e:	e038      	b.n	8017702 <USBD_StdDevReq+0x152>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8017690:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 8017694:	68d2      	ldr	r2, [r2, #12]
 8017696:	e7f6      	b.n	8017686 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8017698:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 801769c:	690a      	ldr	r2, [r1, #16]
 801769e:	e7f2      	b.n	8017686 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 80176a0:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 80176a4:	695a      	ldr	r2, [r3, #20]
 80176a6:	e7ee      	b.n	8017686 <USBD_StdDevReq+0xd6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 80176a8:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80176ac:	698a      	ldr	r2, [r1, #24]
 80176ae:	e7ea      	b.n	8017686 <USBD_StdDevReq+0xd6>
      break;
      
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
 80176b0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 80176b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80176b6:	f10d 0206 	add.w	r2, sp, #6
 80176ba:	4798      	blx	r3
 80176bc:	e7e6      	b.n	801768c <USBD_StdDevReq+0xdc>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
#ifdef USB_OTG_HS_CORE
    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 80176be:	78a0      	ldrb	r0, [r4, #2]
 80176c0:	2800      	cmp	r0, #0
 80176c2:	f040 80e7 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
    {
      
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80176c6:	f8d4 15e4 	ldr.w	r1, [r4, #1508]	; 0x5e4
 80176ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80176cc:	f10d 0106 	add.w	r1, sp, #6
 80176d0:	4790      	blx	r2
            
      USBD_DeviceQualifierDesc[4]= pbuf[14];
 80176d2:	4974      	ldr	r1, [pc, #464]	; (80178a4 <USBD_StdDevReq+0x2f4>)
 80176d4:	7b83      	ldrb	r3, [r0, #14]
      USBD_DeviceQualifierDesc[5]= pbuf[15];
 80176d6:	7bc2      	ldrb	r2, [r0, #15]
      USBD_DeviceQualifierDesc[6]= pbuf[16];
 80176d8:	7c00      	ldrb	r0, [r0, #16]
    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
    {
      
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
            
      USBD_DeviceQualifierDesc[4]= pbuf[14];
 80176da:	710b      	strb	r3, [r1, #4]
      USBD_DeviceQualifierDesc[5]= pbuf[15];
 80176dc:	714a      	strb	r2, [r1, #5]
      USBD_DeviceQualifierDesc[6]= pbuf[16];
 80176de:	7188      	strb	r0, [r1, #6]
      
      pbuf = USBD_DeviceQualifierDesc;
      len  = USB_LEN_DEV_QUALIFIER_DESC;
 80176e0:	230a      	movs	r3, #10
 80176e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80176e6:	e00c      	b.n	8017702 <USBD_StdDevReq+0x152>
#endif    

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
#ifdef USB_OTG_HS_CORE   

    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 80176e8:	78a0      	ldrb	r0, [r4, #2]
 80176ea:	2800      	cmp	r0, #0
 80176ec:	f040 80d2 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 80176f0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 80176f4:	f10d 0106 	add.w	r1, sp, #6
 80176f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80176fa:	4798      	blx	r3
 80176fc:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80176fe:	2007      	movs	r0, #7
 8017700:	7048      	strb	r0, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8017702:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017706:	2800      	cmp	r0, #0
 8017708:	f000 80c8 	beq.w	801789c <USBD_StdDevReq+0x2ec>
 801770c:	88ea      	ldrh	r2, [r5, #6]
 801770e:	2a00      	cmp	r2, #0
 8017710:	f000 80c4 	beq.w	801789c <USBD_StdDevReq+0x2ec>
  {
    
    len = MIN(len , req->wLength);
 8017714:	4282      	cmp	r2, r0
 8017716:	bf28      	it	cs
 8017718:	4602      	movcs	r2, r0
 801771a:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 801771e:	4620      	mov	r0, r4
 8017720:	e0b5      	b.n	801788e <USBD_StdDevReq+0x2de>
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8017722:	888a      	ldrh	r2, [r1, #4]
 8017724:	2a00      	cmp	r2, #0
 8017726:	f040 80b5 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
 801772a:	88c9      	ldrh	r1, [r1, #6]
 801772c:	2900      	cmp	r1, #0
 801772e:	f040 80b1 	bne.w	8017894 <USBD_StdDevReq+0x2e4>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8017732:	886e      	ldrh	r6, [r5, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8017734:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8017738:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 801773c:	2a03      	cmp	r2, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801773e:	461e      	mov	r6, r3
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8017740:	f000 80a8 	beq.w	8017894 <USBD_StdDevReq+0x2e4>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8017744:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 8017748:	4619      	mov	r1, r3
 801774a:	f001 fd98 	bl	801927e <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 801774e:	4620      	mov	r0, r4
 8017750:	f7ff fe66 	bl	8017420 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8017754:	b10e      	cbz	r6, 801775a <USBD_StdDevReq+0x1aa>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8017756:	2002      	movs	r0, #2
 8017758:	e000      	b.n	801775c <USBD_StdDevReq+0x1ac>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 801775a:	2001      	movs	r0, #1
 801775c:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112
 8017760:	e09c      	b.n	801789c <USBD_StdDevReq+0x2ec>
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8017762:	788b      	ldrb	r3, [r1, #2]
 8017764:	4a50      	ldr	r2, [pc, #320]	; (80178a8 <USBD_StdDevReq+0x2f8>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8017766:	2b01      	cmp	r3, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8017768:	7013      	strb	r3, [r2, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 801776a:	f200 8093 	bhi.w	8017894 <USBD_StdDevReq+0x2e4>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 801776e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8017772:	2a02      	cmp	r2, #2
 8017774:	d003      	beq.n	801777e <USBD_StdDevReq+0x1ce>
 8017776:	2a03      	cmp	r2, #3
 8017778:	f040 808e 	bne.w	8017898 <USBD_StdDevReq+0x2e8>
 801777c:	e008      	b.n	8017790 <USBD_StdDevReq+0x1e0>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 801777e:	2b00      	cmp	r3, #0
 8017780:	d061      	beq.n	8017846 <USBD_StdDevReq+0x296>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8017782:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8017784:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8017786:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 801778a:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
 801778e:	e014      	b.n	80177ba <USBD_StdDevReq+0x20a>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 8017790:	b943      	cbnz	r3, 80177a4 <USBD_StdDevReq+0x1f4>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8017792:	2102      	movs	r1, #2
 8017794:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8017798:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 801779c:	4619      	mov	r1, r3
 801779e:	f7ff fe15 	bl	80173cc <USBD_ClrCfg>
 80177a2:	e050      	b.n	8017846 <USBD_StdDevReq+0x296>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80177a4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 80177a8:	2901      	cmp	r1, #1
 80177aa:	d04c      	beq.n	8017846 <USBD_StdDevReq+0x296>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80177ac:	f7ff fe0e 	bl	80173cc <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80177b0:	483d      	ldr	r0, [pc, #244]	; (80178a8 <USBD_StdDevReq+0x2f8>)
 80177b2:	7801      	ldrb	r1, [r0, #0]
        USBD_SetCfg(pdev , cfgidx);
 80177b4:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80177b6:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80177ba:	f7ff fdfb 	bl	80173b4 <USBD_SetCfg>
 80177be:	e042      	b.n	8017846 <USBD_StdDevReq+0x296>
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 80177c0:	88ca      	ldrh	r2, [r1, #6]
 80177c2:	2a01      	cmp	r2, #1
 80177c4:	d166      	bne.n	8017894 <USBD_StdDevReq+0x2e4>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 80177c6:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80177ca:	2b02      	cmp	r3, #2
 80177cc:	d004      	beq.n	80177d8 <USBD_StdDevReq+0x228>
 80177ce:	2b03      	cmp	r3, #3
 80177d0:	d162      	bne.n	8017898 <USBD_StdDevReq+0x2e8>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 80177d2:	f500 7188 	add.w	r1, r0, #272	; 0x110
 80177d6:	e05a      	b.n	801788e <USBD_StdDevReq+0x2de>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 80177d8:	4934      	ldr	r1, [pc, #208]	; (80178ac <USBD_StdDevReq+0x2fc>)
 80177da:	e058      	b.n	801788e <USBD_StdDevReq+0x2de>
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
    
  switch (pdev->dev.device_status) 
 80177dc:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80177e0:	1e93      	subs	r3, r2, #2
 80177e2:	2b01      	cmp	r3, #1
 80177e4:	d858      	bhi.n	8017898 <USBD_StdDevReq+0x2e8>
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 80177e6:	4832      	ldr	r0, [pc, #200]	; (80178b0 <USBD_StdDevReq+0x300>)
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 80177e8:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 80177ec:	2100      	movs	r1, #0
 80177ee:	6001      	str	r1, [r0, #0]
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 80177f0:	b10a      	cbz	r2, 80177f6 <USBD_StdDevReq+0x246>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80177f2:	2302      	movs	r3, #2
 80177f4:	6003      	str	r3, [r0, #0]
    }
    
    USBD_CtlSendData (pdev, 
 80177f6:	4620      	mov	r0, r4
 80177f8:	492d      	ldr	r1, [pc, #180]	; (80178b0 <USBD_StdDevReq+0x300>)
 80177fa:	2202      	movs	r2, #2
 80177fc:	e047      	b.n	801788e <USBD_StdDevReq+0x2de>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80177fe:	884b      	ldrh	r3, [r1, #2]
 8017800:	2b01      	cmp	r3, #1
 8017802:	d02d      	beq.n	8017860 <USBD_StdDevReq+0x2b0>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8017804:	2b02      	cmp	r3, #2
 8017806:	d149      	bne.n	801789c <USBD_StdDevReq+0x2ec>
           ((req->wIndex & 0xFF) == 0))
 8017808:	888a      	ldrh	r2, [r1, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 801780a:	f012 0fff 	tst.w	r2, #255	; 0xff
 801780e:	d145      	bne.n	801789c <USBD_StdDevReq+0x2ec>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8017810:	6900      	ldr	r0, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8017812:	0a11      	lsrs	r1, r2, #8
 8017814:	1e4a      	subs	r2, r1, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8017816:	6843      	ldr	r3, [r0, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8017818:	2a04      	cmp	r2, #4
 801781a:	d80f      	bhi.n	801783c <USBD_StdDevReq+0x28c>
 801781c:	e8df f002 	tbb	[pc, r2]
 8017820:	09070503 	.word	0x09070503
 8017824:	0b          	.byte	0x0b
 8017825:	00          	.byte	0x00
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8017826:	2001      	movs	r0, #1
 8017828:	e006      	b.n	8017838 <USBD_StdDevReq+0x288>
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 801782a:	2002      	movs	r0, #2
 801782c:	e004      	b.n	8017838 <USBD_StdDevReq+0x288>
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 801782e:	2003      	movs	r0, #3
 8017830:	e002      	b.n	8017838 <USBD_StdDevReq+0x288>
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8017832:	2004      	movs	r0, #4
 8017834:	e000      	b.n	8017838 <USBD_StdDevReq+0x288>
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8017836:	2005      	movs	r0, #5
 8017838:	f360 1306 	bfi	r3, r0, #4, #3
      break;
    }
    SET_TEST_MODE = dctl;
 801783c:	491d      	ldr	r1, [pc, #116]	; (80178b4 <USBD_StdDevReq+0x304>)
 801783e:	600b      	str	r3, [r1, #0]
    pdev->dev.test_mode = 1;
 8017840:	2301      	movs	r3, #1
 8017842:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8017846:	4620      	mov	r0, r4
 8017848:	f7ff fdea 	bl	8017420 <USBD_CtlSendStatus>
 801784c:	e026      	b.n	801789c <USBD_StdDevReq+0x2ec>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 801784e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8017852:	1e93      	subs	r3, r2, #2
 8017854:	2b01      	cmp	r3, #1
 8017856:	d81f      	bhi.n	8017898 <USBD_StdDevReq+0x2e8>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8017858:	884a      	ldrh	r2, [r1, #2]
 801785a:	2a01      	cmp	r2, #1
 801785c:	d11e      	bne.n	801789c <USBD_StdDevReq+0x2ec>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 801785e:	2300      	movs	r3, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 8017860:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8017864:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8017868:	6893      	ldr	r3, [r2, #8]
 801786a:	4798      	blx	r3
 801786c:	e7eb      	b.n	8017846 <USBD_StdDevReq+0x296>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 801786e:	7809      	ldrb	r1, [r1, #0]
 8017870:	29c0      	cmp	r1, #192	; 0xc0
 8017872:	d10f      	bne.n	8017894 <USBD_StdDevReq+0x2e4>
 8017874:	886a      	ldrh	r2, [r5, #2]
 8017876:	b96a      	cbnz	r2, 8017894 <USBD_StdDevReq+0x2e4>
 8017878:	88ee      	ldrh	r6, [r5, #6]
 801787a:	2e80      	cmp	r6, #128	; 0x80
 801787c:	d10a      	bne.n	8017894 <USBD_StdDevReq+0x2e4>
      const uint8_t midi_indicator[128] = {
 801787e:	490e      	ldr	r1, [pc, #56]	; (80178b8 <USBD_StdDevReq+0x308>)
 8017880:	4632      	mov	r2, r6
 8017882:	a802      	add	r0, sp, #8
 8017884:	f006 fdca 	bl	801e41c <memcpy>
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x55,0x46,0x1F,
	0x00,0xD8,0x48,0x40,0x37,0x6A,0xF7,0x6A,0x00,0x30,0x00,0x00,0xC7,0x06,0x2E,0x73,
	0x4A,0x2C,0x13,0x7B,0xE9,0x7F,0x32,0x00,0x2A,0x28,0x0D,0x9B,0xFE,0x0B,0x21,0xEF,
	0x42,0x2A,0x2F,0x73,0xB5,0xB8,0xDA,0x76,0xE6,0x79,0xBF,0x0F,0xEB,0x79,0x3E,0x0B};

      USBD_CtlSendData(pdev, (uint8_t *)midi_indicator, 0x80);
 8017888:	4620      	mov	r0, r4
 801788a:	a902      	add	r1, sp, #8
 801788c:	4632      	mov	r2, r6
 801788e:	f7ff fda4 	bl	80173da <USBD_CtlSendData>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 8017892:	e003      	b.n	801789c <USBD_StdDevReq+0x2ec>
      USBD_CtlError(pdev , req);
    }
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8017894:	4620      	mov	r0, r4
 8017896:	4629      	mov	r1, r5
 8017898:	f7ff fe02 	bl	80174a0 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 801789c:	2000      	movs	r0, #0
 801789e:	b022      	add	sp, #136	; 0x88
 80178a0:	bd70      	pop	{r4, r5, r6, pc}
 80178a2:	bf00      	nop
 80178a4:	2000000c 	.word	0x2000000c
 80178a8:	2000117c 	.word	0x2000117c
 80178ac:	20001184 	.word	0x20001184
 80178b0:	20001178 	.word	0x20001178
 80178b4:	20004a80 	.word	0x20004a80
 80178b8:	0801f91b 	.word	0x0801f91b

080178bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80178bc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80178be:	b1c0      	cbz	r0, 80178f2 <USBD_GetString+0x36>
 80178c0:	2300      	movs	r3, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80178c2:	5cc5      	ldrb	r5, [r0, r3]
 80178c4:	b2dc      	uxtb	r4, r3
 80178c6:	3301      	adds	r3, #1
 80178c8:	2d00      	cmp	r5, #0
 80178ca:	d1fa      	bne.n	80178c2 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80178cc:	1c63      	adds	r3, r4, #1
 80178ce:	005b      	lsls	r3, r3, #1
 80178d0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80178d2:	2203      	movs	r2, #3
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
 80178d4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80178d6:	704a      	strb	r2, [r1, #1]
  * @param  desc : descriptor buffer
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 80178d8:	3801      	subs	r0, #1
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80178da:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
 80178dc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80178e0:	b13a      	cbz	r2, 80178f2 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80178e2:	1c5c      	adds	r4, r3, #1
 80178e4:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 80178e6:	b2e2      	uxtb	r2, r4
 80178e8:	3302      	adds	r3, #2
 80178ea:	2400      	movs	r4, #0
 80178ec:	548c      	strb	r4, [r1, r2]
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	e7f4      	b.n	80178dc <USBD_GetString+0x20>
 80178f2:	bd30      	pop	{r4, r5, pc}

080178f4 <USBH_Connected>:
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 1;
 80178f4:	2301      	movs	r3, #1
 80178f6:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;
}
 80178fa:	2000      	movs	r0, #0
 80178fc:	4770      	bx	lr

080178fe <USBH_Disconnected>:
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 0;
 80178fe:	2300      	movs	r3, #0
 8017900:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;  
}
 8017904:	4618      	mov	r0, r3
 8017906:	4770      	bx	lr

08017908 <USBH_SOF>:

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
  /* This callback could be used to implement a scheduler process */
  return 0;  
}
 8017908:	2000      	movs	r0, #0
 801790a:	4770      	bx	lr

0801790c <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 801790c:	b570      	push	{r4, r5, r6, lr}
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 801790e:	2301      	movs	r3, #1
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8017910:	2500      	movs	r5, #0
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8017912:	2240      	movs	r2, #64	; 0x40
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8017914:	460c      	mov	r4, r1
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8017916:	70cb      	strb	r3, [r1, #3]
  
  phost->Control.state = CTRL_SETUP;
 8017918:	770b      	strb	r3, [r1, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 801791a:	718a      	strb	r2, [r1, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 801791c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8017920:	4606      	mov	r6, r0
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8017922:	700d      	strb	r5, [r1, #0]
  phost->gStateBkp = HOST_IDLE; 
 8017924:	704d      	strb	r5, [r1, #1]
  phost->EnumState = ENUM_IDLE;
 8017926:	708d      	strb	r5, [r1, #2]
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8017928:	f881 5020 	strb.w	r5, [r1, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 801792c:	7909      	ldrb	r1, [r1, #4]
 801792e:	f000 fb21 	bl	8017f74 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8017932:	4630      	mov	r0, r6
 8017934:	7961      	ldrb	r1, [r4, #5]
 8017936:	f000 fb1d 	bl	8017f74 <USBH_Free_Channel>
  return USBH_OK;
}
 801793a:	4628      	mov	r0, r5
 801793c:	bd70      	pop	{r4, r5, r6, pc}

0801793e <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 801793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017942:	9f06      	ldr	r7, [sp, #24]
 8017944:	4614      	mov	r4, r2
 8017946:	4698      	mov	r8, r3
 8017948:	4605      	mov	r5, r0
 801794a:	460e      	mov	r6, r1
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 801794c:	f7fd fe0a 	bl	8015564 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 8017950:	2000      	movs	r0, #0
 8017952:	f7fd fe7d 	bl	8015650 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8017956:	4621      	mov	r1, r4
 8017958:	4628      	mov	r0, r5
 801795a:	f7ff ffd7 	bl	801790c <USBH_DeInit>
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
  phost->usr_cb = usr_cb;  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 801795e:	4631      	mov	r1, r6
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 8017960:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
  phost->usr_cb = usr_cb;  
 8017964:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8017968:	4628      	mov	r0, r5
 801796a:	f001 fee5 	bl	8019738 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 801796e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8017972:	6818      	ldr	r0, [r3, #0]
 8017974:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8017976:	4628      	mov	r0, r5
}
 8017978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 801797c:	f7fd be46 	b.w	801560c <USB_OTG_BSP_EnableInterrupt>

08017980 <USBH_ErrorHandle>:
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8017980:	1f0b      	subs	r3, r1, #4
 8017982:	2b01      	cmp	r3, #1
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 8017984:	b510      	push	{r4, lr}
 8017986:	4604      	mov	r4, r0
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8017988:	d806      	bhi.n	8017998 <USBH_ErrorHandle+0x18>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 801798a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 801798e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017990:	4780      	blx	r0
    phost->gState = HOST_ERROR_STATE;   
 8017992:	210a      	movs	r1, #10
 8017994:	7021      	strb	r1, [r4, #0]
 8017996:	bd10      	pop	{r4, pc}
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 8017998:	2906      	cmp	r1, #6
 801799a:	d105      	bne.n	80179a8 <USBH_ErrorHandle+0x28>
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
 801799c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    phost->gState = HOST_ERROR_STATE;   
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
  {
    phost->gState = HOST_ERROR_STATE;  
 80179a0:	200a      	movs	r0, #10
 80179a2:	7020      	strb	r0, [r4, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 80179a4:	680a      	ldr	r2, [r1, #0]
 80179a6:	4790      	blx	r2
 80179a8:	bd10      	pop	{r4, pc}
	...

080179ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80179ac:	b570      	push	{r4, r5, r6, lr}
 80179ae:	4605      	mov	r5, r0
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;

  
  switch (phost->Control.state)
 80179b0:	7f08      	ldrb	r0, [r1, #28]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 80179b2:	2300      	movs	r3, #0
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80179b4:	460c      	mov	r4, r1
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 80179b6:	748b      	strb	r3, [r1, #18]

  
  switch (phost->Control.state)
 80179b8:	1e41      	subs	r1, r0, #1
 80179ba:	290a      	cmp	r1, #10
 80179bc:	f200 80cd 	bhi.w	8017b5a <USBH_HandleControl+0x1ae>
 80179c0:	e8df f001 	tbb	[pc, r1]
 80179c4:	3f370e06 	.word	0x3f370e06
 80179c8:	81796759 	.word	0x81796759
 80179cc:	aa9a      	.short	0xaa9a
 80179ce:	bc          	.byte	0xbc
 80179cf:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 80179d0:	4628      	mov	r0, r5
 80179d2:	f104 0114 	add.w	r1, r4, #20
 80179d6:	7962      	ldrb	r2, [r4, #5]
 80179d8:	f000 fb0b 	bl	8017ff2 <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 80179dc:	2302      	movs	r3, #2
 80179de:	e0b4      	b.n	8017b4a <USBH_HandleControl+0x19e>
    break; 
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 80179e0:	4628      	mov	r0, r5
 80179e2:	7961      	ldrb	r1, [r4, #5]
 80179e4:	f001 fee8 	bl	80197b8 <HCD_GetURB_State>
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 80179e8:	2801      	cmp	r0, #1
 80179ea:	d11a      	bne.n	8017a22 <USBH_HandleControl+0x76>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80179ec:	7d22      	ldrb	r2, [r4, #20]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80179ee:	8b61      	ldrh	r1, [r4, #26]
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80179f0:	f022 037f 	bic.w	r3, r2, #127	; 0x7f
 80179f4:	b2d8      	uxtb	r0, r3
 80179f6:	4a5a      	ldr	r2, [pc, #360]	; (8017b60 <USBH_HandleControl+0x1b4>)
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80179f8:	b139      	cbz	r1, 8017a0a <USBH_HandleControl+0x5e>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 80179fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80179fe:	8011      	strh	r1, [r2, #0]
        if (direction == USB_D2H)
 8017a00:	b108      	cbz	r0, 8017a06 <USBH_HandleControl+0x5a>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8017a02:	2003      	movs	r0, #3
 8017a04:	e007      	b.n	8017a16 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8017a06:	2005      	movs	r0, #5
 8017a08:	e005      	b.n	8017a16 <USBH_HandleControl+0x6a>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8017a0a:	2332      	movs	r3, #50	; 0x32
 8017a0c:	8013      	strh	r3, [r2, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8017a0e:	b108      	cbz	r0, 8017a14 <USBH_HandleControl+0x68>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8017a10:	2009      	movs	r0, #9
 8017a12:	e000      	b.n	8017a16 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8017a14:	2007      	movs	r0, #7
 8017a16:	7720      	strb	r0, [r4, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8017a18:	4628      	mov	r0, r5
 8017a1a:	f001 fec9 	bl	80197b0 <HCD_GetCurrentFrame>
 8017a1e:	8220      	strh	r0, [r4, #16]
 8017a20:	e09b      	b.n	8017b5a <USBH_HandleControl+0x1ae>
    }
    else if(URB_Status == URB_ERROR)
 8017a22:	2803      	cmp	r0, #3
 8017a24:	f040 8099 	bne.w	8017b5a <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;     
 8017a28:	210b      	movs	r1, #11
      phost->Control.status = CTRL_XACTERR;
 8017a2a:	2005      	movs	r0, #5
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
 8017a2c:	7721      	strb	r1, [r4, #28]
      phost->Control.status = CTRL_XACTERR;
 8017a2e:	74a0      	strb	r0, [r4, #18]
 8017a30:	e093      	b.n	8017b5a <USBH_HandleControl+0x1ae>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8017a32:	7923      	ldrb	r3, [r4, #4]
 8017a34:	68a1      	ldr	r1, [r4, #8]
 8017a36:	89a2      	ldrh	r2, [r4, #12]
 8017a38:	4628      	mov	r0, r5
 8017a3a:	f000 fb11 	bl	8018060 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8017a3e:	2304      	movs	r3, #4
 8017a40:	e083      	b.n	8017b4a <USBH_HandleControl+0x19e>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8017a42:	4628      	mov	r0, r5
 8017a44:	7921      	ldrb	r1, [r4, #4]
 8017a46:	f001 feb7 	bl	80197b8 <HCD_GetURB_State>
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8017a4a:	2801      	cmp	r0, #1
 8017a4c:	d102      	bne.n	8017a54 <USBH_HandleControl+0xa8>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8017a4e:	2309      	movs	r3, #9
 8017a50:	7723      	strb	r3, [r4, #28]
 8017a52:	e006      	b.n	8017a62 <USBH_HandleControl+0xb6>
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 8017a54:	2804      	cmp	r0, #4
 8017a56:	d102      	bne.n	8017a5e <USBH_HandleControl+0xb2>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8017a58:	7862      	ldrb	r2, [r4, #1]
 8017a5a:	7022      	strb	r2, [r4, #0]
 8017a5c:	e07d      	b.n	8017b5a <USBH_HandleControl+0x1ae>
    }   
    else if (URB_Status == URB_ERROR)
 8017a5e:	2803      	cmp	r0, #3
 8017a60:	d06a      	beq.n	8017b38 <USBH_HandleControl+0x18c>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 8017a62:	4628      	mov	r0, r5
 8017a64:	f001 fea4 	bl	80197b0 <HCD_GetCurrentFrame>
 8017a68:	4a3d      	ldr	r2, [pc, #244]	; (8017b60 <USBH_HandleControl+0x1b4>)
 8017a6a:	8a21      	ldrh	r1, [r4, #16]
 8017a6c:	8813      	ldrh	r3, [r2, #0]
 8017a6e:	1a40      	subs	r0, r0, r1
 8017a70:	4298      	cmp	r0, r3
 8017a72:	d972      	bls.n	8017b5a <USBH_HandleControl+0x1ae>
 8017a74:	e060      	b.n	8017b38 <USBH_HandleControl+0x18c>
    }   
    break;
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 8017a76:	7963      	ldrb	r3, [r4, #5]
 8017a78:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 8017a7c:	2001      	movs	r0, #1
 8017a7e:	f881 08a9 	strb.w	r0, [r1, #2217]	; 0x8a9
        
    USBH_CtlSendData (pdev,
 8017a82:	7963      	ldrb	r3, [r4, #5]
 8017a84:	68a1      	ldr	r1, [r4, #8]
 8017a86:	89a2      	ldrh	r2, [r4, #12]
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f000 fac9 	bl	8018020 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017a8e:	2306      	movs	r3, #6
 8017a90:	e05b      	b.n	8017b4a <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 8017a92:	4628      	mov	r0, r5
 8017a94:	7961      	ldrb	r1, [r4, #5]
 8017a96:	f001 fe8f 	bl	80197b8 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 8017a9a:	2801      	cmp	r0, #1
 8017a9c:	d101      	bne.n	8017aa2 <USBH_HandleControl+0xf6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8017a9e:	2307      	movs	r3, #7
 8017aa0:	e053      	b.n	8017b4a <USBH_HandleControl+0x19e>
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 8017aa2:	2804      	cmp	r0, #4
 8017aa4:	d103      	bne.n	8017aae <USBH_HandleControl+0x102>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8017aa6:	7862      	ldrb	r2, [r4, #1]
      phost->Control.state = CTRL_STALLED;  
 8017aa8:	230c      	movs	r3, #12
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8017aaa:	7022      	strb	r2, [r4, #0]
 8017aac:	e04d      	b.n	8017b4a <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_STALLED;  
    } 
    else if  (URB_Status == URB_NOTREADY)
 8017aae:	2802      	cmp	r0, #2
 8017ab0:	d140      	bne.n	8017b34 <USBH_HandleControl+0x188>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 8017ab2:	2305      	movs	r3, #5
 8017ab4:	e049      	b.n	8017b4a <USBH_HandleControl+0x19e>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	7923      	ldrb	r3, [r4, #4]
 8017aba:	4628      	mov	r0, r5
 8017abc:	460a      	mov	r2, r1
 8017abe:	f000 facf 	bl	8018060 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017ac2:	2308      	movs	r3, #8
 8017ac4:	e041      	b.n	8017b4a <USBH_HandleControl+0x19e>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	7921      	ldrb	r1, [r4, #4]
 8017aca:	f001 fe75 	bl	80197b8 <HCD_GetURB_State>
    
    if  ( URB_Status == URB_DONE)
 8017ace:	2801      	cmp	r0, #1
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8017ad0:	4606      	mov	r6, r0
    
    if  ( URB_Status == URB_DONE)
 8017ad2:	d027      	beq.n	8017b24 <USBH_HandleControl+0x178>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.state = CTRL_COMPLETE;
    }
    
    else if (URB_Status == URB_ERROR)
 8017ad4:	2803      	cmp	r0, #3
 8017ad6:	d02f      	beq.n	8017b38 <USBH_HandleControl+0x18c>
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8017ad8:	4628      	mov	r0, r5
 8017ada:	f001 fe69 	bl	80197b0 <HCD_GetCurrentFrame>
      - phost->Control.timer) > timeout)
 8017ade:	4a20      	ldr	r2, [pc, #128]	; (8017b60 <USBH_HandleControl+0x1b4>)
 8017ae0:	8a21      	ldrh	r1, [r4, #16]
 8017ae2:	8813      	ldrh	r3, [r2, #0]
 8017ae4:	1a40      	subs	r0, r0, r1
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8017ae6:	4298      	cmp	r0, r3
 8017ae8:	d826      	bhi.n	8017b38 <USBH_HandleControl+0x18c>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 8017aea:	2e04      	cmp	r6, #4
 8017aec:	d135      	bne.n	8017b5a <USBH_HandleControl+0x1ae>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8017aee:	7861      	ldrb	r1, [r4, #1]
      phost->Control.status = CTRL_STALL;
 8017af0:	74a6      	strb	r6, [r4, #18]
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8017af2:	7021      	strb	r1, [r4, #0]
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
 8017af4:	2003      	movs	r0, #3
 8017af6:	bd70      	pop	{r4, r5, r6, pc}
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8017af8:	7960      	ldrb	r0, [r4, #5]
 8017afa:	3045      	adds	r0, #69	; 0x45
 8017afc:	eb05 1140 	add.w	r1, r5, r0, lsl #5
    USBH_CtlSendData (pdev,
 8017b00:	4628      	mov	r0, r5
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8017b02:	7a4a      	ldrb	r2, [r1, #9]
 8017b04:	f082 0301 	eor.w	r3, r2, #1
 8017b08:	724b      	strb	r3, [r1, #9]
    USBH_CtlSendData (pdev,
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	7963      	ldrb	r3, [r4, #5]
 8017b0e:	460a      	mov	r2, r1
 8017b10:	f000 fa86 	bl	8018020 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017b14:	230a      	movs	r3, #10
 8017b16:	e018      	b.n	8017b4a <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8017b18:	4628      	mov	r0, r5
 8017b1a:	7961      	ldrb	r1, [r4, #5]
 8017b1c:	f001 fe4c 	bl	80197b8 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 8017b20:	2801      	cmp	r0, #1
 8017b22:	d103      	bne.n	8017b2c <USBH_HandleControl+0x180>
    { 
      phost->gState =   phost->gStateBkp; 
 8017b24:	7860      	ldrb	r0, [r4, #1]
      phost->Control.state = CTRL_COMPLETE; 
 8017b26:	230d      	movs	r3, #13
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp; 
 8017b28:	7020      	strb	r0, [r4, #0]
 8017b2a:	e00e      	b.n	8017b4a <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_COMPLETE; 
    }
    else if  (URB_Status == URB_NOTREADY)
 8017b2c:	2802      	cmp	r0, #2
 8017b2e:	d101      	bne.n	8017b34 <USBH_HandleControl+0x188>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8017b30:	2309      	movs	r3, #9
 8017b32:	e00a      	b.n	8017b4a <USBH_HandleControl+0x19e>
    }      
    else if (URB_Status == URB_ERROR)
 8017b34:	2803      	cmp	r0, #3
 8017b36:	d110      	bne.n	8017b5a <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;      
 8017b38:	230b      	movs	r3, #11
 8017b3a:	e006      	b.n	8017b4a <USBH_HandleControl+0x19e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017b3c:	7ba2      	ldrb	r2, [r4, #14]
 8017b3e:	1c53      	adds	r3, r2, #1
 8017b40:	b2d8      	uxtb	r0, r3
 8017b42:	2802      	cmp	r0, #2
 8017b44:	73a0      	strb	r0, [r4, #14]
 8017b46:	d802      	bhi.n	8017b4e <USBH_HandleControl+0x1a2>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8017b48:	2301      	movs	r3, #1
 8017b4a:	7723      	strb	r3, [r4, #28]
 8017b4c:	e005      	b.n	8017b5a <USBH_HandleControl+0x1ae>
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
 8017b4e:	7862      	ldrb	r2, [r4, #1]
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 8017b50:	2108      	movs	r1, #8
 8017b52:	74a1      	strb	r1, [r4, #18]
      phost->gState =   phost->gStateBkp;
 8017b54:	7022      	strb	r2, [r4, #0]
      
      status = USBH_FAIL;
 8017b56:	2002      	movs	r0, #2
 8017b58:	bd70      	pop	{r4, r5, r6, pc}
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 8017b5a:	2000      	movs	r0, #0
    
  default:
    break;
  }
  return status;
}
 8017b5c:	bd70      	pop	{r4, r5, r6, pc}
 8017b5e:	bf00      	nop
 8017b60:	20001188 	.word	0x20001188

08017b64 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8017b64:	b570      	push	{r4, r5, r6, lr}
 8017b66:	b094      	sub	sp, #80	; 0x50
  volatile USBH_Status status = USBH_FAIL;
 8017b68:	2602      	movs	r6, #2
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	460c      	mov	r4, r1
  volatile USBH_Status status = USBH_FAIL;
 8017b6e:	f88d 600f 	strb.w	r6, [sp, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 8017b72:	f001 fe1a 	bl	80197aa <HCD_IsDeviceConnected>
 8017b76:	b920      	cbnz	r0, 8017b82 <USBH_Process+0x1e>
 8017b78:	7823      	ldrb	r3, [r4, #0]
 8017b7a:	b113      	cbz	r3, 8017b82 <USBH_Process+0x1e>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 8017b7c:	42b3      	cmp	r3, r6
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8017b7e:	bf18      	it	ne
 8017b80:	7026      	strbne	r6, [r4, #0]
    }
  }
    
  switch (phost->gState)
 8017b82:	7820      	ldrb	r0, [r4, #0]
 8017b84:	280a      	cmp	r0, #10
 8017b86:	f200 8190 	bhi.w	8017eaa <USBH_Process+0x346>
 8017b8a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8017b8e:	000b      	.short	0x000b
 8017b90:	01760017 	.word	0x01760017
 8017b94:	0053018e 	.word	0x0053018e
 8017b98:	01530146 	.word	0x01530146
 8017b9c:	01360161 	.word	0x01360161
 8017ba0:	0166018e 	.word	0x0166018e
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	f001 fe00 	bl	80197aa <HCD_IsDeviceConnected>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	f000 817d 	beq.w	8017eaa <USBH_Process+0x346>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8017bb0:	2201      	movs	r2, #1
 8017bb2:	7022      	strb	r2, [r4, #0]
      USB_OTG_BSP_mDelay(100);
 8017bb4:	2064      	movs	r0, #100	; 0x64
 8017bb6:	f7fd fd44 	bl	8015642 <USB_OTG_BSP_mDelay>
 8017bba:	e176      	b.n	8017eaa <USBH_Process+0x346>
    }
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8017bbc:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 8017bc0:	68b0      	ldr	r0, [r6, #8]
 8017bc2:	4780      	blx	r0
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	4628      	mov	r0, r5
 8017bc8:	f000 f9bb 	bl	8017f42 <USBH_Alloc_Channel>
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8017bcc:	2180      	movs	r1, #128	; 0x80
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8017bce:	7160      	strb	r0, [r4, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	f000 f9b6 	bl	8017f42 <USBH_Alloc_Channel>
 8017bd6:	7120      	strb	r0, [r4, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8017bd8:	4628      	mov	r0, r5
 8017bda:	f001 fde1 	bl	80197a0 <HCD_ResetPort>
 8017bde:	4606      	mov	r6, r0
 8017be0:	2800      	cmp	r0, #0
 8017be2:	f040 8162 	bne.w	8017eaa <USBH_Process+0x346>
    {
      phost->usr_cb->ResetDevice();
 8017be6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017bea:	68cb      	ldr	r3, [r1, #12]
 8017bec:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8017bee:	4628      	mov	r0, r5
 8017bf0:	f001 fdd0 	bl	8019794 <HCD_GetCurrentSpeed>
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8017bf4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      phost->usr_cb->ResetDevice();
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8017bf8:	b2c0      	uxtb	r0, r0
 8017bfa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8017bfe:	2204      	movs	r2, #4
 8017c00:	7022      	strb	r2, [r4, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8017c02:	698b      	ldr	r3, [r1, #24]
 8017c04:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8017c06:	79a0      	ldrb	r0, [r4, #6]
 8017c08:	7921      	ldrb	r1, [r4, #4]
 8017c0a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8017c0e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8017c12:	9001      	str	r0, [sp, #4]
 8017c14:	9600      	str	r6, [sp, #0]
 8017c16:	4628      	mov	r0, r5
 8017c18:	f000 f94c 	bl	8017eb4 <USBH_Open_Channel>
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8017c1c:	79a0      	ldrb	r0, [r4, #6]
 8017c1e:	7961      	ldrb	r1, [r4, #5]
 8017c20:	9001      	str	r0, [sp, #4]
 8017c22:	f894 2020 	ldrb.w	r2, [r4, #32]
 8017c26:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8017c2a:	9600      	str	r6, [sp, #0]
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f000 f941 	bl	8017eb4 <USBH_Open_Channel>
 8017c32:	e13a      	b.n	8017eaa <USBH_Process+0x346>
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  USBH_Status Status = USBH_BUSY;  
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8017c34:	78a3      	ldrb	r3, [r4, #2]
 8017c36:	2b09      	cmp	r3, #9
 8017c38:	f200 8137 	bhi.w	8017eaa <USBH_Process+0x346>
 8017c3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017c40:	002c000a 	.word	0x002c000a
 8017c44:	0064003c 	.word	0x0064003c
 8017c48:	0082006e 	.word	0x0082006e
 8017c4c:	00b4009b 	.word	0x00b4009b
 8017c50:	00d700cc 	.word	0x00d700cc
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8017c54:	4628      	mov	r0, r5
 8017c56:	4621      	mov	r1, r4
 8017c58:	2208      	movs	r2, #8
 8017c5a:	f000 fa8d 	bl	8018178 <USBH_Get_DevDesc>
 8017c5e:	4606      	mov	r6, r0
 8017c60:	2800      	cmp	r0, #0
 8017c62:	f040 8122 	bne.w	8017eaa <USBH_Process+0x346>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 8017c66:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8017c6a:	71a0      	strb	r0, [r4, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	f001 fd97 	bl	80197a0 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8017c72:	79a2      	ldrb	r2, [r4, #6]
 8017c74:	7961      	ldrb	r1, [r4, #5]
 8017c76:	9201      	str	r2, [sp, #4]
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8017c78:	2301      	movs	r3, #1
 8017c7a:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8017c7c:	4632      	mov	r2, r6
 8017c7e:	4633      	mov	r3, r6
 8017c80:	9600      	str	r6, [sp, #0]
 8017c82:	4628      	mov	r0, r5
 8017c84:	f000 f940 	bl	8017f08 <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8017c88:	79a0      	ldrb	r0, [r4, #6]
 8017c8a:	7921      	ldrb	r1, [r4, #4]
 8017c8c:	9001      	str	r0, [sp, #4]
 8017c8e:	9600      	str	r6, [sp, #0]
 8017c90:	4628      	mov	r0, r5
 8017c92:	4632      	mov	r2, r6
 8017c94:	4633      	mov	r3, r6
 8017c96:	e034      	b.n	8017d02 <USBH_Process+0x19e>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8017c98:	4628      	mov	r0, r5
 8017c9a:	4621      	mov	r1, r4
 8017c9c:	2212      	movs	r2, #18
 8017c9e:	f000 fa6b 	bl	8018178 <USBH_Get_DevDesc>
 8017ca2:	2800      	cmp	r0, #0
 8017ca4:	f040 8101 	bne.w	8017eaa <USBH_Process+0x346>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8017ca8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017cac:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8017cb0:	69ca      	ldr	r2, [r1, #28]
 8017cb2:	4790      	blx	r2
      phost->EnumState = ENUM_SET_ADDR;
 8017cb4:	2002      	movs	r0, #2
 8017cb6:	e098      	b.n	8017dea <USBH_Process+0x286>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8017cb8:	4628      	mov	r0, r5
 8017cba:	4621      	mov	r1, r4
 8017cbc:	2201      	movs	r2, #1
 8017cbe:	f000 fb9f 	bl	8018400 <USBH_SetAddress>
 8017cc2:	4606      	mov	r6, r0
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	f040 80f0 	bne.w	8017eaa <USBH_Process+0x346>
    {
      USB_OTG_BSP_mDelay(2);
 8017cca:	2002      	movs	r0, #2
 8017ccc:	f7fd fcb9 	bl	8015642 <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8017cd0:	2101      	movs	r1, #1
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8017cd2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
    {
      USB_OTG_BSP_mDelay(2);
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8017cd6:	f884 1020 	strb.w	r1, [r4, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8017cda:	6a02      	ldr	r2, [r0, #32]
 8017cdc:	4790      	blx	r2
      phost->EnumState = ENUM_GET_CFG_DESC;
 8017cde:	2303      	movs	r3, #3
 8017ce0:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 8017ce2:	7921      	ldrb	r1, [r4, #4]
 8017ce4:	f894 2020 	ldrb.w	r2, [r4, #32]
 8017ce8:	9600      	str	r6, [sp, #0]
 8017cea:	4633      	mov	r3, r6
 8017cec:	9601      	str	r6, [sp, #4]
 8017cee:	4628      	mov	r0, r5
 8017cf0:	f000 f90a 	bl	8017f08 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8017cf4:	7961      	ldrb	r1, [r4, #5]
 8017cf6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8017cfa:	9600      	str	r6, [sp, #0]
 8017cfc:	9601      	str	r6, [sp, #4]
 8017cfe:	4628      	mov	r0, r5
 8017d00:	4633      	mov	r3, r6
 8017d02:	f000 f901 	bl	8017f08 <USBH_Modify_Channel>
 8017d06:	e0d0      	b.n	8017eaa <USBH_Process+0x346>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8017d08:	4628      	mov	r0, r5
 8017d0a:	4621      	mov	r1, r4
 8017d0c:	2209      	movs	r2, #9
 8017d0e:	f000 fa89 	bl	8018224 <USBH_Get_CfgDesc>
 8017d12:	2800      	cmp	r0, #0
 8017d14:	f040 80c9 	bne.w	8017eaa <USBH_Process+0x346>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8017d18:	2004      	movs	r0, #4
 8017d1a:	e066      	b.n	8017dea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	4621      	mov	r1, r4
 8017d20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017d22:	f000 fa7f 	bl	8018224 <USBH_Get_CfgDesc>
 8017d26:	2800      	cmp	r0, #0
 8017d28:	f040 80bf 	bne.w	8017eaa <USBH_Process+0x346>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8017d2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8017d30:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8017d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d36:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8017d3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017d3e:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8017d40:	2005      	movs	r0, #5
 8017d42:	e052      	b.n	8017dea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 8017d44:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8017d48:	b172      	cbz	r2, 8017d68 <USBH_Process+0x204>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8017d4a:	20ff      	movs	r0, #255	; 0xff
 8017d4c:	9000      	str	r0, [sp, #0]
 8017d4e:	4621      	mov	r1, r4
 8017d50:	4628      	mov	r0, r5
 8017d52:	ab04      	add	r3, sp, #16
 8017d54:	f000 f9e8 	bl	8018128 <USBH_Get_StringDesc>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	f040 80a6 	bne.w	8017eaa <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 8017d5e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8017d62:	a804      	add	r0, sp, #16
 8017d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8017d66:	e003      	b.n	8017d70 <USBH_Process+0x20c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 8017d68:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8017d6c:	4850      	ldr	r0, [pc, #320]	; (8017eb0 <USBH_Process+0x34c>)
 8017d6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8017d70:	4788      	blx	r1
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017d72:	2006      	movs	r0, #6
 8017d74:	e039      	b.n	8017dea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 8017d76:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017d7a:	b172      	cbz	r2, 8017d9a <USBH_Process+0x236>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 8017d7c:	20ff      	movs	r0, #255	; 0xff
 8017d7e:	9000      	str	r0, [sp, #0]
 8017d80:	4621      	mov	r1, r4
 8017d82:	4628      	mov	r0, r5
 8017d84:	ab04      	add	r3, sp, #16
 8017d86:	f000 f9cf 	bl	8018128 <USBH_Get_StringDesc>
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	f040 808d 	bne.w	8017eaa <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8017d90:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8017d94:	a804      	add	r0, sp, #16
 8017d96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8017d98:	e003      	b.n	8017da2 <USBH_Process+0x23e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 8017d9a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8017d9e:	4844      	ldr	r0, [pc, #272]	; (8017eb0 <USBH_Process+0x34c>)
 8017da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017da2:	4788      	blx	r1
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017da4:	2007      	movs	r0, #7
 8017da6:	e020      	b.n	8017dea <USBH_Process+0x286>
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8017da8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8017dac:	b16a      	cbz	r2, 8017dca <USBH_Process+0x266>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8017dae:	20ff      	movs	r0, #255	; 0xff
 8017db0:	9000      	str	r0, [sp, #0]
 8017db2:	4621      	mov	r1, r4
 8017db4:	4628      	mov	r0, r5
 8017db6:	ab04      	add	r3, sp, #16
 8017db8:	f000 f9b6 	bl	8018128 <USBH_Get_StringDesc>
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	d174      	bne.n	8017eaa <USBH_Process+0x346>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8017dc0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8017dc4:	a804      	add	r0, sp, #16
 8017dc6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017dc8:	e003      	b.n	8017dd2 <USBH_Process+0x26e>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 8017dca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8017dce:	4838      	ldr	r0, [pc, #224]	; (8017eb0 <USBH_Process+0x34c>)
 8017dd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017dd2:	4788      	blx	r1
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8017dd4:	2008      	movs	r0, #8
 8017dd6:	e008      	b.n	8017dea <USBH_Process+0x286>
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 8017dd8:	4628      	mov	r0, r5
 8017dda:	4621      	mov	r1, r4
 8017ddc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8017de0:	f000 fb1c 	bl	801841c <USBH_SetCfg>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	d160      	bne.n	8017eaa <USBH_Process+0x346>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8017de8:	2009      	movs	r0, #9
 8017dea:	70a0      	strb	r0, [r4, #2]
 8017dec:	e05d      	b.n	8017eaa <USBH_Process+0x346>
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8017dee:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017df2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8017df4:	4790      	blx	r2
      
      phost->gState  = HOST_USR_INPUT;    
 8017df6:	2208      	movs	r2, #8
 8017df8:	e056      	b.n	8017ea8 <USBH_Process+0x344>
    }
    break;
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8017dfa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017dfe:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8017e00:	4790      	blx	r2
 8017e02:	2801      	cmp	r0, #1
 8017e04:	d151      	bne.n	8017eaa <USBH_Process+0x346>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8017e06:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	681a      	ldr	r2, [r3, #0]
 8017e0e:	4621      	mov	r1, r4
 8017e10:	4790      	blx	r2
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d149      	bne.n	8017eaa <USBH_Process+0x346>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8017e16:	2205      	movs	r2, #5
 8017e18:	e046      	b.n	8017ea8 <USBH_Process+0x344>
    }   
    break;
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8017e1a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017e1e:	4628      	mov	r0, r5
 8017e20:	688a      	ldr	r2, [r1, #8]
 8017e22:	4621      	mov	r1, r4
 8017e24:	4790      	blx	r2
 8017e26:	f88d 000f 	strb.w	r0, [sp, #15]
    
     if(status == USBH_OK)
 8017e2a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8017e2e:	b948      	cbnz	r0, 8017e44 <USBH_Process+0x2e0>
     {
       phost->gState  = HOST_CLASS;
 8017e30:	2206      	movs	r2, #6
 8017e32:	e039      	b.n	8017ea8 <USBH_Process+0x344>
 
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8017e34:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8017e38:	4621      	mov	r1, r4
 8017e3a:	68c3      	ldr	r3, [r0, #12]
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	4798      	blx	r3
 8017e40:	f88d 000f 	strb.w	r0, [sp, #15]
    USBH_ErrorHandle(phost, status);
 8017e44:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f7ff fd99 	bl	8017980 <USBH_ErrorHandle>
    break;       
 8017e4e:	e02c      	b.n	8017eaa <USBH_Process+0x346>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 8017e50:	4628      	mov	r0, r5
 8017e52:	4621      	mov	r1, r4
 8017e54:	f7ff fdaa 	bl	80179ac <USBH_HandleControl>
    break;
 8017e58:	e027      	b.n	8017eaa <USBH_Process+0x346>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	4628      	mov	r0, r5
 8017e5e:	f7ff fd55 	bl	801790c <USBH_DeInit>
    phost->usr_cb->DeInit();
 8017e62:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017e66:	684b      	ldr	r3, [r1, #4]
 8017e68:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8017e6a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8017e6e:	f104 0120 	add.w	r1, r4, #32
 8017e72:	6842      	ldr	r2, [r0, #4]
 8017e74:	4628      	mov	r0, r5
 8017e76:	4790      	blx	r2
    break;
 8017e78:	e017      	b.n	8017eaa <USBH_Process+0x346>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8017e7a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8017e7e:	690b      	ldr	r3, [r1, #16]
 8017e80:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8017e82:	4621      	mov	r1, r4
 8017e84:	4628      	mov	r0, r5
 8017e86:	f7ff fd41 	bl	801790c <USBH_DeInit>
    phost->usr_cb->DeInit();
 8017e8a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8017e8e:	6850      	ldr	r0, [r2, #4]
 8017e90:	4780      	blx	r0
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8017e92:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017e96:	4628      	mov	r0, r5
 8017e98:	684b      	ldr	r3, [r1, #4]
 8017e9a:	f104 0120 	add.w	r1, r4, #32
 8017e9e:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f000 f873 	bl	8017f8c <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	7022      	strb	r2, [r4, #0]
    
  default :
    break;
  }

}
 8017eaa:	b014      	add	sp, #80	; 0x50
 8017eac:	bd70      	pop	{r4, r5, r6, pc}
 8017eae:	bf00      	nop
 8017eb0:	0801f99b 	.word	0x0801f99b

08017eb4 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8017eb4:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8017eb6:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 8017eba:	f8b4 5a70 	ldrh.w	r5, [r4, #2672]	; 0xa70
 8017ebe:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 8017ec2:	f005 067f 	and.w	r6, r5, #127	; 0x7f
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8017ec6:	f884 2890 	strb.w	r2, [r4, #2192]	; 0x890
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8017eca:	f89d 2010 	ldrb.w	r2, [sp, #16]
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8017ece:	f884 6891 	strb.w	r6, [r4, #2193]	; 0x891
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8017ed2:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 8017ed6:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8017eda:	f884 2895 	strb.w	r2, [r4, #2197]	; 0x895
  pdev->host.hc[hc_num].max_packet = mps; 
 8017ede:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  pdev->host.hc[hc_num].speed = speed; 
 8017ee2:	f884 3893 	strb.w	r3, [r4, #2195]	; 0x893
  pdev->host.hc[hc_num].toggle_in = 0; 
 8017ee6:	f101 0245 	add.w	r2, r1, #69	; 0x45
 8017eea:	eb00 1242 	add.w	r2, r0, r2, lsl #5

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
  pdev->host.hc[hc_num].max_packet = mps; 
 8017eee:	f8a4 5896 	strh.w	r5, [r4, #2198]	; 0x896
  pdev->host.hc[hc_num].speed = speed; 
  pdev->host.hc[hc_num].toggle_in = 0; 
 8017ef2:	2500      	movs	r5, #0
 8017ef4:	7215      	strb	r5, [r2, #8]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8017ef6:	7255      	strb	r5, [r2, #9]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8017ef8:	b913      	cbnz	r3, 8017f00 <USBH_Open_Channel+0x4c>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8017efa:	2301      	movs	r3, #1
 8017efc:	f884 3894 	strb.w	r3, [r4, #2196]	; 0x894
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8017f00:	f000 fcf3 	bl	80188ea <USB_OTG_HC_Init>
  
  return HC_OK; 

}
 8017f04:	2000      	movs	r0, #0
 8017f06:	bd70      	pop	{r4, r5, r6, pc}

08017f08 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8017f08:	b570      	push	{r4, r5, r6, lr}
 8017f0a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  
  if(dev_address != 0)
 8017f0e:	b11a      	cbz	r2, 8017f18 <USBH_Modify_Channel+0x10>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8017f10:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8017f14:	f885 2890 	strb.w	r2, [r5, #2192]	; 0x890
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8017f18:	014a      	lsls	r2, r1, #5
 8017f1a:	1885      	adds	r5, r0, r2
 8017f1c:	f8b5 6896 	ldrh.w	r6, [r5, #2198]	; 0x896
 8017f20:	42a6      	cmp	r6, r4
 8017f22:	d002      	beq.n	8017f2a <USBH_Modify_Channel+0x22>
 8017f24:	b10c      	cbz	r4, 8017f2a <USBH_Modify_Channel+0x22>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8017f26:	f8a5 4896 	strh.w	r4, [r5, #2198]	; 0x896
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8017f2a:	1882      	adds	r2, r0, r2
 8017f2c:	f892 4893 	ldrb.w	r4, [r2, #2195]	; 0x893
 8017f30:	429c      	cmp	r4, r3
 8017f32:	d002      	beq.n	8017f3a <USBH_Modify_Channel+0x32>
 8017f34:	b10b      	cbz	r3, 8017f3a <USBH_Modify_Channel+0x32>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8017f36:	f882 3893 	strb.w	r3, [r2, #2195]	; 0x893
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8017f3a:	f000 fcd6 	bl	80188ea <USB_OTG_HC_Init>
  return HC_OK; 

}
 8017f3e:	2000      	movs	r0, #0
 8017f40:	bd70      	pop	{r4, r5, r6, pc}

08017f42 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8017f42:	b510      	push	{r4, lr}
 8017f44:	2300      	movs	r3, #0
  * @brief  USBH_Alloc_Channel
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
 8017f46:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8017f4a:	b2da      	uxtb	r2, r3
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8017f4c:	f9b4 4a70 	ldrsh.w	r4, [r4, #2672]	; 0xa70
 8017f50:	2c00      	cmp	r4, #0
 8017f52:	db08      	blt.n	8017f66 <USBH_Alloc_Channel+0x24>
  
  hc_num =  USBH_GetFreeChannel(pdev);

  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8017f54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017f58:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8017f5c:	ea6f 4351 	mvn.w	r3, r1, lsr #17
 8017f60:	f8a0 3a70 	strh.w	r3, [r0, #2672]	; 0xa70
 8017f64:	e004      	b.n	8017f70 <USBH_Alloc_Channel+0x2e>
 8017f66:	3301      	adds	r3, #1
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8017f68:	2b08      	cmp	r3, #8
 8017f6a:	d1ec      	bne.n	8017f46 <USBH_Alloc_Channel+0x4>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8017f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
  }
  return hc_num;
}
 8017f70:	b2d0      	uxtb	r0, r2
 8017f72:	bd10      	pop	{r4, pc}

08017f74 <USBH_Free_Channel>:
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
   if(idx < HC_MAX)
 8017f74:	2907      	cmp	r1, #7
 8017f76:	d807      	bhi.n	8017f88 <USBH_Free_Channel+0x14>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8017f78:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8017f7c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8017f80:	8903      	ldrh	r3, [r0, #8]
 8017f82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8017f86:	8102      	strh	r2, [r0, #8]
   }
   return USBH_OK;
}
 8017f88:	2000      	movs	r0, #0
 8017f8a:	4770      	bx	lr

08017f8c <USBH_DeAllocate_AllChannel>:
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
   {
	 pdev->host.channel[idx] = 0;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	f8a0 3a74 	strh.w	r3, [r0, #2676]	; 0xa74
 8017f92:	f8a0 3a76 	strh.w	r3, [r0, #2678]	; 0xa76
 8017f96:	f8a0 3a78 	strh.w	r3, [r0, #2680]	; 0xa78
 8017f9a:	f8a0 3a7a 	strh.w	r3, [r0, #2682]	; 0xa7a
 8017f9e:	f8a0 3a7c 	strh.w	r3, [r0, #2684]	; 0xa7c
 8017fa2:	f8a0 3a7e 	strh.w	r3, [r0, #2686]	; 0xa7e
   }
   return USBH_OK;
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	4770      	bx	lr

08017faa <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8017faa:	78c8      	ldrb	r0, [r1, #3]
 8017fac:	2801      	cmp	r0, #1
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8017fae:	b510      	push	{r4, lr}
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8017fb0:	d004      	beq.n	8017fbc <USBH_CtlReq+0x12>
 8017fb2:	2802      	cmp	r0, #2
 8017fb4:	f04f 0301 	mov.w	r3, #1
 8017fb8:	d119      	bne.n	8017fee <USBH_CtlReq+0x44>
 8017fba:	e008      	b.n	8017fce <USBH_CtlReq+0x24>
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8017fbc:	780c      	ldrb	r4, [r1, #0]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
  phost->Control.buff = buff; 
  phost->Control.length = length;
 8017fbe:	818b      	strh	r3, [r1, #12]
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8017fc0:	704c      	strb	r4, [r1, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8017fc2:	2407      	movs	r4, #7
 8017fc4:	700c      	strb	r4, [r1, #0]
  phost->Control.buff = buff; 
 8017fc6:	608a      	str	r2, [r1, #8]
  phost->Control.length = length;
  phost->Control.state = CTRL_SETUP;  
 8017fc8:	7708      	strb	r0, [r1, #28]
  switch (phost->RequestState)
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
    phost->RequestState = CMD_WAIT;
 8017fca:	2302      	movs	r3, #2
 8017fcc:	e008      	b.n	8017fe0 <USBH_CtlReq+0x36>
    status = USBH_BUSY;
    break;
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
 8017fce:	7f0a      	ldrb	r2, [r1, #28]
 8017fd0:	2a0d      	cmp	r2, #13
 8017fd2:	d103      	bne.n	8017fdc <USBH_CtlReq+0x32>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      phost->Control.state =CTRL_IDLE;  
 8017fd4:	2000      	movs	r0, #0
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8017fd6:	70cb      	strb	r3, [r1, #3]
      phost->Control.state =CTRL_IDLE;  
 8017fd8:	7708      	strb	r0, [r1, #28]
 8017fda:	bd10      	pop	{r4, pc}
      status = USBH_OK;      
    }
    else if  (phost->Control.state == CTRL_ERROR)
 8017fdc:	2a0b      	cmp	r2, #11
 8017fde:	d101      	bne.n	8017fe4 <USBH_CtlReq+0x3a>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 8017fe0:	70cb      	strb	r3, [r1, #3]
 8017fe2:	bd10      	pop	{r4, pc}
      status = USBH_FAIL;
    }   
     else if  (phost->Control.state == CTRL_STALLED )
 8017fe4:	2a0c      	cmp	r2, #12
 8017fe6:	d102      	bne.n	8017fee <USBH_CtlReq+0x44>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8017fe8:	70cb      	strb	r3, [r1, #3]
      status = USBH_NOT_SUPPORTED;
 8017fea:	2003      	movs	r0, #3
 8017fec:	bd10      	pop	{r4, pc}
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
 8017fee:	4618      	mov	r0, r3
    
  default:
    break; 
  }
  return status;
}
 8017ff0:	bd10      	pop	{r4, pc}

08017ff2 <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8017ff2:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8017ff4:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8017ff8:	2500      	movs	r5, #0
 8017ffa:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8017ffe:	f102 0515 	add.w	r5, r2, #21
 8018002:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 8018006:	2503      	movs	r5, #3
  pdev->host.hc[hc_num].xfer_buff = buff;
 8018008:	f8c3 15fc 	str.w	r1, [r3, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 801800c:	2108      	movs	r1, #8
 801800e:	f8c4 18a0 	str.w	r1, [r4, #2208]	; 0x8a0
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8018012:	f883 55f8 	strb.w	r5, [r3, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 8018016:	4611      	mov	r1, r2
 8018018:	f001 fbd2 	bl	80197c0 <HCD_SubmitRequest>
}
 801801c:	b2c0      	uxtb	r0, r0
 801801e:	bd38      	pop	{r3, r4, r5, pc}

08018020 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8018020:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8018022:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8018026:	2500      	movs	r5, #0
 8018028:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 801802c:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
 8018030:	4625      	mov	r5, r4
  pdev->host.hc[hc_num].xfer_len = length;
 8018032:	f8c4 28a0 	str.w	r2, [r4, #2208]	; 0x8a0
 
  if ( length == 0 )
 8018036:	b912      	cbnz	r2, 801803e <USBH_CtlSendData+0x1e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8018038:	2101      	movs	r1, #1
 801803a:	f884 18a9 	strb.w	r1, [r4, #2217]	; 0x8a9
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 801803e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8018042:	f892 18a9 	ldrb.w	r1, [r2, #2217]	; 0x8a9
 8018046:	f103 0215 	add.w	r2, r3, #21
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 801804a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 801804e:	b101      	cbz	r1, 8018052 <USBH_CtlSendData+0x32>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8018050:	2102      	movs	r1, #2
 8018052:	f882 15f8 	strb.w	r1, [r2, #1528]	; 0x5f8
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8018056:	4619      	mov	r1, r3
 8018058:	f001 fbb2 	bl	80197c0 <HCD_SubmitRequest>
   
  return USBH_OK;
}
 801805c:	2000      	movs	r0, #0
 801805e:	bd38      	pop	{r3, r4, r5, pc}

08018060 <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8018060:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;
 8018062:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8018066:	2601      	movs	r6, #1
 8018068:	f885 6892 	strb.w	r6, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 801806c:	f103 0615 	add.w	r6, r3, #21
 8018070:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8018074:	2602      	movs	r6, #2
  pdev->host.hc[hc_num].xfer_buff = buff;
 8018076:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
                                uint16_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 801807a:	f884 65f8 	strb.w	r6, [r4, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = length;  
 801807e:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0

  HCD_SubmitRequest (pdev , hc_num);   
 8018082:	4619      	mov	r1, r3
 8018084:	f001 fb9c 	bl	80197c0 <HCD_SubmitRequest>
  
  return USBH_OK;
  
}
 8018088:	2000      	movs	r0, #0
 801808a:	bd70      	pop	{r4, r5, r6, pc}

0801808c <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 801808c:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 801808e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8018092:	2400      	movs	r4, #0
 8018094:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8018098:	f103 0415 	add.w	r4, r3, #21
 801809c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;  
 80180a0:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].xfer_buff = buff;
 80180a4:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;  

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 80180a8:	f895 18a9 	ldrb.w	r1, [r5, #2217]	; 0x8a9
 80180ac:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 80180b0:	b101      	cbz	r1, 80180b4 <USBH_BulkSendData+0x28>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 80180b2:	2102      	movs	r1, #2
 80180b4:	7221      	strb	r1, [r4, #8]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 80180b6:	4619      	mov	r1, r3
 80180b8:	f001 fb82 	bl	80197c0 <HCD_SubmitRequest>
  return USBH_OK;
}
 80180bc:	2000      	movs	r0, #0
 80180be:	bd38      	pop	{r3, r4, r5, pc}

080180c0 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 80180c0:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 1;   
 80180c2:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80180c6:	2401      	movs	r4, #1
 80180c8:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 80180cc:	f103 0415 	add.w	r4, r3, #21
 80180d0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 80180d4:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
  pdev->host.hc[hc_num].ep_is_in = 1;   
  pdev->host.hc[hc_num].xfer_buff = buff;
 80180d8:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 80180dc:	f895 18a8 	ldrb.w	r1, [r5, #2216]	; 0x8a8
 80180e0:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 80180e4:	b101      	cbz	r1, 80180e8 <USBH_BulkReceiveData+0x28>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 80180e6:	2102      	movs	r1, #2
 80180e8:	7221      	strb	r1, [r4, #8]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 80180ea:	4619      	mov	r1, r3
 80180ec:	f001 fb68 	bl	80197c0 <HCD_SubmitRequest>
  return USBH_OK;
}
 80180f0:	2000      	movs	r0, #0
 80180f2:	bd38      	pop	{r3, r4, r5, pc}

080180f4 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 80180f4:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80180f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
  phost->Control.setup.b.wValue.w = value_idx;
 80180fa:	82cb      	strh	r3, [r1, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 80180fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8018100:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8018104:	9d03      	ldr	r5, [sp, #12]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8018106:	750a      	strb	r2, [r1, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8018108:	2206      	movs	r2, #6
  phost->Control.setup.b.wValue.w = value_idx;
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 801810a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 801810e:	bf0c      	ite	eq
 8018110:	f240 4309 	movweq	r3, #1033	; 0x409
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8018114:	2300      	movne	r3, #0
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8018116:	754a      	strb	r2, [r1, #21]
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8018118:	830b      	strh	r3, [r1, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 801811a:	462a      	mov	r2, r5
 801811c:	4623      	mov	r3, r4
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
 801811e:	834c      	strh	r4, [r1, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
}
 8018120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8018124:	f7ff bf41 	b.w	8017faa <USBH_CtlReq>

08018128 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8018128:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801812a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801812e:	461d      	mov	r5, r3
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8018130:	f442 7340 	orr.w	r3, r2, #768	; 0x300
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8018134:	f200 52f4 	addw	r2, r0, #1524	; 0x5f4
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8018138:	e88d 0044 	stmia.w	sp, {r2, r6}
 801813c:	2200      	movs	r2, #0
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 801813e:	4604      	mov	r4, r0
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8018140:	f7ff ffd8 	bl	80180f4 <USBH_GetDescriptor>
 8018144:	b9b8      	cbnz	r0, 8018176 <USBH_Get_StringDesc+0x4e>
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8018146:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 801814a:	2b03      	cmp	r3, #3
 801814c:	d113      	bne.n	8018176 <USBH_Get_StringDesc+0x4e>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 801814e:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8018152:	1e8a      	subs	r2, r1, #2
 8018154:	4296      	cmp	r6, r2
 8018156:	bfa8      	it	ge
 8018158:	4616      	movge	r6, r2
 801815a:	b2b6      	uxth	r6, r6
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 801815c:	f204 54f6 	addw	r4, r4, #1526	; 0x5f6
    
    for (idx = 0; idx < strlength; idx+=2 )
 8018160:	4603      	mov	r3, r0
 8018162:	42b3      	cmp	r3, r6
 8018164:	d205      	bcs.n	8018172 <USBH_Get_StringDesc+0x4a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8018166:	5ce1      	ldrb	r1, [r4, r3]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8018168:	1c9a      	adds	r2, r3, #2
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801816a:	f805 1b01 	strb.w	r1, [r5], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 801816e:	b293      	uxth	r3, r2
 8018170:	e7f7      	b.n	8018162 <USBH_Get_StringDesc+0x3a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 8018172:	2300      	movs	r3, #0
 8018174:	702b      	strb	r3, [r5, #0]
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
  }
  return status;
}
 8018176:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08018178 <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8018178:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 801817a:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 801817e:	4616      	mov	r6, r2
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8018180:	e88d 0048 	stmia.w	sp, {r3, r6}
 8018184:	2200      	movs	r2, #0
 8018186:	f44f 7380 	mov.w	r3, #256	; 0x100
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 801818a:	4604      	mov	r4, r0
 801818c:	460d      	mov	r5, r1
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 801818e:	f7ff ffb1 	bl	80180f4 <USBH_GetDescriptor>
 8018192:	2800      	cmp	r0, #0
 8018194:	d145      	bne.n	8018222 <USBH_Get_DevDesc+0xaa>
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8018196:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 801819a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 801819e:	f894 15f5 	ldrb.w	r1, [r4, #1525]	; 0x5f5
 80181a2:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80181a6:	f894 25f7 	ldrb.w	r2, [r4, #1527]	; 0x5f7
 80181aa:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 80181ae:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 80181b2:	84a9      	strh	r1, [r5, #36]	; 0x24
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80181b4:	f894 25f8 	ldrb.w	r2, [r4, #1528]	; 0x5f8
 80181b8:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80181bc:	f894 35f9 	ldrb.w	r3, [r4, #1529]	; 0x5f9
 80181c0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80181c4:	f894 15fa 	ldrb.w	r1, [r4, #1530]	; 0x5fa
 80181c8:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80181cc:	f894 25fb 	ldrb.w	r2, [r4, #1531]	; 0x5fb
  
  if (length > 8)
 80181d0:	2e08      	cmp	r6, #8
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
  dev_desc->bcdUSB             = LE16 (buf +  2);
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80181d2:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  
  if (length > 8)
 80181d6:	d924      	bls.n	8018222 <USBH_Get_DevDesc+0xaa>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80181d8:	f894 15fd 	ldrb.w	r1, [r4, #1533]	; 0x5fd
 80181dc:	f894 35fc 	ldrb.w	r3, [r4, #1532]	; 0x5fc
 80181e0:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 80181e4:	856a      	strh	r2, [r5, #42]	; 0x2a
    dev_desc->idProduct          = LE16 (buf + 10);
 80181e6:	f894 15ff 	ldrb.w	r1, [r4, #1535]	; 0x5ff
 80181ea:	f894 35fe 	ldrb.w	r3, [r4, #1534]	; 0x5fe
 80181ee:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 80181f2:	85aa      	strh	r2, [r5, #44]	; 0x2c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80181f4:	f894 1601 	ldrb.w	r1, [r4, #1537]	; 0x601
 80181f8:	f894 3600 	ldrb.w	r3, [r4, #1536]	; 0x600
 80181fc:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8018200:	85ea      	strh	r2, [r5, #46]	; 0x2e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8018202:	f894 1602 	ldrb.w	r1, [r4, #1538]	; 0x602
 8018206:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 801820a:	f894 3603 	ldrb.w	r3, [r4, #1539]	; 0x603
 801820e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8018212:	f894 2604 	ldrb.w	r2, [r4, #1540]	; 0x604
 8018216:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801821a:	f894 1605 	ldrb.w	r1, [r4, #1541]	; 0x605
 801821e:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
  }
  return status;      
}
 8018222:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08018224 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8018224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018228:	4617      	mov	r7, r2
 801822a:	b08d      	sub	sp, #52	; 0x34
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 801822c:	f200 54f4 	addw	r4, r0, #1524	; 0x5f4

{
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8018230:	e88d 0090 	stmia.w	sp, {r4, r7}
 8018234:	2200      	movs	r2, #0
 8018236:	f44f 7300 	mov.w	r3, #512	; 0x200
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 801823a:	4606      	mov	r6, r0
 801823c:	460d      	mov	r5, r1
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 801823e:	f7ff ff59 	bl	80180f4 <USBH_GetDescriptor>
 8018242:	9002      	str	r0, [sp, #8]
 8018244:	2800      	cmp	r0, #0
 8018246:	f040 80d1 	bne.w	80183ec <USBH_Get_CfgDesc+0x1c8>
 801824a:	9b02      	ldr	r3, [sp, #8]
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 801824c:	b29a      	uxth	r2, r3
 801824e:	42ba      	cmp	r2, r7
 8018250:	d206      	bcs.n	8018260 <USBH_Get_CfgDesc+0x3c>
* @param  itf_desc: Interface Descriptor address
* @param  ep_desc: Endpoint Descriptor address
* @param  length: Length of the descriptor
* @retval Status
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
 8018252:	18f2      	adds	r2, r6, r3
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8018254:	4867      	ldr	r0, [pc, #412]	; (80183f4 <USBH_Get_CfgDesc+0x1d0>)
 8018256:	f892 15f4 	ldrb.w	r1, [r2, #1524]	; 0x5f4
 801825a:	5419      	strb	r1, [r3, r0]
 801825c:	3301      	adds	r3, #1
 801825e:	e7f5      	b.n	801824c <USBH_Get_CfgDesc+0x28>
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8018260:	f896 05f4 	ldrb.w	r0, [r6, #1524]	; 0x5f4
 8018264:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8018268:	f896 15f5 	ldrb.w	r1, [r6, #1525]	; 0x5f5
 801826c:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8018270:	f896 25f7 	ldrb.w	r2, [r6, #1527]	; 0x5f7
 8018274:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 8018278:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 801827c:	86e8      	strh	r0, [r5, #54]	; 0x36
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 801827e:	f896 15f8 	ldrb.w	r1, [r6, #1528]	; 0x5f8
 8018282:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8018286:	f896 25f9 	ldrb.w	r2, [r6, #1529]	; 0x5f9
 801828a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 801828e:	f896 35fa 	ldrb.w	r3, [r6, #1530]	; 0x5fa
 8018292:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8018296:	f896 05fb 	ldrb.w	r0, [r6, #1531]	; 0x5fb
 801829a:	f885 003b 	strb.w	r0, [r5, #59]	; 0x3b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 801829e:	f896 25fc 	ldrb.w	r2, [r6, #1532]	; 0x5fc
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80182a2:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80182a4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80182a8:	f240 80a0 	bls.w	80183ec <USBH_Get_CfgDesc+0x1c8>
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80182ac:	2902      	cmp	r1, #2
 80182ae:	d905      	bls.n	80182bc <USBH_Get_CfgDesc+0x98>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80182b0:	4851      	ldr	r0, [pc, #324]	; (80183f8 <USBH_Get_CfgDesc+0x1d4>)
    prev_itf = 0; 
 80182b2:	4952      	ldr	r1, [pc, #328]	; (80183fc <USBH_Get_CfgDesc+0x1d8>)
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80182b4:	2300      	movs	r3, #0
 80182b6:	8003      	strh	r3, [r0, #0]
    prev_itf = 0; 
 80182b8:	700b      	strb	r3, [r1, #0]
 80182ba:	e097      	b.n	80183ec <USBH_Get_CfgDesc+0x1c8>
 80182bc:	494f      	ldr	r1, [pc, #316]	; (80183fc <USBH_Get_CfgDesc+0x1d8>)
 80182be:	484e      	ldr	r0, [pc, #312]	; (80183f8 <USBH_Get_CfgDesc+0x1d4>)
 80182c0:	780b      	ldrb	r3, [r1, #0]
 80182c2:	f8b0 9000 	ldrh.w	r9, [r0]
 80182c6:	930a      	str	r3, [sp, #40]	; 0x28
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80182c8:	2209      	movs	r2, #9
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
 80182ca:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 80182cc:	4291      	cmp	r1, r2
 80182ce:	d9ef      	bls.n	80182b0 <USBH_Get_CfgDesc+0x8c>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80182d0:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80182d2:	18e4      	adds	r4, r4, r3
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80182d4:	18d2      	adds	r2, r2, r3
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80182d6:	7860      	ldrb	r0, [r4, #1]
 80182d8:	2804      	cmp	r0, #4
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80182da:	b292      	uxth	r2, r2
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80182dc:	d1f5      	bne.n	80182ca <USBH_Get_CfgDesc+0xa6>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80182de:	f894 b003 	ldrb.w	fp, [r4, #3]
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 80182e2:	78a7      	ldrb	r7, [r4, #2]
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80182e4:	f1bb 0f02 	cmp.w	fp, #2
 80182e8:	d8ef      	bhi.n	80182ca <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80182ea:	7826      	ldrb	r6, [r4, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80182ec:	7961      	ldrb	r1, [r4, #5]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80182ee:	9605      	str	r6, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80182f0:	7926      	ldrb	r6, [r4, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80182f2:	9106      	str	r1, [sp, #24]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80182f4:	79a3      	ldrb	r3, [r4, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80182f6:	79e0      	ldrb	r0, [r4, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80182f8:	7a21      	ldrb	r1, [r4, #8]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80182fa:	9307      	str	r3, [sp, #28]
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 80182fc:	2e04      	cmp	r6, #4
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80182fe:	9008      	str	r0, [sp, #32]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8018300:	9109      	str	r1, [sp, #36]	; 0x24
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8018302:	d8e2      	bhi.n	80182ca <USBH_Get_CfgDesc+0xa6>
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8018304:	b2fb      	uxtb	r3, r7
          pif               = &itf_desc[if_ix];
 8018306:	b258      	sxtb	r0, r3
 8018308:	2109      	movs	r1, #9
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 801830a:	9303      	str	r3, [sp, #12]
          pif               = &itf_desc[if_ix];
 801830c:	fb01 5300 	mla	r3, r1, r0, r5
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8018310:	eb05 1040 	add.w	r0, r5, r0, lsl #5
 8018314:	3050      	adds	r0, #80	; 0x50
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
 8018316:	333e      	adds	r3, #62	; 0x3e
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8018318:	9004      	str	r0, [sp, #16]
 801831a:	f04f 0800 	mov.w	r8, #0
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 801831e:	fa4f fc88 	sxtb.w	ip, r8
 8018322:	45b4      	cmp	ip, r6
 8018324:	dad1      	bge.n	80182ca <USBH_Get_CfgDesc+0xa6>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8018326:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8018328:	1864      	adds	r4, r4, r1
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801832a:	1852      	adds	r2, r2, r1
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 801832c:	7860      	ldrb	r0, [r4, #1]
 801832e:	2805      	cmp	r0, #5
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8018330:	b292      	uxth	r2, r2
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8018332:	d1f4      	bne.n	801831e <USBH_Get_CfgDesc+0xfa>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
 8018334:	9803      	ldr	r0, [sp, #12]
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8018336:	9904      	ldr	r1, [sp, #16]
                
                if(prev_itf != if_ix)
 8018338:	fa4f fa80 	sxtb.w	sl, r0
 801833c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801833e:	4550      	cmp	r0, sl
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8018340:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
                
                if(prev_itf != if_ix)
 8018344:	d013      	beq.n	801836e <USBH_Get_CfgDesc+0x14a>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8018346:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8018348:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801834a:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801834c:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 801834e:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8018352:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8018354:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8018356:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8018358:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801835a:	9808      	ldr	r0, [sp, #32]
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
                {
                  prev_itf = if_ix;
 801835c:	970a      	str	r7, [sp, #40]	; 0x28
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801835e:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8018360:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8018362:	f04f 0e04 	mov.w	lr, #4
 8018366:	f883 e001 	strb.w	lr, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801836a:	7218      	strb	r0, [r3, #8]
 801836c:	e018      	b.n	80183a0 <USBH_Get_CfgDesc+0x17c>
                  prev_itf = if_ix;
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 801836e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8018372:	7960      	ldrb	r0, [r4, #5]
 8018374:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
 8018378:	45d1      	cmp	r9, sl
 801837a:	dca6      	bgt.n	80182ca <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801837c:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801837e:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8018380:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8018382:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8018384:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8018388:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801838a:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 801838c:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801838e:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8018390:	9808      	ldr	r0, [sp, #32]
 8018392:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8018394:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8018396:	f04f 0904 	mov.w	r9, #4
 801839a:	f883 9001 	strb.w	r9, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801839e:	7218      	strb	r0, [r3, #8]
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80183a0:	f894 9000 	ldrb.w	r9, [r4]
 80183a4:	9804      	ldr	r0, [sp, #16]
 80183a6:	f800 903c 	strb.w	r9, [r0, ip, lsl #3]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80183aa:	f894 c001 	ldrb.w	ip, [r4, #1]
 80183ae:	f881 c001 	strb.w	ip, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80183b2:	78a0      	ldrb	r0, [r4, #2]
 80183b4:	7088      	strb	r0, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80183b6:	f894 e003 	ldrb.w	lr, [r4, #3]
 80183ba:	f881 e003 	strb.w	lr, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80183be:	f894 9005 	ldrb.w	r9, [r4, #5]
 80183c2:	f894 c004 	ldrb.w	ip, [r4, #4]
 80183c6:	eb0c 2009 	add.w	r0, ip, r9, lsl #8
 80183ca:	8088      	strh	r0, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80183cc:	f894 e006 	ldrb.w	lr, [r4, #6]
 80183d0:	f881 e006 	strb.w	lr, [r1, #6]
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80183d4:	f894 9005 	ldrb.w	r9, [r4, #5]
 80183d8:	7921      	ldrb	r1, [r4, #4]
                ep_ix++;
 80183da:	f108 0801 	add.w	r8, r8, #1
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80183de:	eb01 2009 	add.w	r0, r1, r9, lsl #8
 80183e2:	fa1f f980 	uxth.w	r9, r0
                ep_ix++;
 80183e6:	fa5f f888 	uxtb.w	r8, r8
 80183ea:	e798      	b.n	801831e <USBH_Get_CfgDesc+0xfa>
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
}
 80183ec:	9802      	ldr	r0, [sp, #8]
 80183ee:	b00d      	add	sp, #52	; 0x34
 80183f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f4:	20004ae8 	.word	0x20004ae8
 80183f8:	2000118a 	.word	0x2000118a
 80183fc:	2000118c 	.word	0x2000118c

08018400 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8018400:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8018402:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8018404:	2505      	movs	r5, #5
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8018406:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8018408:	4623      	mov	r3, r4
 801840a:	4622      	mov	r2, r4
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801840c:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801840e:	754d      	strb	r5, [r1, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
 8018410:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8018412:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
}
 8018414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8018418:	f7ff bdc7 	b.w	8017faa <USBH_CtlReq>

0801841c <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 801841c:	b530      	push	{r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 801841e:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8018420:	2509      	movs	r5, #9
  phost->Control.setup.b.wValue.w = cfg_idx;
 8018422:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8018424:	4623      	mov	r3, r4
 8018426:	4622      	mov	r2, r4
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8018428:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801842a:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
 801842c:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;           
 801842e:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
}
 8018430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8018434:	f7ff bdb9 	b.w	8017faa <USBH_CtlReq>

08018438 <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 8018438:	b530      	push	{r4, r5, lr}
 801843a:	f103 0345 	add.w	r3, r3, #69	; 0x45
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 801843e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8018442:	2402      	movs	r4, #2
 8018444:	750c      	strb	r4, [r1, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8018446:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8018448:	2400      	movs	r4, #0
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 801844a:	f012 0f80 	tst.w	r2, #128	; 0x80
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801844e:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
  phost->Control.setup.b.wIndex.w = ep_num;
 8018450:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8018452:	82cc      	strh	r4, [r1, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
 8018454:	834c      	strh	r4, [r1, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8018456:	bf14      	ite	ne
 8018458:	721c      	strbne	r4, [r3, #8]
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 801845a:	725c      	strbeq	r4, [r3, #9]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 801845c:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801845e:	4625      	mov	r5, r4
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8018460:	4613      	mov	r3, r2
}
 8018462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8018466:	f7ff bda0 	b.w	8017faa <USBH_CtlReq>
	...

0801846c <USB_OTG_EnableCommonInt>:
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 801846c:	68c3      	ldr	r3, [r0, #12]
  int_mask.b.usbsuspend = 1; 
  
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
 801846e:	4803      	ldr	r0, [pc, #12]	; (801847c <USB_OTG_EnableCommonInt+0x10>)
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8018470:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8018474:	615a      	str	r2, [r3, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8018476:	6198      	str	r0, [r3, #24]
 8018478:	4770      	bx	lr
 801847a:	bf00      	nop
 801847c:	d0000804 	.word	0xd0000804

08018480 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8018480:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 8018482:	2300      	movs	r3, #0
 8018484:	4c10      	ldr	r4, [pc, #64]	; (80184c8 <USB_OTG_CoreReset+0x48>)
 8018486:	9301      	str	r3, [sp, #4]
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8018488:	4605      	mov	r5, r0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 801848a:	2003      	movs	r0, #3
 801848c:	f7fd f8d6 	bl	801563c <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8018490:	68e8      	ldr	r0, [r5, #12]
 8018492:	6902      	ldr	r2, [r0, #16]
    if (++count > 200000)
 8018494:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8018496:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 8018498:	d013      	beq.n	80184c2 <USB_OTG_CoreReset+0x42>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 801849a:	9901      	ldr	r1, [sp, #4]
 801849c:	2900      	cmp	r1, #0
 801849e:	daf4      	bge.n	801848a <USB_OTG_CoreReset+0xa>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 80184a0:	9b01      	ldr	r3, [sp, #4]
 80184a2:	f043 0201 	orr.w	r2, r3, #1
 80184a6:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80184a8:	9901      	ldr	r1, [sp, #4]
 80184aa:	4a07      	ldr	r2, [pc, #28]	; (80184c8 <USB_OTG_CoreReset+0x48>)
 80184ac:	6101      	str	r1, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80184ae:	6903      	ldr	r3, [r0, #16]
    if (++count > 200000)
 80184b0:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80184b2:	9301      	str	r3, [sp, #4]
    if (++count > 200000)
 80184b4:	d002      	beq.n	80184bc <USB_OTG_CoreReset+0x3c>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80184b6:	9901      	ldr	r1, [sp, #4]
 80184b8:	07c9      	lsls	r1, r1, #31
 80184ba:	d4f8      	bmi.n	80184ae <USB_OTG_CoreReset+0x2e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80184bc:	2003      	movs	r0, #3
 80184be:	f7fd f8bd 	bl	801563c <USB_OTG_BSP_uDelay>
  return status;
}
 80184c2:	2000      	movs	r0, #0
 80184c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80184c6:	bf00      	nop
 80184c8:	00030d41 	.word	0x00030d41

080184cc <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80184cc:	b530      	push	{r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 80184ce:	78c4      	ldrb	r4, [r0, #3]
 80184d0:	b96c      	cbnz	r4, 80184ee <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80184d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80184d6:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80184d8:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80184dc:	109b      	asrs	r3, r3, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80184de:	4622      	mov	r2, r4
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d004      	beq.n	80184ee <USB_OTG_WritePacket+0x22>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80184e4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80184e8:	3201      	adds	r2, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80184ea:	6028      	str	r0, [r5, #0]
 80184ec:	e7f8      	b.n	80184e0 <USB_OTG_WritePacket+0x14>
    }
  }
  return status;
}
 80184ee:	2000      	movs	r0, #0
 80184f0:	bd30      	pop	{r4, r5, pc}

080184f2 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 80184f2:	b510      	push	{r4, lr}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80184f4:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80184f6:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80184fa:	1092      	asrs	r2, r2, #2
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80184fc:	2300      	movs	r3, #0
 80184fe:	4293      	cmp	r3, r2
 8018500:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8018504:	d004      	beq.n	8018510 <USB_OTG_ReadPacket+0x1e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8018506:	6820      	ldr	r0, [r4, #0]
 8018508:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 801850c:	3301      	adds	r3, #1
 801850e:	e7f6      	b.n	80184fe <USB_OTG_ReadPacket+0xc>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 8018510:	1808      	adds	r0, r1, r0
 8018512:	bd10      	pop	{r4, pc}

08018514 <USB_OTG_SelectCore>:
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8018514:	2201      	movs	r2, #1
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8018516:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8018518:	2300      	movs	r3, #0
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 801851a:	2440      	movs	r4, #64	; 0x40
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 801851c:	4291      	cmp	r1, r2
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 801851e:	70c3      	strb	r3, [r0, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8018520:	7082      	strb	r2, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8018522:	8084      	strh	r4, [r0, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8018524:	d10c      	bne.n	8018540 <USB_OTG_SelectCore+0x2c>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8018526:	f44f 73a0 	mov.w	r3, #320	; 0x140
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 801852a:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 801852c:	2208      	movs	r2, #8
    pdev->cfg.dev_endpoints    = 4 ;
 801852e:	2404      	movs	r4, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8018530:	2102      	movs	r1, #2
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8018532:	80c3      	strh	r3, [r0, #6]
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 8018534:	7002      	strb	r2, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8018536:	7044      	strb	r4, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8018538:	7201      	strb	r1, [r0, #8]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 801853a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801853e:	e00c      	b.n	801855a <USB_OTG_SelectCore+0x46>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8018540:	b959      	cbnz	r1, 801855a <USB_OTG_SelectCore+0x46>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8018542:	230c      	movs	r3, #12
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8018544:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 12 ;
 8018546:	7003      	strb	r3, [r0, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8018548:	2106      	movs	r1, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 801854a:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 801854e:	2602      	movs	r6, #2
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8018550:	4b20      	ldr	r3, [pc, #128]	; (80185d4 <USB_OTG_SelectCore+0xc0>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
 8018552:	7041      	strb	r1, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8018554:	80c5      	strh	r5, [r0, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 8018556:	7206      	strb	r6, [r0, #8]
#endif  
#endif      
    
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED    
    pdev->cfg.dma_enable       = 1;    
 8018558:	70c2      	strb	r2, [r0, #3]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 801855a:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 801855e:	6105      	str	r5, [r0, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018560:	7845      	ldrb	r5, [r0, #1]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8018562:	60c3      	str	r3, [r0, #12]
 8018564:	4602      	mov	r2, r0
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018566:	4619      	mov	r1, r3
 8018568:	2400      	movs	r4, #0
 801856a:	3204      	adds	r2, #4
 801856c:	42ac      	cmp	r4, r5
 801856e:	f101 0620 	add.w	r6, r1, #32
 8018572:	d208      	bcs.n	8018586 <USB_OTG_SelectCore+0x72>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 8018574:	f501 6710 	add.w	r7, r1, #2304	; 0x900
 8018578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 801857c:	6511      	str	r1, [r2, #80]	; 0x50
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 801857e:	6157      	str	r7, [r2, #20]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018580:	3401      	adds	r4, #1
 8018582:	4631      	mov	r1, r6
 8018584:	e7f1      	b.n	801856a <USB_OTG_SelectCore+0x56>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8018586:	f503 6480 	add.w	r4, r3, #1024	; 0x400
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 801858a:	f503 6188 	add.w	r1, r3, #1088	; 0x440
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 801858e:	6144      	str	r4, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8018590:	7804      	ldrb	r4, [r0, #0]
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8018592:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8018596:	2200      	movs	r2, #0
 8018598:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 801859c:	42a2      	cmp	r2, r4
 801859e:	d206      	bcs.n	80185ae <USB_OTG_SelectCore+0x9a>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80185a0:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80185a4:	3201      	adds	r2, #1
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80185a6:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 80185aa:	3120      	adds	r1, #32
 80185ac:	e7f6      	b.n	801859c <USB_OTG_SelectCore+0x88>
 80185ae:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80185b2:	2200      	movs	r2, #0
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80185b4:	42a2      	cmp	r2, r4
 80185b6:	d207      	bcs.n	80185c8 <USB_OTG_SelectCore+0xb4>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80185b8:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80185bc:	3201      	adds	r2, #1
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80185be:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 80185c2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80185c6:	e7f5      	b.n	80185b4 <USB_OTG_SelectCore+0xa0>
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 80185c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80185cc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  
  return status;
}
 80185d0:	2000      	movs	r0, #0
 80185d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185d4:	40040000 	.word	0x40040000

080185d8 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80185d8:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80185da:	7a03      	ldrb	r3, [r0, #8]
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 80185dc:	2500      	movs	r5, #0
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80185de:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80185e0:	4604      	mov	r4, r0
 80185e2:	68c3      	ldr	r3, [r0, #12]
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80185e4:	d121      	bne.n	801862a <USB_OTG_CoreInit+0x52>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80185e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 80185e8:	7a61      	ldrb	r1, [r4, #9]
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
    gccfg.b.pwdn = 0;
 80185ea:	f365 4010 	bfi	r0, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 80185ee:	b109      	cbz	r1, 80185f4 <USB_OTG_CoreInit+0x1c>
    {
      gccfg.b.sofouten = 1;   
 80185f0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80185f4:	6398      	str	r0, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80185f6:	68da      	ldr	r2, [r3, #12]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80185f8:	f36f 1286 	bfc	r2, #6, #1
#ifdef USB_OTG_INTERNAL_VBUS_ENABLED
    usbcfg.b.ulpi_ext_vbus_drv = 0; /* Use internal VBUS */
 80185fc:	f36f 5214 	bfc	r2, #20, #1
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8018600:	f36f 5296 	bfc	r2, #22, #1
    
    usbcfg.b.ulpi_fsls = 0;
 8018604:	f36f 4251 	bfc	r2, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 8018608:	f36f 42d3 	bfc	r2, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801860c:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 801860e:	4620      	mov	r0, r4
 8018610:	f7ff ff36 	bl	8018480 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8018614:	78e3      	ldrb	r3, [r4, #3]
 8018616:	2b01      	cmp	r3, #1
 8018618:	d119      	bne.n	801864e <USB_OTG_CoreInit+0x76>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 801861a:	2105      	movs	r1, #5
 801861c:	f361 0544 	bfi	r5, r1, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8018620:	68e0      	ldr	r0, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 8018622:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8018626:	6085      	str	r5, [r0, #8]
 8018628:	e011      	b.n	801864e <USB_OTG_CoreInit+0x76>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 801862a:	68da      	ldr	r2, [r3, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 801862c:	f042 0140 	orr.w	r1, r2, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8018630:	60d9      	str	r1, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8018632:	f7ff ff25 	bl	8018480 <USB_OTG_CoreReset>
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8018636:	7a60      	ldrb	r0, [r4, #9]
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8018638:	68e3      	ldr	r3, [r4, #12]
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
 801863a:	2800      	cmp	r0, #0
 801863c:	bf0c      	ite	eq
 801863e:	f44f 1234 	moveq.w	r2, #2949120	; 0x2d0000
 8018642:	f44f 1274 	movne.w	r2, #3997696	; 0x3d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8018646:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8018648:	2014      	movs	r0, #20
 801864a:	f7fc fffa 	bl	8015642 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 801864e:	78e2      	ldrb	r2, [r4, #3]
 8018650:	2a01      	cmp	r2, #1
 8018652:	d106      	bne.n	8018662 <USB_OTG_CoreInit+0x8a>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8018654:	68e3      	ldr	r3, [r4, #12]
 8018656:	6899      	ldr	r1, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8018658:	f021 003e 	bic.w	r0, r1, #62	; 0x3e
    ahbcfg.b.dmaenable = 1;
 801865c:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8018660:	609a      	str	r2, [r3, #8]
    
  }
  /* initialize OTG features */
#ifdef  USE_OTG_MODE
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8018662:	68e3      	ldr	r3, [r4, #12]
 8018664:	68d9      	ldr	r1, [r3, #12]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
 8018666:	f441 7040 	orr.w	r0, r1, #768	; 0x300
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801866a:	60d8      	str	r0, [r3, #12]
  USB_OTG_EnableCommonInt(pdev);
 801866c:	4620      	mov	r0, r4
 801866e:	f7ff fefd 	bl	801846c <USB_OTG_EnableCommonInt>
#endif
  return status;
}
 8018672:	2000      	movs	r0, #0
 8018674:	bd38      	pop	{r3, r4, r5, pc}

08018676 <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8018676:	68c3      	ldr	r3, [r0, #12]
 8018678:	689a      	ldr	r2, [r3, #8]
 801867a:	f042 0001 	orr.w	r0, r2, #1
 801867e:	6098      	str	r0, [r3, #8]
  return status;
}
 8018680:	2000      	movs	r0, #0
 8018682:	4770      	bx	lr

08018684 <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8018684:	68c3      	ldr	r3, [r0, #12]
 8018686:	689a      	ldr	r2, [r3, #8]
 8018688:	f022 0001 	bic.w	r0, r2, #1
 801868c:	6098      	str	r0, [r3, #8]
  return status;
}
 801868e:	2000      	movs	r0, #0
 8018690:	4770      	bx	lr
	...

08018694 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8018694:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 8018696:	2300      	movs	r3, #0
 8018698:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 801869a:	9a01      	ldr	r2, [sp, #4]
 801869c:	f042 0320 	orr.w	r3, r2, #32
 80186a0:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 80186a2:	9a01      	ldr	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80186a4:	4b09      	ldr	r3, [pc, #36]	; (80186cc <USB_OTG_FlushTxFifo+0x38>)
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
 80186a6:	f361 128a 	bfi	r2, r1, #6, #5
 80186aa:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80186ac:	68c2      	ldr	r2, [r0, #12]
 80186ae:	9801      	ldr	r0, [sp, #4]
 80186b0:	6110      	str	r0, [r2, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80186b2:	6911      	ldr	r1, [r2, #16]
    if (++count > 200000)
 80186b4:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80186b6:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80186b8:	d002      	beq.n	80186c0 <USB_OTG_FlushTxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80186ba:	9801      	ldr	r0, [sp, #4]
 80186bc:	0680      	lsls	r0, r0, #26
 80186be:	d4f8      	bmi.n	80186b2 <USB_OTG_FlushTxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80186c0:	2003      	movs	r0, #3
 80186c2:	f7fc ffbb 	bl	801563c <USB_OTG_BSP_uDelay>
  return status;
}
 80186c6:	2000      	movs	r0, #0
 80186c8:	bd0e      	pop	{r1, r2, r3, pc}
 80186ca:	bf00      	nop
 80186cc:	00030d41 	.word	0x00030d41

080186d0 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80186d0:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80186d2:	2300      	movs	r3, #0
 80186d4:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 80186d6:	9901      	ldr	r1, [sp, #4]
 80186d8:	f041 0210 	orr.w	r2, r1, #16
 80186dc:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80186de:	68c0      	ldr	r0, [r0, #12]
 80186e0:	9b01      	ldr	r3, [sp, #4]
 80186e2:	4a07      	ldr	r2, [pc, #28]	; (8018700 <USB_OTG_FlushRxFifo+0x30>)
 80186e4:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80186e6:	6901      	ldr	r1, [r0, #16]
    if (++count > 200000)
 80186e8:	3a01      	subs	r2, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80186ea:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80186ec:	d002      	beq.n	80186f4 <USB_OTG_FlushRxFifo+0x24>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80186ee:	9b01      	ldr	r3, [sp, #4]
 80186f0:	06d9      	lsls	r1, r3, #27
 80186f2:	d4f8      	bmi.n	80186e6 <USB_OTG_FlushRxFifo+0x16>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80186f4:	2003      	movs	r0, #3
 80186f6:	f7fc ffa1 	bl	801563c <USB_OTG_BSP_uDelay>
  return status;
}
 80186fa:	2000      	movs	r0, #0
 80186fc:	bd0e      	pop	{r1, r2, r3, pc}
 80186fe:	bf00      	nop
 8018700:	00030d41 	.word	0x00030d41

08018704 <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8018704:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8018706:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8018708:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 801870a:	2901      	cmp	r1, #1
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
 801870c:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 8018710:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 8018714:	d102      	bne.n	801871c <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_host = 1;
 8018716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801871a:	e002      	b.n	8018722 <USB_OTG_SetCurrentMode+0x1e>
  }
  else if ( mode == DEVICE_MODE)
 801871c:	b909      	cbnz	r1, 8018722 <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 801871e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 8018722:	2032      	movs	r0, #50	; 0x32
  else if ( mode == DEVICE_MODE)
  {
    usbcfg.b.force_dev = 1;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8018724:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 8018726:	f7fc ff8c 	bl	8015642 <USB_OTG_BSP_mDelay>
  return status;
}
 801872a:	2000      	movs	r0, #0
 801872c:	bd08      	pop	{r3, pc}

0801872e <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 801872e:	68c3      	ldr	r3, [r0, #12]
 8018730:	6958      	ldr	r0, [r3, #20]
 8018732:	f000 0101 	and.w	r1, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 8018736:	f081 0001 	eor.w	r0, r1, #1
 801873a:	4770      	bx	lr

0801873c <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 801873c:	68c3      	ldr	r3, [r0, #12]
 801873e:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 8018740:	f000 0001 	and.w	r0, r0, #1
 8018744:	4770      	bx	lr

08018746 <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8018746:	68c3      	ldr	r3, [r0, #12]
 8018748:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 801874a:	6998      	ldr	r0, [r3, #24]
  return v;
}
 801874c:	4010      	ands	r0, r2
 801874e:	4770      	bx	lr

08018750 <USB_OTG_IsEvenFrame>:
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8018750:	6943      	ldr	r3, [r0, #20]
 8018752:	6898      	ldr	r0, [r3, #8]
 8018754:	f000 0101 	and.w	r1, r0, #1
}
 8018758:	f081 0001 	eor.w	r0, r1, #1
 801875c:	4770      	bx	lr

0801875e <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 801875e:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8018760:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8018762:	4604      	mov	r4, r0
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 8018764:	2500      	movs	r5, #0
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8018766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 801876a:	619d      	str	r5, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 801876c:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 801876e:	f7ff fe7d 	bl	801846c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8018772:	78e0      	ldrb	r0, [r4, #3]
  {  
    intmsk.b.rxstsqlvl  = 1;
 8018774:	42a8      	cmp	r0, r5
 8018776:	bf0c      	ite	eq
 8018778:	2110      	moveq	r1, #16
 801877a:	4629      	movne	r1, r5
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
 801877c:	f041 530c 	orr.w	r3, r1, #587202560	; 0x23000000
  intmsk.b.sofintr    = 1;  
 8018780:	f043 0208 	orr.w	r2, r3, #8
  intmsk.b.incomplisoout  = 1; 
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8018784:	68e3      	ldr	r3, [r4, #12]
 8018786:	6999      	ldr	r1, [r3, #24]
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
  intmsk.b.sofintr    = 1;  
  intmsk.b.incomplisoout  = 1; 
 8018788:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 801878c:	ea21 0100 	bic.w	r1, r1, r0
 8018790:	ea41 0200 	orr.w	r2, r1, r0
 8018794:	619a      	str	r2, [r3, #24]
  return status;
}
 8018796:	4628      	mov	r0, r5
 8018798:	bd38      	pop	{r3, r4, r5, pc}

0801879a <USB_OTG_InitFSLSPClkSel>:
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 801879a:	6943      	ldr	r3, [r0, #20]
 801879c:	681a      	ldr	r2, [r3, #0]
  hcfg.b.fslspclksel = freq;
 801879e:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 80187a2:	601a      	str	r2, [r3, #0]
 80187a4:	4770      	bx	lr

080187a6 <USB_OTG_ReadHPRT0>:
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80187a6:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80187aa:	6818      	ldr	r0, [r3, #0]
  hprt0.b.prtena = 0;
  hprt0.b.prtconndet = 0;
  hprt0.b.prtenchng = 0;
  hprt0.b.prtovrcurrchng = 0;
  return hprt0.d32;
}
 80187ac:	f020 002e 	bic.w	r0, r0, #46	; 0x2e
 80187b0:	4770      	bx	lr

080187b2 <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 80187b2:	b538      	push	{r3, r4, r5, lr}
 80187b4:	4604      	mov	r4, r0
 80187b6:	460d      	mov	r5, r1
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 80187b8:	f7fc ff6c 	bl	8015694 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80187bc:	4620      	mov	r0, r4
 80187be:	f7ff fff2 	bl	80187a6 <USB_OTG_ReadHPRT0>
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 80187c2:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80187c6:	f002 0110 	and.w	r1, r2, #16
 80187ca:	b2cb      	uxtb	r3, r1
 80187cc:	b933      	cbnz	r3, 80187dc <USB_OTG_DriveVbus+0x2a>
 80187ce:	2d01      	cmp	r5, #1
 80187d0:	d104      	bne.n	80187dc <USB_OTG_DriveVbus+0x2a>
  {
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80187d2:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
  {
    hprt0.b.prtpwr = 1;
 80187d6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80187da:	6010      	str	r0, [r2, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 80187dc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80187e0:	f001 0310 	and.w	r3, r1, #16
 80187e4:	b2da      	uxtb	r2, r3
 80187e6:	b12a      	cbz	r2, 80187f4 <USB_OTG_DriveVbus+0x42>
 80187e8:	b925      	cbnz	r5, 80187f4 <USB_OTG_DriveVbus+0x42>
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80187ea:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
  {
    hprt0.b.prtpwr = 0;
 80187ee:	f365 300c 	bfi	r0, r5, #12, #1
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80187f2:	6008      	str	r0, [r1, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 80187f4:	20c8      	movs	r0, #200	; 0xc8
}
 80187f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  
  USB_OTG_BSP_mDelay(200);
 80187fa:	f7fc bf22 	b.w	8015642 <USB_OTG_BSP_mDelay>

080187fe <USB_OTG_ReadHostAllChannels_intr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 80187fe:	6943      	ldr	r3, [r0, #20]
 8018800:	6958      	ldr	r0, [r3, #20]
}
 8018802:	4770      	bx	lr

08018804 <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8018804:	b538      	push	{r3, r4, r5, lr}
 8018806:	4605      	mov	r5, r0
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8018808:	f7ff ffcd 	bl	80187a6 <USB_OTG_ReadHPRT0>
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801880c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
 8018810:	f440 7480 	orr.w	r4, r0, #256	; 0x100
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8018814:	601c      	str	r4, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 8018816:	200a      	movs	r0, #10
 8018818:	f7fc ff13 	bl	8015642 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801881c:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
  hprt0.b.prtrst = 0;
 8018820:	f36f 2408 	bfc	r4, #8, #1
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8018824:	6004      	str	r4, [r0, #0]
  USB_OTG_BSP_mDelay (20);   
 8018826:	2014      	movs	r0, #20
 8018828:	f7fc ff0b 	bl	8015642 <USB_OTG_BSP_mDelay>
  return 1;
}
 801882c:	2001      	movs	r0, #1
 801882e:	bd38      	pop	{r3, r4, r5, pc}

08018830 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8018830:	b570      	push	{r4, r5, r6, lr}
 8018832:	4604      	mov	r4, r0
#endif
  hcfg.d32 = 0;
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8018834:	f7fc ff0c 	bl	8015650 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8018838:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  //USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
 801883c:	2500      	movs	r5, #0
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 801883e:	601d      	str	r5, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018840:	7a21      	ldrb	r1, [r4, #8]
 8018842:	2901      	cmp	r1, #1
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 8018844:	bf08      	it	eq
 8018846:	4629      	moveq	r1, r5
 8018848:	4620      	mov	r0, r4
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 801884a:	bf18      	it	ne
 801884c:	2101      	movne	r1, #1
 801884e:	f7ff ffa4 	bl	801879a <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 8018852:	4620      	mov	r0, r4
 8018854:	f7ff ffd6 	bl	8018804 <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8018858:	6960      	ldr	r0, [r4, #20]
 801885a:	6802      	ldr	r2, [r0, #0]
  hcfg.b.fslssupp = 0;
 801885c:	f36f 0282 	bfc	r2, #2, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8018860:	6002      	str	r2, [r0, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8018862:	7ae3      	ldrb	r3, [r4, #11]
 8018864:	2b01      	cmp	r3, #1
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
  ptxfifosize.d32 = 0;
 8018866:	462e      	mov	r6, r5
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8018868:	d10e      	bne.n	8018888 <USB_OTG_CoreInitHost+0x58>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 801886a:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 801886c:	22e0      	movs	r2, #224	; 0xe0
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 801886e:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8018870:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8018874:	f362 060f 	bfi	r6, r2, #0, #16
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 8018878:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 801887c:	f2c0 0660 	movt	r6, #96	; 0x60
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8018880:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8018882:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8018884:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  }
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
 8018888:	7ae3      	ldrb	r3, [r4, #11]
 801888a:	b973      	cbnz	r3, 80188aa <USB_OTG_CoreInitHost+0x7a>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 801888c:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 801888e:	22e0      	movs	r2, #224	; 0xe0
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8018890:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
 8018892:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 8018896:	f362 060f 	bfi	r6, r2, #0, #16
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
 801889a:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
 801889e:	f2c0 0660 	movt	r6, #96	; 0x60
#endif
#ifdef USB_OTG_HS_CORE  
  if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 80188a2:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 80188a4:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 80188a6:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  
#ifdef USE_OTG_MODE
  /* Clear Host Set HNP Enable in the USB_OTG Control Register */
  //gotgctl.b.hstsethnpen = 1;
  //USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, (1 << 11), 0);
 80188aa:	68e3      	ldr	r3, [r4, #12]
 80188ac:	6819      	ldr	r1, [r3, #0]
 80188ae:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 80188b2:	6018      	str	r0, [r3, #0]
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80188b4:	2110      	movs	r1, #16
 80188b6:	4620      	mov	r0, r4
 80188b8:	f7ff feec 	bl	8018694 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80188bc:	4620      	mov	r0, r4
 80188be:	f7ff ff07 	bl	80186d0 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80188c2:	2300      	movs	r3, #0
 80188c4:	7822      	ldrb	r2, [r4, #0]
 80188c6:	4293      	cmp	r3, r2
 80188c8:	d20a      	bcs.n	80188e0 <USB_OTG_CoreInitHost+0xb0>
/**
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
 80188ca:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80188ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188d2:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80188d6:	2100      	movs	r1, #0
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80188d8:	6082      	str	r2, [r0, #8]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80188da:	3301      	adds	r3, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80188dc:	60c1      	str	r1, [r0, #12]
 80188de:	e7f1      	b.n	80188c4 <USB_OTG_CoreInitHost+0x94>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
#endif
  
  USB_OTG_EnableHostInt(pdev);
 80188e0:	4620      	mov	r0, r4
 80188e2:	f7ff ff3c 	bl	801875e <USB_OTG_EnableHostInt>
  return status;
}
 80188e6:	2000      	movs	r0, #0
 80188e8:	bd70      	pop	{r4, r5, r6, pc}

080188ea <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80188ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 80188ec:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80188f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80188f4:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80188f8:	60a5      	str	r5, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
 80188fa:	78c6      	ldrb	r6, [r0, #3]
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
 80188fc:	2200      	movs	r2, #0
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
  {
    hcintmsk.b.ahberr = 1;
 80188fe:	2e01      	cmp	r6, #1
 8018900:	bf0c      	ite	eq
 8018902:	2304      	moveq	r3, #4
 8018904:	4613      	movne	r3, r2
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 8018906:	014e      	lsls	r6, r1, #5
 8018908:	1987      	adds	r7, r0, r6
 801890a:	f897 5895 	ldrb.w	r5, [r7, #2197]	; 0x895
 801890e:	2d03      	cmp	r5, #3
 8018910:	d82b      	bhi.n	801896a <USB_OTG_HC_Init+0x80>
 8018912:	e8df f005 	tbb	[pc, r5]
 8018916:	2002      	.short	0x2002
 8018918:	1402      	.short	0x1402
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 801891a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 801891e:	f043 0789 	orr.w	r7, r3, #137	; 0x89
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8018922:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
 8018926:	b115      	cbz	r5, 801892e <USB_OTG_HC_Init+0x44>
    {
      hcintmsk.b.bblerr = 1;
 8018928:	f447 63a2 	orr.w	r3, r7, #1296	; 0x510
 801892c:	e01d      	b.n	801896a <USB_OTG_HC_Init+0x80>
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
      if (pdev->host.hc[hc_num].do_ping) 
 801892e:	f896 6894 	ldrb.w	r6, [r6, #2196]	; 0x894
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 8018932:	f447 638a 	orr.w	r3, r7, #1104	; 0x450
      if (pdev->host.hc[hc_num].do_ping) 
 8018936:	b1c6      	cbz	r6, 801896a <USB_OTG_HC_Init+0x80>
      {
        hcintmsk.b.ack = 1;
 8018938:	f447 638e 	orr.w	r3, r7, #1136	; 0x470
 801893c:	e015      	b.n	801896a <USB_OTG_HC_Init+0x80>
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801893e:	eb00 1641 	add.w	r6, r0, r1, lsl #5
    break;
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8018942:	f043 0799 	orr.w	r7, r3, #153	; 0x99
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8018946:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
 801894a:	f447 63c0 	orr.w	r3, r7, #1536	; 0x600
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801894e:	b165      	cbz	r5, 801896a <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.bblerr = 1;
 8018950:	f447 63e0 	orr.w	r3, r7, #1792	; 0x700
 8018954:	e009      	b.n	801896a <USB_OTG_HC_Init+0x80>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8018956:	1986      	adds	r6, r0, r6
      hcintmsk.b.bblerr = 1;
    }
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 8018958:	f043 0701 	orr.w	r7, r3, #1
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801895c:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
 8018960:	f447 7308 	orr.w	r3, r7, #544	; 0x220
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8018964:	b10d      	cbz	r5, 801896a <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
 8018966:	f447 7368 	orr.w	r3, r7, #928	; 0x3a0
    }
    break;
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 801896a:	60e3      	str	r3, [r4, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 801896c:	6943      	ldr	r3, [r0, #20]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 801896e:	2701      	movs	r7, #1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8018970:	699e      	ldr	r6, [r3, #24]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8018972:	fa07 f701 	lsl.w	r7, r7, r1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8018976:	4337      	orrs	r7, r6
 8018978:	619f      	str	r7, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 801897a:	68c3      	ldr	r3, [r0, #12]
 801897c:	699d      	ldr	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 801897e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8018982:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8018986:	619d      	str	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8018988:	f890 1890 	ldrb.w	r1, [r0, #2192]	; 0x890
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 801898c:	f890 7891 	ldrb.w	r7, [r0, #2193]	; 0x891
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8018990:	f890 3892 	ldrb.w	r3, [r0, #2194]	; 0x892
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8018994:	f361 529c 	bfi	r2, r1, #22, #7
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8018998:	f890 1893 	ldrb.w	r1, [r0, #2195]	; 0x893
 801899c:	f1b1 0c02 	subs.w	ip, r1, #2
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 80189a0:	f367 22ce 	bfi	r2, r7, #11, #4
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80189a4:	f1dc 0700 	rsbs	r7, ip, #0
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80189a8:	f363 32cf 	bfi	r2, r3, #15, #1
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80189ac:	eb57 030c 	adcs.w	r3, r7, ip
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80189b0:	f890 7895 	ldrb.w	r7, [r0, #2197]	; 0x895
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80189b4:	f8b0 0896 	ldrh.w	r0, [r0, #2198]	; 0x896
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80189b8:	f363 4251 	bfi	r2, r3, #17, #1
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80189bc:	f367 4293 	bfi	r2, r7, #18, #2
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80189c0:	f360 020a 	bfi	r2, r0, #0, #11
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 80189c4:	2f03      	cmp	r7, #3
  {
    hcchar.b.oddfrm  = 1;
 80189c6:	bf08      	it	eq
 80189c8:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80189cc:	6022      	str	r2, [r4, #0]
  return status;
}
 80189ce:	2000      	movs	r0, #0
 80189d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189d2 <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80189d2:	b570      	push	{r4, r5, r6, lr}
 80189d4:	460d      	mov	r5, r1
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80189d6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80189da:	b086      	sub	sp, #24
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80189dc:	f8d1 38a0 	ldr.w	r3, [r1, #2208]	; 0x8a0
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80189e0:	4604      	mov	r4, r0
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
  hctsiz.d32 = 0;
 80189e2:	2200      	movs	r2, #0
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80189e4:	b17b      	cbz	r3, 8018a06 <USB_OTG_HC_StartXfer+0x34>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80189e6:	f8b1 0896 	ldrh.w	r0, [r1, #2198]	; 0x896
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80189ea:	1e5e      	subs	r6, r3, #1
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80189ec:	1833      	adds	r3, r6, r0
 80189ee:	fbb3 f6f0 	udiv	r6, r3, r0
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80189f2:	b2b3      	uxth	r3, r6
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 80189f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80189f8:	d906      	bls.n	8018a08 <USB_OTG_HC_StartXfer+0x36>
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80189fa:	0200      	lsls	r0, r0, #8
 80189fc:	f8c1 08a0 	str.w	r0, [r1, #2208]	; 0x8a0
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
 8018a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018a04:	e000      	b.n	8018a08 <USB_OTG_HC_StartXfer+0x36>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 8018a06:	2301      	movs	r3, #1
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8018a08:	0168      	lsls	r0, r5, #5
 8018a0a:	1821      	adds	r1, r4, r0
 8018a0c:	f891 6892 	ldrb.w	r6, [r1, #2194]	; 0x892
 8018a10:	b126      	cbz	r6, 8018a1c <USB_OTG_HC_StartXfer+0x4a>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8018a12:	f8b1 6896 	ldrh.w	r6, [r1, #2198]	; 0x896
 8018a16:	435e      	muls	r6, r3
 8018a18:	f8c1 68a0 	str.w	r6, [r1, #2208]	; 0x8a0
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8018a1c:	1820      	adds	r0, r4, r0
 8018a1e:	f8d0 18a0 	ldr.w	r1, [r0, #2208]	; 0x8a0
 8018a22:	f361 0212 	bfi	r2, r1, #0, #19
  hctsiz.b.pktcnt = num_packets;
 8018a26:	f363 42dc 	bfi	r2, r3, #19, #10
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8018a2a:	f105 0315 	add.w	r3, r5, #21
 8018a2e:	eb04 1643 	add.w	r6, r4, r3, lsl #5
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018a32:	eb04 0185 	add.w	r1, r4, r5, lsl #2
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8018a36:	f896 05f8 	ldrb.w	r0, [r6, #1528]	; 0x5f8
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018a3a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8018a3e:	f360 725e 	bfi	r2, r0, #29, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018a42:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8018a44:	78e2      	ldrb	r2, [r4, #3]
 8018a46:	2a01      	cmp	r2, #1
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8018a48:	bf08      	it	eq
 8018a4a:	f8d6 25fc 	ldreq.w	r2, [r6, #1532]	; 0x5fc
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8018a4e:	4620      	mov	r0, r4
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  if (pdev->cfg.dma_enable == 1)
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8018a50:	bf08      	it	eq
 8018a52:	615a      	streq	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8018a54:	681e      	ldr	r6, [r3, #0]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8018a56:	f7ff fe7b 	bl	8018750 <USB_OTG_IsEvenFrame>
 8018a5a:	f360 765d 	bfi	r6, r0, #29, #1
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8018a5e:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8018a62:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8018a66:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
 8018a6a:	f36f 769e 	bfc	r6, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8018a6e:	600e      	str	r6, [r1, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8018a70:	78e3      	ldrb	r3, [r4, #3]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d134      	bne.n	8018ae0 <USB_OTG_HC_StartXfer+0x10e>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8018a76:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8018a7a:	f892 0892 	ldrb.w	r0, [r2, #2194]	; 0x892
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	d12e      	bne.n	8018ae0 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8018a82:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8018a86:	b35b      	cbz	r3, 8018ae0 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8018a88:	f892 2895 	ldrb.w	r2, [r2, #2197]	; 0x895
 8018a8c:	2a03      	cmp	r2, #3
 8018a8e:	d81e      	bhi.n	8018ace <USB_OTG_HC_StartXfer+0xfc>
 8018a90:	e8df f002 	tbb	[pc, r2]
 8018a94:	0f020f02 	.word	0x0f020f02
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8018a98:	68e2      	ldr	r2, [r4, #12]
 8018a9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8018a9c:	1cd8      	adds	r0, r3, #3
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8018a9e:	9103      	str	r1, [sp, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8018aa0:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8018aa4:	b289      	uxth	r1, r1
 8018aa6:	4281      	cmp	r1, r0
 8018aa8:	d211      	bcs.n	8018ace <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8018aaa:	6991      	ldr	r1, [r2, #24]
 8018aac:	f041 0020 	orr.w	r0, r1, #32
 8018ab0:	e00c      	b.n	8018acc <USB_OTG_HC_StartXfer+0xfa>
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8018ab2:	6961      	ldr	r1, [r4, #20]
 8018ab4:	6908      	ldr	r0, [r1, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8018ab6:	1cd9      	adds	r1, r3, #3
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8018ab8:	b282      	uxth	r2, r0
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8018aba:	9001      	str	r0, [sp, #4]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8018abc:	f3c1 008f 	ubfx	r0, r1, #2, #16
 8018ac0:	4282      	cmp	r2, r0
 8018ac2:	d204      	bcs.n	8018ace <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8018ac4:	68e2      	ldr	r2, [r4, #12]
 8018ac6:	6991      	ldr	r1, [r2, #24]
 8018ac8:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8018acc:	6190      	str	r0, [r2, #24]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 8018ace:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f8d2 189c 	ldr.w	r1, [r2, #2204]	; 0x89c
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	462a      	mov	r2, r5
 8018adc:	f7ff fcf6 	bl	80184cc <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
}
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	b006      	add	sp, #24
 8018ae4:	bd70      	pop	{r4, r5, r6, pc}

08018ae6 <USB_OTG_HC_Halt>:
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8018ae6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8018aea:	b086      	sub	sp, #24
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8018aec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8018af0:	6813      	ldr	r3, [r2, #0]
  hcchar.b.chen = 1;
  hcchar.b.chdis = 1;
 8018af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 8018af6:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8018afa:	f011 010c 	ands.w	r1, r1, #12
 8018afe:	d001      	beq.n	8018b04 <USB_OTG_HC_Halt+0x1e>
 8018b00:	2908      	cmp	r1, #8
 8018b02:	d102      	bne.n	8018b0a <USB_OTG_HC_Halt+0x24>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8018b04:	68c0      	ldr	r0, [r0, #12]
 8018b06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018b08:	e001      	b.n	8018b0e <USB_OTG_HC_Halt+0x28>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8018b0a:	6940      	ldr	r0, [r0, #20]
 8018b0c:	6901      	ldr	r1, [r0, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8018b0e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8018b12:	b909      	cbnz	r1, 8018b18 <USB_OTG_HC_Halt+0x32>
    {
      hcchar.b.chen = 0;
 8018b14:	f361 73df 	bfi	r3, r1, #31, #1
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8018b18:	6013      	str	r3, [r2, #0]
  return status;
}
 8018b1a:	2000      	movs	r0, #0
 8018b1c:	b006      	add	sp, #24
 8018b1e:	4770      	bx	lr

08018b20 <USB_OTG_HC_DoPing>:
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018b20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8018b24:	b510      	push	{r4, lr}
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018b26:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
 8018b2a:	2301      	movs	r3, #1
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
 8018b2c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  hctsiz.b.pktcnt = 1;
 8018b30:	f363 44dc 	bfi	r4, r3, #19, #10
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8018b34:	6104      	str	r4, [r0, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8018b36:	6803      	ldr	r3, [r0, #0]
{
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 8018b38:	2200      	movs	r2, #0
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.chen = 1;
 8018b3a:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
 8018b3e:	f362 719e 	bfi	r1, r2, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8018b42:	6001      	str	r1, [r0, #0]
  return status;  
}
 8018b44:	4610      	mov	r0, r2
 8018b46:	bd10      	pop	{r4, pc}

08018b48 <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8018b48:	6903      	ldr	r3, [r0, #16]
 8018b4a:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 8018b4c:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8018b50:	601a      	str	r2, [r3, #0]
 8018b52:	4770      	bx	lr

08018b54 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8018b54:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8018b56:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8018b58:	4604      	mov	r4, r0
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8018b5a:	2500      	movs	r5, #0
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8018b5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8018b60:	619d      	str	r5, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8018b62:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8018b64:	f7ff fc82 	bl	801846c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8018b68:	78e0      	ldrb	r0, [r4, #3]
  {
    intmsk.b.rxstsqlvl = 1;
 8018b6a:	42a8      	cmp	r0, r5
 8018b6c:	bf0c      	ite	eq
 8018b6e:	2110      	moveq	r1, #16
 8018b70:	4629      	movne	r1, r5
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
  intmsk.b.usbreset   = 1;
  intmsk.b.enumdone   = 1;
  intmsk.b.inepintr   = 1;
 8018b72:	f441 2387 	orr.w	r3, r1, #276480	; 0x43800
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
 8018b76:	f043 1208 	orr.w	r2, r3, #524296	; 0x80008
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8018b7a:	68e3      	ldr	r3, [r4, #12]
 8018b7c:	6999      	ldr	r1, [r3, #24]
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 8018b7e:	f442 1040 	orr.w	r0, r2, #3145728	; 0x300000
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8018b82:	ea21 0100 	bic.w	r1, r1, r0
 8018b86:	ea41 0200 	orr.w	r2, r1, r0
 8018b8a:	619a      	str	r2, [r3, #24]
  return status;
}
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	bd38      	pop	{r3, r4, r5, pc}

08018b90 <USB_OTG_CoreInitDev>:
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8018b90:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8018b94:	6901      	ldr	r1, [r0, #16]
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8018b96:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 8018b98:	2600      	movs	r6, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8018b9a:	601e      	str	r6, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8018b9c:	680a      	ldr	r2, [r1, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8018b9e:	f366 22cc 	bfi	r2, r6, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8018ba2:	600a      	str	r2, [r1, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8018ba4:	7ac3      	ldrb	r3, [r0, #11]
 8018ba6:	2b01      	cmp	r3, #1
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8018ba8:	4604      	mov	r4, r0
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 8018baa:	4635      	mov	r5, r6
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8018bac:	d11b      	bne.n	8018be6 <USB_OTG_CoreInitDev+0x56>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8018bae:	2103      	movs	r1, #3
 8018bb0:	f7ff ffca 	bl	8018b48 <USB_OTG_InitDevSpeed>
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8018bb4:	21c0      	movs	r1, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8018bb6:	68e0      	ldr	r0, [r4, #12]
 8018bb8:	2280      	movs	r2, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8018bba:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8018bbe:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8018bc2:	f362 451f 	bfi	r5, r2, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8018bc6:	f362 060f 	bfi	r6, r2, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8018bca:	f44f 73a0 	mov.w	r3, #320	; 0x140
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8018bce:	6242      	str	r2, [r0, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8018bd0:	6286      	str	r6, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8018bd2:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8018bd6:	f363 050f 	bfi	r5, r3, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8018bda:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8018bde:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8018be2:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
  }
#endif
#ifdef USB_OTG_HS_CORE
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID  )
 8018be6:	7ae1      	ldrb	r1, [r4, #11]
 8018be8:	bb19      	cbnz	r1, 8018c32 <USB_OTG_CoreInitDev+0xa2>
  {
    
    /* Set High speed phy */
    
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8018bea:	7a22      	ldrb	r2, [r4, #8]
 8018bec:	2a01      	cmp	r2, #1
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH);
    }
    else /* set High speed phy in Full speed mode */
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
 8018bee:	bf18      	it	ne
 8018bf0:	2101      	movne	r1, #1
    
    /* Set High speed phy */
    
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH);
 8018bf2:	4620      	mov	r0, r4
    }
    else /* set High speed phy in Full speed mode */
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
 8018bf4:	f7ff ffa8 	bl	8018b48 <USB_OTG_InitDevSpeed>
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8018bf8:	21c0      	movs	r1, #192	; 0xc0
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8018bfa:	68e0      	ldr	r0, [r4, #12]
 8018bfc:	2380      	movs	r3, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
 8018bfe:	f2c0 0640 	movt	r6, #64	; 0x40
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8018c02:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
 8018c06:	f363 451f 	bfi	r5, r3, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
 8018c0a:	f363 060f 	bfi	r6, r3, #0, #16
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8018c0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8018c12:	6243      	str	r3, [r0, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8018c14:	6286      	str	r6, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8018c16:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8018c1a:	f362 050f 	bfi	r5, r2, #0, #16
    txfifosize.b.depth = TX2_FIFO_HS_SIZE;
 8018c1e:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8018c22:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8018c26:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    
    /* EP4 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX4_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[3], txfifosize.d32 );
 8018c2a:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    
    
    /* EP5 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
 8018c2e:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8018c32:	2110      	movs	r1, #16
 8018c34:	4620      	mov	r0, r4
 8018c36:	f7ff fd2d 	bl	8018694 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7ff fd48 	bl	80186d0 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8018c40:	6920      	ldr	r0, [r4, #16]
 8018c42:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8018c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8018c48:	6103      	str	r3, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8018c4a:	6143      	str	r3, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8018c4c:	6181      	str	r1, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8018c4e:	61c3      	str	r3, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018c50:	7862      	ldrb	r2, [r4, #1]
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d214      	bcs.n	8018c80 <USB_OTG_CoreInitDev+0xf0>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8018c56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018c5a:	3301      	adds	r3, #1
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8018c5c:	6990      	ldr	r0, [r2, #24]
 8018c5e:	6801      	ldr	r1, [r0, #0]
    if (depctl.b.epena)
 8018c60:	f3c1 6207 	ubfx	r2, r1, #24, #8
 8018c64:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8018c68:	b2ca      	uxtb	r2, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8018c6a:	2a00      	cmp	r2, #0
 8018c6c:	bf14      	ite	ne
 8018c6e:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8018c72:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8018c74:	6001      	str	r1, [r0, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8018c76:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8018c78:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8018c7a:	6102      	str	r2, [r0, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8018c7c:	6081      	str	r1, [r0, #8]
 8018c7e:	e7e7      	b.n	8018c50 <USB_OTG_CoreInitDev+0xc0>
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8018c80:	2300      	movs	r3, #0
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8018c82:	7860      	ldrb	r0, [r4, #1]
 8018c84:	4283      	cmp	r3, r0
 8018c86:	d214      	bcs.n	8018cb2 <USB_OTG_CoreInitDev+0x122>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8018c88:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8018c8c:	3301      	adds	r3, #1
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8018c8e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8018c90:	6811      	ldr	r1, [r2, #0]
    if (depctl.b.epena)
 8018c92:	f3c1 6007 	ubfx	r0, r1, #24, #8
 8018c96:	f000 0180 	and.w	r1, r0, #128	; 0x80
 8018c9a:	b2c8      	uxtb	r0, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8018c9c:	2800      	cmp	r0, #0
 8018c9e:	bf14      	ite	ne
 8018ca0:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8018ca4:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8018ca6:	6011      	str	r1, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8018ca8:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8018caa:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8018cac:	6110      	str	r0, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8018cae:	6091      	str	r1, [r2, #8]
 8018cb0:	e7e7      	b.n	8018c82 <USB_OTG_CoreInitDev+0xf2>
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8018cb2:	6923      	ldr	r3, [r4, #16]
 8018cb4:	6919      	ldr	r1, [r3, #16]
 8018cb6:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8018cba:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8018cbc:	78e0      	ldrb	r0, [r4, #3]
 8018cbe:	2801      	cmp	r0, #1
 8018cc0:	d104      	bne.n	8018ccc <USB_OTG_CoreInitDev+0x13c>
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 8018cc2:	4a05      	ldr	r2, [pc, #20]	; (8018cd8 <USB_OTG_CoreInitDev+0x148>)
    dthrctl.b.rx_thr_len = 64;
 8018cc4:	2140      	movs	r1, #64	; 0x40
 8018cc6:	f361 4259 	bfi	r2, r1, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8018cca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f7ff ff41 	bl	8018b54 <USB_OTG_EnableDevInt>
  return status;
}
 8018cd2:	2000      	movs	r0, #0
 8018cd4:	bd70      	pop	{r4, r5, r6, pc}
 8018cd6:	bf00      	nop
 8018cd8:	00010103 	.word	0x00010103

08018cdc <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018cdc:	6903      	ldr	r3, [r0, #16]
 8018cde:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 8018ce0:	f3c0 0141 	ubfx	r1, r0, #1, #2
 8018ce4:	1e4b      	subs	r3, r1, #1
 8018ce6:	2b02      	cmp	r3, #2
 8018ce8:	d802      	bhi.n	8018cf0 <USB_OTG_GetDeviceSpeed+0x14>
 8018cea:	4a02      	ldr	r2, [pc, #8]	; (8018cf4 <USB_OTG_GetDeviceSpeed+0x18>)
 8018cec:	5cd0      	ldrb	r0, [r2, r3]
 8018cee:	4770      	bx	lr
 8018cf0:	2003      	movs	r0, #3
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 8018cf2:	4770      	bx	lr
 8018cf4:	0801f99f 	.word	0x0801f99f

08018cf8 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018cf8:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8018cfa:	6981      	ldr	r1, [r0, #24]
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8018cfc:	b510      	push	{r4, lr}
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018cfe:	689c      	ldr	r4, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8018d00:	680a      	ldr	r2, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8018d02:	f3c4 0041 	ubfx	r0, r4, #1, #2
 8018d06:	2802      	cmp	r0, #2
 8018d08:	d002      	beq.n	8018d10 <USB_OTG_EP0Activate+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8018d0a:	f36f 020a 	bfc	r2, #0, #11
    break;
 8018d0e:	e002      	b.n	8018d16 <USB_OTG_EP0Activate+0x1e>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8018d10:	2003      	movs	r0, #3
 8018d12:	f360 020a 	bfi	r2, r0, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8018d16:	600a      	str	r2, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8018d18:	6859      	ldr	r1, [r3, #4]
 8018d1a:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8018d1e:	605a      	str	r2, [r3, #4]
  return status;
}
 8018d20:	2000      	movs	r0, #0
 8018d22:	bd10      	pop	{r4, pc}

08018d24 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8018d24:	b530      	push	{r4, r5, lr}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018d26:	784d      	ldrb	r5, [r1, #1]
 8018d28:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 8018d2a:	2200      	movs	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018d2c:	2d01      	cmp	r5, #1
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8018d2e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018d32:	d105      	bne.n	8018d40 <USB_OTG_EPActivate+0x1c>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8018d34:	fa05 f503 	lsl.w	r5, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8018d38:	69a4      	ldr	r4, [r4, #24]
    daintmsk.ep.in = 1 << ep->num;
 8018d3a:	f365 020f 	bfi	r2, r5, #0, #16
 8018d3e:	e005      	b.n	8018d4c <USB_OTG_EPActivate+0x28>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8018d40:	2501      	movs	r5, #1
 8018d42:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8018d46:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8018d48:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8018d4c:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8018d4e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8018d52:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8018d56:	b2ed      	uxtb	r5, r5
 8018d58:	b96d      	cbnz	r5, 8018d76 <USB_OTG_EPActivate+0x52>
  {
    depctl.b.mps    = ep->maxpacket;
 8018d5a:	688d      	ldr	r5, [r1, #8]
 8018d5c:	f365 030a 	bfi	r3, r5, #0, #11
    depctl.b.eptype = ep->type;
 8018d60:	78cd      	ldrb	r5, [r1, #3]
 8018d62:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8018d66:	88cd      	ldrh	r5, [r1, #6]
 8018d68:	f365 5399 	bfi	r3, r5, #22, #4
    depctl.b.setd0pid = 1;
 8018d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 8018d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8018d74:	6023      	str	r3, [r4, #0]
  }
  /* Enable the Interrupt for this EP */
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED
  if((ep->num == 1)&&(pdev->cfg.coreID == USB_OTG_HS_CORE_ID))
 8018d76:	7809      	ldrb	r1, [r1, #0]
 8018d78:	6903      	ldr	r3, [r0, #16]
 8018d7a:	2901      	cmp	r1, #1
 8018d7c:	d105      	bne.n	8018d8a <USB_OTG_EPActivate+0x66>
 8018d7e:	7ac0      	ldrb	r0, [r0, #11]
 8018d80:	b918      	cbnz	r0, 8018d8a <USB_OTG_EPActivate+0x66>
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
 8018d82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018d84:	4302      	orrs	r2, r0
 8018d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8018d88:	e002      	b.n	8018d90 <USB_OTG_EPActivate+0x6c>
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8018d8a:	69d9      	ldr	r1, [r3, #28]
 8018d8c:	430a      	orrs	r2, r1
 8018d8e:	61da      	str	r2, [r3, #28]
  return status;
}
 8018d90:	2000      	movs	r0, #0
 8018d92:	bd30      	pop	{r4, r5, pc}

08018d94 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8018d94:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018d96:	784e      	ldrb	r6, [r1, #1]
 8018d98:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8018d9a:	2400      	movs	r4, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018d9c:	2e01      	cmp	r6, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 8018d9e:	4622      	mov	r2, r4
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8018da0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8018da4:	d105      	bne.n	8018db2 <USB_OTG_EPDeactivate+0x1e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8018da6:	fa06 f303 	lsl.w	r3, r6, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8018daa:	69ad      	ldr	r5, [r5, #24]
    daintmsk.ep.in = 1 << ep->num;
 8018dac:	f363 020f 	bfi	r2, r3, #0, #16
 8018db0:	e005      	b.n	8018dbe <USB_OTG_EPDeactivate+0x2a>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8018db2:	2601      	movs	r6, #1
 8018db4:	fa06 f303 	lsl.w	r3, r6, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8018db8:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8018dba:	f363 421f 	bfi	r2, r3, #16, #16
  }
  depctl.b.usbactep = 0;
 8018dbe:	f36f 34cf 	bfc	r4, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8018dc2:	602c      	str	r4, [r5, #0]
  /* Disable the Interrupt for this EP */
  
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED
  if((ep->num == 1)&&(pdev->cfg.coreID == USB_OTG_HS_CORE_ID))
 8018dc4:	7809      	ldrb	r1, [r1, #0]
 8018dc6:	6903      	ldr	r3, [r0, #16]
 8018dc8:	2901      	cmp	r1, #1
 8018dca:	d106      	bne.n	8018dda <USB_OTG_EPDeactivate+0x46>
 8018dcc:	7ac0      	ldrb	r0, [r0, #11]
 8018dce:	b920      	cbnz	r0, 8018dda <USB_OTG_EPDeactivate+0x46>
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
 8018dd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018dd2:	ea20 0102 	bic.w	r1, r0, r2
 8018dd6:	63d9      	str	r1, [r3, #60]	; 0x3c
 8018dd8:	e003      	b.n	8018de2 <USB_OTG_EPDeactivate+0x4e>
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8018dda:	69d9      	ldr	r1, [r3, #28]
 8018ddc:	ea21 0202 	bic.w	r2, r1, r2
 8018de0:	61da      	str	r2, [r3, #28]
  return status;
}
 8018de2:	2000      	movs	r0, #0
 8018de4:	bd70      	pop	{r4, r5, r6, pc}

08018de6 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8018de6:	b570      	push	{r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8018de8:	784e      	ldrb	r6, [r1, #1]
 8018dea:	780a      	ldrb	r2, [r1, #0]
 8018dec:	2e01      	cmp	r6, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8018dee:	460b      	mov	r3, r1
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8018df0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8018df4:	d148      	bne.n	8018e88 <USB_OTG_EPStartXfer+0xa2>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8018df6:	698d      	ldr	r5, [r1, #24]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8018df8:	695c      	ldr	r4, [r3, #20]
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8018dfa:	6829      	ldr	r1, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8018dfc:	692a      	ldr	r2, [r5, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8018dfe:	f364 0212 	bfi	r2, r4, #0, #19
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8018e02:	b914      	cbnz	r4, 8018e0a <USB_OTG_EPStartXfer+0x24>
    {
      deptsiz.b.xfersize = 0;
      deptsiz.b.pktcnt = 1;
 8018e04:	f366 42dc 	bfi	r2, r6, #19, #10
 8018e08:	e00b      	b.n	8018e22 <USB_OTG_EPStartXfer+0x3c>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8018e0a:	689e      	ldr	r6, [r3, #8]
 8018e0c:	19a4      	adds	r4, r4, r6
 8018e0e:	3c01      	subs	r4, #1
 8018e10:	fbb4 f6f6 	udiv	r6, r4, r6
      
      if (ep->type == EP_TYPE_ISOC)
 8018e14:	78dc      	ldrb	r4, [r3, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8018e16:	f366 42dc 	bfi	r2, r6, #19, #10
      
      if (ep->type == EP_TYPE_ISOC)
 8018e1a:	2c01      	cmp	r4, #1
      {
        deptsiz.b.mc = 1;
 8018e1c:	bf08      	it	eq
 8018e1e:	f364 725e 	bfieq	r2, r4, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8018e22:	612a      	str	r2, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8018e24:	78c2      	ldrb	r2, [r0, #3]
 8018e26:	2a01      	cmp	r2, #1
 8018e28:	d106      	bne.n	8018e38 <USB_OTG_EPStartXfer+0x52>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8018e2a:	781a      	ldrb	r2, [r3, #0]
 8018e2c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8018e30:	691a      	ldr	r2, [r3, #16]
 8018e32:	69a4      	ldr	r4, [r4, #24]
 8018e34:	6162      	str	r2, [r4, #20]
 8018e36:	e00c      	b.n	8018e52 <USB_OTG_EPStartXfer+0x6c>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8018e38:	78da      	ldrb	r2, [r3, #3]
 8018e3a:	2a01      	cmp	r2, #1
 8018e3c:	d009      	beq.n	8018e52 <USB_OTG_EPStartXfer+0x6c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8018e3e:	695a      	ldr	r2, [r3, #20]
 8018e40:	b13a      	cbz	r2, 8018e52 <USB_OTG_EPStartXfer+0x6c>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018e42:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8018e44:	781c      	ldrb	r4, [r3, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018e46:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8018e48:	2601      	movs	r6, #1
 8018e4a:	fa06 f404 	lsl.w	r4, r6, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018e4e:	432c      	orrs	r4, r5
 8018e50:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8018e52:	78da      	ldrb	r2, [r3, #3]
 8018e54:	2a01      	cmp	r2, #1
 8018e56:	d107      	bne.n	8018e68 <USB_OTG_EPStartXfer+0x82>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8018e58:	6902      	ldr	r2, [r0, #16]
 8018e5a:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8018e5c:	05d2      	lsls	r2, r2, #23
      {
        depctl.b.setd1pid = 1;
 8018e5e:	bf54      	ite	pl
 8018e60:	f041 5100 	orrpl.w	r1, r1, #536870912	; 0x20000000
      }
      else
      {
        depctl.b.setd0pid = 1;
 8018e64:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8018e68:	781a      	ldrb	r2, [r3, #0]
 8018e6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8018e6e:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8018e72:	6992      	ldr	r2, [r2, #24]
 8018e74:	6011      	str	r1, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8018e76:	78d9      	ldrb	r1, [r3, #3]
 8018e78:	2901      	cmp	r1, #1
 8018e7a:	d137      	bne.n	8018eec <USB_OTG_EPStartXfer+0x106>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8018e7c:	68d9      	ldr	r1, [r3, #12]
 8018e7e:	781a      	ldrb	r2, [r3, #0]
 8018e80:	8a9b      	ldrh	r3, [r3, #20]
 8018e82:	f7ff fb23 	bl	80184cc <USB_OTG_WritePacket>
 8018e86:	e031      	b.n	8018eec <USB_OTG_EPStartXfer+0x106>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8018e88:	6d4d      	ldr	r5, [r1, #84]	; 0x54
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8018e8a:	695e      	ldr	r6, [r3, #20]
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8018e8c:	682a      	ldr	r2, [r5, #0]
 8018e8e:	689c      	ldr	r4, [r3, #8]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8018e90:	6929      	ldr	r1, [r5, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8018e92:	b92e      	cbnz	r6, 8018ea0 <USB_OTG_EPStartXfer+0xba>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8018e94:	f364 0112 	bfi	r1, r4, #0, #19
      deptsiz.b.pktcnt = 1;
 8018e98:	2401      	movs	r4, #1
 8018e9a:	f364 41dc 	bfi	r1, r4, #19, #10
 8018e9e:	e00a      	b.n	8018eb6 <USB_OTG_EPStartXfer+0xd0>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8018ea0:	1936      	adds	r6, r6, r4
 8018ea2:	3e01      	subs	r6, #1
 8018ea4:	fbb6 f6f4 	udiv	r6, r6, r4
 8018ea8:	f366 41dc 	bfi	r1, r6, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8018eac:	05b6      	lsls	r6, r6, #22
 8018eae:	0db6      	lsrs	r6, r6, #22
 8018eb0:	4374      	muls	r4, r6
 8018eb2:	f364 0112 	bfi	r1, r4, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8018eb6:	6129      	str	r1, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8018eb8:	78c1      	ldrb	r1, [r0, #3]
 8018eba:	2901      	cmp	r1, #1
 8018ebc:	d105      	bne.n	8018eca <USB_OTG_EPStartXfer+0xe4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8018ebe:	781c      	ldrb	r4, [r3, #0]
 8018ec0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8018ec4:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8018ec6:	6919      	ldr	r1, [r3, #16]
 8018ec8:	6161      	str	r1, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8018eca:	78d9      	ldrb	r1, [r3, #3]
 8018ecc:	2901      	cmp	r1, #1
 8018ece:	d106      	bne.n	8018ede <USB_OTG_EPStartXfer+0xf8>
    {
      if (ep->even_odd_frame)
 8018ed0:	7959      	ldrb	r1, [r3, #5]
 8018ed2:	b111      	cbz	r1, 8018eda <USB_OTG_EPStartXfer+0xf4>
      {
        depctl.b.setd1pid = 1;
 8018ed4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8018ed8:	e001      	b.n	8018ede <USB_OTG_EPStartXfer+0xf8>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8018eda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8018ede:	781b      	ldrb	r3, [r3, #0]
 8018ee0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8018ee4:	f042 4104 	orr.w	r1, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8018ee8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8018eea:	6011      	str	r1, [r2, #0]
  }
  return status;
}
 8018eec:	2000      	movs	r0, #0
 8018eee:	bd70      	pop	{r4, r5, r6, pc}

08018ef0 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8018ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8018ef2:	784d      	ldrb	r5, [r1, #1]
 8018ef4:	2d01      	cmp	r5, #1
 8018ef6:	d13d      	bne.n	8018f74 <USB_OTG_EP0StartXfer+0x84>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8018ef8:	6983      	ldr	r3, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8018efa:	694a      	ldr	r2, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8018efc:	681e      	ldr	r6, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8018efe:	691c      	ldr	r4, [r3, #16]
 8018f00:	9400      	str	r4, [sp, #0]
 8018f02:	b2e4      	uxtb	r4, r4
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8018f04:	b942      	cbnz	r2, 8018f18 <USB_OTG_EP0StartXfer+0x28>
    {
      deptsiz.b.xfersize = 0;
 8018f06:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8018f0a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8018f0e:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8018f12:	f365 02c4 	bfi	r2, r5, #3, #2
 8018f16:	e00e      	b.n	8018f36 <USB_OTG_EP0StartXfer+0x46>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8018f18:	688d      	ldr	r5, [r1, #8]
 8018f1a:	42aa      	cmp	r2, r5
      {
        ep->xfer_len = ep->maxpacket;
 8018f1c:	bf8a      	itet	hi
 8018f1e:	614d      	strhi	r5, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8018f20:	f362 0406 	bfils	r4, r2, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 8018f24:	f365 0406 	bfihi	r4, r5, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 8018f28:	f89d 2002 	ldrb.w	r2, [sp, #2]
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8018f2c:	f88d 4000 	strb.w	r4, [sp]
      }
      deptsiz.b.pktcnt = 1;
 8018f30:	2401      	movs	r4, #1
 8018f32:	f364 02c4 	bfi	r2, r4, #3, #2
 8018f36:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8018f3a:	9a00      	ldr	r2, [sp, #0]
 8018f3c:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8018f3e:	78c2      	ldrb	r2, [r0, #3]
 8018f40:	2a01      	cmp	r2, #1
 8018f42:	d105      	bne.n	8018f50 <USB_OTG_EP0StartXfer+0x60>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8018f44:	780c      	ldrb	r4, [r1, #0]
 8018f46:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8018f4a:	6994      	ldr	r4, [r2, #24]
 8018f4c:	690a      	ldr	r2, [r1, #16]
 8018f4e:	6162      	str	r2, [r4, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8018f50:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8018f54:	601e      	str	r6, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8018f56:	78c3      	ldrb	r3, [r0, #3]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d134      	bne.n	8018fc6 <USB_OTG_EP0StartXfer+0xd6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8018f5c:	694a      	ldr	r2, [r1, #20]
 8018f5e:	2a00      	cmp	r2, #0
 8018f60:	d031      	beq.n	8018fc6 <USB_OTG_EP0StartXfer+0xd6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018f62:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8018f64:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018f66:	6b58      	ldr	r0, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8018f68:	2101      	movs	r1, #1
 8018f6a:	fa01 f202 	lsl.w	r2, r1, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8018f6e:	4302      	orrs	r2, r0
 8018f70:	635a      	str	r2, [r3, #52]	; 0x34
 8018f72:	e028      	b.n	8018fc6 <USB_OTG_EP0StartXfer+0xd6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8018f74:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8018f76:	694e      	ldr	r6, [r1, #20]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8018f78:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8018f7c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8018f7e:	688a      	ldr	r2, [r1, #8]
 8018f80:	681d      	ldr	r5, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8018f82:	691c      	ldr	r4, [r3, #16]
 8018f84:	9400      	str	r4, [sp, #0]
 8018f86:	b2e4      	uxtb	r4, r4
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8018f88:	b106      	cbz	r6, 8018f8c <USB_OTG_EP0StartXfer+0x9c>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8018f8a:	614a      	str	r2, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8018f8c:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8018f90:	f89d 2002 	ldrb.w	r2, [sp, #2]
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 8018f94:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8018f98:	2401      	movs	r4, #1
 8018f9a:	f364 02c4 	bfi	r2, r4, #3, #2
 8018f9e:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8018fa2:	9a00      	ldr	r2, [sp, #0]
 8018fa4:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8018fa6:	78c3      	ldrb	r3, [r0, #3]
 8018fa8:	2b01      	cmp	r3, #1
 8018faa:	d105      	bne.n	8018fb8 <USB_OTG_EP0StartXfer+0xc8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8018fac:	780a      	ldrb	r2, [r1, #0]
 8018fae:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8018fb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018fb4:	690b      	ldr	r3, [r1, #16]
 8018fb6:	6153      	str	r3, [r2, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8018fb8:	7809      	ldrb	r1, [r1, #0]
 8018fba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8018fbe:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8018fc2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8018fc4:	6015      	str	r5, [r2, #0]
    
  }
  return status;
}
 8018fc6:	2000      	movs	r0, #0
 8018fc8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08018fca <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8018fca:	784b      	ldrb	r3, [r1, #1]
 8018fcc:	7809      	ldrb	r1, [r1, #0]
 8018fce:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8018fd0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8018fd4:	d10d      	bne.n	8018ff2 <USB_OTG_EPSetStall+0x28>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8018fd6:	6980      	ldr	r0, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8018fd8:	6803      	ldr	r3, [r0, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8018fda:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8018fde:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8018fe2:	b2ca      	uxtb	r2, r1
 8018fe4:	b10a      	cbz	r2, 8018fea <USB_OTG_EPSetStall+0x20>
    {
      depctl.b.epdis = 1;
 8018fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    }
    depctl.b.stall = 1;
 8018fea:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8018fee:	6001      	str	r1, [r0, #0]
 8018ff0:	e004      	b.n	8018ffc <USB_OTG_EPSetStall+0x32>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8018ff2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8018ff4:	681a      	ldr	r2, [r3, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8018ff6:	f442 1100 	orr.w	r1, r2, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8018ffa:	6019      	str	r1, [r3, #0]
  }
  return status;
}
 8018ffc:	2000      	movs	r0, #0
 8018ffe:	4770      	bx	lr

08019000 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 8019000:	784b      	ldrb	r3, [r1, #1]
 8019002:	2b01      	cmp	r3, #1
 8019004:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8019006:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8019008:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801900c:	bf0c      	ite	eq
 801900e:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8019010:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8019012:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8019014:	1e88      	subs	r0, r1, #2
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 8019016:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 801901a:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 801901c:	bf98      	it	ls
 801901e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8019022:	6013      	str	r3, [r2, #0]
  return status;
}
 8019024:	2000      	movs	r0, #0
 8019026:	4770      	bx	lr

08019028 <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8019028:	6903      	ldr	r3, [r0, #16]
 801902a:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 801902c:	69d8      	ldr	r0, [r3, #28]
 801902e:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 8019030:	0c00      	lsrs	r0, r0, #16
 8019032:	4770      	bx	lr

08019034 <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8019034:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8019038:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 801903a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801903c:	6899      	ldr	r1, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 801903e:	6950      	ldr	r0, [r2, #20]
  return v;
}
 8019040:	4008      	ands	r0, r1
 8019042:	4770      	bx	lr

08019044 <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8019044:	6903      	ldr	r3, [r0, #16]
 8019046:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8019048:	69d9      	ldr	r1, [r3, #28]
 801904a:	4008      	ands	r0, r1
  return (v & 0xffff);
}
 801904c:	b280      	uxth	r0, r0
 801904e:	4770      	bx	lr

08019050 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8019050:	b082      	sub	sp, #8
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8019052:	2300      	movs	r3, #0
 8019054:	9300      	str	r3, [sp, #0]
  doeptsize0.b.supcnt = 3;
 8019056:	21c0      	movs	r1, #192	; 0xc0
  doeptsize0.b.pktcnt = 1;
 8019058:	2201      	movs	r2, #1
 801905a:	2300      	movs	r3, #0
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 801905c:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
 8019060:	f362 03c4 	bfi	r3, r2, #3, #2
  doeptsize0.b.xfersize = 8 * 3;
 8019064:	2118      	movs	r1, #24
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 8019066:	f88d 3002 	strb.w	r3, [sp, #2]
  doeptsize0.b.xfersize = 8 * 3;
 801906a:	f88d 1000 	strb.w	r1, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 801906e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8019070:	9a00      	ldr	r2, [sp, #0]
 8019072:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8019074:	78c1      	ldrb	r1, [r0, #3]
 8019076:	2901      	cmp	r1, #1
 8019078:	d106      	bne.n	8019088 <USB_OTG_EP0_OutStart+0x38>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 801907a:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 801907e:	6158      	str	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8019080:	681a      	ldr	r2, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8019082:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8019086:	601a      	str	r2, [r3, #0]
  }
}
 8019088:	b002      	add	sp, #8
 801908a:	4770      	bx	lr

0801908c <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 801908c:	b510      	push	{r4, lr}
 801908e:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8019090:	f7ff fa40 	bl	8018514 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8019094:	2301      	movs	r3, #1
 8019096:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 801909a:	2300      	movs	r3, #0
 801909c:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80190a0:	7862      	ldrb	r2, [r4, #1]
 80190a2:	4293      	cmp	r3, r2
 80190a4:	d213      	bcs.n	80190ce <DCD_Init+0x42>
  {
    ep = &pdev->dev.in_ep[i];
 80190a6:	2228      	movs	r2, #40	; 0x28
 80190a8:	fb02 4103 	mla	r1, r2, r3, r4
 80190ac:	f501 728e 	add.w	r2, r1, #284	; 0x11c
    /* Init ep structure */
    ep->is_in = 1;
 80190b0:	2001      	movs	r0, #1
 80190b2:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    ep->num = i;
 80190b6:	f881 311c 	strb.w	r3, [r1, #284]	; 0x11c
    ep->tx_fifo_num = i;
 80190ba:	f8a1 3122 	strh.w	r3, [r1, #290]	; 0x122
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80190be:	2040      	movs	r0, #64	; 0x40
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 80190c0:	2100      	movs	r1, #0
 80190c2:	70d1      	strb	r1, [r2, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80190c4:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 80190c6:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 80190c8:	6151      	str	r1, [r2, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80190ca:	3301      	adds	r3, #1
 80190cc:	e7e8      	b.n	80190a0 <DCD_Init+0x14>
 80190ce:	2300      	movs	r3, #0
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80190d0:	7860      	ldrb	r0, [r4, #1]
 80190d2:	4283      	cmp	r3, r0
 80190d4:	d213      	bcs.n	80190fe <DCD_Init+0x72>
  {
    ep = &pdev->dev.out_ep[i];
 80190d6:	2128      	movs	r1, #40	; 0x28
 80190d8:	fb01 4003 	mla	r0, r1, r3, r4
 80190dc:	f500 725d 	add.w	r2, r0, #884	; 0x374
    /* Init ep structure */
    ep->is_in = 0;
 80190e0:	2100      	movs	r1, #0
    ep->num = i;
 80190e2:	f880 3374 	strb.w	r3, [r0, #884]	; 0x374
    ep->tx_fifo_num = i;
 80190e6:	f8a0 337a 	strh.w	r3, [r0, #890]	; 0x37a
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 80190ea:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 80190ee:	f880 1377 	strb.w	r1, [r0, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80190f2:	2040      	movs	r0, #64	; 0x40
 80190f4:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 80190f6:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 80190f8:	6151      	str	r1, [r2, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80190fa:	3301      	adds	r3, #1
 80190fc:	e7e8      	b.n	80190d0 <DCD_Init+0x44>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 80190fe:	4620      	mov	r0, r4
 8019100:	f7ff fac0 	bl	8018684 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8019104:	4620      	mov	r0, r4
 8019106:	f7ff fa67 	bl	80185d8 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 801910a:	2100      	movs	r1, #0
 801910c:	4620      	mov	r0, r4
 801910e:	f7ff faf9 	bl	8018704 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8019112:	4620      	mov	r0, r4
 8019114:	f7ff fd3c 	bl	8018b90 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8019118:	4620      	mov	r0, r4
}
 801911a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 801911e:	f7ff baaa 	b.w	8018676 <USB_OTG_EnableGlobalInt>

08019122 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8019122:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8019124:	b2cd      	uxtb	r5, r1
 8019126:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 801912a:	f04f 0628 	mov.w	r6, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 801912e:	fb06 0404 	mla	r4, r6, r4, r0
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8019132:	f015 0f80 	tst.w	r5, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8019136:	bf14      	ite	ne
 8019138:	f504 748e 	addne.w	r4, r4, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 801913c:	f504 745d 	addeq.w	r4, r4, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8019140:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8019144:	09ed      	lsrs	r5, r5, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8019146:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8019148:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 801914a:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 801914c:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 801914e:	b105      	cbz	r5, 8019152 <DCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8019150:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8019152:	2b02      	cmp	r3, #2
 8019154:	d101      	bne.n	801915a <DCD_EP_Open+0x38>
  {
    ep->data_pid_start = 0;
 8019156:	2300      	movs	r3, #0
 8019158:	7123      	strb	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 801915a:	4621      	mov	r1, r4
 801915c:	f7ff fde2 	bl	8018d24 <USB_OTG_EPActivate>
  return 0;
}
 8019160:	2000      	movs	r0, #0
 8019162:	bd70      	pop	{r4, r5, r6, pc}

08019164 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8019164:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8019166:	b2ca      	uxtb	r2, r1
 8019168:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801916c:	f04f 0428 	mov.w	r4, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8019170:	fb04 0303 	mla	r3, r4, r3, r0
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8019174:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8019178:	bf14      	ite	ne
 801917a:	f503 738e 	addne.w	r3, r3, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 801917e:	f503 735d 	addeq.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8019182:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->is_in = (0x80 & ep_addr) != 0;
 8019186:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8019188:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 801918a:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 801918c:	4619      	mov	r1, r3
 801918e:	f7ff fe01 	bl	8018d94 <USB_OTG_EPDeactivate>
  return 0;
}
 8019192:	2000      	movs	r0, #0
 8019194:	bd10      	pop	{r4, pc}

08019196 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8019196:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8019198:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 801919c:	2528      	movs	r5, #40	; 0x28
 801919e:	fb05 0504 	mla	r5, r5, r4, r0
 80191a2:	f505 715d 	add.w	r1, r5, #884	; 0x374
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 80191a6:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
 80191aa:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 80191ac:	2300      	movs	r3, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80191ae:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 80191b0:	618b      	str	r3, [r1, #24]
  ep->is_in = 0;
 80191b2:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
 80191b4:	78c3      	ldrb	r3, [r0, #3]
 80191b6:	2b01      	cmp	r3, #1
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80191b8:	f505 755c 	add.w	r5, r5, #880	; 0x370
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
  {
    ep->dma_addr = (uint32_t)pbuf;  
 80191bc:	bf08      	it	eq
 80191be:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 80191c0:	b914      	cbnz	r4, 80191c8 <DCD_EP_PrepareRx+0x32>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 80191c2:	f7ff fe95 	bl	8018ef0 <USB_OTG_EP0StartXfer>
 80191c6:	e001      	b.n	80191cc <DCD_EP_PrepareRx+0x36>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80191c8:	f7ff fe0d 	bl	8018de6 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 80191cc:	2000      	movs	r0, #0
 80191ce:	bd38      	pop	{r3, r4, r5, pc}

080191d0 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 80191d0:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80191d2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80191d6:	2528      	movs	r5, #40	; 0x28
 80191d8:	fb05 0504 	mla	r5, r5, r4, r0
 80191dc:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 80191e0:	2601      	movs	r6, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
 80191e2:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 80191e4:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
 80191e6:	2200      	movs	r2, #0
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
 80191e8:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 80191ec:	704e      	strb	r6, [r1, #1]
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80191ee:	f505 758c 	add.w	r5, r5, #280	; 0x118
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 80191f2:	618a      	str	r2, [r1, #24]
  ep->xfer_len  = buf_len;
 80191f4:	614b      	str	r3, [r1, #20]
  
  if ( ep->num == 0 )
 80191f6:	b914      	cbnz	r4, 80191fe <DCD_EP_Tx+0x2e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 80191f8:	f7ff fe7a 	bl	8018ef0 <USB_OTG_EP0StartXfer>
 80191fc:	e001      	b.n	8019202 <DCD_EP_Tx+0x32>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80191fe:	f7ff fdf2 	bl	8018de6 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8019202:	2000      	movs	r0, #0
 8019204:	bd70      	pop	{r4, r5, r6, pc}

08019206 <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8019206:	b2ca      	uxtb	r2, r1
 8019208:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 801920c:	b510      	push	{r4, lr}
 801920e:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8019212:	d006      	beq.n	8019222 <DCD_EP_Stall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8019214:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8019218:	fb03 0304 	mla	r3, r3, r4, r0
 801921c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019220:	e003      	b.n	801922a <DCD_EP_Stall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8019222:	fb03 0401 	mla	r4, r3, r1, r0
 8019226:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 801922a:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 801922c:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 801922e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8019232:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8019234:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8019236:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8019238:	4619      	mov	r1, r3
 801923a:	f7ff fec6 	bl	8018fca <USB_OTG_EPSetStall>
  return (0);
}
 801923e:	2000      	movs	r0, #0
 8019240:	bd10      	pop	{r4, pc}

08019242 <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8019242:	b2ca      	uxtb	r2, r1
 8019244:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8019248:	b510      	push	{r4, lr}
 801924a:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 801924e:	d006      	beq.n	801925e <DCD_EP_ClrStall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8019250:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8019254:	fb03 0304 	mla	r3, r3, r4, r0
 8019258:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801925c:	e003      	b.n	8019266 <DCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 801925e:	fb03 0401 	mla	r4, r3, r1, r0
 8019262:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 8019266:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8019268:	09d2      	lsrs	r2, r2, #7
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
 801926a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801926e:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 8019270:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8019272:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8019274:	4619      	mov	r1, r3
 8019276:	f7ff fec3 	bl	8019000 <USB_OTG_EPClearStall>
  return (0);
}
 801927a:	4620      	mov	r0, r4
 801927c:	bd10      	pop	{r4, pc}

0801927e <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 801927e:	6902      	ldr	r2, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8019280:	2300      	movs	r3, #0
  dcfg.b.devaddr = address;
 8019282:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8019286:	6811      	ldr	r1, [r2, #0]
 8019288:	430b      	orrs	r3, r1
 801928a:	6013      	str	r3, [r2, #0]
 801928c:	4770      	bx	lr

0801928e <DCD_DevConnect>:
* @brief  Connect device (enable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
 801928e:	4770      	bx	lr

08019290 <DCD_DevDisconnect>:
* @brief  Disconnect device (disable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
 8019290:	4770      	bx	lr

08019292 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8019292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 8019296:	f04f 0828 	mov.w	r8, #40	; 0x28
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 801929a:	4605      	mov	r5, r0
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 801929c:	fb08 0001 	mla	r0, r8, r1, r0
 80192a0:	f500 788c 	add.w	r8, r0, #280	; 0x118
 80192a4:	f108 0404 	add.w	r4, r8, #4
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 80192a8:	460e      	mov	r6, r1
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 80192aa:	6962      	ldr	r2, [r4, #20]
 80192ac:	69a3      	ldr	r3, [r4, #24]
  
  if (len > ep->maxpacket)
 80192ae:	68a0      	ldr	r0, [r4, #8]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 80192b0:	1ad1      	subs	r1, r2, r3
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80192b2:	eb05 0286 	add.w	r2, r5, r6, lsl #2
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80192b6:	4281      	cmp	r1, r0
 80192b8:	bf38      	it	cc
 80192ba:	4608      	movcc	r0, r1
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80192bc:	6993      	ldr	r3, [r2, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80192be:	f100 0903 	add.w	r9, r0, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80192c2:	6999      	ldr	r1, [r3, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80192c4:	ea4f 0999 	mov.w	r9, r9, lsr #2
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80192c8:	b289      	uxth	r1, r1
 80192ca:	4549      	cmp	r1, r9
 80192cc:	d92a      	bls.n	8019324 <DCD_WriteEmptyTxFifo+0x92>
          ep->xfer_count < ep->xfer_len &&
 80192ce:	69a7      	ldr	r7, [r4, #24]
 80192d0:	6960      	ldr	r0, [r4, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80192d2:	4287      	cmp	r7, r0
 80192d4:	d226      	bcs.n	8019324 <DCD_WriteEmptyTxFifo+0x92>
          ep->xfer_count < ep->xfer_len &&
 80192d6:	b328      	cbz	r0, 8019324 <DCD_WriteEmptyTxFifo+0x92>
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 80192d8:	68a2      	ldr	r2, [r4, #8]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80192da:	68e1      	ldr	r1, [r4, #12]
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80192dc:	1bc7      	subs	r7, r0, r7
 80192de:	4297      	cmp	r7, r2
 80192e0:	bf28      	it	cs
 80192e2:	4617      	movcs	r7, r2
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 80192e4:	f107 0c03 	add.w	ip, r7, #3
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80192e8:	b2bb      	uxth	r3, r7
 80192ea:	b2f2      	uxtb	r2, r6
 80192ec:	4628      	mov	r0, r5
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 80192ee:	ea4f 099c 	mov.w	r9, ip, lsr #2
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80192f2:	f7ff f8eb 	bl	80184cc <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 80192f6:	68e3      	ldr	r3, [r4, #12]
    ep->xfer_count += len;
 80192f8:	69a0      	ldr	r0, [r4, #24]
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 80192fa:	19d9      	adds	r1, r3, r7
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80192fc:	eb05 0286 	add.w	r2, r5, r6, lsl #2
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8019300:	183f      	adds	r7, r7, r0
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8019302:	60e1      	str	r1, [r4, #12]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8019304:	6960      	ldr	r0, [r4, #20]
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8019306:	6993      	ldr	r3, [r2, #24]
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8019308:	61a7      	str	r7, [r4, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801930a:	4287      	cmp	r7, r0
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801930c:	6999      	ldr	r1, [r3, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801930e:	d3db      	bcc.n	80192c8 <DCD_WriteEmptyTxFifo+0x36>
      uint32_t fifoemptymsk = 1 << ep->num;
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8019310:	692b      	ldr	r3, [r5, #16]
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 8019312:	f898 2004 	ldrb.w	r2, [r8, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8019316:	6b59      	ldr	r1, [r3, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 8019318:	2001      	movs	r0, #1
 801931a:	fa00 f202 	lsl.w	r2, r0, r2
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801931e:	ea21 0102 	bic.w	r1, r1, r2
 8019322:	6359      	str	r1, [r3, #52]	; 0x34
    }
    // END USB IRQ HANGUP PATCH
  }
  
  return 1;
}
 8019324:	2001      	movs	r0, #1
 8019326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801932c <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 801932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019330:	b085      	sub	sp, #20
 8019332:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8019334:	f7ff f9fb 	bl	801872e <USB_OTG_IsDeviceMode>
 8019338:	b908      	cbnz	r0, 801933e <USBD_OTG_ISR_Handler+0x12>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 801933a:	2000      	movs	r0, #0
 801933c:	e1f7      	b.n	801972e <USBD_OTG_ISR_Handler+0x402>
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 801933e:	4620      	mov	r0, r4
 8019340:	f7ff fa01 	bl	8018746 <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8019344:	4607      	mov	r7, r0
 8019346:	2800      	cmp	r0, #0
 8019348:	d0f7      	beq.n	801933a <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 801934a:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801934e:	f00a 0008 	and.w	r0, sl, #8
 8019352:	b2c0      	uxtb	r0, r0
 8019354:	2800      	cmp	r0, #0
 8019356:	d056      	beq.n	8019406 <USBD_OTG_ISR_Handler+0xda>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8019358:	4620      	mov	r0, r4
 801935a:	f7ff fe65 	bl	8019028 <USB_OTG_ReadDevAllOutEp_itr>
 801935e:	4626      	mov	r6, r4
 8019360:	4680      	mov	r8, r0
 8019362:	46a3      	mov	fp, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8019364:	f04f 0900 	mov.w	r9, #0
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8019368:	f1b8 0f00 	cmp.w	r8, #0
 801936c:	d04a      	beq.n	8019404 <USBD_OTG_ISR_Handler+0xd8>
  {
    if (ep_intr&0x1)
 801936e:	f018 0f01 	tst.w	r8, #1
 8019372:	d03f      	beq.n	80193f4 <USBD_OTG_ISR_Handler+0xc8>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8019374:	fa5f f589 	uxtb.w	r5, r9
 8019378:	4629      	mov	r1, r5
 801937a:	4620      	mov	r0, r4
 801937c:	9501      	str	r5, [sp, #4]
 801937e:	f7ff fe59 	bl	8019034 <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8019382:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8019386:	4605      	mov	r5, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8019388:	9b01      	ldr	r3, [sp, #4]
 801938a:	d020      	beq.n	80193ce <USBD_OTG_ISR_Handler+0xa2>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 801938c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 801938e:	2501      	movs	r5, #1
 8019390:	6095      	str	r5, [r2, #8]
        if (pdev->cfg.dma_enable == 1)
 8019392:	78e0      	ldrb	r0, [r4, #3]
 8019394:	42a8      	cmp	r0, r5
 8019396:	d107      	bne.n	80193a8 <USBD_OTG_ISR_Handler+0x7c>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8019398:	6911      	ldr	r1, [r2, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 801939a:	f8db 237c 	ldr.w	r2, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 801939e:	f3c1 0012 	ubfx	r0, r1, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 80193a2:	1a11      	subs	r1, r2, r0
 80193a4:	f8cb 138c 	str.w	r1, [fp, #908]	; 0x38c
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 80193a8:	4894      	ldr	r0, [pc, #592]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
 80193aa:	6802      	ldr	r2, [r0, #0]
 80193ac:	4619      	mov	r1, r3
 80193ae:	6812      	ldr	r2, [r2, #0]
 80193b0:	4620      	mov	r0, r4
 80193b2:	4790      	blx	r2
        
        if (pdev->cfg.dma_enable == 1)
 80193b4:	78e3      	ldrb	r3, [r4, #3]
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d109      	bne.n	80193ce <USBD_OTG_ISR_Handler+0xa2>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 80193ba:	f1b9 0f00 	cmp.w	r9, #0
 80193be:	d106      	bne.n	80193ce <USBD_OTG_ISR_Handler+0xa2>
 80193c0:	f894 1111 	ldrb.w	r1, [r4, #273]	; 0x111
 80193c4:	2905      	cmp	r1, #5
 80193c6:	d102      	bne.n	80193ce <USBD_OTG_ISR_Handler+0xa2>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80193c8:	4620      	mov	r0, r4
 80193ca:	f7ff fe41 	bl	8019050 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80193ce:	f005 0002 	and.w	r0, r5, #2
 80193d2:	b2c2      	uxtb	r2, r0
 80193d4:	b112      	cbz	r2, 80193dc <USBD_OTG_ISR_Handler+0xb0>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80193d6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80193d8:	2502      	movs	r5, #2
 80193da:	609d      	str	r5, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 80193dc:	f005 0108 	and.w	r1, r5, #8
 80193e0:	b2c8      	uxtb	r0, r1
 80193e2:	b138      	cbz	r0, 80193f4 <USBD_OTG_ISR_Handler+0xc8>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 80193e4:	4a85      	ldr	r2, [pc, #532]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
 80193e6:	6815      	ldr	r5, [r2, #0]
 80193e8:	4620      	mov	r0, r4
 80193ea:	68ab      	ldr	r3, [r5, #8]
 80193ec:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 80193ee:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80193f0:	2008      	movs	r0, #8
 80193f2:	6088      	str	r0, [r1, #8]
      }
    }
    epnum++;
 80193f4:	f109 0901 	add.w	r9, r9, #1
    ep_intr >>= 1;
 80193f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80193fc:	3604      	adds	r6, #4
 80193fe:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 8019402:	e7b1      	b.n	8019368 <USBD_OTG_ISR_Handler+0x3c>
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8019404:	2001      	movs	r0, #1
    }    
    
    if (gintr_status.b.inepint)
 8019406:	f00a 0a04 	and.w	sl, sl, #4
 801940a:	fa5f f38a 	uxtb.w	r3, sl
 801940e:	2b00      	cmp	r3, #0
 8019410:	d067      	beq.n	80194e2 <USBD_OTG_ISR_Handler+0x1b6>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8019412:	4620      	mov	r0, r4
 8019414:	f7ff fe16 	bl	8019044 <USB_OTG_ReadDevAllInEPItr>
 8019418:	4626      	mov	r6, r4
 801941a:	4681      	mov	r9, r0
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 801941c:	f04f 0800 	mov.w	r8, #0
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 8019420:	f1b9 0f00 	cmp.w	r9, #0
 8019424:	d05c      	beq.n	80194e0 <USBD_OTG_ISR_Handler+0x1b4>
  {
    if (ep_intr&0x1) /* In ITR */
 8019426:	f019 0f01 	tst.w	r9, #1
 801942a:	d053      	beq.n	80194d4 <USBD_OTG_ISR_Handler+0x1a8>
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 801942c:	6923      	ldr	r3, [r4, #16]
* @brief  STM32_USBF_OTG_ISR_Handler
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
 801942e:	fa5f f188 	uxtb.w	r1, r8
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8019432:	6918      	ldr	r0, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8019434:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8019436:	eb04 0281 	add.w	r2, r4, r1, lsl #2
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 801943a:	fa25 f501 	lsr.w	r5, r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801943e:	6992      	ldr	r2, [r2, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8019440:	01ed      	lsls	r5, r5, #7
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8019442:	6892      	ldr	r2, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8019444:	b2ed      	uxtb	r5, r5
 8019446:	4305      	orrs	r5, r0
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8019448:	4015      	ands	r5, r2
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 801944a:	07ea      	lsls	r2, r5, #31
 801944c:	d51a      	bpl.n	8019484 <USBD_OTG_ISR_Handler+0x158>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801944e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 8019450:	2501      	movs	r5, #1
 8019452:	fa05 f008 	lsl.w	r0, r5, r8
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8019456:	ea22 0200 	bic.w	r2, r2, r0
 801945a:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 801945c:	4a67      	ldr	r2, [pc, #412]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 801945e:	69b3      	ldr	r3, [r6, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8019460:	6810      	ldr	r0, [r2, #0]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8019462:	609d      	str	r5, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8019464:	6843      	ldr	r3, [r0, #4]
 8019466:	4620      	mov	r0, r4
 8019468:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 801946a:	78e1      	ldrb	r1, [r4, #3]
 801946c:	42a9      	cmp	r1, r5
 801946e:	d109      	bne.n	8019484 <USBD_OTG_ISR_Handler+0x158>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8019470:	f1b8 0f00 	cmp.w	r8, #0
 8019474:	d106      	bne.n	8019484 <USBD_OTG_ISR_Handler+0x158>
 8019476:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
 801947a:	2a04      	cmp	r2, #4
 801947c:	d102      	bne.n	8019484 <USBD_OTG_ISR_Handler+0x158>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 801947e:	4620      	mov	r0, r4
 8019480:	f7ff fde6 	bl	8019050 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8019484:	f005 0008 	and.w	r0, r5, #8
 8019488:	b2c3      	uxtb	r3, r0
 801948a:	b113      	cbz	r3, 8019492 <USBD_OTG_ISR_Handler+0x166>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 801948c:	69b1      	ldr	r1, [r6, #24]
 801948e:	2508      	movs	r5, #8
 8019490:	608d      	str	r5, [r1, #8]
      }
      if (diepint.b.intktxfemp)
 8019492:	f005 0210 	and.w	r2, r5, #16
 8019496:	b2d0      	uxtb	r0, r2
 8019498:	b110      	cbz	r0, 80194a0 <USBD_OTG_ISR_Handler+0x174>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 801949a:	69b3      	ldr	r3, [r6, #24]
 801949c:	2510      	movs	r5, #16
 801949e:	609d      	str	r5, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 80194a0:	f005 0140 	and.w	r1, r5, #64	; 0x40
 80194a4:	b2ca      	uxtb	r2, r1
 80194a6:	b112      	cbz	r2, 80194ae <USBD_OTG_ISR_Handler+0x182>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 80194a8:	69b0      	ldr	r0, [r6, #24]
 80194aa:	2540      	movs	r5, #64	; 0x40
 80194ac:	6085      	str	r5, [r0, #8]
      }
      if ( diepint.b.epdisabled )
 80194ae:	f005 0302 	and.w	r3, r5, #2
 80194b2:	b2d9      	uxtb	r1, r3
 80194b4:	b111      	cbz	r1, 80194bc <USBD_OTG_ISR_Handler+0x190>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 80194b6:	69b2      	ldr	r2, [r6, #24]
 80194b8:	2502      	movs	r5, #2
 80194ba:	6095      	str	r5, [r2, #8]
      }       
      if (diepint.b.emptyintr)
 80194bc:	f025 007f 	bic.w	r0, r5, #127	; 0x7f
 80194c0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80194c4:	d006      	beq.n	80194d4 <USBD_OTG_ISR_Handler+0x1a8>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 80194c6:	4641      	mov	r1, r8
 80194c8:	4620      	mov	r0, r4
 80194ca:	f7ff fee2 	bl	8019292 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 80194ce:	69b3      	ldr	r3, [r6, #24]
 80194d0:	2180      	movs	r1, #128	; 0x80
 80194d2:	6099      	str	r1, [r3, #8]
      }
    }
    epnum++;
 80194d4:	f108 0801 	add.w	r8, r8, #1
    ep_intr >>= 1;
 80194d8:	ea4f 0959 	mov.w	r9, r9, lsr #1
 80194dc:	3604      	adds	r6, #4
 80194de:	e79f      	b.n	8019420 <USBD_OTG_ISR_Handler+0xf4>
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 80194e0:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.modemismatch)
 80194e2:	b2fd      	uxtb	r5, r7
 80194e4:	f005 0102 	and.w	r1, r5, #2
 80194e8:	b2ca      	uxtb	r2, r1
 80194ea:	b112      	cbz	r2, 80194f2 <USBD_OTG_ISR_Handler+0x1c6>
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80194ec:	68e3      	ldr	r3, [r4, #12]
 80194ee:	2102      	movs	r1, #2
 80194f0:	6159      	str	r1, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 80194f2:	f3c7 6207 	ubfx	r2, r7, #24, #8
 80194f6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80194fa:	b2d9      	uxtb	r1, r3
 80194fc:	b1c9      	cbz	r1, 8019532 <USBD_OTG_ISR_Handler+0x206>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 80194fe:	7aa0      	ldrb	r0, [r4, #10]
 8019500:	b140      	cbz	r0, 8019514 <USBD_OTG_ISR_Handler+0x1e8>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8019502:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8019506:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 801950a:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 801950e:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8019512:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8019514:	6921      	ldr	r1, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8019516:	4a39      	ldr	r2, [pc, #228]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8019518:	6848      	ldr	r0, [r1, #4]
 801951a:	f020 0301 	bic.w	r3, r0, #1
 801951e:	604b      	str	r3, [r1, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8019520:	6811      	ldr	r1, [r2, #0]
 8019522:	4620      	mov	r0, r4
 8019524:	698b      	ldr	r3, [r1, #24]
 8019526:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019528:	68e0      	ldr	r0, [r4, #12]
 801952a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801952e:	6142      	str	r2, [r0, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8019530:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.usbsuspend)
 8019532:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8019536:	f008 0108 	and.w	r1, r8, #8
 801953a:	b2cb      	uxtb	r3, r1
 801953c:	b36b      	cbz	r3, 801959a <USBD_OTG_ISR_Handler+0x26e>
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
 801953e:	492f      	ldr	r1, [pc, #188]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
 8019540:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 8019544:	680b      	ldr	r3, [r1, #0]
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 8019546:	2000      	movs	r0, #0
 8019548:	f88d 000f 	strb.w	r0, [sp, #15]
  
  prev_status = pdev->dev.device_status;
 801954c:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 8019550:	4620      	mov	r0, r4
 8019552:	695a      	ldr	r2, [r3, #20]
 8019554:	4790      	blx	r2
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8019556:	6920      	ldr	r0, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019558:	68e3      	ldr	r3, [r4, #12]
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 801955a:	6882      	ldr	r2, [r0, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801955c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019560:	6159      	str	r1, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8019562:	7aa0      	ldrb	r0, [r4, #10]
 8019564:	b1c0      	cbz	r0, 8019598 <USBD_OTG_ISR_Handler+0x26c>
 8019566:	07d0      	lsls	r0, r2, #31
 8019568:	d516      	bpl.n	8019598 <USBD_OTG_ISR_Handler+0x26c>
 801956a:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
 801956e:	2a01      	cmp	r2, #1
 8019570:	d112      	bne.n	8019598 <USBD_OTG_ISR_Handler+0x26c>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 8019572:	f89d 300f 	ldrb.w	r3, [sp, #15]
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 8019576:	2b03      	cmp	r3, #3
 8019578:	d10e      	bne.n	8019598 <USBD_OTG_ISR_Handler+0x26c>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 801957a:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 801957e:	6808      	ldr	r0, [r1, #0]
 8019580:	f040 0201 	orr.w	r2, r0, #1
 8019584:	600a      	str	r2, [r1, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8019586:	680b      	ldr	r3, [r1, #0]
 8019588:	f043 0003 	orr.w	r0, r3, #3
 801958c:	6008      	str	r0, [r1, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 801958e:	491c      	ldr	r1, [pc, #112]	; (8019600 <USBD_OTG_ISR_Handler+0x2d4>)
 8019590:	690a      	ldr	r2, [r1, #16]
 8019592:	f042 0306 	orr.w	r3, r2, #6
 8019596:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8019598:	2001      	movs	r0, #1
    }
    if (gintr_status.b.sofintr)
 801959a:	f005 0108 	and.w	r1, r5, #8
 801959e:	b2ca      	uxtb	r2, r1
 80195a0:	b142      	cbz	r2, 80195b4 <USBD_OTG_ISR_Handler+0x288>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 80195a2:	4816      	ldr	r0, [pc, #88]	; (80195fc <USBD_OTG_ISR_Handler+0x2d0>)
 80195a4:	6803      	ldr	r3, [r0, #0]
 80195a6:	4620      	mov	r0, r4
 80195a8:	68d9      	ldr	r1, [r3, #12]
 80195aa:	4788      	blx	r1
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 80195ac:	68e0      	ldr	r0, [r4, #12]
 80195ae:	2208      	movs	r2, #8
 80195b0:	6142      	str	r2, [r0, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 80195b2:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 80195b4:	f005 0510 	and.w	r5, r5, #16
 80195b8:	b2ed      	uxtb	r5, r5
 80195ba:	2d00      	cmp	r5, #0
 80195bc:	d039      	beq.n	8019632 <USBD_OTG_ISR_Handler+0x306>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 80195be:	68e6      	ldr	r6, [r4, #12]
 80195c0:	69b3      	ldr	r3, [r6, #24]
 80195c2:	f023 0110 	bic.w	r1, r3, #16
 80195c6:	61b1      	str	r1, [r6, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 80195c8:	6a36      	ldr	r6, [r6, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80195ca:	2228      	movs	r2, #40	; 0x28
 80195cc:	f006 000f 	and.w	r0, r6, #15
  
  switch (status.b.pktsts)
 80195d0:	f3c6 4343 	ubfx	r3, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80195d4:	fb02 4500 	mla	r5, r2, r0, r4
  
  switch (status.b.pktsts)
 80195d8:	2b02      	cmp	r3, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80195da:	f505 755d 	add.w	r5, r5, #884	; 0x374
  
  switch (status.b.pktsts)
 80195de:	d011      	beq.n	8019604 <USBD_OTG_ISR_Handler+0x2d8>
 80195e0:	2b06      	cmp	r3, #6
 80195e2:	d120      	bne.n	8019626 <USBD_OTG_ISR_Handler+0x2fa>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 80195e4:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 80195e8:	4620      	mov	r0, r4
 80195ea:	2208      	movs	r2, #8
 80195ec:	f7fe ff81 	bl	80184f2 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 80195f0:	69a9      	ldr	r1, [r5, #24]
 80195f2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80195f6:	1988      	adds	r0, r1, r6
 80195f8:	61a8      	str	r0, [r5, #24]
 80195fa:	e014      	b.n	8019626 <USBD_OTG_ISR_Handler+0x2fa>
 80195fc:	20000028 	.word	0x20000028
 8019600:	e000ed00 	.word	0xe000ed00
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8019604:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8019608:	4032      	ands	r2, r6
 801960a:	b162      	cbz	r2, 8019626 <USBD_OTG_ISR_Handler+0x2fa>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 801960c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8019610:	68e9      	ldr	r1, [r5, #12]
 8019612:	4632      	mov	r2, r6
 8019614:	4620      	mov	r0, r4
 8019616:	f7fe ff6c 	bl	80184f2 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 801961a:	68eb      	ldr	r3, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 801961c:	69a8      	ldr	r0, [r5, #24]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 801961e:	1999      	adds	r1, r3, r6
      ep->xfer_count += status.b.bcnt;
 8019620:	1986      	adds	r6, r0, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 8019622:	60e9      	str	r1, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 8019624:	61ae      	str	r6, [r5, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8019626:	68e3      	ldr	r3, [r4, #12]
 8019628:	699a      	ldr	r2, [r3, #24]
 801962a:	f042 0110 	orr.w	r1, r2, #16
 801962e:	6199      	str	r1, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8019630:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.usbreset)
 8019632:	f008 0310 	and.w	r3, r8, #16
 8019636:	b2da      	uxtb	r2, r3
 8019638:	2a00      	cmp	r2, #0
 801963a:	d037      	beq.n	80196ac <USBD_OTG_ISR_Handler+0x380>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 801963c:	6926      	ldr	r6, [r4, #16]
 801963e:	6870      	ldr	r0, [r6, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8019640:	2500      	movs	r5, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8019642:	f020 0101 	bic.w	r1, r0, #1
 8019646:	6071      	str	r1, [r6, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8019648:	4620      	mov	r0, r4
 801964a:	4629      	mov	r1, r5
 801964c:	f7ff f822 	bl	8018694 <USB_OTG_FlushTxFifo>
 8019650:	4623      	mov	r3, r4
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8019652:	462a      	mov	r2, r5
 8019654:	7866      	ldrb	r6, [r4, #1]
 8019656:	3304      	adds	r3, #4
 8019658:	42b2      	cmp	r2, r6
 801965a:	d206      	bcs.n	801966a <USBD_OTG_ISR_Handler+0x33e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 801965c:	695e      	ldr	r6, [r3, #20]
 801965e:	21ff      	movs	r1, #255	; 0xff
 8019660:	60b1      	str	r1, [r6, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8019662:	6d18      	ldr	r0, [r3, #80]	; 0x50
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8019664:	3201      	adds	r2, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8019666:	6081      	str	r1, [r0, #8]
 8019668:	e7f4      	b.n	8019654 <USBD_OTG_ISR_Handler+0x328>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 801966a:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 801966c:	6920      	ldr	r0, [r4, #16]
  
  daintmsk.ep.in = 1;
 801966e:	f366 050f 	bfi	r5, r6, #0, #16
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 8019672:	210b      	movs	r1, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8019674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 8019678:	f366 451f 	bfi	r5, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 801967c:	6182      	str	r2, [r0, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 801967e:	61c5      	str	r5, [r0, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8019680:	6141      	str	r1, [r0, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
 8019682:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8019686:	6101      	str	r1, [r0, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
 8019688:	6441      	str	r1, [r0, #68]	; 0x44
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 801968a:	6803      	ldr	r3, [r0, #0]
  dcfg.b.devaddr = 0;
 801968c:	f36f 130a 	bfc	r3, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8019690:	6003      	str	r3, [r0, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8019692:	4620      	mov	r0, r4
 8019694:	f7ff fcdc 	bl	8019050 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8019698:	4926      	ldr	r1, [pc, #152]	; (8019734 <USBD_OTG_ISR_Handler+0x408>)
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801969a:	68e0      	ldr	r0, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801969c:	680b      	ldr	r3, [r1, #0]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801969e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80196a2:	6142      	str	r2, [r0, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 80196a4:	691a      	ldr	r2, [r3, #16]
 80196a6:	4620      	mov	r0, r4
 80196a8:	4790      	blx	r2
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 80196aa:	4630      	mov	r0, r6
      
    }
    if (gintr_status.b.enumdone)
 80196ac:	f008 0820 	and.w	r8, r8, #32
 80196b0:	fa5f f188 	uxtb.w	r1, r8
 80196b4:	b1e9      	cbz	r1, 80196f2 <USBD_OTG_ISR_Handler+0x3c6>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 80196b6:	4620      	mov	r0, r4
 80196b8:	f7ff fb1e 	bl	8018cf8 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80196bc:	68e5      	ldr	r5, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 80196be:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80196c0:	68ed      	ldr	r5, [r5, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 80196c2:	f7ff fb0b 	bl	8018cdc <USB_OTG_GetDeviceSpeed>
 80196c6:	2803      	cmp	r0, #3
 80196c8:	d106      	bne.n	80196d8 <USBD_OTG_ISR_Handler+0x3ac>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80196ca:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80196cc:	f44f 7000 	mov.w	r0, #512	; 0x200
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80196d0:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80196d2:	80a0      	strh	r0, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 80196d4:	2209      	movs	r2, #9
 80196d6:	e004      	b.n	80196e2 <USBD_OTG_ISR_Handler+0x3b6>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80196d8:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80196da:	2340      	movs	r3, #64	; 0x40
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80196dc:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80196de:	80a3      	strh	r3, [r4, #4]
    gusbcfg.b.usbtrdtim = 5;
 80196e0:	2205      	movs	r2, #5
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80196e2:	68e3      	ldr	r3, [r4, #12]
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 80196e4:	f362 258d 	bfi	r5, r2, #10, #4
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 80196e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80196ec:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 80196ee:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80196f0:	615a      	str	r2, [r3, #20]
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 80196f2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80196f6:	f007 0110 	and.w	r1, r7, #16
 80196fa:	b2cb      	uxtb	r3, r1
 80196fc:	b14b      	cbz	r3, 8019712 <USBD_OTG_ISR_Handler+0x3e6>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80196fe:	480d      	ldr	r0, [pc, #52]	; (8019734 <USBD_OTG_ISR_Handler+0x408>)
 8019700:	6802      	ldr	r2, [r0, #0]
 8019702:	4620      	mov	r0, r4
 8019704:	69d1      	ldr	r1, [r2, #28]
 8019706:	4788      	blx	r1
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019708:	68e3      	ldr	r3, [r4, #12]
 801970a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801970e:	6158      	str	r0, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8019710:	2001      	movs	r0, #1
    }

    if (gintr_status.b.incomplisoout)
 8019712:	f007 0720 	and.w	r7, r7, #32
 8019716:	b2ff      	uxtb	r7, r7
 8019718:	b14f      	cbz	r7, 801972e <USBD_OTG_ISR_Handler+0x402>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 801971a:	4a06      	ldr	r2, [pc, #24]	; (8019734 <USBD_OTG_ISR_Handler+0x408>)
 801971c:	6811      	ldr	r1, [r2, #0]
 801971e:	4620      	mov	r0, r4
 8019720:	6a0b      	ldr	r3, [r1, #32]
 8019722:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019724:	68e0      	ldr	r0, [r4, #12]
 8019726:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801972a:	6142      	str	r2, [r0, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 801972c:	2001      	movs	r0, #1
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 801972e:	b005      	add	sp, #20
 8019730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019734:	20000028 	.word	0x20000028

08019738 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8019738:	b538      	push	{r3, r4, r5, lr}
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 801973a:	2300      	movs	r3, #0
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 801973c:	4604      	mov	r4, r0
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 801973e:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 8019742:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8019746:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 801974a:	2500      	movs	r5, #0
  pdev->host.XferCnt[i]   = 0;
 801974c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 8019750:	6085      	str	r5, [r0, #8]
  pdev->host.XferCnt[i]   = 0;
 8019752:	eb04 0082 	add.w	r0, r4, r2, lsl #2
  pdev->host.HC_Status[i]   = HC_IDLE;
 8019756:	18e2      	adds	r2, r4, r3
 8019758:	3301      	adds	r3, #1
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 801975a:	2b0f      	cmp	r3, #15
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
 801975c:	6045      	str	r5, [r0, #4]
  pdev->host.HC_Status[i]   = HC_IDLE;
 801975e:	f882 5870 	strb.w	r5, [r2, #2160]	; 0x870
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8019762:	d1ee      	bne.n	8019742 <HCD_Init+0xa>
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
  pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8; 
 8019764:	2008      	movs	r0, #8
 8019766:	f8a4 0896 	strh.w	r0, [r4, #2198]	; 0x896

  USB_OTG_SelectCore(pdev, coreID);
 801976a:	4620      	mov	r0, r4
 801976c:	f7fe fed2 	bl	8018514 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 8019770:	4620      	mov	r0, r4
 8019772:	f7fe ff87 	bl	8018684 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 8019776:	4620      	mov	r0, r4
 8019778:	f7fe ff2e 	bl	80185d8 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 801977c:	2101      	movs	r1, #1
 801977e:	4620      	mov	r0, r4
 8019780:	f7fe ffc0 	bl	8018704 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 8019784:	4620      	mov	r0, r4
 8019786:	f7ff f853 	bl	8018830 <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 801978a:	4620      	mov	r0, r4
 801978c:	f7fe ff73 	bl	8018676 <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
}
 8019790:	4628      	mov	r0, r5
 8019792:	bd38      	pop	{r3, r4, r5, pc}

08019794 <HCD_GetCurrentSpeed>:
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8019794:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8019798:	6818      	ldr	r0, [r3, #0]
    
    return HPRT0.b.prtspd;
}
 801979a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 801979e:	4770      	bx	lr

080197a0 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80197a0:	b508      	push	{r3, lr}
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 80197a2:	f7ff f82f 	bl	8018804 <USB_OTG_ResetPort>
  return 0;
}
 80197a6:	2000      	movs	r0, #0
 80197a8:	bd08      	pop	{r3, pc}

080197aa <HCD_IsDeviceConnected>:
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
  return (pdev->host.ConnSts);
 80197aa:	f8d0 07f4 	ldr.w	r0, [r0, #2036]	; 0x7f4
}
 80197ae:	4770      	bx	lr

080197b0 <HCD_GetCurrentFrame>:
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 80197b0:	6943      	ldr	r3, [r0, #20]
 80197b2:	6898      	ldr	r0, [r3, #8]
}
 80197b4:	b280      	uxth	r0, r0
 80197b6:	4770      	bx	lr

080197b8 <HCD_GetURB_State>:
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
  return pdev->host.URB_State[ch_num] ;
 80197b8:	1841      	adds	r1, r0, r1
 80197ba:	f891 087f 	ldrb.w	r0, [r1, #2175]	; 0x87f
}
 80197be:	4770      	bx	lr

080197c0 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 80197c0:	b538      	push	{r3, r4, r5, lr}
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
 80197c2:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 80197c6:	1845      	adds	r5, r0, r1
 80197c8:	2300      	movs	r3, #0
 80197ca:	f885 387f 	strb.w	r3, [r5, #2175]	; 0x87f
  pdev->host.hc[hc_num].xfer_count = 0 ;
 80197ce:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 80197d2:	460c      	mov	r4, r1
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 80197d4:	f7ff f8fd 	bl	80189d2 <USB_OTG_HC_StartXfer>
}
 80197d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080197dc <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b084      	sub	sp, #16
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 80197e4:	f04f 0300 	mov.w	r3, #0
 80197e8:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 80197ea:	f240 0358 	movw	r3, #88	; 0x58
 80197ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	f043 0308 	orr.w	r3, r3, #8
 8019800:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	68db      	ldr	r3, [r3, #12]
 8019806:	68fa      	ldr	r2, [r7, #12]
 8019808:	615a      	str	r2, [r3, #20]
  
  return 1;
 801980a:	f04f 0301 	mov.w	r3, #1
}
 801980e:	4618      	mov	r0, r3
 8019810:	f107 0710 	add.w	r7, r7, #16
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}

08019818 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b084      	sub	sp, #16
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 8019820:	f04f 0300 	mov.w	r3, #0
 8019824:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 8019826:	f240 0358 	movw	r3, #88	; 0x58
 801982a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	689b      	ldr	r3, [r3, #8]
 8019832:	6878      	ldr	r0, [r7, #4]
 8019834:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801983c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	68fa      	ldr	r2, [r7, #12]
 8019844:	615a      	str	r2, [r3, #20]
  
  return 1;
 8019846:	f04f 0301 	mov.w	r3, #1
}
 801984a:	4618      	mov	r0, r3
 801984c:	f107 0710 	add.w	r7, r7, #16
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b088      	sub	sp, #32
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	68db      	ldr	r3, [r3, #12]
 8019860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019862:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8019864:	7c3b      	ldrb	r3, [r7, #16]
 8019866:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801986a:	b2db      	uxtb	r3, r3
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019872:	18d3      	adds	r3, r2, r3
 8019874:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f103 0303 	add.w	r3, r3, #3
 801987e:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019882:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8019884:	e0a4      	b.n	80199d0 <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 8019886:	89bb      	ldrh	r3, [r7, #12]
 8019888:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801988c:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 801988e:	8bba      	ldrh	r2, [r7, #28]
 8019890:	7c3b      	ldrb	r3, [r7, #16]
 8019892:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019896:	b2db      	uxtb	r3, r3
 8019898:	6879      	ldr	r1, [r7, #4]
 801989a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801989e:	18cb      	adds	r3, r1, r3
 80198a0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	429a      	cmp	r2, r3
 80198a8:	d91c      	bls.n	80198e4 <USB_OTG_USBH_handle_nptxfempty_ISR+0x90>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 80198aa:	7c3b      	ldrb	r3, [r7, #16]
 80198ac:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80198b8:	18d3      	adds	r3, r2, r3
 80198ba:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 80198c2:	f04f 0300 	mov.w	r3, #0
 80198c6:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 80198c8:	69bb      	ldr	r3, [r7, #24]
 80198ca:	f043 0320 	orr.w	r3, r3, #32
 80198ce:	61bb      	str	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	68db      	ldr	r3, [r3, #12]
 80198d4:	687a      	ldr	r2, [r7, #4]
 80198d6:	68d2      	ldr	r2, [r2, #12]
 80198d8:	6991      	ldr	r1, [r2, #24]
 80198da:	69ba      	ldr	r2, [r7, #24]
 80198dc:	ea6f 0202 	mvn.w	r2, r2
 80198e0:	400a      	ands	r2, r1
 80198e2:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 80198e4:	7c3b      	ldrb	r3, [r7, #16]
 80198e6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	687a      	ldr	r2, [r7, #4]
 80198ee:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80198f2:	18d3      	adds	r3, r2, r3
 80198f4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	f103 0303 	add.w	r3, r3, #3
 80198fe:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019902:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 8019904:	7c3b      	ldrb	r3, [r7, #16]
 8019906:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801990a:	b2db      	uxtb	r3, r3
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	f103 0315 	add.w	r3, r3, #21
 8019912:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019916:	18d3      	adds	r3, r2, r3
 8019918:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801991c:	6819      	ldr	r1, [r3, #0]
 801991e:	7c3b      	ldrb	r3, [r7, #16]
 8019920:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019924:	b2db      	uxtb	r3, r3
 8019926:	461a      	mov	r2, r3
 8019928:	8bbb      	ldrh	r3, [r7, #28]
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7fe fdce 	bl	80184cc <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 8019930:	7c3b      	ldrb	r3, [r7, #16]
 8019932:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019936:	b2db      	uxtb	r3, r3
 8019938:	7c3a      	ldrb	r2, [r7, #16]
 801993a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801993e:	b2d2      	uxtb	r2, r2
 8019940:	6879      	ldr	r1, [r7, #4]
 8019942:	f102 0215 	add.w	r2, r2, #21
 8019946:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801994a:	188a      	adds	r2, r1, r2
 801994c:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8019950:	6811      	ldr	r1, [r2, #0]
 8019952:	8bba      	ldrh	r2, [r7, #28]
 8019954:	188a      	adds	r2, r1, r2
 8019956:	6879      	ldr	r1, [r7, #4]
 8019958:	f103 0315 	add.w	r3, r3, #21
 801995c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019960:	18cb      	adds	r3, r1, r3
 8019962:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8019966:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 8019968:	7c3b      	ldrb	r3, [r7, #16]
 801996a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801996e:	b2db      	uxtb	r3, r3
 8019970:	7c3a      	ldrb	r2, [r7, #16]
 8019972:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8019976:	b2d2      	uxtb	r2, r2
 8019978:	6879      	ldr	r1, [r7, #4]
 801997a:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801997e:	188a      	adds	r2, r1, r2
 8019980:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8019984:	6811      	ldr	r1, [r2, #0]
 8019986:	8bba      	ldrh	r2, [r7, #28]
 8019988:	1a8a      	subs	r2, r1, r2
 801998a:	6879      	ldr	r1, [r7, #4]
 801998c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019990:	18cb      	adds	r3, r1, r3
 8019992:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019996:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 8019998:	7c3b      	ldrb	r3, [r7, #16]
 801999a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801999e:	b2db      	uxtb	r3, r3
 80199a0:	7c3a      	ldrb	r2, [r7, #16]
 80199a2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80199a6:	b2d2      	uxtb	r2, r2
 80199a8:	6879      	ldr	r1, [r7, #4]
 80199aa:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80199ae:	188a      	adds	r2, r1, r2
 80199b0:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 80199b4:	6811      	ldr	r1, [r2, #0]
 80199b6:	8bba      	ldrh	r2, [r7, #28]
 80199b8:	188a      	adds	r2, r1, r2
 80199ba:	6879      	ldr	r1, [r7, #4]
 80199bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80199c0:	18cb      	adds	r3, r1, r3
 80199c2:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80199c6:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199ce:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80199d0:	89bb      	ldrh	r3, [r7, #12]
 80199d2:	8bfa      	ldrh	r2, [r7, #30]
 80199d4:	429a      	cmp	r2, r3
 80199d6:	d20d      	bcs.n	80199f4 <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a0>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 80199d8:	7c3b      	ldrb	r3, [r7, #16]
 80199da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	687a      	ldr	r2, [r7, #4]
 80199e2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80199e6:	18d3      	adds	r3, r2, r3
 80199e8:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80199ec:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	f47f af49 	bne.w	8019886 <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  
  
  return 1;
 80199f4:	f04f 0301 	mov.w	r3, #1
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	f107 0720 	add.w	r7, r7, #32
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd80      	pop	{r7, pc}
 8019a02:	bf00      	nop

08019a04 <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b086      	sub	sp, #24
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	695b      	ldr	r3, [r3, #20]
 8019a10:	691b      	ldr	r3, [r3, #16]
 8019a12:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8019a14:	7b3b      	ldrb	r3, [r7, #12]
 8019a16:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019a1a:	b2db      	uxtb	r3, r3
 8019a1c:	687a      	ldr	r2, [r7, #4]
 8019a1e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019a22:	18d3      	adds	r3, r2, r3
 8019a24:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	f103 0303 	add.w	r3, r3, #3
 8019a2e:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019a32:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8019a34:	e0a4      	b.n	8019b80 <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8019a36:	893b      	ldrh	r3, [r7, #8]
 8019a38:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019a3c:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 8019a3e:	8aba      	ldrh	r2, [r7, #20]
 8019a40:	7b3b      	ldrb	r3, [r7, #12]
 8019a42:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019a46:	b2db      	uxtb	r3, r3
 8019a48:	6879      	ldr	r1, [r7, #4]
 8019a4a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019a4e:	18cb      	adds	r3, r1, r3
 8019a50:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	429a      	cmp	r2, r3
 8019a58:	d91c      	bls.n	8019a94 <USB_OTG_USBH_handle_ptxfempty_ISR+0x90>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8019a5a:	7b3b      	ldrb	r3, [r7, #12]
 8019a5c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019a68:	18d3      	adds	r3, r2, r3
 8019a6a:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 8019a72:	f04f 0300 	mov.w	r3, #0
 8019a76:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019a7e:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	68db      	ldr	r3, [r3, #12]
 8019a84:	687a      	ldr	r2, [r7, #4]
 8019a86:	68d2      	ldr	r2, [r2, #12]
 8019a88:	6991      	ldr	r1, [r2, #24]
 8019a8a:	693a      	ldr	r2, [r7, #16]
 8019a8c:	ea6f 0202 	mvn.w	r2, r2
 8019a90:	400a      	ands	r2, r1
 8019a92:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8019a94:	7b3b      	ldrb	r3, [r7, #12]
 8019a96:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019a9a:	b2db      	uxtb	r3, r3
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019aa2:	18d3      	adds	r3, r2, r3
 8019aa4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	f103 0303 	add.w	r3, r3, #3
 8019aae:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019ab2:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 8019ab4:	7b3b      	ldrb	r3, [r7, #12]
 8019ab6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019aba:	b2db      	uxtb	r3, r3
 8019abc:	687a      	ldr	r2, [r7, #4]
 8019abe:	f103 0315 	add.w	r3, r3, #21
 8019ac2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019ac6:	18d3      	adds	r3, r2, r3
 8019ac8:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8019acc:	6819      	ldr	r1, [r3, #0]
 8019ace:	7b3b      	ldrb	r3, [r7, #12]
 8019ad0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019ad4:	b2db      	uxtb	r3, r3
 8019ad6:	461a      	mov	r2, r3
 8019ad8:	8abb      	ldrh	r3, [r7, #20]
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f7fe fcf6 	bl	80184cc <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8019ae0:	7b3b      	ldrb	r3, [r7, #12]
 8019ae2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	7b3a      	ldrb	r2, [r7, #12]
 8019aea:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8019aee:	b2d2      	uxtb	r2, r2
 8019af0:	6879      	ldr	r1, [r7, #4]
 8019af2:	f102 0215 	add.w	r2, r2, #21
 8019af6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8019afa:	188a      	adds	r2, r1, r2
 8019afc:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8019b00:	6811      	ldr	r1, [r2, #0]
 8019b02:	8aba      	ldrh	r2, [r7, #20]
 8019b04:	188a      	adds	r2, r1, r2
 8019b06:	6879      	ldr	r1, [r7, #4]
 8019b08:	f103 0315 	add.w	r3, r3, #21
 8019b0c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019b10:	18cb      	adds	r3, r1, r3
 8019b12:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8019b16:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8019b18:	7b3b      	ldrb	r3, [r7, #12]
 8019b1a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019b1e:	b2db      	uxtb	r3, r3
 8019b20:	7b3a      	ldrb	r2, [r7, #12]
 8019b22:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8019b26:	b2d2      	uxtb	r2, r2
 8019b28:	6879      	ldr	r1, [r7, #4]
 8019b2a:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8019b2e:	188a      	adds	r2, r1, r2
 8019b30:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8019b34:	6811      	ldr	r1, [r2, #0]
 8019b36:	8aba      	ldrh	r2, [r7, #20]
 8019b38:	1a8a      	subs	r2, r1, r2
 8019b3a:	6879      	ldr	r1, [r7, #4]
 8019b3c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019b40:	18cb      	adds	r3, r1, r3
 8019b42:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019b46:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 8019b48:	7b3b      	ldrb	r3, [r7, #12]
 8019b4a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	7b3a      	ldrb	r2, [r7, #12]
 8019b52:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8019b56:	b2d2      	uxtb	r2, r2
 8019b58:	6879      	ldr	r1, [r7, #4]
 8019b5a:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8019b5e:	188a      	adds	r2, r1, r2
 8019b60:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 8019b64:	6811      	ldr	r1, [r2, #0]
 8019b66:	8aba      	ldrh	r2, [r7, #20]
 8019b68:	188a      	adds	r2, r1, r2
 8019b6a:	6879      	ldr	r1, [r7, #4]
 8019b6c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019b70:	18cb      	adds	r3, r1, r3
 8019b72:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8019b76:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	695b      	ldr	r3, [r3, #20]
 8019b7c:	691b      	ldr	r3, [r3, #16]
 8019b7e:	60bb      	str	r3, [r7, #8]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8019b80:	893b      	ldrh	r3, [r7, #8]
 8019b82:	8afa      	ldrh	r2, [r7, #22]
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d20d      	bcs.n	8019ba4 <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a0>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 8019b88:	7b3b      	ldrb	r3, [r7, #12]
 8019b8a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8019b8e:	b2db      	uxtb	r3, r3
 8019b90:	687a      	ldr	r2, [r7, #4]
 8019b92:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019b96:	18d3      	adds	r3, r2, r3
 8019b98:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8019b9c:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	f47f af49 	bne.w	8019a36 <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 8019ba4:	f04f 0301 	mov.w	r3, #1
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f107 0718 	add.w	r7, r7, #24
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop

08019bb4 <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b088      	sub	sp, #32
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8019bbc:	f04f 0300 	mov.w	r3, #0
 8019bc0:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 8019bc2:	f04f 0300 	mov.w	r3, #0
 8019bc6:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8019bc8:	f04f 0300 	mov.w	r3, #0
 8019bcc:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8019bce:	f04f 0300 	mov.w	r3, #0
 8019bd2:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 8019bd4:	f04f 0300 	mov.w	r3, #0
 8019bd8:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8019bee:	693b      	ldr	r3, [r7, #16]
 8019bf0:	f36f 0382 	bfc	r3, #2, #1
 8019bf4:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	f36f 0341 	bfc	r3, #1, #1
 8019bfc:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8019bfe:	693b      	ldr	r3, [r7, #16]
 8019c00:	f36f 03c3 	bfc	r3, #3, #1
 8019c04:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8019c06:	693b      	ldr	r3, [r7, #16]
 8019c08:	f36f 1345 	bfc	r3, #5, #1
 8019c0c:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 8019c0e:	7d3b      	ldrb	r3, [r7, #20]
 8019c10:	f003 0302 	and.w	r3, r3, #2
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d00f      	beq.n	8019c3a <USB_OTG_USBH_handle_port_ISR+0x86>
  {

    hprt0_dup.b.prtconndet = 1;
 8019c1a:	693b      	ldr	r3, [r7, #16]
 8019c1c:	f043 0302 	orr.w	r3, r3, #2
 8019c20:	613b      	str	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 8019c22:	f240 0358 	movw	r3, #88	; 0x58
 8019c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	685b      	ldr	r3, [r3, #4]
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	4798      	blx	r3
    retval |= 1;
 8019c32:	69bb      	ldr	r3, [r7, #24]
 8019c34:	f043 0301 	orr.w	r3, r3, #1
 8019c38:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8019c3a:	7d3b      	ldrb	r3, [r7, #20]
 8019c3c:	f003 0308 	and.w	r3, r3, #8
 8019c40:	b2db      	uxtb	r3, r3
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d058      	beq.n	8019cf8 <USB_OTG_USBH_handle_port_ISR+0x144>
  {
    hprt0_dup.b.prtenchng = 1;
 8019c46:	693b      	ldr	r3, [r7, #16]
 8019c48:	f043 0308 	orr.w	r3, r3, #8
 8019c4c:	613b      	str	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 8019c4e:	7d3b      	ldrb	r3, [r7, #20]
 8019c50:	f003 0304 	and.w	r3, r3, #4
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d04e      	beq.n	8019cf8 <USB_OTG_USBH_handle_port_ISR+0x144>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8019c5a:	f240 0358 	movw	r3, #88	; 0x58
 8019c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	685b      	ldr	r3, [r3, #4]
 8019c66:	6878      	ldr	r0, [r7, #4]
 8019c68:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8019c6a:	7dbb      	ldrb	r3, [r7, #22]
 8019c6c:	f003 0306 	and.w	r3, r3, #6
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	2b04      	cmp	r3, #4
 8019c74:	d005      	beq.n	8019c82 <USB_OTG_USBH_handle_port_ISR+0xce>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8019c76:	7dbb      	ldrb	r3, [r7, #22]
 8019c78:	f003 0306 	and.w	r3, r3, #6
 8019c7c:	b2db      	uxtb	r3, r3
    if (hprt0.b.prtena == 1)
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8019c7e:	2b02      	cmp	r3, #2
 8019c80:	d135      	bne.n	8019cee <USB_OTG_USBH_handle_port_ISR+0x13a>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	695b      	ldr	r3, [r3, #20]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8019c8a:	7dbb      	ldrb	r3, [r7, #22]
 8019c8c:	f003 0306 	and.w	r3, r3, #6
 8019c90:	b2db      	uxtb	r3, r3
 8019c92:	2b04      	cmp	r3, #4
 8019c94:	d117      	bne.n	8019cc6 <USB_OTG_USBH_handle_port_ISR+0x112>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	695b      	ldr	r3, [r3, #20]
 8019c9a:	f241 7270 	movw	r2, #6000	; 0x1770
 8019c9e:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8019ca0:	7b3b      	ldrb	r3, [r7, #12]
 8019ca2:	f003 0303 	and.w	r3, r3, #3
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	2b02      	cmp	r3, #2
 8019caa:	d024      	beq.n	8019cf6 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	7a1b      	ldrb	r3, [r3, #8]
 8019cb0:	2b02      	cmp	r3, #2
 8019cb2:	d104      	bne.n	8019cbe <USB_OTG_USBH_handle_port_ISR+0x10a>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f04f 0102 	mov.w	r1, #2
 8019cba:	f7fe fd6e 	bl	801879a <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 8019cbe:	f04f 0301 	mov.w	r3, #1
 8019cc2:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8019cc4:	e017      	b.n	8019cf6 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	695b      	ldr	r3, [r3, #20]
 8019cca:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8019cce:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8019cd0:	7b3b      	ldrb	r3, [r7, #12]
 8019cd2:	f003 0303 	and.w	r3, r3, #3
 8019cd6:	b2db      	uxtb	r3, r3
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	d00c      	beq.n	8019cf6 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8019cdc:	6878      	ldr	r0, [r7, #4]
 8019cde:	f04f 0101 	mov.w	r1, #1
 8019ce2:	f7fe fd5a 	bl	801879a <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8019ce6:	f04f 0301 	mov.w	r3, #1
 8019cea:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8019cec:	e003      	b.n	8019cf6 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
      }
      else
      {
        do_reset = 1;
 8019cee:	f04f 0301 	mov.w	r3, #1
 8019cf2:	61fb      	str	r3, [r7, #28]
 8019cf4:	e000      	b.n	8019cf8 <USB_OTG_USBH_handle_port_ISR+0x144>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8019cf6:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8019cf8:	7d3b      	ldrb	r3, [r7, #20]
 8019cfa:	f003 0320 	and.w	r3, r3, #32
 8019cfe:	b2db      	uxtb	r3, r3
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d007      	beq.n	8019d14 <USB_OTG_USBH_handle_port_ISR+0x160>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8019d04:	693b      	ldr	r3, [r7, #16]
 8019d06:	f043 0320 	orr.w	r3, r3, #32
 8019d0a:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8019d0c:	69bb      	ldr	r3, [r7, #24]
 8019d0e:	f043 0301 	orr.w	r3, r3, #1
 8019d12:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8019d14:	69fb      	ldr	r3, [r7, #28]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d002      	beq.n	8019d20 <USB_OTG_USBH_handle_port_ISR+0x16c>
  {
    USB_OTG_ResetPort(pdev);
 8019d1a:	6878      	ldr	r0, [r7, #4]
 8019d1c:	f7fe fd72 	bl	8018804 <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019d26:	693a      	ldr	r2, [r7, #16]
 8019d28:	601a      	str	r2, [r3, #0]
  
  return retval;
 8019d2a:	69bb      	ldr	r3, [r7, #24]
}
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f107 0720 	add.w	r7, r7, #32
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
 8019d36:	bf00      	nop

08019d38 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b09a      	sub	sp, #104	; 0x68
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	683b      	ldr	r3, [r7, #0]
 8019d46:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019d4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019d4e:	18d3      	adds	r3, r2, r3
 8019d50:	689b      	ldr	r3, [r3, #8]
 8019d52:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8019d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019d56:	689b      	ldr	r3, [r3, #8]
 8019d58:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8019d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019d5c:	68db      	ldr	r3, [r3, #12]
 8019d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8019d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d64:	4013      	ands	r3, r2
 8019d66:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8019d68:	687a      	ldr	r2, [r7, #4]
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019d70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019d74:	18d3      	adds	r3, r2, r3
 8019d76:	689b      	ldr	r3, [r3, #8]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 8019d7c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019d80:	f003 0304 	and.w	r3, r3, #4
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d022      	beq.n	8019dd0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8019d8a:	f04f 0300 	mov.w	r3, #0
 8019d8e:	657b      	str	r3, [r7, #84]	; 0x54
 8019d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d92:	f043 0304 	orr.w	r3, r3, #4
 8019d96:	657b      	str	r3, [r7, #84]	; 0x54
 8019d98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019d9c:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8019d9e:	687a      	ldr	r2, [r7, #4]
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019da6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019daa:	18d3      	adds	r3, r2, r3
 8019dac:	689b      	ldr	r3, [r3, #8]
 8019dae:	68db      	ldr	r3, [r3, #12]
 8019db0:	653b      	str	r3, [r7, #80]	; 0x50
 8019db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019db4:	f043 0302 	orr.w	r3, r3, #2
 8019db8:	653b      	str	r3, [r7, #80]	; 0x50
 8019dba:	687a      	ldr	r2, [r7, #4]
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019dc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019dc6:	18d3      	adds	r3, r2, r3
 8019dc8:	689b      	ldr	r3, [r3, #8]
 8019dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019dcc:	60da      	str	r2, [r3, #12]
 8019dce:	e28c      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  } 
  else if (hcint.b.ack)
 8019dd0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019dd4:	f003 0320 	and.w	r3, r3, #32
 8019dd8:	b2db      	uxtb	r3, r3
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d00a      	beq.n	8019df4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8019dde:	f04f 0300 	mov.w	r3, #0
 8019de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019de6:	f043 0320 	orr.w	r3, r3, #32
 8019dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019df0:	609a      	str	r2, [r3, #8]
 8019df2:	e27a      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.frmovrun)
 8019df4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8019df8:	f003 0302 	and.w	r3, r3, #2
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d028      	beq.n	8019e54 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x11c>
  {
    UNMASK_HOST_INT_CHH (num);
 8019e02:	687a      	ldr	r2, [r7, #4]
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019e0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019e0e:	18d3      	adds	r3, r2, r3
 8019e10:	689b      	ldr	r3, [r3, #8]
 8019e12:	68db      	ldr	r3, [r3, #12]
 8019e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8019e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e18:	f043 0302 	orr.w	r3, r3, #2
 8019e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019e26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019e2a:	18d3      	adds	r3, r2, r3
 8019e2c:	689b      	ldr	r3, [r3, #8]
 8019e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019e30:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8019e32:	683b      	ldr	r3, [r7, #0]
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	6878      	ldr	r0, [r7, #4]
 8019e38:	4619      	mov	r1, r3
 8019e3a:	f7fe fe54 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8019e3e:	f04f 0300 	mov.w	r3, #0
 8019e42:	647b      	str	r3, [r7, #68]	; 0x44
 8019e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8019e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019e50:	609a      	str	r2, [r3, #8]
 8019e52:	e24a      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.xfercompl)
 8019e54:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019e58:	f003 0301 	and.w	r3, r3, #1
 8019e5c:	b2db      	uxtb	r3, r3
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d03a      	beq.n	8019ed8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1a0>
  {
    pdev->host.ErrCnt[num] = 0;
 8019e62:	687a      	ldr	r2, [r7, #4]
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019e6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019e6e:	18d3      	adds	r3, r2, r3
 8019e70:	f04f 0200 	mov.w	r2, #0
 8019e74:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8019e76:	687a      	ldr	r2, [r7, #4]
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019e7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019e82:	18d3      	adds	r3, r2, r3
 8019e84:	689b      	ldr	r3, [r3, #8]
 8019e86:	68db      	ldr	r3, [r3, #12]
 8019e88:	643b      	str	r3, [r7, #64]	; 0x40
 8019e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e8c:	f043 0302 	orr.w	r3, r3, #2
 8019e90:	643b      	str	r3, [r7, #64]	; 0x40
 8019e92:	687a      	ldr	r2, [r7, #4]
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019e9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019e9e:	18d3      	adds	r3, r2, r3
 8019ea0:	689b      	ldr	r3, [r3, #8]
 8019ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019ea4:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8019ea6:	683b      	ldr	r3, [r7, #0]
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	6878      	ldr	r0, [r7, #4]
 8019eac:	4619      	mov	r1, r3
 8019eae:	f7fe fe1a 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8019eb2:	f04f 0300 	mov.w	r3, #0
 8019eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019eba:	f043 0301 	orr.w	r3, r3, #1
 8019ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019ec4:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8019ec6:	687a      	ldr	r2, [r7, #4]
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	18d3      	adds	r3, r2, r3
 8019ecc:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019ed0:	f04f 0201 	mov.w	r2, #1
 8019ed4:	721a      	strb	r2, [r3, #8]
 8019ed6:	e208      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.stall)
 8019ed8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019edc:	f003 0308 	and.w	r3, r3, #8
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d030      	beq.n	8019f48 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x210>
  {
    CLEAR_HC_INT(hcreg , stall);
 8019ee6:	f04f 0300 	mov.w	r3, #0
 8019eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8019eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eee:	f043 0308 	orr.w	r3, r3, #8
 8019ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8019ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019ef8:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8019efa:	687a      	ldr	r2, [r7, #4]
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019f02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019f06:	18d3      	adds	r3, r2, r3
 8019f08:	689b      	ldr	r3, [r3, #8]
 8019f0a:	68db      	ldr	r3, [r3, #12]
 8019f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8019f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f10:	f043 0302 	orr.w	r3, r3, #2
 8019f14:	637b      	str	r3, [r7, #52]	; 0x34
 8019f16:	687a      	ldr	r2, [r7, #4]
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019f1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019f22:	18d3      	adds	r3, r2, r3
 8019f24:	689b      	ldr	r3, [r3, #8]
 8019f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019f28:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	6878      	ldr	r0, [r7, #4]
 8019f30:	4619      	mov	r1, r3
 8019f32:	f7fe fdd8 	bl	8018ae6 <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8019f36:	687a      	ldr	r2, [r7, #4]
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	18d3      	adds	r3, r2, r3
 8019f3c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019f40:	f04f 0205 	mov.w	r2, #5
 8019f44:	721a      	strb	r2, [r3, #8]
 8019f46:	e1d0      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.nak)
 8019f48:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019f4c:	f003 0310 	and.w	r3, r3, #16
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d03a      	beq.n	8019fcc <USB_OTG_USBH_handle_hc_n_Out_ISR+0x294>
  {
    pdev->host.ErrCnt[num] = 0;
 8019f56:	687a      	ldr	r2, [r7, #4]
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019f5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019f62:	18d3      	adds	r3, r2, r3
 8019f64:	f04f 0200 	mov.w	r2, #0
 8019f68:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8019f6a:	687a      	ldr	r2, [r7, #4]
 8019f6c:	683b      	ldr	r3, [r7, #0]
 8019f6e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019f72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019f76:	18d3      	adds	r3, r2, r3
 8019f78:	689b      	ldr	r3, [r3, #8]
 8019f7a:	68db      	ldr	r3, [r3, #12]
 8019f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f80:	f043 0302 	orr.w	r3, r3, #2
 8019f84:	633b      	str	r3, [r7, #48]	; 0x30
 8019f86:	687a      	ldr	r2, [r7, #4]
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019f8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019f92:	18d3      	adds	r3, r2, r3
 8019f94:	689b      	ldr	r3, [r3, #8]
 8019f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f98:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	6878      	ldr	r0, [r7, #4]
 8019fa0:	4619      	mov	r1, r3
 8019fa2:	f7fe fda0 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 8019fa6:	f04f 0300 	mov.w	r3, #0
 8019faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fae:	f043 0310 	orr.w	r3, r3, #16
 8019fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019fb8:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8019fba:	687a      	ldr	r2, [r7, #4]
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	18d3      	adds	r3, r2, r3
 8019fc0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8019fc4:	f04f 0203 	mov.w	r2, #3
 8019fc8:	721a      	strb	r2, [r3, #8]
 8019fca:	e18e      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.xacterr)
 8019fcc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d042      	beq.n	801a060 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x328>
  {
    UNMASK_HOST_INT_CHH (num);
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019fe2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019fe6:	18d3      	adds	r3, r2, r3
 8019fe8:	689b      	ldr	r3, [r3, #8]
 8019fea:	68db      	ldr	r3, [r3, #12]
 8019fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8019fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff0:	f043 0302 	orr.w	r3, r3, #2
 8019ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ff6:	687a      	ldr	r2, [r7, #4]
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8019ffe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a002:	18d3      	adds	r3, r2, r3
 801a004:	689b      	ldr	r3, [r3, #8]
 801a006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a008:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801a00a:	683b      	ldr	r3, [r7, #0]
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	6878      	ldr	r0, [r7, #4]
 801a010:	4619      	mov	r1, r3
 801a012:	f7fe fd68 	bl	8018ae6 <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a01e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a022:	18d3      	adds	r3, r2, r3
 801a024:	689b      	ldr	r3, [r3, #8]
 801a026:	f103 0201 	add.w	r2, r3, #1
 801a02a:	6879      	ldr	r1, [r7, #4]
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a032:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a036:	18cb      	adds	r3, r1, r3
 801a038:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 801a03a:	687a      	ldr	r2, [r7, #4]
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	18d3      	adds	r3, r2, r3
 801a040:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a044:	f04f 0206 	mov.w	r2, #6
 801a048:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xacterr);
 801a04a:	f04f 0300 	mov.w	r3, #0
 801a04e:	627b      	str	r3, [r7, #36]	; 0x24
 801a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a056:	627b      	str	r3, [r7, #36]	; 0x24
 801a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a05a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a05c:	609a      	str	r2, [r3, #8]
 801a05e:	e144      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.nyet)
 801a060:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801a064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d03a      	beq.n	801a0e4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3ac>
  {
    pdev->host.ErrCnt[num] = 0;
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a076:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a07a:	18d3      	adds	r3, r2, r3
 801a07c:	f04f 0200 	mov.w	r2, #0
 801a080:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a08a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a08e:	18d3      	adds	r3, r2, r3
 801a090:	689b      	ldr	r3, [r3, #8]
 801a092:	68db      	ldr	r3, [r3, #12]
 801a094:	623b      	str	r3, [r7, #32]
 801a096:	6a3b      	ldr	r3, [r7, #32]
 801a098:	f043 0302 	orr.w	r3, r3, #2
 801a09c:	623b      	str	r3, [r7, #32]
 801a09e:	687a      	ldr	r2, [r7, #4]
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a0a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a0aa:	18d3      	adds	r3, r2, r3
 801a0ac:	689b      	ldr	r3, [r3, #8]
 801a0ae:	6a3a      	ldr	r2, [r7, #32]
 801a0b0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	6878      	ldr	r0, [r7, #4]
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	f7fe fd14 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 801a0be:	f04f 0300 	mov.w	r3, #0
 801a0c2:	61fb      	str	r3, [r7, #28]
 801a0c4:	69fb      	ldr	r3, [r7, #28]
 801a0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0ca:	61fb      	str	r3, [r7, #28]
 801a0cc:	69fa      	ldr	r2, [r7, #28]
 801a0ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a0d0:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 801a0d2:	687a      	ldr	r2, [r7, #4]
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	18d3      	adds	r3, r2, r3
 801a0d8:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a0dc:	f04f 0204 	mov.w	r2, #4
 801a0e0:	721a      	strb	r2, [r3, #8]
 801a0e2:	e102      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.datatglerr)
 801a0e4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801a0e8:	f003 0304 	and.w	r3, r3, #4
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d03a      	beq.n	801a168 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x430>
  {
    
    UNMASK_HOST_INT_CHH (num);
 801a0f2:	687a      	ldr	r2, [r7, #4]
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a0fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a0fe:	18d3      	adds	r3, r2, r3
 801a100:	689b      	ldr	r3, [r3, #8]
 801a102:	68db      	ldr	r3, [r3, #12]
 801a104:	61bb      	str	r3, [r7, #24]
 801a106:	69bb      	ldr	r3, [r7, #24]
 801a108:	f043 0302 	orr.w	r3, r3, #2
 801a10c:	61bb      	str	r3, [r7, #24]
 801a10e:	687a      	ldr	r2, [r7, #4]
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a116:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a11a:	18d3      	adds	r3, r2, r3
 801a11c:	689b      	ldr	r3, [r3, #8]
 801a11e:	69ba      	ldr	r2, [r7, #24]
 801a120:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	b2db      	uxtb	r3, r3
 801a126:	6878      	ldr	r0, [r7, #4]
 801a128:	4619      	mov	r1, r3
 801a12a:	f7fe fcdc 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 801a12e:	f04f 0300 	mov.w	r3, #0
 801a132:	617b      	str	r3, [r7, #20]
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	f043 0310 	orr.w	r3, r3, #16
 801a13a:	617b      	str	r3, [r7, #20]
 801a13c:	697a      	ldr	r2, [r7, #20]
 801a13e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a140:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 801a142:	687a      	ldr	r2, [r7, #4]
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	18d3      	adds	r3, r2, r3
 801a148:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a14c:	f04f 0208 	mov.w	r2, #8
 801a150:	721a      	strb	r2, [r3, #8]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 801a152:	f04f 0300 	mov.w	r3, #0
 801a156:	613b      	str	r3, [r7, #16]
 801a158:	693b      	ldr	r3, [r7, #16]
 801a15a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a15e:	613b      	str	r3, [r7, #16]
 801a160:	693a      	ldr	r2, [r7, #16]
 801a162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a164:	609a      	str	r2, [r3, #8]
 801a166:	e0c0      	b.n	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }  
  else if (hcint.b.chhltd)
 801a168:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801a16c:	f003 0302 	and.w	r3, r3, #2
 801a170:	b2db      	uxtb	r3, r3
 801a172:	2b00      	cmp	r3, #0
 801a174:	f000 80b9 	beq.w	801a2ea <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  {
    MASK_HOST_INT_CHH (num);
 801a178:	687a      	ldr	r2, [r7, #4]
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a180:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a184:	18d3      	adds	r3, r2, r3
 801a186:	689b      	ldr	r3, [r3, #8]
 801a188:	68db      	ldr	r3, [r3, #12]
 801a18a:	60fb      	str	r3, [r7, #12]
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	f36f 0341 	bfc	r3, #1, #1
 801a192:	60fb      	str	r3, [r7, #12]
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a19c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a1a0:	18d3      	adds	r3, r2, r3
 801a1a2:	689b      	ldr	r3, [r3, #8]
 801a1a4:	68fa      	ldr	r2, [r7, #12]
 801a1a6:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	683b      	ldr	r3, [r7, #0]
 801a1ac:	18d3      	adds	r3, r2, r3
 801a1ae:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a1b2:	7a1b      	ldrb	r3, [r3, #8]
 801a1b4:	b2db      	uxtb	r3, r3
 801a1b6:	2b01      	cmp	r3, #1
 801a1b8:	d122      	bne.n	801a200 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c8>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	18d3      	adds	r3, r2, r3
 801a1c0:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a1c4:	f04f 0201 	mov.w	r2, #1
 801a1c8:	71da      	strb	r2, [r3, #7]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 801a1ca:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801a1ce:	f003 030c 	and.w	r3, r3, #12
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	2b08      	cmp	r3, #8
 801a1d6:	d17e      	bne.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 801a1d8:	687a      	ldr	r2, [r7, #4]
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a1e0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a1e4:	18d3      	adds	r3, r2, r3
 801a1e6:	7a5b      	ldrb	r3, [r3, #9]
 801a1e8:	f083 0301 	eor.w	r3, r3, #1
 801a1ec:	b2da      	uxtb	r2, r3
 801a1ee:	6879      	ldr	r1, [r7, #4]
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a1f6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a1fa:	18cb      	adds	r3, r1, r3
 801a1fc:	725a      	strb	r2, [r3, #9]
 801a1fe:	e06a      	b.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 801a200:	687a      	ldr	r2, [r7, #4]
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	18d3      	adds	r3, r2, r3
 801a206:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a20a:	7a1b      	ldrb	r3, [r3, #8]
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	2b03      	cmp	r3, #3
 801a210:	d108      	bne.n	801a224 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4ec>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	18d3      	adds	r3, r2, r3
 801a218:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a21c:	f04f 0202 	mov.w	r2, #2
 801a220:	71da      	strb	r2, [r3, #7]
 801a222:	e058      	b.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 801a224:	687a      	ldr	r2, [r7, #4]
 801a226:	683b      	ldr	r3, [r7, #0]
 801a228:	18d3      	adds	r3, r2, r3
 801a22a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a22e:	7a1b      	ldrb	r3, [r3, #8]
 801a230:	b2db      	uxtb	r3, r3
 801a232:	2b04      	cmp	r3, #4
 801a234:	d118      	bne.n	801a268 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x530>
    {
      if(pdev->host.hc[num].do_ping == 1)
 801a236:	687a      	ldr	r2, [r7, #4]
 801a238:	683b      	ldr	r3, [r7, #0]
 801a23a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a23e:	18d3      	adds	r3, r2, r3
 801a240:	f603 0388 	addw	r3, r3, #2184	; 0x888
 801a244:	7b1b      	ldrb	r3, [r3, #12]
 801a246:	2b01      	cmp	r3, #1
 801a248:	d105      	bne.n	801a256 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x51e>
      {
        USB_OTG_HC_DoPing(pdev, num);
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	b2db      	uxtb	r3, r3
 801a24e:	6878      	ldr	r0, [r7, #4]
 801a250:	4619      	mov	r1, r3
 801a252:	f7fe fc65 	bl	8018b20 <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 801a256:	687a      	ldr	r2, [r7, #4]
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	18d3      	adds	r3, r2, r3
 801a25c:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a260:	f04f 0202 	mov.w	r2, #2
 801a264:	71da      	strb	r2, [r3, #7]
 801a266:	e036      	b.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 801a268:	687a      	ldr	r2, [r7, #4]
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	18d3      	adds	r3, r2, r3
 801a26e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a272:	7a1b      	ldrb	r3, [r3, #8]
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b05      	cmp	r3, #5
 801a278:	d108      	bne.n	801a28c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x554>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 801a27a:	687a      	ldr	r2, [r7, #4]
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	18d3      	adds	r3, r2, r3
 801a280:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a284:	f04f 0204 	mov.w	r2, #4
 801a288:	71da      	strb	r2, [r3, #7]
 801a28a:	e024      	b.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 801a28c:	687a      	ldr	r2, [r7, #4]
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	18d3      	adds	r3, r2, r3
 801a292:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a296:	7a1b      	ldrb	r3, [r3, #8]
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	2b06      	cmp	r3, #6
 801a29c:	d11b      	bne.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a2a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a2aa:	18d3      	adds	r3, r2, r3
 801a2ac:	689b      	ldr	r3, [r3, #8]
 801a2ae:	2b03      	cmp	r3, #3
 801a2b0:	d111      	bne.n	801a2d6 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	18d3      	adds	r3, r2, r3
 801a2b8:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a2bc:	f04f 0203 	mov.w	r2, #3
 801a2c0:	71da      	strb	r2, [r3, #7]
        pdev->host.ErrCnt[num] = 0;
 801a2c2:	687a      	ldr	r2, [r7, #4]
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a2ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a2ce:	18d3      	adds	r3, r2, r3
 801a2d0:	f04f 0200 	mov.w	r2, #0
 801a2d4:	609a      	str	r2, [r3, #8]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 801a2d6:	f04f 0300 	mov.w	r3, #0
 801a2da:	60bb      	str	r3, [r7, #8]
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	f043 0302 	orr.w	r3, r3, #2
 801a2e2:	60bb      	str	r3, [r7, #8]
 801a2e4:	68ba      	ldr	r2, [r7, #8]
 801a2e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a2e8:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 801a2ea:	f04f 0301 	mov.w	r3, #1
}
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f107 0768 	add.w	r7, r7, #104	; 0x68
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b09c      	sub	sp, #112	; 0x70
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 801a302:	687a      	ldr	r2, [r7, #4]
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a30a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a30e:	18d3      	adds	r3, r2, r3
 801a310:	689b      	ldr	r3, [r3, #8]
 801a312:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 801a314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a316:	689b      	ldr	r3, [r3, #8]
 801a318:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 801a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a31c:	68db      	ldr	r3, [r3, #12]
 801a31e:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 801a320:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a324:	4013      	ands	r3, r2
 801a326:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 801a328:	687a      	ldr	r2, [r7, #4]
 801a32a:	683b      	ldr	r3, [r7, #0]
 801a32c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a330:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a334:	18d3      	adds	r3, r2, r3
 801a336:	689b      	ldr	r3, [r3, #8]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 801a33c:	f04f 0300 	mov.w	r3, #0
 801a340:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 801a342:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a346:	f003 0304 	and.w	r3, r3, #4
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d022      	beq.n	801a396 <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 801a350:	f04f 0300 	mov.w	r3, #0
 801a354:	65bb      	str	r3, [r7, #88]	; 0x58
 801a356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a358:	f043 0304 	orr.w	r3, r3, #4
 801a35c:	65bb      	str	r3, [r7, #88]	; 0x58
 801a35e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a362:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 801a364:	687a      	ldr	r2, [r7, #4]
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a36c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a370:	18d3      	adds	r3, r2, r3
 801a372:	689b      	ldr	r3, [r3, #8]
 801a374:	68db      	ldr	r3, [r3, #12]
 801a376:	657b      	str	r3, [r7, #84]	; 0x54
 801a378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a37a:	f043 0302 	orr.w	r3, r3, #2
 801a37e:	657b      	str	r3, [r7, #84]	; 0x54
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a388:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a38c:	18d3      	adds	r3, r2, r3
 801a38e:	689b      	ldr	r3, [r3, #8]
 801a390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a392:	60da      	str	r2, [r3, #12]
 801a394:	e098      	b.n	801a4c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 801a396:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a39a:	f003 0320 	and.w	r3, r3, #32
 801a39e:	b2db      	uxtb	r3, r3
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d00a      	beq.n	801a3ba <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 801a3a4:	f04f 0300 	mov.w	r3, #0
 801a3a8:	653b      	str	r3, [r7, #80]	; 0x50
 801a3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3ac:	f043 0320 	orr.w	r3, r3, #32
 801a3b0:	653b      	str	r3, [r7, #80]	; 0x50
 801a3b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a3b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3b6:	609a      	str	r2, [r3, #8]
 801a3b8:	e086      	b.n	801a4c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 801a3ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a3be:	f003 0308 	and.w	r3, r3, #8
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d03e      	beq.n	801a446 <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 801a3c8:	687a      	ldr	r2, [r7, #4]
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a3d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a3d4:	18d3      	adds	r3, r2, r3
 801a3d6:	689b      	ldr	r3, [r3, #8]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3de:	f043 0302 	orr.w	r3, r3, #2
 801a3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a3e4:	687a      	ldr	r2, [r7, #4]
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a3ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a3f0:	18d3      	adds	r3, r2, r3
 801a3f2:	689b      	ldr	r3, [r3, #8]
 801a3f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a3f6:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 801a3f8:	687a      	ldr	r2, [r7, #4]
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	18d3      	adds	r3, r2, r3
 801a3fe:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a402:	f04f 0205 	mov.w	r2, #5
 801a406:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 801a408:	f04f 0300 	mov.w	r3, #0
 801a40c:	64bb      	str	r3, [r7, #72]	; 0x48
 801a40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a410:	f043 0310 	orr.w	r3, r3, #16
 801a414:	64bb      	str	r3, [r7, #72]	; 0x48
 801a416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a41a:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 801a41c:	f04f 0300 	mov.w	r3, #0
 801a420:	647b      	str	r3, [r7, #68]	; 0x44
 801a422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a424:	f043 0308 	orr.w	r3, r3, #8
 801a428:	647b      	str	r3, [r7, #68]	; 0x44
 801a42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a42e:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 801a430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a432:	f36f 1304 	bfc	r3, #4, #1
 801a436:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	4619      	mov	r1, r3
 801a440:	f7fe fb51 	bl	8018ae6 <USB_OTG_HC_Halt>
 801a444:	e040      	b.n	801a4c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 801a446:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 801a44a:	f003 0304 	and.w	r3, r3, #4
 801a44e:	b2db      	uxtb	r3, r3
 801a450:	2b00      	cmp	r3, #0
 801a452:	d039      	beq.n	801a4c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {
    
    UNMASK_HOST_INT_CHH (num);
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a45c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a460:	18d3      	adds	r3, r2, r3
 801a462:	689b      	ldr	r3, [r3, #8]
 801a464:	68db      	ldr	r3, [r3, #12]
 801a466:	643b      	str	r3, [r7, #64]	; 0x40
 801a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a46a:	f043 0302 	orr.w	r3, r3, #2
 801a46e:	643b      	str	r3, [r7, #64]	; 0x40
 801a470:	687a      	ldr	r2, [r7, #4]
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a478:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a47c:	18d3      	adds	r3, r2, r3
 801a47e:	689b      	ldr	r3, [r3, #8]
 801a480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a482:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	b2db      	uxtb	r3, r3
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	4619      	mov	r1, r3
 801a48c:	f7fe fb2b 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 801a490:	f04f 0300 	mov.w	r3, #0
 801a494:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a498:	f043 0310 	orr.w	r3, r3, #16
 801a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4a2:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 801a4a4:	687a      	ldr	r2, [r7, #4]
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	18d3      	adds	r3, r2, r3
 801a4aa:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a4ae:	f04f 0208 	mov.w	r2, #8
 801a4b2:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , datatglerr);
 801a4b4:	f04f 0300 	mov.w	r3, #0
 801a4b8:	63bb      	str	r3, [r7, #56]	; 0x38
 801a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a4c0:	63bb      	str	r3, [r7, #56]	; 0x38
 801a4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4c6:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 801a4c8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 801a4cc:	f003 0302 	and.w	r3, r3, #2
 801a4d0:	b2db      	uxtb	r3, r3
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d028      	beq.n	801a528 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 801a4d6:	687a      	ldr	r2, [r7, #4]
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a4de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a4e2:	18d3      	adds	r3, r2, r3
 801a4e4:	689b      	ldr	r3, [r3, #8]
 801a4e6:	68db      	ldr	r3, [r3, #12]
 801a4e8:	637b      	str	r3, [r7, #52]	; 0x34
 801a4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4ec:	f043 0302 	orr.w	r3, r3, #2
 801a4f0:	637b      	str	r3, [r7, #52]	; 0x34
 801a4f2:	687a      	ldr	r2, [r7, #4]
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a4fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a4fe:	18d3      	adds	r3, r2, r3
 801a500:	689b      	ldr	r3, [r3, #8]
 801a502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a504:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	b2db      	uxtb	r3, r3
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	4619      	mov	r1, r3
 801a50e:	f7fe faea 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 801a512:	f04f 0300 	mov.w	r3, #0
 801a516:	633b      	str	r3, [r7, #48]	; 0x30
 801a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a51e:	633b      	str	r3, [r7, #48]	; 0x30
 801a520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a524:	609a      	str	r2, [r3, #8]
 801a526:	e1e7      	b.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  }
  
  else if (hcint.b.xfercompl)
 801a528:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a52c:	f003 0301 	and.w	r3, r3, #1
 801a530:	b2db      	uxtb	r3, r3
 801a532:	2b00      	cmp	r3, #0
 801a534:	f000 80a7 	beq.w	801a686 <USB_OTG_USBH_handle_hc_n_In_ISR+0x38e>
  {
    
    if (pdev->cfg.dma_enable == 1)
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	78db      	ldrb	r3, [r3, #3]
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	d11d      	bne.n	801a57c <USB_OTG_USBH_handle_hc_n_In_ISR+0x284>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 801a540:	687a      	ldr	r2, [r7, #4]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a548:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a54c:	18d3      	adds	r3, r2, r3
 801a54e:	689b      	ldr	r3, [r3, #8]
 801a550:	691b      	ldr	r3, [r3, #16]
 801a552:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 801a554:	687a      	ldr	r2, [r7, #4]
 801a556:	683b      	ldr	r3, [r7, #0]
 801a558:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a55c:	18d3      	adds	r3, r2, r3
 801a55e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801a562:	681a      	ldr	r2, [r3, #0]
 801a564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a56a:	1ad2      	subs	r2, r2, r3
 801a56c:	6879      	ldr	r1, [r7, #4]
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 801a574:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a578:	18cb      	adds	r3, r1, r3
 801a57a:	605a      	str	r2, [r3, #4]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 801a57c:	687a      	ldr	r2, [r7, #4]
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	18d3      	adds	r3, r2, r3
 801a582:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a586:	f04f 0201 	mov.w	r2, #1
 801a58a:	721a      	strb	r2, [r3, #8]
    pdev->host.ErrCnt [num]= 0;
 801a58c:	687a      	ldr	r2, [r7, #4]
 801a58e:	683b      	ldr	r3, [r7, #0]
 801a590:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a594:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	f04f 0200 	mov.w	r2, #0
 801a59e:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xfercompl);
 801a5a0:	f04f 0300 	mov.w	r3, #0
 801a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a8:	f043 0301 	orr.w	r3, r3, #1
 801a5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5b2:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801a5b4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a5b8:	f003 030c 	and.w	r3, r3, #12
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d006      	beq.n	801a5d0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d8>
        (hcchar.b.eptype == EP_TYPE_BULK))
 801a5c2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a5c6:	f003 030c 	and.w	r3, r3, #12
 801a5ca:	b2db      	uxtb	r3, r3
    
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801a5cc:	2b08      	cmp	r3, #8
 801a5ce:	d13b      	bne.n	801a648 <USB_OTG_USBH_handle_hc_n_In_ISR+0x350>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 801a5d0:	687a      	ldr	r2, [r7, #4]
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a5d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a5dc:	18d3      	adds	r3, r2, r3
 801a5de:	689b      	ldr	r3, [r3, #8]
 801a5e0:	68db      	ldr	r3, [r3, #12]
 801a5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e6:	f043 0302 	orr.w	r3, r3, #2
 801a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5ec:	687a      	ldr	r2, [r7, #4]
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a5f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a5f8:	18d3      	adds	r3, r2, r3
 801a5fa:	689b      	ldr	r3, [r3, #8]
 801a5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a5fe:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	b2db      	uxtb	r3, r3
 801a604:	6878      	ldr	r0, [r7, #4]
 801a606:	4619      	mov	r1, r3
 801a608:	f7fe fa6d 	bl	8018ae6 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 801a60c:	f04f 0300 	mov.w	r3, #0
 801a610:	627b      	str	r3, [r7, #36]	; 0x24
 801a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a614:	f043 0310 	orr.w	r3, r3, #16
 801a618:	627b      	str	r3, [r7, #36]	; 0x24
 801a61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a61e:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 801a620:	687a      	ldr	r2, [r7, #4]
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a628:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a62c:	18d3      	adds	r3, r2, r3
 801a62e:	7a1b      	ldrb	r3, [r3, #8]
 801a630:	f083 0301 	eor.w	r3, r3, #1
 801a634:	b2da      	uxtb	r2, r3
 801a636:	6879      	ldr	r1, [r7, #4]
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a63e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a642:	18cb      	adds	r3, r1, r3
 801a644:	721a      	strb	r2, [r3, #8]
 801a646:	e157      	b.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 801a648:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a64c:	f003 030c 	and.w	r3, r3, #12
 801a650:	b2db      	uxtb	r3, r3
 801a652:	2b0c      	cmp	r3, #12
 801a654:	f040 814f 	bne.w	801a8f6 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    {
      hcchar.b.oddfrm  = 1;
 801a658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a65a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a65e:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 801a660:	687a      	ldr	r2, [r7, #4]
 801a662:	683b      	ldr	r3, [r7, #0]
 801a664:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a668:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a66c:	18d3      	adds	r3, r2, r3
 801a66e:	689b      	ldr	r3, [r3, #8]
 801a670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a672:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 801a674:	687a      	ldr	r2, [r7, #4]
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	18d3      	adds	r3, r2, r3
 801a67a:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a67e:	f04f 0201 	mov.w	r2, #1
 801a682:	71da      	strb	r2, [r3, #7]
 801a684:	e137      	b.n	801a8f6 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    }
    
  }
  else if (hcint.b.chhltd)
 801a686:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a68a:	f003 0302 	and.w	r3, r3, #2
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	2b00      	cmp	r3, #0
 801a692:	f000 8086 	beq.w	801a7a2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x4aa>
  {
    MASK_HOST_INT_CHH (num);
 801a696:	687a      	ldr	r2, [r7, #4]
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a69e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a6a2:	18d3      	adds	r3, r2, r3
 801a6a4:	689b      	ldr	r3, [r3, #8]
 801a6a6:	68db      	ldr	r3, [r3, #12]
 801a6a8:	623b      	str	r3, [r7, #32]
 801a6aa:	6a3b      	ldr	r3, [r7, #32]
 801a6ac:	f36f 0341 	bfc	r3, #1, #1
 801a6b0:	623b      	str	r3, [r7, #32]
 801a6b2:	687a      	ldr	r2, [r7, #4]
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a6ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a6be:	18d3      	adds	r3, r2, r3
 801a6c0:	689b      	ldr	r3, [r3, #8]
 801a6c2:	6a3a      	ldr	r2, [r7, #32]
 801a6c4:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 801a6c6:	687a      	ldr	r2, [r7, #4]
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	18d3      	adds	r3, r2, r3
 801a6cc:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a6d0:	7a1b      	ldrb	r3, [r3, #8]
 801a6d2:	b2db      	uxtb	r3, r3
 801a6d4:	2b01      	cmp	r3, #1
 801a6d6:	d108      	bne.n	801a6ea <USB_OTG_USBH_handle_hc_n_In_ISR+0x3f2>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 801a6d8:	687a      	ldr	r2, [r7, #4]
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	18d3      	adds	r3, r2, r3
 801a6de:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a6e2:	f04f 0201 	mov.w	r2, #1
 801a6e6:	71da      	strb	r2, [r3, #7]
 801a6e8:	e050      	b.n	801a78c <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 801a6ea:	687a      	ldr	r2, [r7, #4]
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	18d3      	adds	r3, r2, r3
 801a6f0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a6f4:	7a1b      	ldrb	r3, [r3, #8]
 801a6f6:	b2db      	uxtb	r3, r3
 801a6f8:	2b05      	cmp	r3, #5
 801a6fa:	d108      	bne.n	801a70e <USB_OTG_USBH_handle_hc_n_In_ISR+0x416>
    {
      pdev->host.URB_State[num] = URB_STALL;
 801a6fc:	687a      	ldr	r2, [r7, #4]
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	18d3      	adds	r3, r2, r3
 801a702:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a706:	f04f 0204 	mov.w	r2, #4
 801a70a:	71da      	strb	r2, [r3, #7]
 801a70c:	e03e      	b.n	801a78c <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	683b      	ldr	r3, [r7, #0]
 801a712:	18d3      	adds	r3, r2, r3
 801a714:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a718:	7a1b      	ldrb	r3, [r3, #8]
 801a71a:	b2db      	uxtb	r3, r3
 801a71c:	2b06      	cmp	r3, #6
 801a71e:	d008      	beq.n	801a732 <USB_OTG_USBH_handle_hc_n_In_ISR+0x43a>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 801a720:	687a      	ldr	r2, [r7, #4]
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	18d3      	adds	r3, r2, r3
 801a726:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a72a:	7a1b      	ldrb	r3, [r3, #8]
 801a72c:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
      pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801a72e:	2b08      	cmp	r3, #8
 801a730:	d112      	bne.n	801a758 <USB_OTG_USBH_handle_hc_n_In_ISR+0x460>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
      pdev->host.ErrCnt[num] = 0;
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a73a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a73e:	18d3      	adds	r3, r2, r3
 801a740:	f04f 0200 	mov.w	r2, #0
 801a744:	609a      	str	r2, [r3, #8]
      pdev->host.URB_State[num] = URB_ERROR;  
 801a746:	687a      	ldr	r2, [r7, #4]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	18d3      	adds	r3, r2, r3
 801a74c:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801a750:	f04f 0203 	mov.w	r2, #3
 801a754:	71da      	strb	r2, [r3, #7]
 801a756:	e019      	b.n	801a78c <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 801a758:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a75c:	f003 030c 	and.w	r3, r3, #12
 801a760:	b2db      	uxtb	r3, r3
 801a762:	2b0c      	cmp	r3, #12
 801a764:	d112      	bne.n	801a78c <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 801a766:	687a      	ldr	r2, [r7, #4]
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a76e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a772:	18d3      	adds	r3, r2, r3
 801a774:	7a1b      	ldrb	r3, [r3, #8]
 801a776:	f083 0301 	eor.w	r3, r3, #1
 801a77a:	b2da      	uxtb	r2, r3
 801a77c:	6879      	ldr	r1, [r7, #4]
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801a784:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a788:	18cb      	adds	r3, r1, r3
 801a78a:	721a      	strb	r2, [r3, #8]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 801a78c:	f04f 0300 	mov.w	r3, #0
 801a790:	61fb      	str	r3, [r7, #28]
 801a792:	69fb      	ldr	r3, [r7, #28]
 801a794:	f043 0302 	orr.w	r3, r3, #2
 801a798:	61fb      	str	r3, [r7, #28]
 801a79a:	69fa      	ldr	r2, [r7, #28]
 801a79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a79e:	609a      	str	r2, [r3, #8]
 801a7a0:	e0aa      	b.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }    
  else if (hcint.b.xacterr)
 801a7a2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a7a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d042      	beq.n	801a836 <USB_OTG_USBH_handle_hc_n_In_ISR+0x53e>
  {
    UNMASK_HOST_INT_CHH (num);
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a7b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a7bc:	18d3      	adds	r3, r2, r3
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	68db      	ldr	r3, [r3, #12]
 801a7c2:	61bb      	str	r3, [r7, #24]
 801a7c4:	69bb      	ldr	r3, [r7, #24]
 801a7c6:	f043 0302 	orr.w	r3, r3, #2
 801a7ca:	61bb      	str	r3, [r7, #24]
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a7d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a7d8:	18d3      	adds	r3, r2, r3
 801a7da:	689b      	ldr	r3, [r3, #8]
 801a7dc:	69ba      	ldr	r2, [r7, #24]
 801a7de:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 801a7e0:	687a      	ldr	r2, [r7, #4]
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a7e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a7ec:	18d3      	adds	r3, r2, r3
 801a7ee:	689b      	ldr	r3, [r3, #8]
 801a7f0:	f103 0201 	add.w	r2, r3, #1
 801a7f4:	6879      	ldr	r1, [r7, #4]
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a7fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a800:	18cb      	adds	r3, r1, r3
 801a802:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 801a804:	687a      	ldr	r2, [r7, #4]
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	18d3      	adds	r3, r2, r3
 801a80a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a80e:	f04f 0206 	mov.w	r2, #6
 801a812:	721a      	strb	r2, [r3, #8]
    USB_OTG_HC_Halt(pdev, num);
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	b2db      	uxtb	r3, r3
 801a818:	6878      	ldr	r0, [r7, #4]
 801a81a:	4619      	mov	r1, r3
 801a81c:	f7fe f963 	bl	8018ae6 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 801a820:	f04f 0300 	mov.w	r3, #0
 801a824:	617b      	str	r3, [r7, #20]
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a82c:	617b      	str	r3, [r7, #20]
 801a82e:	697a      	ldr	r2, [r7, #20]
 801a830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a832:	609a      	str	r2, [r3, #8]
 801a834:	e060      	b.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }
  else if (hcint.b.nak)  
 801a836:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a83a:	f003 0310 	and.w	r3, r3, #16
 801a83e:	b2db      	uxtb	r3, r3
 801a840:	2b00      	cmp	r3, #0
 801a842:	d059      	beq.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 801a844:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a848:	f003 030c 	and.w	r3, r3, #12
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	2b0c      	cmp	r3, #12
 801a850:	d11e      	bne.n	801a890 <USB_OTG_USBH_handle_hc_n_In_ISR+0x598>
    {
      UNMASK_HOST_INT_CHH (num);
 801a852:	687a      	ldr	r2, [r7, #4]
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a85a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a85e:	18d3      	adds	r3, r2, r3
 801a860:	689b      	ldr	r3, [r3, #8]
 801a862:	68db      	ldr	r3, [r3, #12]
 801a864:	613b      	str	r3, [r7, #16]
 801a866:	693b      	ldr	r3, [r7, #16]
 801a868:	f043 0302 	orr.w	r3, r3, #2
 801a86c:	613b      	str	r3, [r7, #16]
 801a86e:	687a      	ldr	r2, [r7, #4]
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a876:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a87a:	18d3      	adds	r3, r2, r3
 801a87c:	689b      	ldr	r3, [r3, #8]
 801a87e:	693a      	ldr	r2, [r7, #16]
 801a880:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	b2db      	uxtb	r3, r3
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	4619      	mov	r1, r3
 801a88a:	f7fe f92c 	bl	8018ae6 <USB_OTG_HC_Halt>
 801a88e:	e01f      	b.n	801a8d0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801a890:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a894:	f003 030c 	and.w	r3, r3, #12
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d006      	beq.n	801a8ac <USB_OTG_USBH_handle_hc_n_In_ISR+0x5b4>
              (hcchar.b.eptype == EP_TYPE_BULK))
 801a89e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801a8a2:	f003 030c 	and.w	r3, r3, #12
 801a8a6:	b2db      	uxtb	r3, r3
    if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801a8a8:	2b08      	cmp	r3, #8
 801a8aa:	d111      	bne.n	801a8d0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
              (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 801a8ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a8ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a8b2:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 801a8b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a8b6:	f36f 739e 	bfc	r3, #30, #1
 801a8ba:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 801a8bc:	687a      	ldr	r2, [r7, #4]
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a8c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a8c8:	18d3      	adds	r3, r2, r3
 801a8ca:	689b      	ldr	r3, [r3, #8]
 801a8cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a8ce:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 801a8d0:	687a      	ldr	r2, [r7, #4]
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	18d3      	adds	r3, r2, r3
 801a8d6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801a8da:	f04f 0203 	mov.w	r2, #3
 801a8de:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   
 801a8e0:	f04f 0300 	mov.w	r3, #0
 801a8e4:	60fb      	str	r3, [r7, #12]
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	f043 0310 	orr.w	r3, r3, #16
 801a8ec:	60fb      	str	r3, [r7, #12]
 801a8ee:	68fa      	ldr	r2, [r7, #12]
 801a8f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a8f2:	609a      	str	r2, [r3, #8]
 801a8f4:	e000      	b.n	801a8f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 801a8f6:	bf00      	nop
    pdev->host.HC_Status[num] = HC_NAK;
    CLEAR_HC_INT(hcreg , nak);   
  }
  
  
  return 1;
 801a8f8:	f04f 0301 	mov.w	r3, #1
  
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f107 0770 	add.w	r7, r7, #112	; 0x70
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
 801a906:	bf00      	nop

0801a908 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b086      	sub	sp, #24
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 801a910:	f04f 0300 	mov.w	r3, #0
 801a914:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 801a916:	f04f 0300 	mov.w	r3, #0
 801a91a:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 801a91c:	6878      	ldr	r0, [r7, #4]
 801a91e:	f7fd ff6e 	bl	80187fe <USB_OTG_ReadHostAllChannels_intr>
 801a922:	4603      	mov	r3, r0
 801a924:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801a926:	f04f 0300 	mov.w	r3, #0
 801a92a:	617b      	str	r3, [r7, #20]
 801a92c:	e02d      	b.n	801a98a <USB_OTG_USBH_handle_hc_ISR+0x82>
  {
    if (haint.b.chint & (1 << i))
 801a92e:	89bb      	ldrh	r3, [r7, #12]
 801a930:	461a      	mov	r2, r3
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	fa42 f303 	asr.w	r3, r2, r3
 801a938:	f003 0301 	and.w	r3, r3, #1
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d020      	beq.n	801a982 <USB_OTG_USBH_handle_hc_ISR+0x7a>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 801a940:	687a      	ldr	r2, [r7, #4]
 801a942:	697b      	ldr	r3, [r7, #20]
 801a944:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a948:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a94c:	18d3      	adds	r3, r2, r3
 801a94e:	689b      	ldr	r3, [r3, #8]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 801a954:	7a7b      	ldrb	r3, [r7, #9]
 801a956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a95a:	b2db      	uxtb	r3, r3
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d008      	beq.n	801a972 <USB_OTG_USBH_handle_hc_ISR+0x6a>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 801a960:	6878      	ldr	r0, [r7, #4]
 801a962:	6979      	ldr	r1, [r7, #20]
 801a964:	f7ff fcc8 	bl	801a2f8 <USB_OTG_USBH_handle_hc_n_In_ISR>
 801a968:	4603      	mov	r3, r0
 801a96a:	693a      	ldr	r2, [r7, #16]
 801a96c:	4313      	orrs	r3, r2
 801a96e:	613b      	str	r3, [r7, #16]
 801a970:	e007      	b.n	801a982 <USB_OTG_USBH_handle_hc_ISR+0x7a>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	6979      	ldr	r1, [r7, #20]
 801a976:	f7ff f9df 	bl	8019d38 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 801a97a:	4603      	mov	r3, r0
 801a97c:	693a      	ldr	r2, [r7, #16]
 801a97e:	4313      	orrs	r3, r2
 801a980:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801a982:	697b      	ldr	r3, [r7, #20]
 801a984:	f103 0301 	add.w	r3, r3, #1
 801a988:	617b      	str	r3, [r7, #20]
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	781b      	ldrb	r3, [r3, #0]
 801a98e:	461a      	mov	r2, r3
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	429a      	cmp	r2, r3
 801a994:	d8cb      	bhi.n	801a92e <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 801a996:	693b      	ldr	r3, [r7, #16]
}
 801a998:	4618      	mov	r0, r3
 801a99a:	f107 0718 	add.w	r7, r7, #24
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop

0801a9a4 <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b088      	sub	sp, #32
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 801a9ac:	f04f 0300 	mov.w	r3, #0
 801a9b0:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 801a9b2:	f04f 0300 	mov.w	r3, #0
 801a9b6:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 801a9b8:	697b      	ldr	r3, [r7, #20]
 801a9ba:	f043 0310 	orr.w	r3, r3, #16
 801a9be:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	68db      	ldr	r3, [r3, #12]
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	68d2      	ldr	r2, [r2, #12]
 801a9c8:	6991      	ldr	r1, [r2, #24]
 801a9ca:	697a      	ldr	r2, [r7, #20]
 801a9cc:	ea6f 0202 	mvn.w	r2, r2
 801a9d0:	400a      	ands	r2, r1
 801a9d2:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	68db      	ldr	r3, [r3, #12]
 801a9d8:	6a1b      	ldr	r3, [r3, #32]
 801a9da:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 801a9dc:	69bb      	ldr	r3, [r7, #24]
 801a9de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801a9e2:	b2db      	uxtb	r3, r3
 801a9e4:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 801a9e6:	7afb      	ldrb	r3, [r7, #11]
 801a9e8:	b2db      	uxtb	r3, r3
 801a9ea:	687a      	ldr	r2, [r7, #4]
 801a9ec:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801a9f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a9f4:	18d3      	adds	r3, r2, r3
 801a9f6:	689b      	ldr	r3, [r3, #8]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 801a9fc:	69bb      	ldr	r3, [r7, #24]
 801a9fe:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801aa02:	b2db      	uxtb	r3, r3
 801aa04:	2b02      	cmp	r3, #2
 801aa06:	f040 809c 	bne.w	801ab42 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 801aa0a:	69bb      	ldr	r3, [r7, #24]
 801aa0c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	f340 8096 	ble.w	801ab44 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 801aa18:	7afb      	ldrb	r3, [r7, #11]
 801aa1a:	b2db      	uxtb	r3, r3
 801aa1c:	687a      	ldr	r2, [r7, #4]
 801aa1e:	f103 0315 	add.w	r3, r3, #21
 801aa22:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801aa26:	18d3      	adds	r3, r2, r3
 801aa28:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	f000 8088 	beq.w	801ab44 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 801aa34:	7afb      	ldrb	r3, [r7, #11]
 801aa36:	b2db      	uxtb	r3, r3
 801aa38:	687a      	ldr	r2, [r7, #4]
 801aa3a:	f103 0315 	add.w	r3, r3, #21
 801aa3e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801aa42:	18d3      	adds	r3, r2, r3
 801aa44:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801aa48:	681a      	ldr	r2, [r3, #0]
 801aa4a:	69bb      	ldr	r3, [r7, #24]
 801aa4c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801aa50:	b29b      	uxth	r3, r3
 801aa52:	6878      	ldr	r0, [r7, #4]
 801aa54:	4611      	mov	r1, r2
 801aa56:	461a      	mov	r2, r3
 801aa58:	f7fd fd4b 	bl	80184f2 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 801aa5c:	69bb      	ldr	r3, [r7, #24]
 801aa5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	69ba      	ldr	r2, [r7, #24]
 801aa66:	f3c2 0203 	ubfx	r2, r2, #0, #4
 801aa6a:	b2d2      	uxtb	r2, r2
 801aa6c:	6879      	ldr	r1, [r7, #4]
 801aa6e:	f102 0215 	add.w	r2, r2, #21
 801aa72:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801aa76:	188a      	adds	r2, r1, r2
 801aa78:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 801aa7c:	6811      	ldr	r1, [r2, #0]
 801aa7e:	69ba      	ldr	r2, [r7, #24]
 801aa80:	f3c2 120a 	ubfx	r2, r2, #4, #11
 801aa84:	b292      	uxth	r2, r2
 801aa86:	188a      	adds	r2, r1, r2
 801aa88:	6879      	ldr	r1, [r7, #4]
 801aa8a:	f103 0315 	add.w	r3, r3, #21
 801aa8e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801aa92:	18cb      	adds	r3, r1, r3
 801aa94:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801aa98:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 801aa9a:	69bb      	ldr	r3, [r7, #24]
 801aa9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	69ba      	ldr	r2, [r7, #24]
 801aaa4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 801aaa8:	b2d2      	uxtb	r2, r2
 801aaaa:	6879      	ldr	r1, [r7, #4]
 801aaac:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801aab0:	188a      	adds	r2, r1, r2
 801aab2:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801aab6:	6811      	ldr	r1, [r2, #0]
 801aab8:	69ba      	ldr	r2, [r7, #24]
 801aaba:	f3c2 120a 	ubfx	r2, r2, #4, #11
 801aabe:	b292      	uxth	r2, r2
 801aac0:	188a      	adds	r2, r1, r2
 801aac2:	6879      	ldr	r1, [r7, #4]
 801aac4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801aac8:	18cb      	adds	r3, r1, r3
 801aaca:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801aace:	601a      	str	r2, [r3, #0]
      
      
      count = pdev->host.hc[channelnum].xfer_count;
 801aad0:	7afb      	ldrb	r3, [r7, #11]
 801aad2:	b2db      	uxtb	r3, r3
 801aad4:	687a      	ldr	r2, [r7, #4]
 801aad6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801aada:	18d3      	adds	r3, r2, r3
 801aadc:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 801aae4:	7afb      	ldrb	r3, [r7, #11]
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	687a      	ldr	r2, [r7, #4]
 801aaea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 801aaee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801aaf2:	18d3      	adds	r3, r2, r3
 801aaf4:	69fa      	ldr	r2, [r7, #28]
 801aaf6:	605a      	str	r2, [r3, #4]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 801aaf8:	7afb      	ldrb	r3, [r7, #11]
 801aafa:	b2db      	uxtb	r3, r3
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801ab02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ab06:	18d3      	adds	r3, r2, r3
 801ab08:	689b      	ldr	r3, [r3, #8]
 801ab0a:	691b      	ldr	r3, [r3, #16]
 801ab0c:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 801ab14:	b29b      	uxth	r3, r3
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	dd14      	ble.n	801ab44 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ab20:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	f36f 739e 	bfc	r3, #30, #1
 801ab28:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 801ab2a:	7afb      	ldrb	r3, [r7, #11]
 801ab2c:	b2db      	uxtb	r3, r3
 801ab2e:	687a      	ldr	r2, [r7, #4]
 801ab30:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801ab34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ab38:	18d3      	adds	r3, r2, r3
 801ab3a:	689b      	ldr	r3, [r3, #8]
 801ab3c:	68fa      	ldr	r2, [r7, #12]
 801ab3e:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 801ab40:	e000      	b.n	801ab44 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 801ab42:	e000      	b.n	801ab46 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 801ab44:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	f043 0310 	orr.w	r3, r3, #16
 801ab4c:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	68db      	ldr	r3, [r3, #12]
 801ab52:	687a      	ldr	r2, [r7, #4]
 801ab54:	68d2      	ldr	r2, [r2, #12]
 801ab56:	6991      	ldr	r1, [r2, #24]
 801ab58:	697a      	ldr	r2, [r7, #20]
 801ab5a:	430a      	orrs	r2, r1
 801ab5c:	619a      	str	r2, [r3, #24]
  return 1;
 801ab5e:	f04f 0301 	mov.w	r3, #1
}
 801ab62:	4618      	mov	r0, r3
 801ab64:	f107 0720 	add.w	r7, r7, #32
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}

0801ab6c <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801ab6c:	b480      	push	{r7}
 801ab6e:	b085      	sub	sp, #20
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ab84:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 801ab86:	68bb      	ldr	r3, [r7, #8]
 801ab88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ab8c:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ab94:	68ba      	ldr	r2, [r7, #8]
 801ab96:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 801ab98:	f04f 0300 	mov.w	r3, #0
 801ab9c:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801aba4:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	68db      	ldr	r3, [r3, #12]
 801abaa:	68fa      	ldr	r2, [r7, #12]
 801abac:	615a      	str	r2, [r3, #20]
  
  return 1;
 801abae:	f04f 0301 	mov.w	r3, #1
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	f107 0714 	add.w	r7, r7, #20
 801abb8:	46bd      	mov	sp, r7
 801abba:	bc80      	pop	{r7}
 801abbc:	4770      	bx	lr
 801abbe:	bf00      	nop

0801abc0 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 801abc8:	f04f 0300 	mov.w	r3, #0
 801abcc:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 801abce:	f04f 0300 	mov.w	r3, #0
 801abd2:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f7fd fdb1 	bl	801873c <USB_OTG_IsHostMode>
 801abda:	4603      	mov	r3, r0
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d072      	beq.n	801acc6 <USBH_OTG_ISR_Handler+0x106>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	f7fd fdb0 	bl	8018746 <USB_OTG_ReadCoreItr>
 801abe6:	4603      	mov	r3, r0
 801abe8:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d102      	bne.n	801abf6 <USBH_OTG_ISR_Handler+0x36>
    {
      return 0;
 801abf0:	f04f 0300 	mov.w	r3, #0
 801abf4:	e068      	b.n	801acc8 <USBH_OTG_ISR_Handler+0x108>
    }
    
    if (gintsts.b.sofintr)
 801abf6:	7a3b      	ldrb	r3, [r7, #8]
 801abf8:	f003 0308 	and.w	r3, r3, #8
 801abfc:	b2db      	uxtb	r3, r3
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d006      	beq.n	801ac10 <USBH_OTG_ISR_Handler+0x50>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f7fe fdea 	bl	80197dc <USB_OTG_USBH_handle_sof_ISR>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	68fa      	ldr	r2, [r7, #12]
 801ac0c:	4313      	orrs	r3, r2
 801ac0e:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 801ac10:	7a3b      	ldrb	r3, [r7, #8]
 801ac12:	f003 0310 	and.w	r3, r3, #16
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d006      	beq.n	801ac2a <USBH_OTG_ISR_Handler+0x6a>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 801ac1c:	6878      	ldr	r0, [r7, #4]
 801ac1e:	f7ff fec1 	bl	801a9a4 <USB_OTG_USBH_handle_rx_qlvl_ISR>
 801ac22:	4603      	mov	r3, r0
 801ac24:	68fa      	ldr	r2, [r7, #12]
 801ac26:	4313      	orrs	r3, r2
 801ac28:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 801ac2a:	7a3b      	ldrb	r3, [r7, #8]
 801ac2c:	f003 0320 	and.w	r3, r3, #32
 801ac30:	b2db      	uxtb	r3, r3
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d006      	beq.n	801ac44 <USBH_OTG_ISR_Handler+0x84>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 801ac36:	6878      	ldr	r0, [r7, #4]
 801ac38:	f7fe fe0c 	bl	8019854 <USB_OTG_USBH_handle_nptxfempty_ISR>
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	68fa      	ldr	r2, [r7, #12]
 801ac40:	4313      	orrs	r3, r2
 801ac42:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 801ac44:	7afb      	ldrb	r3, [r7, #11]
 801ac46:	f003 0304 	and.w	r3, r3, #4
 801ac4a:	b2db      	uxtb	r3, r3
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d006      	beq.n	801ac5e <USBH_OTG_ISR_Handler+0x9e>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f7fe fed7 	bl	8019a04 <USB_OTG_USBH_handle_ptxfempty_ISR>
 801ac56:	4603      	mov	r3, r0
 801ac58:	68fa      	ldr	r2, [r7, #12]
 801ac5a:	4313      	orrs	r3, r2
 801ac5c:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 801ac5e:	7afb      	ldrb	r3, [r7, #11]
 801ac60:	f003 0302 	and.w	r3, r3, #2
 801ac64:	b2db      	uxtb	r3, r3
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d006      	beq.n	801ac78 <USBH_OTG_ISR_Handler+0xb8>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f7ff fe4c 	bl	801a908 <USB_OTG_USBH_handle_hc_ISR>
 801ac70:	4603      	mov	r3, r0
 801ac72:	68fa      	ldr	r2, [r7, #12]
 801ac74:	4313      	orrs	r3, r2
 801ac76:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 801ac78:	7afb      	ldrb	r3, [r7, #11]
 801ac7a:	f003 0301 	and.w	r3, r3, #1
 801ac7e:	b2db      	uxtb	r3, r3
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d006      	beq.n	801ac92 <USBH_OTG_ISR_Handler+0xd2>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 801ac84:	6878      	ldr	r0, [r7, #4]
 801ac86:	f7fe ff95 	bl	8019bb4 <USB_OTG_USBH_handle_port_ISR>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	68fa      	ldr	r2, [r7, #12]
 801ac8e:	4313      	orrs	r3, r2
 801ac90:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 801ac92:	7afb      	ldrb	r3, [r7, #11]
 801ac94:	f003 0320 	and.w	r3, r3, #32
 801ac98:	b2db      	uxtb	r3, r3
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d006      	beq.n	801acac <USBH_OTG_ISR_Handler+0xec>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	f7fe fdba 	bl	8019818 <USB_OTG_USBH_handle_Disconnect_ISR>
 801aca4:	4603      	mov	r3, r0
 801aca6:	68fa      	ldr	r2, [r7, #12]
 801aca8:	4313      	orrs	r3, r2
 801acaa:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 801acac:	7abb      	ldrb	r3, [r7, #10]
 801acae:	f003 0320 	and.w	r3, r3, #32
 801acb2:	b2db      	uxtb	r3, r3
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d006      	beq.n	801acc6 <USBH_OTG_ISR_Handler+0x106>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 801acb8:	6878      	ldr	r0, [r7, #4]
 801acba:	f7ff ff57 	bl	801ab6c <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 801acbe:	4603      	mov	r3, r0
 801acc0:	68fa      	ldr	r2, [r7, #12]
 801acc2:	4313      	orrs	r3, r2
 801acc4:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 801acc6:	68fb      	ldr	r3, [r7, #12]
}
 801acc8:	4618      	mov	r0, r3
 801acca:	f107 0710 	add.w	r7, r7, #16
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop

0801acd4 <STM32_USBO_OTG_ISR_Handler>:
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 801acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 801acd6:	68c3      	ldr	r3, [r0, #12]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 801acd8:	4d45      	ldr	r5, [pc, #276]	; (801adf0 <STM32_USBO_OTG_ISR_Handler+0x11c>)
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 801acda:	695a      	ldr	r2, [r3, #20]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 801acdc:	6999      	ldr	r1, [r3, #24]
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 801acde:	400a      	ands	r2, r1
 801ace0:	4015      	ands	r5, r2
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 801ace2:	4604      	mov	r4, r0
  uint32_t retval = 0;
  USB_OTG_GINTSTS_TypeDef  gintsts ;
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
 801ace4:	2d00      	cmp	r5, #0
 801ace6:	f000 8081 	beq.w	801adec <STM32_USBO_OTG_ISR_Handler+0x118>
  {
    return 0;
  }
  if (gintsts.b.otgintr)
 801acea:	f002 0204 	and.w	r2, r2, #4
 801acee:	b2d1      	uxtb	r1, r2
 801acf0:	2900      	cmp	r1, #0
 801acf2:	d040      	beq.n	801ad76 <STM32_USBO_OTG_ISR_Handler+0xa2>
  
  
  gotgint.d32 = 0;
  gotgctl.d32 = 0;
  
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 801acf4:	685e      	ldr	r6, [r3, #4]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 801acf6:	681a      	ldr	r2, [r3, #0]
  
  if (gotgint.b.sesenddet)
 801acf8:	f006 0704 	and.w	r7, r6, #4
 801acfc:	b2fa      	uxtb	r2, r7
 801acfe:	b132      	cbz	r2, 801ad0e <STM32_USBO_OTG_ISR_Handler+0x3a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 801ad00:	681b      	ldr	r3, [r3, #0]
    
    
    if (USB_OTG_IsDeviceMode(pdev))
 801ad02:	f7fd fd14 	bl	801872e <USB_OTG_IsDeviceMode>
 801ad06:	b910      	cbnz	r0, 801ad0e <STM32_USBO_OTG_ISR_Handler+0x3a>
    {

    }
    else if (USB_OTG_IsHostMode(pdev))
 801ad08:	4620      	mov	r0, r4
 801ad0a:	f7fd fd17 	bl	801873c <USB_OTG_IsHostMode>

    }
  }

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
 801ad0e:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801ad12:	07f8      	lsls	r0, r7, #31
 801ad14:	d50e      	bpl.n	801ad34 <STM32_USBO_OTG_ISR_Handler+0x60>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 801ad16:	68e0      	ldr	r0, [r4, #12]
 801ad18:	6803      	ldr	r3, [r0, #0]
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 801ad1a:	07d9      	lsls	r1, r3, #31
    {
      if (USB_OTG_IsDeviceMode(pdev))
 801ad1c:	4620      	mov	r0, r4

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 801ad1e:	d507      	bpl.n	801ad30 <STM32_USBO_OTG_ISR_Handler+0x5c>
    {
      if (USB_OTG_IsDeviceMode(pdev))
 801ad20:	f7fd fd05 	bl	801872e <USB_OTG_IsDeviceMode>

      }
      /* Clear Session Request */
      gotgctl.d32 = 0;
      gotgctl.b.sesreq = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
 801ad24:	68e1      	ldr	r1, [r4, #12]
 801ad26:	680a      	ldr	r2, [r1, #0]
 801ad28:	f022 0002 	bic.w	r0, r2, #2
 801ad2c:	6008      	str	r0, [r1, #0]
 801ad2e:	e001      	b.n	801ad34 <STM32_USBO_OTG_ISR_Handler+0x60>
    }
    else /* Session request failure                                          */
    {
      if (USB_OTG_IsDeviceMode(pdev))
 801ad30:	f7fd fcfd 	bl	801872e <USB_OTG_IsDeviceMode>

      }
    }
  }
  /* ----> HNP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.hstnegsucstschng)
 801ad34:	f007 0702 	and.w	r7, r7, #2
 801ad38:	b2fb      	uxtb	r3, r7
 801ad3a:	b143      	cbz	r3, 801ad4e <STM32_USBO_OTG_ISR_Handler+0x7a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 801ad3c:	68e1      	ldr	r1, [r4, #12]
 801ad3e:	680a      	ldr	r2, [r1, #0]

    if (gotgctl.b.hstnegscs)                                    /* Host negotiation success                                         */
 801ad40:	05d2      	lsls	r2, r2, #23
 801ad42:	d502      	bpl.n	801ad4a <STM32_USBO_OTG_ISR_Handler+0x76>
    {
      if (USB_OTG_IsHostMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 801ad44:	4620      	mov	r0, r4
 801ad46:	f7fd fcf9 	bl	801873c <USB_OTG_IsHostMode>
    }
    else                                                        /* Host negotiation failure */
    {

    }
    gotgint.b.hstnegsucstschng = 1;                             /* Ack "Host Negotiation Success Status Change" interrupt.          */
 801ad4a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  }
  /* ----> HOST NEGOTIATION DETECTED INTERRUPT <---- */
  if (gotgint.b.hstnegdet)
 801ad4e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801ad52:	f007 0002 	and.w	r0, r7, #2
 801ad56:	b2c3      	uxtb	r3, r0
 801ad58:	b113      	cbz	r3, 801ad60 <STM32_USBO_OTG_ISR_Handler+0x8c>
  {
    if (USB_OTG_IsDeviceMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f7fd fce7 	bl	801872e <USB_OTG_IsDeviceMode>

    }
  }
  if (gotgint.b.adevtoutchng)
  {}
  if (gotgint.b.debdone)
 801ad60:	f007 0108 	and.w	r1, r7, #8
 801ad64:	b2cf      	uxtb	r7, r1
 801ad66:	b117      	cbz	r7, 801ad6e <STM32_USBO_OTG_ISR_Handler+0x9a>
  {
    USB_OTG_ResetPort(pdev);
 801ad68:	4620      	mov	r0, r4
 801ad6a:	f7fd fd4b 	bl	8018804 <USB_OTG_ResetPort>
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 801ad6e:	68e2      	ldr	r2, [r4, #12]
  {
    return 0;
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
 801ad70:	2001      	movs	r0, #1
  if (gotgint.b.debdone)
  {
    USB_OTG_ResetPort(pdev);
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 801ad72:	6056      	str	r6, [r2, #4]
 801ad74:	e000      	b.n	801ad78 <STM32_USBO_OTG_ISR_Handler+0xa4>
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t retval = 0;
 801ad76:	4608      	mov	r0, r1
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
 801ad78:	f3c5 6307 	ubfx	r3, r5, #24, #8
 801ad7c:	f003 0110 	and.w	r1, r3, #16
 801ad80:	b2ca      	uxtb	r2, r1
 801ad82:	b312      	cbz	r2, 801adca <STM32_USBO_OTG_ISR_Handler+0xf6>
  gintsts.d32 = 0 ;
  gintmsk.d32 = 0 ;
  gotgctl.d32 = 0 ;
  gintmsk.b.sofintr = 1;
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
 801ad84:	68e0      	ldr	r0, [r4, #12]
 801ad86:	6983      	ldr	r3, [r0, #24]
 801ad88:	f023 0108 	bic.w	r1, r3, #8
 801ad8c:	6181      	str	r1, [r0, #24]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 801ad8e:	6802      	ldr	r2, [r0, #0]
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 801ad90:	03d3      	lsls	r3, r2, #15
  {
    USB_OTG_DisableGlobalInt(pdev);
 801ad92:	4620      	mov	r0, r4
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 801ad94:	d509      	bpl.n	801adaa <STM32_USBO_OTG_ISR_Handler+0xd6>
  {
    USB_OTG_DisableGlobalInt(pdev);
 801ad96:	f7fd fc75 	bl	8018684 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitDev(pdev);
 801ad9a:	4620      	mov	r0, r4
 801ad9c:	f7fd fef8 	bl	8018b90 <USB_OTG_CoreInitDev>
    USB_OTG_EnableGlobalInt(pdev);
 801ada0:	4620      	mov	r0, r4
 801ada2:	f7fd fc68 	bl	8018676 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = B_PERIPHERAL;
 801ada6:	2004      	movs	r0, #4
 801ada8:	e008      	b.n	801adbc <STM32_USBO_OTG_ISR_Handler+0xe8>
  }
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
 801adaa:	f7fd fc6b 	bl	8018684 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
 801adae:	4620      	mov	r0, r4
 801adb0:	f7fd fd3e 	bl	8018830 <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 801adb4:	4620      	mov	r0, r4
 801adb6:	f7fd fc5e 	bl	8018676 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = A_HOST;
 801adba:	2001      	movs	r0, #1
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801adbc:	68e3      	ldr	r3, [r4, #12]
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
    pdev->otg.OTG_State = A_HOST;
 801adbe:	f884 0a90 	strb.w	r0, [r4, #2704]	; 0xa90
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801adc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 801adc6:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
 801adc8:	2001      	movs	r0, #1
  }
  if (gintsts.b.sessreqintr)
 801adca:	f3c5 6507 	ubfx	r5, r5, #24, #8
 801adce:	f005 0240 	and.w	r2, r5, #64	; 0x40
 801add2:	b2d5      	uxtb	r5, r2
 801add4:	b15d      	cbz	r5, 801adee <STM32_USBO_OTG_ISR_Handler+0x11a>


  gotgctl.d32 = 0;
  gintsts.d32 = 0;

  gotgctl.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GOTGCTL );
 801add6:	68e0      	ldr	r0, [r4, #12]
 801add8:	6803      	ldr	r3, [r0, #0]
  if (USB_OTG_IsDeviceMode(pdev) && (gotgctl.b.bsesvld))
 801adda:	4620      	mov	r0, r4
 801addc:	f7fd fca7 	bl	801872e <USB_OTG_IsDeviceMode>
    
  }
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.sessreqintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801ade0:	68e3      	ldr	r3, [r4, #12]
 801ade2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801ade6:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
  }
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
 801ade8:	2001      	movs	r0, #1
 801adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
  {
    return 0;
 801adec:	4628      	mov	r0, r5
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
  }
  return retval;
}
 801adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adf0:	50000004 	.word	0x50000004

0801adf4 <APP_LCD_ExtPort_PinSet>:
// set pin directly
inline static s32 APP_LCD_ExtPort_PinSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 8, value);
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 8, value);
 801adf4:	3008      	adds	r0, #8
 801adf6:	b2c0      	uxtb	r0, r0
 801adf8:	f7fa b922 	b.w	8015040 <MIOS32_BOARD_J10_PinSet>

0801adfc <APP_LCD_ExtPort_UpdateSRs>:
  return -1;
#endif
}

// pulse the RC line after a serial data shift
inline static s32 APP_LCD_ExtPort_UpdateSRs(void) {
 801adfc:	b508      	push	{r3, lr}
#if defined(MIOS32_FAMILY_STM32F10x)
  APP_LCD_ExtPort_PinSet(2, 0); // J5C.A10
  APP_LCD_ExtPort_PinSet(2, 1); // J5C.A10
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  APP_LCD_ExtPort_PinSet(2, 0); // J10B.D10
 801adfe:	2100      	movs	r1, #0
 801ae00:	2002      	movs	r0, #2
 801ae02:	f7ff fff7 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
  APP_LCD_ExtPort_PinSet(2, 1); // J10B.D10
 801ae06:	2002      	movs	r0, #2
 801ae08:	2101      	movs	r1, #1
 801ae0a:	f7ff fff3 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_UpdateSRs not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 801ae0e:	2000      	movs	r0, #0
 801ae10:	bd08      	pop	{r3, pc}
	...

0801ae14 <APP_LCD_GLCD_CS_Set>:
/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of GLCDs with parallel port depending on X cursor position
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
 801ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
 801ae16:	4b14      	ldr	r3, [pc, #80]	; (801ae68 <APP_LCD_GLCD_CS_Set+0x54>)
 801ae18:	7819      	ldrb	r1, [r3, #0]
 801ae1a:	f1b1 0281 	subs.w	r2, r1, #129	; 0x81
 801ae1e:	4255      	negs	r5, r2
 801ae20:	4155      	adcs	r5, r2
  u8 level_nonactive = level_active ? 0 : 1;
#if SED1520_POLLIN_WINTEK_WD_G1203T
  u8 segment_width = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520) ? 61 : 64;
 801ae22:	2986      	cmp	r1, #134	; 0x86
 801ae24:	bf14      	ite	ne
 801ae26:	2440      	movne	r4, #64	; 0x40
 801ae28:	243d      	moveq	r4, #61	; 0x3d
#else
  u8 segment_width = 64; // should be valid for KS0108 and SED1320 (although sometimes the controllers provide more columns)
#endif

  int cs;
  if( all ) {
 801ae2a:	b140      	cbz	r0, 801ae3e <APP_LCD_GLCD_CS_Set+0x2a>
 801ae2c:	2400      	movs	r4, #0
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
 801ae2e:	b2e0      	uxtb	r0, r4
 801ae30:	4629      	mov	r1, r5
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 801ae32:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, level_active);
 801ae34:	f7ff ffde 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 801ae38:	2c08      	cmp	r4, #8
 801ae3a:	d1f8      	bne.n	801ae2e <APP_LCD_GLCD_CS_Set+0x1a>
 801ae3c:	e011      	b.n	801ae62 <APP_LCD_GLCD_CS_Set+0x4e>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 801ae3e:	4f0b      	ldr	r7, [pc, #44]	; (801ae6c <APP_LCD_GLCD_CS_Set+0x58>)
 801ae40:	883b      	ldrh	r3, [r7, #0]
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
  u8 level_nonactive = level_active ? 0 : 1;
 801ae42:	f085 0601 	eor.w	r6, r5, #1
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 801ae46:	fb93 f7f4 	sdiv	r7, r3, r4

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 801ae4a:	4604      	mov	r4, r0
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 801ae4c:	b2f9      	uxtb	r1, r7
 801ae4e:	428c      	cmp	r4, r1
 801ae50:	bf14      	ite	ne
 801ae52:	4631      	movne	r1, r6
 801ae54:	4629      	moveq	r1, r5
 801ae56:	b2e0      	uxtb	r0, r4
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 801ae58:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 801ae5a:	f7ff ffcb 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 801ae5e:	2c08      	cmp	r4, #8
 801ae60:	d1f4      	bne.n	801ae4c <APP_LCD_GLCD_CS_Set+0x38>
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
  }

  return 0; // no error
}
 801ae62:	2000      	movs	r0, #0
 801ae64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae66:	bf00      	nop
 801ae68:	20003ef2 	.word	0x20003ef2
 801ae6c:	20003f04 	.word	0x20003f04

0801ae70 <APP_LCD_ExtPort_Init>:
# warning "APP_LCD_NUM_EXT_PINS not adapted for this MIOS32_FAMILY"
# define APP_LCD_NUM_EXT_PINS 0
#endif

// pin initialisation
inline static s32 APP_LCD_ExtPort_Init(void) {
 801ae70:	b510      	push	{r4, lr}
 801ae72:	2408      	movs	r4, #8
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 801ae74:	4620      	mov	r0, r4
 801ae76:	3401      	adds	r4, #1
 801ae78:	2105      	movs	r1, #5
 801ae7a:	b2e4      	uxtb	r4, r4
 801ae7c:	f7fa f8bc 	bl	8014ff8 <MIOS32_BOARD_J10_PinInit>
    MIOS32_BOARD_J5_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
 801ae80:	2c10      	cmp	r4, #16
 801ae82:	d1f7      	bne.n	801ae74 <APP_LCD_ExtPort_Init+0x4>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_Init not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 801ae84:	2000      	movs	r0, #0
 801ae86:	bd10      	pop	{r4, pc}

0801ae88 <APP_LCD_SERGLCD_CS_Init>:
// - 8 CS lines are available at J15
// - additional lines are available at the extension IO port
//   (either directly, or via DOUT shift register)
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Init(void)
{
 801ae88:	b510      	push	{r4, lr}
  int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 801ae8a:	4b0b      	ldr	r3, [pc, #44]	; (801aeb8 <APP_LCD_SERGLCD_CS_Init+0x30>)
 801ae8c:	785c      	ldrb	r4, [r3, #1]
 801ae8e:	7898      	ldrb	r0, [r3, #2]
 801ae90:	fb14 f400 	smulbb	r4, r4, r0

  if( num_lcds > 8 ) {
 801ae94:	2c08      	cmp	r4, #8
 801ae96:	dd01      	ble.n	801ae9c <APP_LCD_SERGLCD_CS_Init+0x14>
    APP_LCD_ExtPort_Init();
 801ae98:	f7ff ffea 	bl	801ae70 <APP_LCD_ExtPort_Init>
  }

  display_available |= (1 << num_lcds)-1;
 801ae9c:	4907      	ldr	r1, [pc, #28]	; (801aebc <APP_LCD_SERGLCD_CS_Init+0x34>)
 801ae9e:	2201      	movs	r2, #1
 801aea0:	fa02 f304 	lsl.w	r3, r2, r4
 801aea4:	1e5c      	subs	r4, r3, #1
 801aea6:	e9d1 2300 	ldrd	r2, r3, [r1]
 801aeaa:	4322      	orrs	r2, r4
 801aeac:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
 801aeb0:	e9c1 2300 	strd	r2, r3, [r1]

  return 0; // no error
}
 801aeb4:	2000      	movs	r0, #0
 801aeb6:	bd10      	pop	{r4, pc}
 801aeb8:	20003ef2 	.word	0x20003ef2
 801aebc:	20001190 	.word	0x20001190

0801aec0 <APP_LCD_ExtPort_SerDataShift.part.0>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 801aec0:	2108      	movs	r1, #8
 801aec2:	4b0b      	ldr	r3, [pc, #44]	; (801aef0 <APP_LCD_ExtPort_SerDataShift.part.0+0x30>)
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
 801aec4:	f010 0f01 	tst.w	r0, #1
 801aec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801aecc:	bf14      	ite	ne
 801aece:	831a      	strhne	r2, [r3, #24]
 801aed0:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801aed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 801aed6:	0840      	lsrs	r0, r0, #1
 801aed8:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801aeda:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801aedc:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801aede:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801aee0:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801aee2:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 801aee4:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 801aee6:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 801aee8:	831a      	strh	r2, [r3, #24]
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 801aeea:	d1ea      	bne.n	801aec2 <APP_LCD_ExtPort_SerDataShift.part.0+0x2>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 801aeec:	4770      	bx	lr
 801aeee:	bf00      	nop
 801aef0:	40020800 	.word	0x40020800

0801aef4 <APP_LCD_ExtPort_SerDataShift>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 801aef4:	b510      	push	{r4, lr}
 801aef6:	4604      	mov	r4, r0
    }
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
 801aef8:	b111      	cbz	r1, 801af00 <APP_LCD_ExtPort_SerDataShift+0xc>
 801aefa:	f7ff ffe1 	bl	801aec0 <APP_LCD_ExtPort_SerDataShift.part.0>
 801aefe:	e016      	b.n	801af2e <APP_LCD_ExtPort_SerDataShift+0x3a>
 801af00:	2108      	movs	r1, #8
 801af02:	4b0c      	ldr	r3, [pc, #48]	; (801af34 <APP_LCD_ExtPort_SerDataShift+0x40>)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
 801af04:	f014 0f80 	tst.w	r4, #128	; 0x80
 801af08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801af0c:	bf14      	ite	ne
 801af0e:	831a      	strhne	r2, [r3, #24]
 801af10:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801af12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 801af16:	0064      	lsls	r4, r4, #1
 801af18:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801af1a:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 801af1c:	b2e4      	uxtb	r4, r4
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801af1e:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801af20:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801af22:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801af24:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 801af26:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 801af28:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 801af2a:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 801af2c:	d1e9      	bne.n	801af02 <APP_LCD_ExtPort_SerDataShift+0xe>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 801af2e:	2000      	movs	r0, #0
 801af30:	bd10      	pop	{r4, pc}
 801af32:	bf00      	nop
 801af34:	40020800 	.word	0x40020800

0801af38 <APP_LCD_E_Set>:

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 801af38:	b570      	push	{r4, r5, r6, lr}
  if( mios32_lcd_device < 2 ) {
 801af3a:	4b1d      	ldr	r3, [pc, #116]	; (801afb0 <APP_LCD_E_Set+0x78>)

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 801af3c:	4601      	mov	r1, r0
  if( mios32_lcd_device < 2 ) {
 801af3e:	7818      	ldrb	r0, [r3, #0]
 801af40:	2801      	cmp	r0, #1
 801af42:	d803      	bhi.n	801af4c <APP_LCD_E_Set+0x14>
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 801af44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
 801af48:	f7fa b96a 	b.w	8015220 <MIOS32_BOARD_J15_E_Set>
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
 801af4c:	4a19      	ldr	r2, [pc, #100]	; (801afb4 <APP_LCD_E_Set+0x7c>)
 801af4e:	7893      	ldrb	r3, [r2, #2]
 801af50:	7854      	ldrb	r4, [r2, #1]
 801af52:	fb14 f203 	smulbb	r2, r4, r3
  if( num_additional_lcds < 0 )
 801af56:	1e93      	subs	r3, r2, #2
 801af58:	d426      	bmi.n	801afa8 <APP_LCD_E_Set+0x70>
    return -2; // E line not configured

  if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 801af5a:	2b08      	cmp	r3, #8
 801af5c:	f1a0 0002 	sub.w	r0, r0, #2
 801af60:	dc03      	bgt.n	801af6a <APP_LCD_E_Set+0x32>
    // the extension pin lines are used as dedicated E pins
    APP_LCD_ExtPort_PinSet(mios32_lcd_device - 2, value);
 801af62:	b2c0      	uxtb	r0, r0
 801af64:	f7ff ff46 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
 801af68:	e01c      	b.n	801afa4 <APP_LCD_E_Set+0x6c>
  } else {
    if( num_additional_lcds >= (MAX_LCDS-2) )
      num_additional_lcds = MAX_LCDS-2; // saturate
 801af6a:	2b3e      	cmp	r3, #62	; 0x3e
 801af6c:	bfa8      	it	ge
 801af6e:	233e      	movge	r3, #62	; 0x3e
    int num_shifts = num_additional_lcds / 8;
 801af70:	10dc      	asrs	r4, r3, #3
    if( num_additional_lcds % 8 )
 801af72:	075d      	lsls	r5, r3, #29
      ++num_shifts;
 801af74:	bf18      	it	ne
 801af76:	3401      	addne	r4, #1

    int selected_lcd = mios32_lcd_device - 2;
    int selected_lcd_sr = selected_lcd / 8;
 801af78:	10c6      	asrs	r6, r0, #3
    u8 selected_lcd_mask = value ? (1 << (selected_lcd % 8)) : 0;
 801af7a:	b131      	cbz	r1, 801af8a <APP_LCD_E_Set+0x52>
 801af7c:	f000 0007 	and.w	r0, r0, #7
 801af80:	2501      	movs	r5, #1
 801af82:	fa05 f500 	lsl.w	r5, r5, r0
 801af86:	b2ed      	uxtb	r5, r5
 801af88:	e000      	b.n	801af8c <APP_LCD_E_Set+0x54>
 801af8a:	460d      	mov	r5, r1

    // shift data
    int i;
    for(i=num_shifts-1; i>=0; --i) {
 801af8c:	3c01      	subs	r4, #1
 801af8e:	42b4      	cmp	r4, r6
 801af90:	bf0c      	ite	eq
 801af92:	4628      	moveq	r0, r5
 801af94:	2000      	movne	r0, #0
 801af96:	f7ff ff93 	bl	801aec0 <APP_LCD_ExtPort_SerDataShift.part.0>
 801af9a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 801af9e:	d2f6      	bcs.n	801af8e <APP_LCD_E_Set+0x56>
      u8 data = (i == selected_lcd_sr) ? selected_lcd_mask : 0;
      APP_LCD_ExtPort_SerDataShift(data, 1);
    }

    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
 801afa0:	f7ff ff2c 	bl	801adfc <APP_LCD_ExtPort_UpdateSRs>
  }

  return 0; // no error
 801afa4:	2000      	movs	r0, #0
 801afa6:	bd70      	pop	{r4, r5, r6, pc}
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
  if( num_additional_lcds < 0 )
    return -2; // E line not configured
 801afa8:	f06f 0001 	mvn.w	r0, #1
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 801afac:	bd70      	pop	{r4, r5, r6, pc}
 801afae:	bf00      	nop
 801afb0:	20000bf8 	.word	0x20000bf8
 801afb4:	20003ef2 	.word	0x20003ef2

0801afb8 <APP_LCD_PollUnbusy>:

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 801afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( mios32_lcd_device < 2 ) {
 801afba:	4b1f      	ldr	r3, [pc, #124]	; (801b038 <APP_LCD_PollUnbusy+0x80>)

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 801afbc:	4604      	mov	r4, r0
  if( mios32_lcd_device < 2 ) {
 801afbe:	7818      	ldrb	r0, [r3, #0]
 801afc0:	2801      	cmp	r0, #1
 801afc2:	d804      	bhi.n	801afce <APP_LCD_PollUnbusy+0x16>
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 801afc4:	4621      	mov	r1, r4
  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
}
 801afc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 801afca:	f7fa b94b 	b.w	8015264 <MIOS32_BOARD_J15_PollUnbusy>
  }

  if( mios32_lcd_device >= MAX_LCDS )
 801afce:	283f      	cmp	r0, #63	; 0x3f
 801afd0:	d902      	bls.n	801afd8 <APP_LCD_PollUnbusy+0x20>
    return -1; // LCD not supported
 801afd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  u32 poll_ctr;
  u32 delay_ctr;

  // select command register (RS=0)
  MIOS32_BOARD_J15_RS_Set(0);
 801afd8:	2000      	movs	r0, #0
 801afda:	f7fa f909 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

  // enable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(1);
 801afde:	2001      	movs	r0, #1
 801afe0:	f7fa f93e 	bl	8015260 <MIOS32_BOARD_J15_D7InPullUpEnable>

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);
 801afe4:	2001      	movs	r0, #1
 801afe6:	f7fa f90f 	bl	8015208 <MIOS32_BOARD_J15_RW_Set>

  // check if E pin is available
  if( APP_LCD_E_Set(1) < 0 )
 801afea:	2001      	movs	r0, #1
 801afec:	f7ff ffa4 	bl	801af38 <APP_LCD_E_Set>
 801aff0:	2800      	cmp	r0, #0
 801aff2:	dbee      	blt.n	801afd2 <APP_LCD_PollUnbusy+0x1a>
 801aff4:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 801aff6:	b19c      	cbz	r4, 801b020 <APP_LCD_PollUnbusy+0x68>
    APP_LCD_E_Set(1);
 801aff8:	2001      	movs	r0, #1
 801affa:	f7ff ff9d 	bl	801af38 <APP_LCD_E_Set>
 801affe:	250a      	movs	r5, #10

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);
 801b000:	2001      	movs	r0, #1
 801b002:	f7fa f901 	bl	8015208 <MIOS32_BOARD_J15_RW_Set>
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    APP_LCD_E_Set(1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 801b006:	3d01      	subs	r5, #1
 801b008:	d1fa      	bne.n	801b000 <APP_LCD_PollUnbusy+0x48>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 801b00a:	f7fa f921 	bl	8015250 <MIOS32_BOARD_J15_GetD7In>
 801b00e:	4607      	mov	r7, r0
    APP_LCD_E_Set(0);
 801b010:	4628      	mov	r0, r5
 801b012:	f7ff ff91 	bl	801af38 <APP_LCD_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 801b016:	b90f      	cbnz	r7, 801b01c <APP_LCD_PollUnbusy+0x64>
 801b018:	b916      	cbnz	r6, 801b020 <APP_LCD_PollUnbusy+0x68>
 801b01a:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 801b01c:	3c01      	subs	r4, #1
 801b01e:	e7ea      	b.n	801aff6 <APP_LCD_PollUnbusy+0x3e>
    // TODO: not understood yet: I've a particular LCD which sporadically flags unbusy on a STM32F4
    //       during the first poll, but busy on following polls until it's really unbusy
  }

  // disable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(0);
 801b020:	2000      	movs	r0, #0
 801b022:	f7fa f91d 	bl	8015260 <MIOS32_BOARD_J15_D7InPullUpEnable>

  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);
 801b026:	2000      	movs	r0, #0
 801b028:	f7fa f8ee 	bl	8015208 <MIOS32_BOARD_J15_RW_Set>

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 801b02c:	2c00      	cmp	r4, #0
 801b02e:	bf14      	ite	ne
 801b030:	2000      	movne	r0, #0
 801b032:	f06f 0001 	mvneq.w	r0, #1

  return 0; // no error
}
 801b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b038:	20000bf8 	.word	0x20000bf8

0801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>:

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801b03c:	b570      	push	{r4, r5, r6, lr}
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 801b03e:	4b48      	ldr	r3, [pc, #288]	; (801b160 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x124>)
 801b040:	781e      	ldrb	r6, [r3, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801b042:	4605      	mov	r5, r0
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 801b044:	b1fe      	cbz	r6, 801b086 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x4a>
    u8 level_active = 0;
    u8 level_nonactive = 1;

    int cs;
    if( all ) {
 801b046:	b180      	cbz	r0, 801b06a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 801b048:	2100      	movs	r1, #0
 801b04a:	200c      	movs	r0, #12
 801b04c:	f7f9 fff8 	bl	8015040 <MIOS32_BOARD_J10_PinSet>
 801b050:	2100      	movs	r1, #0
 801b052:	200d      	movs	r0, #13
 801b054:	f7f9 fff4 	bl	8015040 <MIOS32_BOARD_J10_PinSet>
 801b058:	2100      	movs	r1, #0
 801b05a:	200e      	movs	r0, #14
 801b05c:	f7f9 fff0 	bl	8015040 <MIOS32_BOARD_J10_PinSet>
 801b060:	200f      	movs	r0, #15
 801b062:	2100      	movs	r1, #0
 801b064:	f7f9 ffec 	bl	8015040 <MIOS32_BOARD_J10_PinSet>
 801b068:	e077      	b.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
 801b06a:	493e      	ldr	r1, [pc, #248]	; (801b164 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 801b06c:	780a      	ldrb	r2, [r1, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801b06e:	f105 000c 	add.w	r0, r5, #12
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 801b072:	1aa9      	subs	r1, r5, r2
 801b074:	bf18      	it	ne
 801b076:	2101      	movne	r1, #1
 801b078:	b2c0      	uxtb	r0, r0
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 801b07a:	3501      	adds	r5, #1
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 801b07c:	f7f9 ffe0 	bl	8015040 <MIOS32_BOARD_J10_PinSet>
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 801b080:	2d04      	cmp	r5, #4
 801b082:	d1f2      	bne.n	801b06a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
 801b084:	e069      	b.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
    }
  } else {

    int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 8;
 801b086:	4838      	ldr	r0, [pc, #224]	; (801b168 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x12c>)
 801b088:	4b38      	ldr	r3, [pc, #224]	; (801b16c <APP_LCD_SERGLCD_CS_Set.constprop.2+0x130>)
 801b08a:	7844      	ldrb	r4, [r0, #1]
 801b08c:	7881      	ldrb	r1, [r0, #2]
 801b08e:	fb14 f401 	smulbb	r4, r4, r1
 801b092:	3c08      	subs	r4, #8
    if( num_additional_lcds >= (MAX_LCDS-8) )
      num_additional_lcds = (MAX_LCDS-8);
 801b094:	2c38      	cmp	r4, #56	; 0x38
 801b096:	bfa8      	it	ge
 801b098:	2438      	movge	r4, #56	; 0x38

    // Note: assume that CS lines are low-active!
    if( all ) {
 801b09a:	b305      	cbz	r5, 801b0de <APP_LCD_SERGLCD_CS_Set.constprop.2+0xa2>
      if( prev_glcd_selection != 0xff ) {
 801b09c:	7818      	ldrb	r0, [r3, #0]
 801b09e:	28ff      	cmp	r0, #255	; 0xff
 801b0a0:	d05b      	beq.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = 0xff;
 801b0a2:	22ff      	movs	r2, #255	; 0xff
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 801b0a4:	4630      	mov	r0, r6
      num_additional_lcds = (MAX_LCDS-8);

    // Note: assume that CS lines are low-active!
    if( all ) {
      if( prev_glcd_selection != 0xff ) {
	prev_glcd_selection = 0xff;
 801b0a6:	701a      	strb	r2, [r3, #0]
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 801b0a8:	f7fa f84c 	bl	8015144 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 801b0ac:	2c08      	cmp	r4, #8
 801b0ae:	dc08      	bgt.n	801b0c2 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x86>
 801b0b0:	4635      	mov	r5, r6
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801b0b2:	42a5      	cmp	r5, r4
 801b0b4:	da51      	bge.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
 801b0b6:	b2e8      	uxtb	r0, r5
 801b0b8:	2100      	movs	r1, #0
 801b0ba:	f7ff fe9b 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
	prev_glcd_selection = 0xff;
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801b0be:	3501      	adds	r5, #1
 801b0c0:	e7f7      	b.n	801b0b2 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x76>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 801b0c2:	10e3      	asrs	r3, r4, #3
	  if( num_additional_lcds % 8 )
 801b0c4:	0762      	lsls	r2, r4, #29
	    ++num_shifts;
 801b0c6:	bf18      	it	ne
 801b0c8:	3301      	addne	r3, #1

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 801b0ca:	1e5c      	subs	r4, r3, #1
 801b0cc:	2000      	movs	r0, #0
 801b0ce:	f7ff fef7 	bl	801aec0 <APP_LCD_ExtPort_SerDataShift.part.0>
 801b0d2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 801b0d6:	d2f9      	bcs.n	801b0cc <APP_LCD_SERGLCD_CS_Set.constprop.2+0x90>
	    APP_LCD_ExtPort_SerDataShift(value ? 0x00 : 0xff, 1);
	  }

	  // update serial shift registers
	  APP_LCD_ExtPort_UpdateSRs();
 801b0d8:	f7ff fe90 	bl	801adfc <APP_LCD_ExtPort_UpdateSRs>
 801b0dc:	e03d      	b.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
 801b0de:	4a21      	ldr	r2, [pc, #132]	; (801b164 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 801b0e0:	7819      	ldrb	r1, [r3, #0]
 801b0e2:	7810      	ldrb	r0, [r2, #0]
 801b0e4:	4281      	cmp	r1, r0
 801b0e6:	d038      	beq.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = mios32_lcd_device;
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 801b0e8:	2601      	movs	r6, #1
	  APP_LCD_ExtPort_UpdateSRs();
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
	prev_glcd_selection = mios32_lcd_device;
 801b0ea:	7018      	strb	r0, [r3, #0]
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 801b0ec:	fa06 f300 	lsl.w	r3, r6, r0
 801b0f0:	43de      	mvns	r6, r3

	MIOS32_BOARD_J15_DataSet(mask);
 801b0f2:	b2f0      	uxtb	r0, r6
 801b0f4:	f7fa f826 	bl	8015144 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 801b0f8:	2c08      	cmp	r4, #8
 801b0fa:	dc0c      	bgt.n	801b116 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xda>
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801b0fc:	42a5      	cmp	r5, r4
 801b0fe:	da2c      	bge.n	801b15a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801b100:	f105 0208 	add.w	r2, r5, #8
	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
 801b104:	fa26 f102 	lsr.w	r1, r6, r2
 801b108:	b2e8      	uxtb	r0, r5
 801b10a:	f001 0101 	and.w	r1, r1, #1
 801b10e:	f7ff fe71 	bl	801adf4 <APP_LCD_ExtPort_PinSet>

	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801b112:	3501      	adds	r5, #1
 801b114:	e7f2      	b.n	801b0fc <APP_LCD_SERGLCD_CS_Set.constprop.2+0xc0>
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 801b116:	4d13      	ldr	r5, [pc, #76]	; (801b164 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 801b118:	10e2      	asrs	r2, r4, #3
	  if( num_additional_lcds % 8 )
 801b11a:	0766      	lsls	r6, r4, #29
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 801b11c:	782c      	ldrb	r4, [r5, #0]
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;
 801b11e:	bf18      	it	ne
 801b120:	3201      	addne	r2, #1

	  int selected_lcd = mios32_lcd_device - 8;
 801b122:	3c08      	subs	r4, #8
	  int selected_lcd_sr = selected_lcd / 8;
 801b124:	2008      	movs	r0, #8
 801b126:	fb94 f6f0 	sdiv	r6, r4, r0
	  u8 selected_lcd_mask = value ? ~(1 << (selected_lcd % 8)) : 0xff;
 801b12a:	4811      	ldr	r0, [pc, #68]	; (801b170 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x134>)
 801b12c:	4020      	ands	r0, r4
 801b12e:	2800      	cmp	r0, #0
 801b130:	da03      	bge.n	801b13a <APP_LCD_SERGLCD_CS_Set.constprop.2+0xfe>
 801b132:	1e41      	subs	r1, r0, #1
 801b134:	f061 0307 	orn	r3, r1, #7
 801b138:	1c58      	adds	r0, r3, #1
 801b13a:	2501      	movs	r5, #1
 801b13c:	fa05 f500 	lsl.w	r5, r5, r0
 801b140:	43ec      	mvns	r4, r5
 801b142:	b2e5      	uxtb	r5, r4

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 801b144:	1e54      	subs	r4, r2, #1
 801b146:	42b4      	cmp	r4, r6
 801b148:	bf0c      	ite	eq
 801b14a:	4628      	moveq	r0, r5
 801b14c:	20ff      	movne	r0, #255	; 0xff
 801b14e:	f7ff feb7 	bl	801aec0 <APP_LCD_ExtPort_SerDataShift.part.0>
 801b152:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 801b156:	d2f6      	bcs.n	801b146 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x10a>
 801b158:	e7be      	b.n	801b0d8 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x9c>
      }
    }
  }

  return 0; // no error
}
 801b15a:	2000      	movs	r0, #0
 801b15c:	bd70      	pop	{r4, r5, r6, pc}
 801b15e:	bf00      	nop
 801b160:	20001198 	.word	0x20001198
 801b164:	20000bf8 	.word	0x20000bf8
 801b168:	20003ef2 	.word	0x20003ef2
 801b16c:	20000068 	.word	0x20000068
 801b170:	80000007 	.word	0x80000007

0801b174 <APP_LCD_Cmd>:
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 801b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if( lcd_testmode )
 801b178:	4b46      	ldr	r3, [pc, #280]	; (801b294 <APP_LCD_Cmd+0x120>)
 801b17a:	781f      	ldrb	r7, [r3, #0]
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 801b17c:	4606      	mov	r6, r0
  if( lcd_testmode )
 801b17e:	2f00      	cmp	r7, #0
 801b180:	f040 8084 	bne.w	801b28c <APP_LCD_Cmd+0x118>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 801b184:	4844      	ldr	r0, [pc, #272]	; (801b298 <APP_LCD_Cmd+0x124>)
 801b186:	4945      	ldr	r1, [pc, #276]	; (801b29c <APP_LCD_Cmd+0x128>)
 801b188:	f890 8000 	ldrb.w	r8, [r0]
 801b18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b190:	4642      	mov	r2, r8
 801b192:	f002 fe19 	bl	801ddc8 <__aeabi_llsr>
 801b196:	2401      	movs	r4, #1
 801b198:	2500      	movs	r5, #0
 801b19a:	4020      	ands	r0, r4
 801b19c:	4029      	ands	r1, r5
 801b19e:	ea50 0301 	orrs.w	r3, r0, r1
 801b1a2:	d073      	beq.n	801b28c <APP_LCD_Cmd+0x118>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 801b1a4:	4a3e      	ldr	r2, [pc, #248]	; (801b2a0 <APP_LCD_Cmd+0x12c>)
 801b1a6:	7813      	ldrb	r3, [r2, #0]
 801b1a8:	337f      	adds	r3, #127	; 0x7f
 801b1aa:	b2d8      	uxtb	r0, r3
 801b1ac:	2805      	cmp	r0, #5
 801b1ae:	d845      	bhi.n	801b23c <APP_LCD_Cmd+0xc8>
 801b1b0:	b25d      	sxtb	r5, r3
 801b1b2:	2401      	movs	r4, #1
 801b1b4:	fa04 f105 	lsl.w	r1, r4, r5
 801b1b8:	f011 0523 	ands.w	r5, r1, #35	; 0x23
 801b1bc:	d10e      	bne.n	801b1dc <APP_LCD_Cmd+0x68>
 801b1be:	f011 0718 	ands.w	r7, r1, #24
 801b1c2:	d123      	bne.n	801b20c <APP_LCD_Cmd+0x98>
 801b1c4:	0749      	lsls	r1, r1, #29
 801b1c6:	d539      	bpl.n	801b23c <APP_LCD_Cmd+0xc8>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	f7ff ff37 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control A0
 801b1ce:	4638      	mov	r0, r7
 801b1d0:	f7fa f80e 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

    // send command
    MIOS32_BOARD_J15_SerDataShift(cmd);
 801b1d4:	4630      	mov	r0, r6
 801b1d6:	f7f9 ffd7 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>
 801b1da:	e054      	b.n	801b286 <APP_LCD_Cmd+0x112>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 801b1dc:	f1b8 0f01 	cmp.w	r8, #1
 801b1e0:	d854      	bhi.n	801b28c <APP_LCD_Cmd+0x118>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 801b1e2:	4638      	mov	r0, r7
 801b1e4:	f7ff fe16 	bl	801ae14 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 801b1e8:	f242 7010 	movw	r0, #10000	; 0x2710
 801b1ec:	f7ff fee4 	bl	801afb8 <APP_LCD_PollUnbusy>
#endif
      //return -2; // timeout
    }

    // select all displays
    APP_LCD_GLCD_CS_Set(1);
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	f7ff fe0f 	bl	801ae14 <APP_LCD_GLCD_CS_Set>

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 801b1f6:	4630      	mov	r0, r6
 801b1f8:	f7f9 ffa4 	bl	8015144 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801b1fc:	4638      	mov	r0, r7
 801b1fe:	f7f9 fff7 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801b202:	4620      	mov	r0, r4
 801b204:	f7ff fe98 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b208:	4638      	mov	r0, r7
 801b20a:	e03a      	b.n	801b282 <APP_LCD_Cmd+0x10e>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 801b20c:	4620      	mov	r0, r4
 801b20e:	f7ff ff15 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 801b212:	4a24      	ldr	r2, [pc, #144]	; (801b2a4 <APP_LCD_Cmd+0x130>)
 801b214:	7810      	ldrb	r0, [r2, #0]
 801b216:	b140      	cbz	r0, 801b22a <APP_LCD_Cmd+0xb6>
      APP_LCD_ExtPort_PinSet(2, 0); // DC
 801b218:	4629      	mov	r1, r5
 801b21a:	2002      	movs	r0, #2
 801b21c:	f7ff fdea 	bl	801adf4 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(cmd, 0);
 801b220:	4630      	mov	r0, r6
 801b222:	4629      	mov	r1, r5
 801b224:	f7ff fe66 	bl	801aef4 <APP_LCD_ExtPort_SerDataShift>
 801b228:	e004      	b.n	801b234 <APP_LCD_Cmd+0xc0>
    } else {
      MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control DC
 801b22a:	f7f9 ffe1 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

      MIOS32_BOARD_J15_SerDataShift(cmd);
 801b22e:	4630      	mov	r0, r6
 801b230:	f7f9 ffaa 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>

    return 0; // no error
  }
  }

  return -3; // not supported
 801b234:	f06f 0002 	mvn.w	r0, #2
 801b238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 801b23c:	f242 7010 	movw	r0, #10000	; 0x2710
 801b240:	f7ff feba 	bl	801afb8 <APP_LCD_PollUnbusy>
 801b244:	2800      	cmp	r0, #0
 801b246:	da12      	bge.n	801b26e <APP_LCD_Cmd+0xfa>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801b248:	4b13      	ldr	r3, [pc, #76]	; (801b298 <APP_LCD_Cmd+0x124>)
 801b24a:	4c14      	ldr	r4, [pc, #80]	; (801b29c <APP_LCD_Cmd+0x128>)
 801b24c:	781a      	ldrb	r2, [r3, #0]
 801b24e:	2001      	movs	r0, #1
 801b250:	2100      	movs	r1, #0
 801b252:	f002 fdc5 	bl	801dde0 <__aeabi_llsl>
 801b256:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b25a:	ea22 0000 	bic.w	r0, r2, r0
 801b25e:	ea23 0101 	bic.w	r1, r3, r1
 801b262:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Cmd] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 801b266:	f06f 0001 	mvn.w	r0, #1
 801b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 801b26e:	4630      	mov	r0, r6
 801b270:	f7f9 ff68 	bl	8015144 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801b274:	2000      	movs	r0, #0
 801b276:	f7f9 ffbb 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801b27a:	2001      	movs	r0, #1
 801b27c:	f7ff fe5c 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b280:	2000      	movs	r0, #0
 801b282:	f7ff fe59 	bl	801af38 <APP_LCD_E_Set>

    return 0; // no error
 801b286:	2000      	movs	r0, #0
 801b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801b28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b294:	2000118d 	.word	0x2000118d
 801b298:	20000bf8 	.word	0x20000bf8
 801b29c:	20001190 	.word	0x20001190
 801b2a0:	20003ef2 	.word	0x20003ef2
 801b2a4:	20001198 	.word	0x20001198

0801b2a8 <APP_LCD_Data>:
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 801b2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if( lcd_testmode )
 801b2ac:	4b74      	ldr	r3, [pc, #464]	; (801b480 <APP_LCD_Data+0x1d8>)
 801b2ae:	781d      	ldrb	r5, [r3, #0]
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 801b2b0:	4680      	mov	r8, r0
  if( lcd_testmode )
 801b2b2:	2d00      	cmp	r5, #0
 801b2b4:	f040 80df 	bne.w	801b476 <APP_LCD_Data+0x1ce>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 801b2b8:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801b494 <APP_LCD_Data+0x1ec>
 801b2bc:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 801b498 <APP_LCD_Data+0x1f0>
 801b2c0:	f899 b000 	ldrb.w	fp, [r9]
 801b2c4:	e9da 0100 	ldrd	r0, r1, [sl]
 801b2c8:	465a      	mov	r2, fp
 801b2ca:	f002 fd7d 	bl	801ddc8 <__aeabi_llsr>
 801b2ce:	2201      	movs	r2, #1
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	4010      	ands	r0, r2
 801b2d4:	4019      	ands	r1, r3
 801b2d6:	ea50 0301 	orrs.w	r3, r0, r1
 801b2da:	f000 80cc 	beq.w	801b476 <APP_LCD_Data+0x1ce>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 801b2de:	4c69      	ldr	r4, [pc, #420]	; (801b484 <APP_LCD_Data+0x1dc>)
 801b2e0:	7820      	ldrb	r0, [r4, #0]
 801b2e2:	307f      	adds	r0, #127	; 0x7f
 801b2e4:	b2c1      	uxtb	r1, r0
 801b2e6:	2905      	cmp	r1, #5
 801b2e8:	f200 809d 	bhi.w	801b426 <APP_LCD_Data+0x17e>
 801b2ec:	b247      	sxtb	r7, r0
 801b2ee:	2601      	movs	r6, #1
 801b2f0:	fa06 f207 	lsl.w	r2, r6, r7
 801b2f4:	f012 0723 	ands.w	r7, r2, #35	; 0x23
 801b2f8:	d105      	bne.n	801b306 <APP_LCD_Data+0x5e>
 801b2fa:	f012 0018 	ands.w	r0, r2, #24
 801b2fe:	d169      	bne.n	801b3d4 <APP_LCD_Data+0x12c>
 801b300:	0753      	lsls	r3, r2, #29
 801b302:	d44a      	bmi.n	801b39a <APP_LCD_Data+0xf2>
 801b304:	e08f      	b.n	801b426 <APP_LCD_Data+0x17e>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 801b306:	f1bb 0f01 	cmp.w	fp, #1
 801b30a:	f200 80b4 	bhi.w	801b476 <APP_LCD_Data+0x1ce>
      return -1;

    // abort if max. width or height reached
    if( mios32_lcd_x >= mios32_lcd_parameters.width || mios32_lcd_y >= mios32_lcd_parameters.height )
 801b30e:	4f5e      	ldr	r7, [pc, #376]	; (801b488 <APP_LCD_Data+0x1e0>)
 801b310:	88a2      	ldrh	r2, [r4, #4]
 801b312:	8839      	ldrh	r1, [r7, #0]
 801b314:	4291      	cmp	r1, r2
 801b316:	f080 80ae 	bcs.w	801b476 <APP_LCD_Data+0x1ce>
 801b31a:	4b5c      	ldr	r3, [pc, #368]	; (801b48c <APP_LCD_Data+0x1e4>)
 801b31c:	88e1      	ldrh	r1, [r4, #6]
 801b31e:	8818      	ldrh	r0, [r3, #0]
 801b320:	4288      	cmp	r0, r1
 801b322:	f080 80a8 	bcs.w	801b476 <APP_LCD_Data+0x1ce>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 801b326:	4628      	mov	r0, r5
 801b328:	f7ff fd74 	bl	801ae14 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 801b32c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801b330:	f7ff fe42 	bl	801afb8 <APP_LCD_PollUnbusy>
 801b334:	2800      	cmp	r0, #0
 801b336:	da0e      	bge.n	801b356 <APP_LCD_Data+0xae>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801b338:	f899 2000 	ldrb.w	r2, [r9]
 801b33c:	2001      	movs	r0, #1
 801b33e:	2100      	movs	r1, #0
 801b340:	f002 fd4e 	bl	801dde0 <__aeabi_llsl>
 801b344:	e9da 2300 	ldrd	r2, r3, [sl]
 801b348:	ea22 0000 	bic.w	r0, r2, r0
 801b34c:	ea23 0101 	bic.w	r1, r3, r1
 801b350:	e9ca 0100 	strd	r0, r1, [sl]
 801b354:	e07c      	b.n	801b450 <APP_LCD_Data+0x1a8>
#endif
      return -2; // timeout
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 801b356:	4640      	mov	r0, r8
 801b358:	f7f9 fef4 	bl	8015144 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 801b35c:	4630      	mov	r0, r6
 801b35e:	f7f9 ff47 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801b362:	4630      	mov	r0, r6
 801b364:	f7ff fde8 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b368:	4628      	mov	r0, r5
 801b36a:	f7ff fde5 	bl	801af38 <APP_LCD_E_Set>

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801b36e:	883b      	ldrh	r3, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801b370:	7822      	ldrb	r2, [r4, #0]
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801b372:	f103 0301 	add.w	r3, r3, #1
 801b376:	b298      	uxth	r0, r3
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801b378:	2a86      	cmp	r2, #134	; 0x86
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801b37a:	8038      	strh	r0, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 801b37c:	d109      	bne.n	801b392 <APP_LCD_Data+0xea>
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801b37e:	223d      	movs	r2, #61	; 0x3d
 801b380:	fbb0 f1f2 	udiv	r1, r0, r2
 801b384:	fb02 0311 	mls	r3, r2, r1, r0
 801b388:	b298      	uxth	r0, r3
 801b38a:	2800      	cmp	r0, #0
 801b38c:	d170      	bne.n	801b470 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x00 + 0);
 801b38e:	2000      	movs	r0, #0
 801b390:	e01c      	b.n	801b3cc <APP_LCD_Data+0x124>
#else
      if( (++mios32_lcd_x % 64) == 0 )
	return APP_LCD_Cmd(0x00 + 0);
#endif
    } else {
      if( (++mios32_lcd_x % 64) == 0 )
 801b392:	0680      	lsls	r0, r0, #26
 801b394:	d16c      	bne.n	801b470 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x40 + 0);
 801b396:	2040      	movs	r0, #64	; 0x40
 801b398:	e018      	b.n	801b3cc <APP_LCD_Data+0x124>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 801b39a:	f7ff fe4f 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control A0
 801b39e:	4630      	mov	r0, r6
 801b3a0:	f7f9 ff26 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

    // send data
    MIOS32_BOARD_J15_SerDataShift(data);
 801b3a4:	4640      	mov	r0, r8
 801b3a6:	f7f9 feef 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>

    // increment graphical cursor
    ++mios32_lcd_x;
 801b3aa:	4b37      	ldr	r3, [pc, #220]	; (801b488 <APP_LCD_Data+0x1e0>)
 801b3ac:	8818      	ldrh	r0, [r3, #0]
 801b3ae:	1c41      	adds	r1, r0, #1
 801b3b0:	b28a      	uxth	r2, r1
 801b3b2:	801a      	strh	r2, [r3, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801b3b4:	88a3      	ldrh	r3, [r4, #4]
 801b3b6:	fbb2 f4f3 	udiv	r4, r2, r3
 801b3ba:	fb03 2014 	mls	r0, r3, r4, r2
 801b3be:	b284      	uxth	r4, r0
 801b3c0:	2c00      	cmp	r4, #0
 801b3c2:	d155      	bne.n	801b470 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
 801b3c4:	2010      	movs	r0, #16
 801b3c6:	f7ff fed5 	bl	801b174 <APP_LCD_Cmd>
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 801b3ca:	4620      	mov	r0, r4
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801b3cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ++mios32_lcd_x;

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 801b3d0:	f7ff bed0 	b.w	801b174 <APP_LCD_Cmd>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 801b3d4:	4638      	mov	r0, r7
 801b3d6:	f7ff fe31 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 801b3da:	492d      	ldr	r1, [pc, #180]	; (801b490 <APP_LCD_Data+0x1e8>)
 801b3dc:	780a      	ldrb	r2, [r1, #0]
 801b3de:	b142      	cbz	r2, 801b3f2 <APP_LCD_Data+0x14a>
      APP_LCD_ExtPort_PinSet(2, 1); // DC
 801b3e0:	4631      	mov	r1, r6
 801b3e2:	2002      	movs	r0, #2
 801b3e4:	f7ff fd06 	bl	801adf4 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(data, 0);
 801b3e8:	4640      	mov	r0, r8
 801b3ea:	4639      	mov	r1, r7
 801b3ec:	f7ff fd82 	bl	801aef4 <APP_LCD_ExtPort_SerDataShift>
 801b3f0:	e005      	b.n	801b3fe <APP_LCD_Data+0x156>
    } else {
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f7f9 fefc 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
 801b3f8:	4640      	mov	r0, r8
 801b3fa:	f7f9 fec5 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801b3fe:	4c22      	ldr	r4, [pc, #136]	; (801b488 <APP_LCD_Data+0x1e0>)

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801b400:	4a20      	ldr	r2, [pc, #128]	; (801b484 <APP_LCD_Data+0x1dc>)
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801b402:	8823      	ldrh	r3, [r4, #0]
 801b404:	1c58      	adds	r0, r3, #1

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801b406:	8893      	ldrh	r3, [r2, #4]
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801b408:	b281      	uxth	r1, r0
 801b40a:	8021      	strh	r1, [r4, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801b40c:	fbb1 f4f3 	udiv	r4, r1, r3
 801b410:	fb03 1014 	mls	r0, r3, r4, r1
 801b414:	b284      	uxth	r4, r0
 801b416:	bb5c      	cbnz	r4, 801b470 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x00); // set X=0
 801b418:	4620      	mov	r0, r4
 801b41a:	f7ff feab 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x10);
 801b41e:	2010      	movs	r0, #16
 801b420:	f7ff fea8 	bl	801b174 <APP_LCD_Cmd>
 801b424:	e024      	b.n	801b470 <APP_LCD_Data+0x1c8>
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 801b426:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801b42a:	f7ff fdc5 	bl	801afb8 <APP_LCD_PollUnbusy>
 801b42e:	2800      	cmp	r0, #0
 801b430:	da12      	bge.n	801b458 <APP_LCD_Data+0x1b0>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801b432:	4a18      	ldr	r2, [pc, #96]	; (801b494 <APP_LCD_Data+0x1ec>)
 801b434:	4c18      	ldr	r4, [pc, #96]	; (801b498 <APP_LCD_Data+0x1f0>)
 801b436:	7812      	ldrb	r2, [r2, #0]
 801b438:	2001      	movs	r0, #1
 801b43a:	2100      	movs	r1, #0
 801b43c:	f002 fcd0 	bl	801dde0 <__aeabi_llsl>
 801b440:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b444:	ea22 0000 	bic.w	r0, r2, r0
 801b448:	ea23 0101 	bic.w	r1, r3, r1
 801b44c:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Data] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 801b450:	f06f 0001 	mvn.w	r0, #1
 801b454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 801b458:	4640      	mov	r0, r8
 801b45a:	f7f9 fe73 	bl	8015144 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 801b45e:	2001      	movs	r0, #1
 801b460:	f7f9 fec6 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801b464:	2001      	movs	r0, #1
 801b466:	f7ff fd67 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b46a:	2000      	movs	r0, #0
 801b46c:	f7ff fd64 	bl	801af38 <APP_LCD_E_Set>

    return 0; // no error
 801b470:	2000      	movs	r0, #0
 801b472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801b476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return 0; // no error
  }
  }

  return -3; // not supported
}
 801b47a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b47e:	bf00      	nop
 801b480:	2000118d 	.word	0x2000118d
 801b484:	20003ef2 	.word	0x20003ef2
 801b488:	20003f04 	.word	0x20003f04
 801b48c:	20003ef0 	.word	0x20003ef0
 801b490:	20001198 	.word	0x20001198
 801b494:	20000bf8 	.word	0x20000bf8
 801b498:	20001190 	.word	0x20001190

0801b49c <APP_LCD_Init>:
// Initializes application specific LCD driver
// IN: <mode>: optional configuration
// OUT: returns < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Init(u32 mode)
{
 801b49c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if( lcd_testmode )
 801b4a0:	4b89      	ldr	r3, [pc, #548]	; (801b6c8 <APP_LCD_Init+0x22c>)
 801b4a2:	7819      	ldrb	r1, [r3, #0]
 801b4a4:	b111      	cbz	r1, 801b4ac <APP_LCD_Init+0x10>
    return -1; // direct access disabled in testmode
 801b4a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4aa:	e198      	b.n	801b7de <APP_LCD_Init+0x342>

  // currently only mode 0 supported
  if( mode != 0 )
 801b4ac:	2800      	cmp	r0, #0
 801b4ae:	d1fa      	bne.n	801b4a6 <APP_LCD_Init+0xa>
    return -1; // unsupported mode

  if( mios32_lcd_device >= MAX_LCDS )
 801b4b0:	4886      	ldr	r0, [pc, #536]	; (801b6cc <APP_LCD_Init+0x230>)
 801b4b2:	f890 8000 	ldrb.w	r8, [r0]
 801b4b6:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 801b4ba:	d902      	bls.n	801b4c2 <APP_LCD_Init+0x26>
    return -2; // unsupported LCD device number
 801b4bc:	f06f 0001 	mvn.w	r0, #1
 801b4c0:	e18d      	b.n	801b7de <APP_LCD_Init+0x342>

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801b4c2:	4e83      	ldr	r6, [pc, #524]	; (801b6d0 <APP_LCD_Init+0x234>)
 801b4c4:	4642      	mov	r2, r8
 801b4c6:	2001      	movs	r0, #1
 801b4c8:	2100      	movs	r1, #0
 801b4ca:	f002 fc89 	bl	801dde0 <__aeabi_llsl>
 801b4ce:	e9d6 4500 	ldrd	r4, r5, [r6]

  switch( mios32_lcd_parameters.lcd_type ) {
 801b4d2:	4a80      	ldr	r2, [pc, #512]	; (801b6d4 <APP_LCD_Init+0x238>)

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801b4d4:	4320      	orrs	r0, r4

  switch( mios32_lcd_parameters.lcd_type ) {
 801b4d6:	7814      	ldrb	r4, [r2, #0]

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801b4d8:	4329      	orrs	r1, r5

  switch( mios32_lcd_parameters.lcd_type ) {
 801b4da:	f1a4 0381 	sub.w	r3, r4, #129	; 0x81

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801b4de:	e9c6 0100 	strd	r0, r1, [r6]
 801b4e2:	46b1      	mov	r9, r6

  switch( mios32_lcd_parameters.lcd_type ) {
 801b4e4:	2b05      	cmp	r3, #5
 801b4e6:	f200 80ea 	bhi.w	801b6be <APP_LCD_Init+0x222>
 801b4ea:	e8df f003 	tbb	[pc, r3]
 801b4ee:	0303      	.short	0x0303
 801b4f0:	105f5f23 	.word	0x105f5f23
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801b4f4:	f1b8 0f01 	cmp.w	r8, #1
 801b4f8:	f200 8160 	bhi.w	801b7bc <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801b4fc:	2001      	movs	r0, #1
 801b4fe:	f7f9 fdc1 	bl	8015084 <MIOS32_BOARD_J15_PortInit>
 801b502:	2800      	cmp	r0, #0
 801b504:	dbda      	blt.n	801b4bc <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 801b506:	f7ff fcb3 	bl	801ae70 <APP_LCD_ExtPort_Init>

      // "Display On" command
      APP_LCD_Cmd(0x3e + 1);
 801b50a:	203f      	movs	r0, #63	; 0x3f
 801b50c:	e00e      	b.n	801b52c <APP_LCD_Init+0x90>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801b50e:	f1b8 0f01 	cmp.w	r8, #1
 801b512:	f200 8153 	bhi.w	801b7bc <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801b516:	2001      	movs	r0, #1
 801b518:	f7f9 fdb4 	bl	8015084 <MIOS32_BOARD_J15_PortInit>
 801b51c:	2800      	cmp	r0, #0
 801b51e:	dbcd      	blt.n	801b4bc <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 801b520:	f7ff fca6 	bl	801ae70 <APP_LCD_ExtPort_Init>

      // Reset command
      APP_LCD_Cmd(0xe2);
 801b524:	20e2      	movs	r0, #226	; 0xe2
 801b526:	f7ff fe25 	bl	801b174 <APP_LCD_Cmd>

      // "Display On" command
      APP_LCD_Cmd(0xae + 1);
 801b52a:	20af      	movs	r0, #175	; 0xaf
 801b52c:	f7ff fe22 	bl	801b174 <APP_LCD_Cmd>

      // Display start line
      APP_LCD_Cmd(0xc0 + 0);
 801b530:	20c0      	movs	r0, #192	; 0xc0
 801b532:	e141      	b.n	801b7b8 <APP_LCD_Init+0x31c>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 801b534:	f1b8 0f00 	cmp.w	r8, #0
 801b538:	f040 8140 	bne.w	801b7bc <APP_LCD_Init+0x320>
      // DOGM128 works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801b53c:	4640      	mov	r0, r8
 801b53e:	f7f9 fda1 	bl	8015084 <MIOS32_BOARD_J15_PortInit>
 801b542:	2800      	cmp	r0, #0
 801b544:	dbba      	blt.n	801b4bc <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15

      display_available |= 0xff;
 801b546:	e9d6 4500 	ldrd	r4, r5, [r6]
 801b54a:	2700      	movs	r7, #0
 801b54c:	26ff      	movs	r6, #255	; 0xff
 801b54e:	4334      	orrs	r4, r6
 801b550:	433d      	orrs	r5, r7
 801b552:	e9c9 4500 	strd	r4, r5, [r9]

      APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 801b556:	f7ff fc97 	bl	801ae88 <APP_LCD_SERGLCD_CS_Init>

      // initialisation sequence based on EA-DOGL/M datasheet
  
      APP_LCD_Cmd(0x40); //2 - Display start line = 0
 801b55a:	2040      	movs	r0, #64	; 0x40
 801b55c:	f7ff fe0a 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA1); //8 - ADC Normal mode = 0 
 801b560:	20a1      	movs	r0, #161	; 0xa1
 801b562:	f7ff fe07 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xC0); //15 - COMS normal = 1/65  duty
 801b566:	20c0      	movs	r0, #192	; 0xc0
 801b568:	f7ff fe04 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA6); //9 - Display  = normal  
 801b56c:	20a6      	movs	r0, #166	; 0xa6
 801b56e:	f7ff fe01 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA2); //11 - 1/65 duty 1/9 bias for 65x132 display
 801b572:	20a2      	movs	r0, #162	; 0xa2
 801b574:	f7ff fdfe 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x2F); //16  - Power control set = B.,R,F all ON
 801b578:	202f      	movs	r0, #47	; 0x2f
 801b57a:	f7ff fdfb 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xF8); //20-1 - select Booster ratio set
 801b57e:	20f8      	movs	r0, #248	; 0xf8
 801b580:	f7ff fdf8 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //20-2 - Booster ratio register (must be preceeded by 20-1)
 801b584:	4640      	mov	r0, r8
 801b586:	f7ff fdf5 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x27); //17 - VO volt reg set 
 801b58a:	2027      	movs	r0, #39	; 0x27
 801b58c:	f7ff fdf2 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x81); //18-1 - Elect vol control - contrast
 801b590:	2081      	movs	r0, #129	; 0x81
 801b592:	f7ff fdef 	bl	801b174 <APP_LCD_Cmd>
#if 0
      APP_LCD_Cmd(0x16); //18-2 - Contrast level dec 22	
#else
      APP_LCD_Cmd(0x10); //18-2 - Contrast level dec 16
 801b596:	2010      	movs	r0, #16
 801b598:	f7ff fdec 	bl	801b174 <APP_LCD_Cmd>
#endif
      APP_LCD_Cmd(0xAC); //19-1 - Static Indicator - set off
 801b59c:	20ac      	movs	r0, #172	; 0xac
 801b59e:	f7ff fde9 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //19-2 - No Indicator
 801b5a2:	4640      	mov	r0, r8
 801b5a4:	f7ff fde6 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xAF); //20 - Display ON
 801b5a8:	20af      	movs	r0, #175	; 0xaf
 801b5aa:	e105      	b.n	801b7b8 <APP_LCD_Init+0x31c>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    u8 rotated = mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED;

    // all OLEDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 801b5ac:	f1b8 0f00 	cmp.w	r8, #0
 801b5b0:	f040 8104 	bne.w	801b7bc <APP_LCD_Init+0x320>
      // ExtPort.3: RST#
      // J5A.A0/J10B.D12: CS of first display
      // J5A.A1/J10B.D13: CS of second display
      // J5A.A2/J10B.D14: CS of third display
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
 801b5b4:	4948      	ldr	r1, [pc, #288]	; (801b6d8 <APP_LCD_Init+0x23c>)
 801b5b6:	7808      	ldrb	r0, [r1, #0]
 801b5b8:	b330      	cbz	r0, 801b608 <APP_LCD_Init+0x16c>
	APP_LCD_ExtPort_Init();
 801b5ba:	f7ff fc59 	bl	801ae70 <APP_LCD_ExtPort_Init>
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<4; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 801b5be:	2105      	movs	r1, #5
 801b5c0:	200c      	movs	r0, #12
 801b5c2:	f7f9 fd19 	bl	8014ff8 <MIOS32_BOARD_J10_PinInit>
 801b5c6:	2105      	movs	r1, #5
 801b5c8:	200d      	movs	r0, #13
 801b5ca:	f7f9 fd15 	bl	8014ff8 <MIOS32_BOARD_J10_PinInit>
 801b5ce:	2105      	movs	r1, #5
 801b5d0:	200e      	movs	r0, #14
 801b5d2:	f7f9 fd11 	bl	8014ff8 <MIOS32_BOARD_J10_PinInit>
 801b5d6:	2105      	movs	r1, #5
 801b5d8:	200f      	movs	r0, #15
 801b5da:	f7f9 fd0d 	bl	8014ff8 <MIOS32_BOARD_J10_PinInit>
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
 801b5de:	4641      	mov	r1, r8
 801b5e0:	2003      	movs	r0, #3
 801b5e2:	f7ff fc07 	bl	801adf4 <APP_LCD_ExtPort_PinSet>
	MIOS32_DELAY_Wait_uS(100);
	APP_LCD_ExtPort_PinSet(3, 1);

	display_available |= 0x0f;
 801b5e6:	4d3a      	ldr	r5, [pc, #232]	; (801b6d0 <APP_LCD_Init+0x234>)
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
	MIOS32_DELAY_Wait_uS(100);
 801b5e8:	2064      	movs	r0, #100	; 0x64
 801b5ea:	f7f9 fed3 	bl	8015394 <MIOS32_DELAY_Wait_uS>
	APP_LCD_ExtPort_PinSet(3, 1);
 801b5ee:	2101      	movs	r1, #1
 801b5f0:	2003      	movs	r0, #3
 801b5f2:	f7ff fbff 	bl	801adf4 <APP_LCD_ExtPort_PinSet>

	display_available |= 0x0f;
 801b5f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b5fa:	200f      	movs	r0, #15
 801b5fc:	2100      	movs	r1, #0
 801b5fe:	4302      	orrs	r2, r0
 801b600:	430b      	orrs	r3, r1
 801b602:	e9c5 2300 	strd	r2, r3, [r5]
 801b606:	e018      	b.n	801b63a <APP_LCD_Init+0x19e>
      } else {
	// the OLED works at 3.3V, level shifting (and open drain mode) not required
	if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801b608:	4640      	mov	r0, r8
 801b60a:	f7f9 fd3b 	bl	8015084 <MIOS32_BOARD_J15_PortInit>
 801b60e:	2800      	cmp	r0, #0
 801b610:	f6ff af54 	blt.w	801b4bc <APP_LCD_Init+0x20>
	  return -2; // failed to initialize J15

	display_available |= 0xff;
 801b614:	4d2e      	ldr	r5, [pc, #184]	; (801b6d0 <APP_LCD_Init+0x234>)
 801b616:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b61a:	20ff      	movs	r0, #255	; 0xff
 801b61c:	2100      	movs	r1, #0
 801b61e:	4302      	orrs	r2, r0
 801b620:	430b      	orrs	r3, r1
 801b622:	e9c5 2300 	strd	r2, r3, [r5]

	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 801b626:	f7ff fc2f 	bl	801ae88 <APP_LCD_SERGLCD_CS_Init>
 801b62a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
	    MIOS32_DELAY_Wait_uS(1000);
 801b62e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b632:	f7f9 feaf 	bl	8015394 <MIOS32_DELAY_Wait_uS>
	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
 801b636:	3d01      	subs	r5, #1
 801b638:	d1f9      	bne.n	801b62e <APP_LCD_Init+0x192>
	}
      }


      // initialize LCDs
      APP_LCD_Cmd(0xa8); // Set MUX Ratio
 801b63a:	20a8      	movs	r0, #168	; 0xa8
 801b63c:	f7ff fd9a 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x3f);
 801b640:	203f      	movs	r0, #63	; 0x3f
 801b642:	f7ff fd97 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd3); // Set Display Offset
 801b646:	20d3      	movs	r0, #211	; 0xd3
 801b648:	f7ff fd94 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00);
 801b64c:	2000      	movs	r0, #0
 801b64e:	f7ff fd91 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x40); // Set Display Start Line
 801b652:	2040      	movs	r0, #64	; 0x40
 801b654:	f7ff fd8e 	bl	801b174 <APP_LCD_Cmd>

      if( !rotated ) {
 801b658:	2c85      	cmp	r4, #133	; 0x85
 801b65a:	d004      	beq.n	801b666 <APP_LCD_Init+0x1ca>
	APP_LCD_Cmd(0xa0); // Set Segment re-map
 801b65c:	20a0      	movs	r0, #160	; 0xa0
 801b65e:	f7ff fd89 	bl	801b174 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc0); // Set COM Output Scan Direction
 801b662:	20c0      	movs	r0, #192	; 0xc0
 801b664:	e003      	b.n	801b66e <APP_LCD_Init+0x1d2>
      } else {
	APP_LCD_Cmd(0xa1); // Set Segment re-map: rotated
 801b666:	20a1      	movs	r0, #161	; 0xa1
 801b668:	f7ff fd84 	bl	801b174 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc8); // Set COM Output Scan Direction: rotated
 801b66c:	20c8      	movs	r0, #200	; 0xc8
 801b66e:	f7ff fd81 	bl	801b174 <APP_LCD_Cmd>
      }

      APP_LCD_Cmd(0xda); // Set COM Pins hardware configuration
 801b672:	20da      	movs	r0, #218	; 0xda
 801b674:	f7ff fd7e 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x12);
 801b678:	2012      	movs	r0, #18
 801b67a:	f7ff fd7b 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x81); // Set Contrast Control
 801b67e:	2081      	movs	r0, #129	; 0x81
 801b680:	f7ff fd78 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7f); // middle
 801b684:	207f      	movs	r0, #127	; 0x7f
 801b686:	f7ff fd75 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa4); // Disable Entiere Display On
 801b68a:	20a4      	movs	r0, #164	; 0xa4
 801b68c:	f7ff fd72 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa6); // Set Normal Display
 801b690:	20a6      	movs	r0, #166	; 0xa6
 801b692:	f7ff fd6f 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd5); // Set OSC Frequency
 801b696:	20d5      	movs	r0, #213	; 0xd5
 801b698:	f7ff fd6c 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x80);
 801b69c:	2080      	movs	r0, #128	; 0x80
 801b69e:	f7ff fd69 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x8d); // Enable charge pump regulator
 801b6a2:	208d      	movs	r0, #141	; 0x8d
 801b6a4:	f7ff fd66 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x14);
 801b6a8:	2014      	movs	r0, #20
 801b6aa:	f7ff fd63 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xaf); // Display On
 801b6ae:	20af      	movs	r0, #175	; 0xaf
 801b6b0:	f7ff fd60 	bl	801b174 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x20); // Enable Page mode
 801b6b4:	2020      	movs	r0, #32
 801b6b6:	f7ff fd5d 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x02);
 801b6ba:	2002      	movs	r0, #2
 801b6bc:	e07c      	b.n	801b7b8 <APP_LCD_Init+0x31c>
    if( MIOS32_BOARD_J15_PortInit(0) < 0 )
      return -2; // failed to initialize J15
#else
    // 0: J15 pins are configured in Push Pull Mode (3.3V)
    // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ||
 801b6be:	3c01      	subs	r4, #1
 801b6c0:	2c01      	cmp	r4, #1
 801b6c2:	d80b      	bhi.n	801b6dc <APP_LCD_Init+0x240>
	mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_PP ) {
      // DOG CLCD works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801b6c4:	2000      	movs	r0, #0
 801b6c6:	e00a      	b.n	801b6de <APP_LCD_Init+0x242>
 801b6c8:	2000118d 	.word	0x2000118d
 801b6cc:	20000bf8 	.word	0x20000bf8
 801b6d0:	20001190 	.word	0x20001190
 801b6d4:	20003ef2 	.word	0x20003ef2
 801b6d8:	20001198 	.word	0x20001198
	return -2; // failed to initialize J15
    } else {
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 801b6dc:	2001      	movs	r0, #1
 801b6de:	f7f9 fcd1 	bl	8015084 <MIOS32_BOARD_J15_PortInit>
 801b6e2:	2800      	cmp	r0, #0
 801b6e4:	f6ff aeea 	blt.w	801b4bc <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
    }
#endif

    // init extension port?
    int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 801b6e8:	4b3e      	ldr	r3, [pc, #248]	; (801b7e4 <APP_LCD_Init+0x348>)
 801b6ea:	785a      	ldrb	r2, [r3, #1]
 801b6ec:	7898      	ldrb	r0, [r3, #2]
 801b6ee:	fb12 f100 	smulbb	r1, r2, r0
    if( num_lcds >= 2 ) {
 801b6f2:	2901      	cmp	r1, #1
 801b6f4:	dd01      	ble.n	801b6fa <APP_LCD_Init+0x25e>
      APP_LCD_ExtPort_Init();
 801b6f6:	f7ff fbbb 	bl	801ae70 <APP_LCD_ExtPort_Init>
    }

    // initialize LCD
    MIOS32_BOARD_J15_DataSet(0x38);
 801b6fa:	2038      	movs	r0, #56	; 0x38
 801b6fc:	f7f9 fd22 	bl	8015144 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801b700:	2000      	movs	r0, #0
 801b702:	f7f9 fd75 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>
    MIOS32_BOARD_J15_RW_Set(0);
 801b706:	2000      	movs	r0, #0
 801b708:	f7f9 fd7e 	bl	8015208 <MIOS32_BOARD_J15_RW_Set>
    APP_LCD_E_Set(1);
 801b70c:	2001      	movs	r0, #1
 801b70e:	f7ff fc13 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b712:	2000      	movs	r0, #0
 801b714:	f7ff fc10 	bl	801af38 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(5000); // according to the hitachi datasheet, this command takes 37 uS - take 1 mS to be at the secure side
 801b718:	f241 3088 	movw	r0, #5000	; 0x1388
 801b71c:	f7f9 fe3a 	bl	8015394 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 801b720:	2001      	movs	r0, #1
 801b722:	f7ff fc09 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b726:	2000      	movs	r0, #0
 801b728:	f7ff fc06 	bl	801af38 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500); // and now only 500 uS anymore
 801b72c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b730:	f7f9 fe30 	bl	8015394 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 801b734:	2001      	movs	r0, #1
 801b736:	f7ff fbff 	bl	801af38 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801b73a:	2000      	movs	r0, #0
 801b73c:	f7ff fbfc 	bl	801af38 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500);
 801b740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b744:	f7f9 fe26 	bl	8015394 <MIOS32_DELAY_Wait_uS>

    APP_LCD_Cmd(0x08); // Display Off
 801b748:	2008      	movs	r0, #8
 801b74a:	f7ff fd13 	bl	801b174 <APP_LCD_Cmd>

    // display still available?
    // if not, we can already break here!
    if( !(display_available & (1ULL << mios32_lcd_device)) )
 801b74e:	4b26      	ldr	r3, [pc, #152]	; (801b7e8 <APP_LCD_Init+0x34c>)
 801b750:	4a26      	ldr	r2, [pc, #152]	; (801b7ec <APP_LCD_Init+0x350>)
 801b752:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b756:	7812      	ldrb	r2, [r2, #0]
 801b758:	f002 fb36 	bl	801ddc8 <__aeabi_llsr>
 801b75c:	2201      	movs	r2, #1
 801b75e:	2300      	movs	r3, #0
 801b760:	4010      	ands	r0, r2
 801b762:	4019      	ands	r1, r3
 801b764:	ea50 0301 	orrs.w	r3, r0, r1
 801b768:	f43f ae9d 	beq.w	801b4a6 <APP_LCD_Init+0xa>
      return -1; // display not available

    APP_LCD_Cmd(0x0c); // Display On
 801b76c:	200c      	movs	r0, #12
 801b76e:	f7ff fd01 	bl	801b174 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x06); // Entry Mode
 801b772:	2006      	movs	r0, #6
 801b774:	f7ff fcfe 	bl	801b174 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x01); // Clear Display
 801b778:	2001      	movs	r0, #1
 801b77a:	f7ff fcfb 	bl	801b174 <APP_LCD_Cmd>

    // for DOG displays: perform additional display initialisation
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ) {
 801b77e:	4819      	ldr	r0, [pc, #100]	; (801b7e4 <APP_LCD_Init+0x348>)
 801b780:	7801      	ldrb	r1, [r0, #0]
 801b782:	2901      	cmp	r1, #1
 801b784:	d114      	bne.n	801b7b0 <APP_LCD_Init+0x314>
      APP_LCD_Cmd(0x39); // 8bit interface, switch to instruction table 1
 801b786:	2039      	movs	r0, #57	; 0x39
 801b788:	f7ff fcf4 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x1d); // BS: 1/4, 3 line LCD
 801b78c:	201d      	movs	r0, #29
 801b78e:	f7ff fcf1 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x50); // Booster off, set contrast C5/C4
 801b792:	2050      	movs	r0, #80	; 0x50
 801b794:	f7ff fcee 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x6c); // set Voltage follower and amplifier
 801b798:	206c      	movs	r0, #108	; 0x6c
 801b79a:	f7ff fceb 	bl	801b174 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
 801b79e:	207c      	movs	r0, #124	; 0x7c
 801b7a0:	f7ff fce8 	bl	801b174 <APP_LCD_Cmd>
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 801b7a4:	4a12      	ldr	r2, [pc, #72]	; (801b7f0 <APP_LCD_Init+0x354>)
 801b7a6:	6813      	ldr	r3, [r2, #0]
      MIOS32_LCD_CursorMapSet(cursor_map);
 801b7a8:	a801      	add	r0, sp, #4
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 801b7aa:	9301      	str	r3, [sp, #4]
      MIOS32_LCD_CursorMapSet(cursor_map);
 801b7ac:	f7f7 f96e 	bl	8012a8c <MIOS32_LCD_CursorMapSet>
    }

    APP_LCD_Cmd(0x38); // experience from PIC based MIOS: without these lines
 801b7b0:	2038      	movs	r0, #56	; 0x38
 801b7b2:	f7ff fcdf 	bl	801b174 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x0c); // the LCD won't work correctly after a second APP_LCD_Init
 801b7b6:	200c      	movs	r0, #12
 801b7b8:	f7ff fcdc 	bl	801b174 <APP_LCD_Cmd>
  }
  }

  return (display_available & (1ULL << mios32_lcd_device)) ? 0 : -1; // return -1 if display not available
 801b7bc:	480a      	ldr	r0, [pc, #40]	; (801b7e8 <APP_LCD_Init+0x34c>)
 801b7be:	4a0b      	ldr	r2, [pc, #44]	; (801b7ec <APP_LCD_Init+0x350>)
 801b7c0:	e9d0 0100 	ldrd	r0, r1, [r0]
 801b7c4:	7812      	ldrb	r2, [r2, #0]
 801b7c6:	f002 faff 	bl	801ddc8 <__aeabi_llsr>
 801b7ca:	2201      	movs	r2, #1
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	4010      	ands	r0, r2
 801b7d0:	4019      	ands	r1, r3
 801b7d2:	ea50 0201 	orrs.w	r2, r0, r1
 801b7d6:	bf0c      	ite	eq
 801b7d8:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 801b7dc:	2000      	movne	r0, #0
}
 801b7de:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 801b7e2:	bf00      	nop
 801b7e4:	20003ef2 	.word	0x20003ef2
 801b7e8:	20001190 	.word	0x20001190
 801b7ec:	20000bf8 	.word	0x20000bf8
 801b7f0:	0801f9a2 	.word	0x0801f9a2

0801b7f4 <APP_LCD_Clear>:
// Clear Screen
// IN: -
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
 801b7f4:	b570      	push	{r4, r5, r6, lr}
  if( lcd_testmode )
 801b7f6:	4b4d      	ldr	r3, [pc, #308]	; (801b92c <APP_LCD_Clear+0x138>)
 801b7f8:	781d      	ldrb	r5, [r3, #0]
 801b7fa:	2d00      	cmp	r5, #0
 801b7fc:	f040 8093 	bne.w	801b926 <APP_LCD_Clear+0x132>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 801b800:	484b      	ldr	r0, [pc, #300]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b802:	7801      	ldrb	r1, [r0, #0]
 801b804:	317f      	adds	r1, #127	; 0x7f
 801b806:	b2ca      	uxtb	r2, r1
 801b808:	2a05      	cmp	r2, #5
 801b80a:	f200 8087 	bhi.w	801b91c <APP_LCD_Clear+0x128>
 801b80e:	b24c      	sxtb	r4, r1
 801b810:	2301      	movs	r3, #1
 801b812:	fa03 f004 	lsl.w	r0, r3, r4
 801b816:	f010 0423 	ands.w	r4, r0, #35	; 0x23
 801b81a:	d109      	bne.n	801b830 <APP_LCD_Clear+0x3c>
 801b81c:	f010 0518 	ands.w	r5, r0, #24
 801b820:	d143      	bne.n	801b8aa <APP_LCD_Clear+0xb6>
 801b822:	0742      	lsls	r2, r0, #29
 801b824:	d57a      	bpl.n	801b91c <APP_LCD_Clear+0x128>
  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801b826:	4843      	ldr	r0, [pc, #268]	; (801b934 <APP_LCD_Clear+0x140>)
 801b828:	f7f7 f93c 	bl	8012aa4 <MIOS32_LCD_FontInit>

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b82c:	462c      	mov	r4, r5
 801b82e:	e021      	b.n	801b874 <APP_LCD_Clear+0x80>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801b830:	4840      	ldr	r0, [pc, #256]	; (801b934 <APP_LCD_Clear+0x140>)
 801b832:	f7f7 f937 	bl	8012aa4 <MIOS32_LCD_FontInit>

  switch( mios32_lcd_parameters.lcd_type ) {
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
 801b836:	462c      	mov	r4, r5
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b838:	493d      	ldr	r1, [pc, #244]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b83a:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801b83c:	2000      	movs	r0, #0
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b83e:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
 801b842:	da10      	bge.n	801b866 <APP_LCD_Clear+0x72>
      error |= MIOS32_LCD_CursorSet(0, y);
 801b844:	b2a9      	uxth	r1, r5
 801b846:	f7f7 f8f5 	bl	8012a34 <MIOS32_LCD_CursorSet>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b84a:	2600      	movs	r6, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
 801b84c:	4304      	orrs	r4, r0
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b84e:	4b38      	ldr	r3, [pc, #224]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b850:	8898      	ldrh	r0, [r3, #4]
 801b852:	4286      	cmp	r6, r0
 801b854:	da05      	bge.n	801b862 <APP_LCD_Clear+0x6e>
	error |= APP_LCD_Data(0x00);
 801b856:	2000      	movs	r0, #0
 801b858:	f7ff fd26 	bl	801b2a8 <APP_LCD_Data>
    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b85c:	3601      	adds	r6, #1
	error |= APP_LCD_Data(0x00);
 801b85e:	4304      	orrs	r4, r0
 801b860:	e7f5      	b.n	801b84e <APP_LCD_Clear+0x5a>
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b862:	3501      	adds	r5, #1
 801b864:	e7e8      	b.n	801b838 <APP_LCD_Clear+0x44>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
	error |= APP_LCD_Data(0x00);
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 801b866:	4601      	mov	r1, r0
 801b868:	f7f7 f8e4 	bl	8012a34 <MIOS32_LCD_CursorSet>
 801b86c:	4320      	orrs	r0, r4

    return error;
 801b86e:	bd70      	pop	{r4, r5, r6, pc}

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b870:	3401      	adds	r4, #1
 801b872:	b2e4      	uxtb	r4, r4
 801b874:	492e      	ldr	r1, [pc, #184]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b876:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801b878:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801b87a:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801b87e:	d248      	bcs.n	801b912 <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 801b880:	4621      	mov	r1, r4
 801b882:	f7f7 f8d7 	bl	8012a34 <MIOS32_LCD_CursorSet>
 801b886:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 801b888:	2001      	movs	r0, #1
 801b88a:	f7ff fbd7 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801b88e:	2001      	movs	r0, #1
 801b890:	f7f9 fcae 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b894:	2600      	movs	r6, #0
 801b896:	4b26      	ldr	r3, [pc, #152]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b898:	8898      	ldrh	r0, [r3, #4]
 801b89a:	42b0      	cmp	r0, r6
 801b89c:	d9e8      	bls.n	801b870 <APP_LCD_Clear+0x7c>
	MIOS32_BOARD_J15_SerDataShift(0x00);
 801b89e:	2000      	movs	r0, #0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b8a0:	3601      	adds	r6, #1
	MIOS32_BOARD_J15_SerDataShift(0x00);
 801b8a2:	f7f9 fc71 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b8a6:	b2f6      	uxtb	r6, r6
 801b8a8:	e7f5      	b.n	801b896 <APP_LCD_Clear+0xa2>
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801b8aa:	4822      	ldr	r0, [pc, #136]	; (801b934 <APP_LCD_Clear+0x140>)
 801b8ac:	f7f7 f8fa 	bl	8012aa4 <MIOS32_LCD_FontInit>
    return error;
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
 801b8b0:	4625      	mov	r5, r4

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801b8b2:	491f      	ldr	r1, [pc, #124]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b8b4:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801b8b6:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801b8b8:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801b8bc:	d229      	bcs.n	801b912 <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 801b8be:	4621      	mov	r1, r4
 801b8c0:	f7f7 f8b8 	bl	8012a34 <MIOS32_LCD_CursorSet>
 801b8c4:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 801b8c6:	2001      	movs	r0, #1
 801b8c8:	f7ff fbb8 	bl	801b03c <APP_LCD_SERGLCD_CS_Set.constprop.2>

      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
 801b8cc:	4b1a      	ldr	r3, [pc, #104]	; (801b938 <APP_LCD_Clear+0x144>)
 801b8ce:	781e      	ldrb	r6, [r3, #0]
 801b8d0:	b196      	cbz	r6, 801b8f8 <APP_LCD_Clear+0x104>
	APP_LCD_ExtPort_PinSet(2, 1); // DC
 801b8d2:	2002      	movs	r0, #2
 801b8d4:	2101      	movs	r1, #1
 801b8d6:	f7ff fa8d 	bl	801adf4 <APP_LCD_ExtPort_PinSet>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b8da:	2600      	movs	r6, #0
 801b8dc:	4a14      	ldr	r2, [pc, #80]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b8de:	8893      	ldrh	r3, [r2, #4]
 801b8e0:	42b3      	cmp	r3, r6
 801b8e2:	d906      	bls.n	801b8f2 <APP_LCD_Clear+0xfe>
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
 801b8e4:	2000      	movs	r0, #0
 801b8e6:	4601      	mov	r1, r0
 801b8e8:	f7ff fb04 	bl	801aef4 <APP_LCD_ExtPort_SerDataShift>
      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_PinSet(2, 1); // DC

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b8ec:	1c70      	adds	r0, r6, #1
 801b8ee:	b2c6      	uxtb	r6, r0
 801b8f0:	e7f4      	b.n	801b8dc <APP_LCD_Clear+0xe8>

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801b8f2:	3401      	adds	r4, #1
 801b8f4:	b2e4      	uxtb	r4, r4
 801b8f6:	e7dc      	b.n	801b8b2 <APP_LCD_Clear+0xbe>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801b8f8:	2001      	movs	r0, #1
 801b8fa:	f7f9 fc79 	bl	80151f0 <MIOS32_BOARD_J15_RS_Set>

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b8fe:	480c      	ldr	r0, [pc, #48]	; (801b930 <APP_LCD_Clear+0x13c>)
 801b900:	8881      	ldrh	r1, [r0, #4]
 801b902:	42b1      	cmp	r1, r6
 801b904:	d9f5      	bls.n	801b8f2 <APP_LCD_Clear+0xfe>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 801b906:	2000      	movs	r0, #0
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b908:	3601      	adds	r6, #1
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 801b90a:	f7f9 fc3d 	bl	8015188 <MIOS32_BOARD_J15_SerDataShift>
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 801b90e:	b2f6      	uxtb	r6, r6
 801b910:	e7f5      	b.n	801b8fe <APP_LCD_Clear+0x10a>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
      }
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 801b912:	4601      	mov	r1, r0
 801b914:	f7f7 f88e 	bl	8012a34 <MIOS32_LCD_CursorSet>
 801b918:	4328      	orrs	r0, r5

    return error;
 801b91a:	bd70      	pop	{r4, r5, r6, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 801b91c:	2001      	movs	r0, #1
  }

  return -3; // not supported
}
 801b91e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 801b922:	f7ff bc27 	b.w	801b174 <APP_LCD_Cmd>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801b926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // -> send clear command
    return APP_LCD_Cmd(0x01);
  }

  return -3; // not supported
}
 801b92a:	bd70      	pop	{r4, r5, r6, pc}
 801b92c:	2000118d 	.word	0x2000118d
 801b930:	20003ef2 	.word	0x20003ef2
 801b934:	0801f9a6 	.word	0x0801f9a6
 801b938:	20001198 	.word	0x20001198

0801b93c <APP_LCD_GCursorSet>:
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( lcd_testmode )
 801b93e:	4b32      	ldr	r3, [pc, #200]	; (801ba08 <APP_LCD_GCursorSet+0xcc>)
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801b940:	4604      	mov	r4, r0
  if( lcd_testmode )
 801b942:	7818      	ldrb	r0, [r3, #0]
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 801b944:	460d      	mov	r5, r1
  if( lcd_testmode )
 801b946:	2800      	cmp	r0, #0
 801b948:	d158      	bne.n	801b9fc <APP_LCD_GCursorSet+0xc0>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 801b94a:	4e30      	ldr	r6, [pc, #192]	; (801ba0c <APP_LCD_GCursorSet+0xd0>)
 801b94c:	7831      	ldrb	r1, [r6, #0]
 801b94e:	3981      	subs	r1, #129	; 0x81
 801b950:	2905      	cmp	r1, #5
 801b952:	d856      	bhi.n	801ba02 <APP_LCD_GCursorSet+0xc6>
 801b954:	e8df f001 	tbb	[pc, r1]
 801b958:	3d1b0303 	.word	0x3d1b0303
 801b95c:	0d3d      	.short	0x0d3d
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x40 | (x % 64));
 801b95e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 801b962:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 801b966:	f7ff fc05 	bl	801b174 <APP_LCD_Cmd>
 801b96a:	4604      	mov	r4, r0

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x7));
 801b96c:	f3c5 00c2 	ubfx	r0, r5, #3, #3
 801b970:	e00a      	b.n	801b988 <APP_LCD_GCursorSet+0x4c>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;

    // set X position
#if SED1520_POLLIN_WINTEK_WD_G1203T
    error |= APP_LCD_Cmd(0x00 | (x % 61));
 801b972:	233d      	movs	r3, #61	; 0x3d
 801b974:	fbb4 f2f3 	udiv	r2, r4, r3
 801b978:	fb03 4412 	mls	r4, r3, r2, r4
 801b97c:	b2e0      	uxtb	r0, r4
 801b97e:	f7ff fbf9 	bl	801b174 <APP_LCD_Cmd>
 801b982:	4604      	mov	r4, r0
#else
    error |= APP_LCD_Cmd(0x00 | (x % 64));
#endif

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x3));
 801b984:	f3c5 00c1 	ubfx	r0, r5, #3, #2
 801b988:	f040 00b8 	orr.w	r0, r0, #184	; 0xb8
 801b98c:	e032      	b.n	801b9f4 <APP_LCD_GCursorSet+0xb8>

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 801b98e:	88b7      	ldrh	r7, [r6, #4]
 801b990:	fbb4 f2f7 	udiv	r2, r4, r7
 801b994:	fb07 4012 	mls	r0, r7, r2, r4
 801b998:	f3c0 1103 	ubfx	r1, r0, #4, #4
 801b99c:	f041 0010 	orr.w	r0, r1, #16
 801b9a0:	f7ff fbe8 	bl	801b174 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 801b9a4:	88b3      	ldrh	r3, [r6, #4]
 801b9a6:	fbb4 f2f3 	udiv	r2, r4, r3
 801b9aa:	fb03 4412 	mls	r4, r3, r2, r4

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 801b9ae:	4607      	mov	r7, r0
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 801b9b0:	f004 000f 	and.w	r0, r4, #15
 801b9b4:	f7ff fbde 	bl	801b174 <APP_LCD_Cmd>
 801b9b8:	ea40 0407 	orr.w	r4, r0, r7

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) % (mios32_lcd_parameters.height/8)));
 801b9bc:	88f0      	ldrh	r0, [r6, #6]
 801b9be:	08ed      	lsrs	r5, r5, #3
 801b9c0:	08c1      	lsrs	r1, r0, #3
 801b9c2:	fb95 f3f1 	sdiv	r3, r5, r1
 801b9c6:	fb01 5513 	mls	r5, r1, r3, r5
 801b9ca:	f065 024f 	orn	r2, r5, #79	; 0x4f
 801b9ce:	b2d0      	uxtb	r0, r2
 801b9d0:	e010      	b.n	801b9f4 <APP_LCD_GCursorSet+0xb8>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 801b9d2:	f004 000f 	and.w	r0, r4, #15
 801b9d6:	f7ff fbcd 	bl	801b174 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801b9da:	f3c4 1103 	ubfx	r1, r4, #4, #4
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 801b9de:	4606      	mov	r6, r0
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801b9e0:	f041 0010 	orr.w	r0, r1, #16
 801b9e4:	f7ff fbc6 	bl	801b174 <APP_LCD_Cmd>

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 801b9e8:	f3c5 03c2 	ubfx	r3, r5, #3, #3
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 801b9ec:	ea40 0406 	orr.w	r4, r0, r6

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 801b9f0:	f043 00b0 	orr.w	r0, r3, #176	; 0xb0
 801b9f4:	f7ff fbbe 	bl	801b174 <APP_LCD_Cmd>
 801b9f8:	4320      	orrs	r0, r4

    return error;
 801b9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801b9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    return error;
  } break;
  }

  return -3; // not supported
 801ba02:	f06f 0002 	mvn.w	r0, #2
}
 801ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba08:	2000118d 	.word	0x2000118d
 801ba0c:	20003ef2 	.word	0x20003ef2

0801ba10 <APP_LCD_CursorSet>:
// IN: <column> and <line>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_CursorSet(u16 column, u16 line)
{
  if( lcd_testmode )
 801ba10:	4b0d      	ldr	r3, [pc, #52]	; (801ba48 <APP_LCD_CursorSet+0x38>)
 801ba12:	781a      	ldrb	r2, [r3, #0]
 801ba14:	2a00      	cmp	r2, #0
 801ba16:	d114      	bne.n	801ba42 <APP_LCD_CursorSet+0x32>
    return -1; // direct access disabled in testmode

  if( mios32_lcd_parameters.lcd_type >= 0x80 ) { // GLCD
 801ba18:	4b0c      	ldr	r3, [pc, #48]	; (801ba4c <APP_LCD_CursorSet+0x3c>)
 801ba1a:	f993 2000 	ldrsb.w	r2, [r3]
 801ba1e:	2a00      	cmp	r2, #0
 801ba20:	da05      	bge.n	801ba2e <APP_LCD_CursorSet+0x1e>
    // mios32_lcd_x/y set by MIOS32_LCD_CursorSet() function
    return APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801ba22:	4b0b      	ldr	r3, [pc, #44]	; (801ba50 <APP_LCD_CursorSet+0x40>)
 801ba24:	490b      	ldr	r1, [pc, #44]	; (801ba54 <APP_LCD_CursorSet+0x44>)
 801ba26:	8818      	ldrh	r0, [r3, #0]
 801ba28:	8809      	ldrh	r1, [r1, #0]
 801ba2a:	f7ff bf87 	b.w	801b93c <APP_LCD_GCursorSet>
  } else { // CLCD
    // exit with error if line is not in allowed range
    if( line >= MIOS32_LCD_MAX_MAP_LINES )
 801ba2e:	2903      	cmp	r1, #3
 801ba30:	d807      	bhi.n	801ba42 <APP_LCD_CursorSet+0x32>
      return -1;

    // -> set cursor address
    return APP_LCD_Cmd(0x80 | (mios32_lcd_cursor_map[line] + column));
 801ba32:	4b09      	ldr	r3, [pc, #36]	; (801ba58 <APP_LCD_CursorSet+0x48>)
 801ba34:	5c59      	ldrb	r1, [r3, r1]
 801ba36:	1808      	adds	r0, r1, r0
 801ba38:	f060 027f 	orn	r2, r0, #127	; 0x7f
 801ba3c:	b2d0      	uxtb	r0, r2
 801ba3e:	f7ff bb99 	b.w	801b174 <APP_LCD_Cmd>
  }

  return -3; // not supported
}
 801ba42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba46:	4770      	bx	lr
 801ba48:	2000118d 	.word	0x2000118d
 801ba4c:	20003ef2 	.word	0x20003ef2
 801ba50:	20003f04 	.word	0x20003f04
 801ba54:	20003ef0 	.word	0x20003ef0
 801ba58:	20003efe 	.word	0x20003efe

0801ba5c <APP_LCD_BColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BColourSet(u32 rgb)
{
  return -3; // not supported
}
 801ba5c:	f06f 0002 	mvn.w	r0, #2
 801ba60:	4770      	bx	lr

0801ba62 <APP_LCD_FColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_FColourSet(u32 rgb)
{
  return -3; // not supported
}
 801ba62:	f06f 0002 	mvn.w	r0, #2
 801ba66:	4770      	bx	lr

0801ba68 <APP_LCD_BitmapPrint>:
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 801ba68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba6c:	b085      	sub	sp, #20
 801ba6e:	ab04      	add	r3, sp, #16
 801ba70:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if( lcd_testmode )
 801ba74:	4823      	ldr	r0, [pc, #140]	; (801bb04 <APP_LCD_BitmapPrint+0x9c>)
 801ba76:	7804      	ldrb	r4, [r0, #0]
 801ba78:	b114      	cbz	r4, 801ba80 <APP_LCD_BitmapPrint+0x18>
    return -1; // direct access disabled in testmode
 801ba7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba7e:	e03d      	b.n	801bafc <APP_LCD_BitmapPrint+0x94>

  if( !MIOS32_LCD_TypeIsGLCD() )
 801ba80:	f7f6 ffca 	bl	8012a18 <MIOS32_LCD_TypeIsGLCD>
 801ba84:	2800      	cmp	r0, #0
 801ba86:	d0f8      	beq.n	801ba7a <APP_LCD_BitmapPrint+0x12>
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
 801ba88:	491f      	ldr	r1, [pc, #124]	; (801bb08 <APP_LCD_BitmapPrint+0xa0>)
 801ba8a:	4a20      	ldr	r2, [pc, #128]	; (801bb0c <APP_LCD_BitmapPrint+0xa4>)
 801ba8c:	880f      	ldrh	r7, [r1, #0]
 801ba8e:	8893      	ldrh	r3, [r2, #4]
 801ba90:	42bb      	cmp	r3, r7
 801ba92:	d92f      	bls.n	801baf4 <APP_LCD_BitmapPrint+0x8c>
  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 801ba94:	481e      	ldr	r0, [pc, #120]	; (801bb10 <APP_LCD_BitmapPrint+0xa8>)
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 801ba96:	f8bd 600a 	ldrh.w	r6, [sp, #10]

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 801ba9a:	f8b0 8000 	ldrh.w	r8, [r0]
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 801ba9e:	08f6      	lsrs	r6, r6, #3

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 801baa0:	42b4      	cmp	r4, r6
 801baa2:	da1c      	bge.n	801bade <APP_LCD_BitmapPrint+0x76>

    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;
 801baa4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801baa8:	9d01      	ldr	r5, [sp, #4]
 801baaa:	fb09 5904 	mla	r9, r9, r4, r5

    // set graphical cursor after second line has reached
    if( line > 0 ) {
 801baae:	b14c      	cbz	r4, 801bac4 <APP_LCD_BitmapPrint+0x5c>
      mios32_lcd_x = initial_x;
      mios32_lcd_y += 8;
 801bab0:	4817      	ldr	r0, [pc, #92]	; (801bb10 <APP_LCD_BitmapPrint+0xa8>)
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801bab2:	4b15      	ldr	r3, [pc, #84]	; (801bb08 <APP_LCD_BitmapPrint+0xa0>)
      mios32_lcd_y += 8;
 801bab4:	8801      	ldrh	r1, [r0, #0]
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801bab6:	801f      	strh	r7, [r3, #0]
      mios32_lcd_y += 8;
 801bab8:	3108      	adds	r1, #8
 801baba:	b289      	uxth	r1, r1
 801babc:	8001      	strh	r1, [r0, #0]
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801babe:	4638      	mov	r0, r7
 801bac0:	f7ff ff3c 	bl	801b93c <APP_LCD_GCursorSet>
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 801bac4:	2500      	movs	r5, #0
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801bac6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801baca:	4295      	cmp	r5, r2
 801bacc:	da05      	bge.n	801bada <APP_LCD_BitmapPrint+0x72>
      APP_LCD_Data(*memory_ptr++);
 801bace:	f819 0005 	ldrb.w	r0, [r9, r5]
 801bad2:	f7ff fbe9 	bl	801b2a8 <APP_LCD_Data>
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801bad6:	3501      	adds	r5, #1
 801bad8:	e7f5      	b.n	801bac6 <APP_LCD_BitmapPrint+0x5e>
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 801bada:	3401      	adds	r4, #1
 801badc:	e7e0      	b.n	801baa0 <APP_LCD_BitmapPrint+0x38>
    for(x=0; x<bitmap.width; ++x)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
 801bade:	b166      	cbz	r6, 801bafa <APP_LCD_BitmapPrint+0x92>
    mios32_lcd_y = initial_y;
 801bae0:	490b      	ldr	r1, [pc, #44]	; (801bb10 <APP_LCD_BitmapPrint+0xa8>)
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801bae2:	4a09      	ldr	r2, [pc, #36]	; (801bb08 <APP_LCD_BitmapPrint+0xa0>)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
 801bae4:	f8a1 8000 	strh.w	r8, [r1]
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801bae8:	8810      	ldrh	r0, [r2, #0]
 801baea:	4641      	mov	r1, r8
 801baec:	f7ff ff26 	bl	801b93c <APP_LCD_GCursorSet>
  }

  return 0; // no error
 801baf0:	2000      	movs	r0, #0
 801baf2:	e003      	b.n	801bafc <APP_LCD_BitmapPrint+0x94>
  if( !MIOS32_LCD_TypeIsGLCD() )
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;
 801baf4:	f06f 0001 	mvn.w	r0, #1
 801baf8:	e000      	b.n	801bafc <APP_LCD_BitmapPrint+0x94>
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
  }

  return 0; // no error
 801bafa:	4630      	mov	r0, r6
}
 801bafc:	b005      	add	sp, #20
 801bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb02:	bf00      	nop
 801bb04:	2000118d 	.word	0x2000118d
 801bb08:	20003f04 	.word	0x20003f04
 801bb0c:	20003ef2 	.word	0x20003ef2
 801bb10:	20003ef0 	.word	0x20003ef0

0801bb14 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{
 801bb14:	b510      	push	{r4, lr}
  if( drv == SDCARD ) {
 801bb16:	4604      	mov	r4, r0
 801bb18:	b968      	cbnz	r0, 801bb36 <disk_initialize+0x22>
    // check availability of SD Card
    // we assume that it has been initialized by application
    sdcard_sector_count = 0xffffffff; // TODO
 801bb1a:	4b09      	ldr	r3, [pc, #36]	; (801bb40 <disk_initialize+0x2c>)
 801bb1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if DEBUG_VERBOSE_LEVEL >= 2
    MIOS32_MIDI_SendDebugMessage("[disk_init] size = %u\n", sdcard_sector_count);
#endif

    int status;
    if( (status=MIOS32_SDCARD_CheckAvailable(1)) < 1 ) {
 801bb20:	2001      	movs	r0, #1
)
{
  if( drv == SDCARD ) {
    // check availability of SD Card
    // we assume that it has been initialized by application
    sdcard_sector_count = 0xffffffff; // TODO
 801bb22:	601a      	str	r2, [r3, #0]
#if DEBUG_VERBOSE_LEVEL >= 2
    MIOS32_MIDI_SendDebugMessage("[disk_init] size = %u\n", sdcard_sector_count);
#endif

    int status;
    if( (status=MIOS32_SDCARD_CheckAvailable(1)) < 1 ) {
 801bb24:	f7f8 f964 	bl	8013df0 <MIOS32_SDCARD_CheckAvailable>
 801bb28:	1e01      	subs	r1, r0, #0
 801bb2a:	dc06      	bgt.n	801bb3a <disk_initialize+0x26>
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[disk_initialize] error while checking for SD Card (status %d)\n", status);
 801bb2c:	4805      	ldr	r0, [pc, #20]	; (801bb44 <disk_initialize+0x30>)
 801bb2e:	f7f7 fa49 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif
      return STA_NODISK;
 801bb32:	2002      	movs	r0, #2
 801bb34:	bd10      	pop	{r4, pc}
    }

    return 0;
  }

  return STA_NOINIT;
 801bb36:	2001      	movs	r0, #1
 801bb38:	bd10      	pop	{r4, pc}
      MIOS32_MIDI_SendDebugMessage("[disk_initialize] error while checking for SD Card (status %d)\n", status);
#endif
      return STA_NODISK;
    }

    return 0;
 801bb3a:	4620      	mov	r0, r4
  }

  return STA_NOINIT;
}
 801bb3c:	bd10      	pop	{r4, pc}
 801bb3e:	bf00      	nop
 801bb40:	2000119c 	.word	0x2000119c
 801bb44:	0801fcaa 	.word	0x0801fcaa

0801bb48 <disk_status>:
    // we don't use MIOS32_SDCARD_CheckAvailable() here, since the status is checked very frequently!
    return 0;
  }

  return STA_NOINIT;
}
 801bb48:	3000      	adds	r0, #0
 801bb4a:	bf18      	it	ne
 801bb4c:	2001      	movne	r0, #1
 801bb4e:	4770      	bx	lr

0801bb50 <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 801bb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb54:	460e      	mov	r6, r1
 801bb56:	4617      	mov	r7, r2
 801bb58:	4698      	mov	r8, r3
  if( drv == SDCARD ) {
 801bb5a:	b110      	cbz	r0, 801bb62 <disk_read+0x12>
    }

    return RES_OK;
  }

  return RES_PARERR;
 801bb5c:	2004      	movs	r0, #4
 801bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
  if( drv == SDCARD ) {
 801bb62:	4604      	mov	r4, r0
    int i;

    for(i=0; i<count; ++i) {
 801bb64:	4544      	cmp	r4, r8
 801bb66:	da10      	bge.n	801bb8a <disk_read+0x3a>


/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */

DRESULT disk_read (
 801bb68:	19e5      	adds	r5, r4, r7
    for(i=0; i<count; ++i) {
#if DEBUG_VERBOSE_LEVEL >= 2
      MIOS32_MIDI_SendDebugMessage("[disk_read] sector %d (#%d/%d)\n", sector+i, i+1, count);
#endif

      if( MIOS32_SDCARD_SectorRead(sector + i, buff + i*512) < 0 ) {
 801bb6a:	4628      	mov	r0, r5
 801bb6c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 801bb70:	f7f8 f986 	bl	8013e80 <MIOS32_SDCARD_SectorRead>
 801bb74:	2800      	cmp	r0, #0
 801bb76:	da06      	bge.n	801bb86 <disk_read+0x36>
#if DEBUG_VERBOSE_LEVEL >= 1
	MIOS32_MIDI_SendDebugMessage("[disk_read] error while reading sector %d\n", sector+i);
 801bb78:	4629      	mov	r1, r5
 801bb7a:	4805      	ldr	r0, [pc, #20]	; (801bb90 <disk_read+0x40>)
 801bb7c:	f7f7 fa22 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif
	return RES_ERROR;
 801bb80:	2001      	movs	r0, #1
 801bb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
)
{
  if( drv == SDCARD ) {
    int i;

    for(i=0; i<count; ++i) {
 801bb86:	3401      	adds	r4, #1
 801bb88:	e7ec      	b.n	801bb64 <disk_read+0x14>
	MIOS32_MIDI_SendDebugMessage("[disk_read] sector %d (#%d/%d) finished\n", sector+i, i+1, count);
#endif
      }
    }

    return RES_OK;
 801bb8a:	2000      	movs	r0, #0
  }

  return RES_PARERR;
}
 801bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb90:	0801fcea 	.word	0x0801fcea

0801bb94 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 801bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb98:	460e      	mov	r6, r1
 801bb9a:	4617      	mov	r7, r2
 801bb9c:	4698      	mov	r8, r3
  if( drv == SDCARD ) {
 801bb9e:	b110      	cbz	r0, 801bba6 <disk_write+0x12>
    }

    return RES_OK;
  }

  return RES_PARERR;
 801bba0:	2004      	movs	r0, #4
 801bba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
  if( drv == SDCARD ) {
 801bba6:	4604      	mov	r4, r0
    int i;

    for(i=0; i<count; ++i) {
 801bba8:	4544      	cmp	r4, r8
 801bbaa:	da10      	bge.n	801bbce <disk_write+0x3a>

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */

#if _READONLY == 0
DRESULT disk_write (
 801bbac:	19e5      	adds	r5, r4, r7

    for(i=0; i<count; ++i) {
#if DEBUG_VERBOSE_LEVEL >= 2
      MIOS32_MIDI_SendDebugMessage("[disk_write] sector %d (#%d/%d)\n", sector+i, i+1, count);
#endif
      if( MIOS32_SDCARD_SectorWrite(sector + i, (u8 *)buff + 512*i) < 0 ) {
 801bbae:	4628      	mov	r0, r5
 801bbb0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 801bbb4:	f7f8 f9ae 	bl	8013f14 <MIOS32_SDCARD_SectorWrite>
 801bbb8:	2800      	cmp	r0, #0
 801bbba:	da06      	bge.n	801bbca <disk_write+0x36>
#if DEBUG_VERBOSE_LEVEL >= 1
	MIOS32_MIDI_SendDebugMessage("[disk_write] error while writing to sector %d\n", sector+i);
 801bbbc:	4629      	mov	r1, r5
 801bbbe:	4805      	ldr	r0, [pc, #20]	; (801bbd4 <disk_write+0x40>)
 801bbc0:	f7f7 fa00 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
#endif
	return RES_ERROR;
 801bbc4:	2001      	movs	r0, #1
 801bbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
)
{
  if( drv == SDCARD ) {
    int i;

    for(i=0; i<count; ++i) {
 801bbca:	3401      	adds	r4, #1
 801bbcc:	e7ec      	b.n	801bba8 <disk_write+0x14>
      MIOS32_MIDI_SendDebugMessage("[disk_write] sector %d (#%d/%d) finished\n", sector+i, i+1, count);
#endif
      }
    }

    return RES_OK;
 801bbce:	2000      	movs	r0, #0
  }

  return RES_PARERR;
}
 801bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbd4:	0801fd15 	.word	0x0801fd15

0801bbd8 <disk_ioctl>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)

{
 801bbd8:	b510      	push	{r4, lr}
 801bbda:	4614      	mov	r4, r2
 801bbdc:	b08c      	sub	sp, #48	; 0x30

  DRESULT res;
  if (drv) return RES_PARERR; // Only 1 drive is supported!
 801bbde:	bbb8      	cbnz	r0, 801bc50 <disk_ioctl+0x78>
  res = RES_ERROR;

  if( drv == SDCARD ) {
    mios32_sdcard_csd_t csd; /* Buffer to hold CSD */
    switch( ctrl ) {
 801bbe0:	2901      	cmp	r1, #1
 801bbe2:	d003      	beq.n	801bbec <disk_ioctl+0x14>
 801bbe4:	d335      	bcc.n	801bc52 <disk_ioctl+0x7a>
 801bbe6:	2903      	cmp	r1, #3
 801bbe8:	d132      	bne.n	801bc50 <disk_ioctl+0x78>
 801bbea:	e013      	b.n	801bc14 <disk_ioctl+0x3c>

    case GET_SECTOR_COUNT: /* Mandatory for only f_mkfs() */
      // Returns total sectors on the drive into the DWORD variable pointed by Buffer.
      // This command is used in only f_mkfs function.
      //*(DWORD*)buff = sdcard_sector_count;
	  MIOS32_SDCARD_CSDRead(&csd);
 801bbec:	a801      	add	r0, sp, #4
 801bbee:	f7f8 fa68 	bl	80140c2 <MIOS32_SDCARD_CSDRead>
	  u32 sectors;
	  if (csd.CSDStruct==1) // SD V2 
 801bbf2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bbf6:	2901      	cmp	r1, #1
 801bbf8:	9905      	ldr	r1, [sp, #20]
  	    sectors = (DWORD)(csd.DeviceSize + 1) << 10;
 801bbfa:	f101 0101 	add.w	r1, r1, #1
      // Returns total sectors on the drive into the DWORD variable pointed by Buffer.
      // This command is used in only f_mkfs function.
      //*(DWORD*)buff = sdcard_sector_count;
	  MIOS32_SDCARD_CSDRead(&csd);
	  u32 sectors;
	  if (csd.CSDStruct==1) // SD V2 
 801bbfe:	d101      	bne.n	801bc04 <disk_ioctl+0x2c>
  	    sectors = (DWORD)(csd.DeviceSize + 1) << 10;
 801bc00:	0289      	lsls	r1, r1, #10
 801bc02:	e004      	b.n	801bc0e <disk_ioctl+0x36>
      else { // V1 and MMC cards use the same (size << multiplier) scheme.
		sectors = (DWORD)(csd.DeviceSize + 1) << (csd.DeviceSizeMul + 2);
 801bc04:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bc08:	1c98      	adds	r0, r3, #2
 801bc0a:	fa01 f100 	lsl.w	r1, r1, r0
	  }
	  *(DWORD*)buff=sectors;
 801bc0e:	6021      	str	r1, [r4, #0]
      res= RES_OK;
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[GET_SECTOR_COUNT] Count is %d\n", sectors);
 801bc10:	4811      	ldr	r0, [pc, #68]	; (801bc58 <disk_ioctl+0x80>)
 801bc12:	e019      	b.n	801bc48 <disk_ioctl+0x70>

    case GET_BLOCK_SIZE: /* Mandatory for only f_mkfs() */
      // Returns erase block size of the memory array in unit of sector into the DWORD variable
      // pointed by Buffer. When the erase block size is unknown or magnetic disk device, 
      // return 1. This command is used in only f_mkfs function.
	  MIOS32_SDCARD_CSDRead(&csd);
 801bc14:	a801      	add	r0, sp, #4
 801bc16:	f7f8 fa54 	bl	80140c2 <MIOS32_SDCARD_CSDRead>
	  u32 size;
	  if (csd.CSDStruct==1){  // SD V2
 801bc1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801bc1e:	2b01      	cmp	r3, #1
 801bc20:	d10a      	bne.n	801bc38 <disk_ioctl+0x60>
		// Some SDHC cards seem to report block size differently.
		// Try one way, if result is too small, try another! 
		size = 16UL << (csd.DeviceSizeMul >> 4);
 801bc22:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bc26:	2210      	movs	r2, #16
 801bc28:	0918      	lsrs	r0, r3, #4
 801bc2a:	fa02 f100 	lsl.w	r1, r2, r0
		if (size<2)
 801bc2e:	2901      	cmp	r1, #1
 801bc30:	d808      	bhi.n	801bc44 <disk_ioctl+0x6c>
			size = 16UL << (csd.DeviceSizeMul);
 801bc32:	fa02 f103 	lsl.w	r1, r2, r3
 801bc36:	e005      	b.n	801bc44 <disk_ioctl+0x6c>
	  } else { // SD v1
	    size = (DWORD)(csd.EraseGrSize)*(csd.MaxWrBlockLen);
 801bc38:	f89d 001d 	ldrb.w	r0, [sp, #29]
 801bc3c:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 801bc40:	fb11 f100 	smulbb	r1, r1, r0
	  res=RES_OK;
		
	  *(DWORD*)buff = size;
	  
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[GET_BLOCK_SIZE] Block Size is %d\n", size);
 801bc44:	4805      	ldr	r0, [pc, #20]	; (801bc5c <disk_ioctl+0x84>)
	  } else { // SD v1
	    size = (DWORD)(csd.EraseGrSize)*(csd.MaxWrBlockLen);
	  }
	  res=RES_OK;
		
	  *(DWORD*)buff = size;
 801bc46:	6021      	str	r1, [r4, #0]
	  
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[GET_BLOCK_SIZE] Block Size is %d\n", size);
 801bc48:	f7f7 f9bc 	bl	8012fc4 <MIOS32_MIDI_SendDebugMessage>
		if (size<2)
			size = 16UL << (csd.DeviceSizeMul);
	  } else { // SD v1
	    size = (DWORD)(csd.EraseGrSize)*(csd.MaxWrBlockLen);
	  }
	  res=RES_OK;
 801bc4c:	2000      	movs	r0, #0
	  *(DWORD*)buff = size;
	  
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[GET_BLOCK_SIZE] Block Size is %d\n", size);
#endif
	  break;
 801bc4e:	e000      	b.n	801bc52 <disk_ioctl+0x7a>
)

{

  DRESULT res;
  if (drv) return RES_PARERR; // Only 1 drive is supported!
 801bc50:	2004      	movs	r0, #4
      res = RES_PARERR;
    }
  }

  return res;
}
 801bc52:	b00c      	add	sp, #48	; 0x30
 801bc54:	bd10      	pop	{r4, pc}
 801bc56:	bf00      	nop
 801bc58:	0801fd44 	.word	0x0801fd44
 801bc5c:	0801fd64 	.word	0x0801fd64

0801bc60 <get_fattime>:
DWORD __attribute__ ((weak)) get_fattime(void)
{
  /* 31-25: Year(0-127 org.1980), 24-21: Month(1-12), 20-16: Day(1-31) */
  /* 15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */
  return 0;
}
 801bc60:	2000      	movs	r0, #0
 801bc62:	4770      	bx	lr

0801bc64 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 801bc64:	287f      	cmp	r0, #127	; 0x7f
 801bc66:	d916      	bls.n	801bc96 <ff_convert+0x32>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 801bc68:	b131      	cbz	r1, 801bc78 <ff_convert+0x14>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 801bc6a:	28ff      	cmp	r0, #255	; 0xff
 801bc6c:	d812      	bhi.n	801bc94 <ff_convert+0x30>
 801bc6e:	3880      	subs	r0, #128	; 0x80
 801bc70:	4909      	ldr	r1, [pc, #36]	; (801bc98 <ff_convert+0x34>)
 801bc72:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 801bc76:	4770      	bx	lr

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
 801bc78:	4a07      	ldr	r2, [pc, #28]	; (801bc98 <ff_convert+0x34>)
 801bc7a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801bc7e:	4282      	cmp	r2, r0
 801bc80:	b28b      	uxth	r3, r1
 801bc82:	d003      	beq.n	801bc8c <ff_convert+0x28>
 801bc84:	3101      	adds	r1, #1
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 801bc86:	2980      	cmp	r1, #128	; 0x80
 801bc88:	d1f6      	bne.n	801bc78 <ff_convert+0x14>
 801bc8a:	460b      	mov	r3, r1
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
 801bc8c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801bc90:	b2c0      	uxtb	r0, r0
 801bc92:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 801bc94:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 801bc96:	4770      	bx	lr
 801bc98:	0801ff68 	.word	0x0801ff68

0801bc9c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	4a06      	ldr	r2, [pc, #24]	; (801bcb8 <ff_wtoupper+0x1c>)
 801bca0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801bca4:	b131      	cbz	r1, 801bcb4 <ff_wtoupper+0x18>
 801bca6:	4288      	cmp	r0, r1
 801bca8:	d001      	beq.n	801bcae <ff_wtoupper+0x12>
 801bcaa:	3301      	adds	r3, #1
 801bcac:	e7f7      	b.n	801bc9e <ff_wtoupper+0x2>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 801bcae:	4803      	ldr	r0, [pc, #12]	; (801bcbc <ff_wtoupper+0x20>)
 801bcb0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
}
 801bcb4:	4770      	bx	lr
 801bcb6:	bf00      	nop
 801bcb8:	08020068 	.word	0x08020068
 801bcbc:	0801fd88 	.word	0x0801fd88

0801bcc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
 801bcc0:	b510      	push	{r4, lr}
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	4293      	cmp	r3, r2
 801bcc6:	d003      	beq.n	801bcd0 <mem_cpy+0x10>
 801bcc8:	5ccc      	ldrb	r4, [r1, r3]
 801bcca:	54c4      	strb	r4, [r0, r3]
 801bccc:	3301      	adds	r3, #1
 801bcce:	e7f9      	b.n	801bcc4 <mem_cpy+0x4>
}
 801bcd0:	bd10      	pop	{r4, pc}

0801bcd2 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
 801bcd2:	1882      	adds	r2, r0, r2
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 801bcd4:	4290      	cmp	r0, r2
 801bcd6:	d002      	beq.n	801bcde <mem_set+0xc>
 801bcd8:	f800 1b01 	strb.w	r1, [r0], #1
 801bcdc:	e7fa      	b.n	801bcd4 <mem_set+0x2>
}
 801bcde:	4770      	bx	lr

0801bce0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 801bce0:	2300      	movs	r3, #0
 801bce2:	b510      	push	{r4, lr}
 801bce4:	4604      	mov	r4, r0
	BYTE sum = 0;
 801bce6:	4618      	mov	r0, r3
	int n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 801bce8:	0842      	lsrs	r2, r0, #1
 801bcea:	5ce1      	ldrb	r1, [r4, r3]
 801bcec:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 801bcf0:	3301      	adds	r3, #1
 801bcf2:	fa51 f280 	uxtab	r2, r1, r0
 801bcf6:	2b0b      	cmp	r3, #11
 801bcf8:	b2d0      	uxtb	r0, r2
 801bcfa:	d1f5      	bne.n	801bce8 <sum_sfn+0x8>
	return sum;
}
 801bcfc:	bd10      	pop	{r4, pc}

0801bcfe <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 801bcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
	if (dj->sect) {
 801bd00:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 801bd02:	460d      	mov	r5, r1
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
 801bd04:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d04d      	beq.n	801bda8 <get_fileinfo+0xaa>
		dir = dj->dir;
 801bd0c:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
 801bd0e:	7b1f      	ldrb	r7, [r3, #12]
 801bd10:	4611      	mov	r1, r2
		for (i = 0; i < 8; i++) {	/* Copy name body */
 801bd12:	2400      	movs	r4, #0
			c = dir[i];
 801bd14:	5d1e      	ldrb	r6, [r3, r4]
			if (c == ' ') break;
 801bd16:	2e20      	cmp	r6, #32
 801bd18:	460a      	mov	r2, r1
 801bd1a:	d013      	beq.n	801bd44 <get_fileinfo+0x46>
			if (c == 0x05) c = 0xE5;
 801bd1c:	2e05      	cmp	r6, #5
 801bd1e:	bf14      	ite	ne
 801bd20:	4632      	movne	r2, r6
 801bd22:	22e5      	moveq	r2, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 801bd24:	f007 0608 	and.w	r6, r7, #8
 801bd28:	b2f6      	uxtb	r6, r6
 801bd2a:	b12e      	cbz	r6, 801bd38 <get_fileinfo+0x3a>
 801bd2c:	f1a2 0641 	sub.w	r6, r2, #65	; 0x41
 801bd30:	2e19      	cmp	r6, #25
 801bd32:	d801      	bhi.n	801bd38 <get_fileinfo+0x3a>
 801bd34:	3220      	adds	r2, #32
 801bd36:	b2d2      	uxtb	r2, r2
			*p++ = c;
 801bd38:	f801 2b01 	strb.w	r2, [r1], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 801bd3c:	3401      	adds	r4, #1
 801bd3e:	2c08      	cmp	r4, #8
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
 801bd40:	460a      	mov	r2, r1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 801bd42:	d1e7      	bne.n	801bd14 <get_fileinfo+0x16>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 801bd44:	7a1e      	ldrb	r6, [r3, #8]
 801bd46:	2e20      	cmp	r6, #32
 801bd48:	d017      	beq.n	801bd7a <get_fileinfo+0x7c>
			*p++ = '.';
 801bd4a:	222e      	movs	r2, #46	; 0x2e
 801bd4c:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 8; i < 11; i++) {
 801bd50:	2608      	movs	r6, #8
				c = dir[i];
 801bd52:	5d9c      	ldrb	r4, [r3, r6]
				if (c == ' ') break;
 801bd54:	2c20      	cmp	r4, #32
 801bd56:	460a      	mov	r2, r1
 801bd58:	d00f      	beq.n	801bd7a <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 801bd5a:	f007 0210 	and.w	r2, r7, #16
 801bd5e:	b2d2      	uxtb	r2, r2
 801bd60:	b12a      	cbz	r2, 801bd6e <get_fileinfo+0x70>
 801bd62:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801bd66:	2a19      	cmp	r2, #25
 801bd68:	d801      	bhi.n	801bd6e <get_fileinfo+0x70>
 801bd6a:	3420      	adds	r4, #32
 801bd6c:	b2e4      	uxtb	r4, r4
				*p++ = c;
 801bd6e:	f801 4b01 	strb.w	r4, [r1], #1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 801bd72:	3601      	adds	r6, #1
 801bd74:	2e0b      	cmp	r6, #11
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
 801bd76:	460a      	mov	r2, r1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 801bd78:	d1eb      	bne.n	801bd52 <get_fileinfo+0x54>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 801bd7a:	7ad9      	ldrb	r1, [r3, #11]
 801bd7c:	7229      	strb	r1, [r5, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 801bd7e:	7f9e      	ldrb	r6, [r3, #30]
 801bd80:	7fdc      	ldrb	r4, [r3, #31]
 801bd82:	0431      	lsls	r1, r6, #16
 801bd84:	ea41 6604 	orr.w	r6, r1, r4, lsl #24
 801bd88:	7f1c      	ldrb	r4, [r3, #28]
 801bd8a:	7f59      	ldrb	r1, [r3, #29]
 801bd8c:	4326      	orrs	r6, r4
 801bd8e:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 801bd92:	602e      	str	r6, [r5, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 801bd94:	7e5c      	ldrb	r4, [r3, #25]
 801bd96:	7e19      	ldrb	r1, [r3, #24]
 801bd98:	ea41 2604 	orr.w	r6, r1, r4, lsl #8
 801bd9c:	80ae      	strh	r6, [r5, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 801bd9e:	7ddc      	ldrb	r4, [r3, #23]
 801bda0:	7d9b      	ldrb	r3, [r3, #22]
 801bda2:	ea43 2104 	orr.w	r1, r3, r4, lsl #8
 801bda6:	80e9      	strh	r1, [r5, #6]
	}
	*p = 0;
 801bda8:	2400      	movs	r4, #0
 801bdaa:	7014      	strb	r4, [r2, #0]

#if _USE_LFN
	if (fno->lfname) {
 801bdac:	69ae      	ldr	r6, [r5, #24]
 801bdae:	b1d6      	cbz	r6, 801bde6 <get_fileinfo+0xe8>
		XCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 801bdb0:	6902      	ldr	r2, [r0, #16]
 801bdb2:	b90a      	cbnz	r2, 801bdb8 <get_fileinfo+0xba>
#if _USE_LFN
	if (fno->lfname) {
		XCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
 801bdb4:	2400      	movs	r4, #0
 801bdb6:	e014      	b.n	801bde2 <get_fileinfo+0xe4>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 801bdb8:	8c01      	ldrh	r1, [r0, #32]
 801bdba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bdbe:	4299      	cmp	r1, r3
 801bdc0:	d0f8      	beq.n	801bdb4 <get_fileinfo+0xb6>
			lfn = dj->lfn;
 801bdc2:	69c7      	ldr	r7, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 801bdc4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 801bdc8:	b158      	cbz	r0, 801bde2 <get_fileinfo+0xe4>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
 801bdca:	2100      	movs	r1, #0
 801bdcc:	f7ff ff4a 	bl	801bc64 <ff_convert>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
 801bdd0:	2800      	cmp	r0, #0
 801bdd2:	d0ef      	beq.n	801bdb4 <get_fileinfo+0xb6>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
					tp[i++] = (XCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
 801bdd4:	69ea      	ldr	r2, [r5, #28]
 801bdd6:	1e51      	subs	r1, r2, #1
 801bdd8:	428c      	cmp	r4, r1
 801bdda:	daeb      	bge.n	801bdb4 <get_fileinfo+0xb6>
				tp[i++] = (XCHAR)w;
 801bddc:	5530      	strb	r0, [r6, r4]
 801bdde:	3401      	adds	r4, #1
 801bde0:	e7f0      	b.n	801bdc4 <get_fileinfo+0xc6>
			}
		}
		tp[i] = 0;	/* Terminator */
 801bde2:	2000      	movs	r0, #0
 801bde4:	5530      	strb	r0, [r6, r4]
 801bde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bde8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 801bde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
 801bdec:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 801bdee:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 801bdf4:	d102      	bne.n	801bdfc <move_window+0x14>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
 801bdf6:	2000      	movs	r0, #0
 801bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 801bdfc:	7903      	ldrb	r3, [r0, #4]
 801bdfe:	b913      	cbnz	r3, 801be06 <move_window+0x1e>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 801be00:	2e00      	cmp	r6, #0
 801be02:	d0f8      	beq.n	801bdf6 <move_window+0xe>
 801be04:	e01f      	b.n	801be46 <move_window+0x5e>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 801be06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801be0a:	4641      	mov	r1, r8
 801be0c:	7840      	ldrb	r0, [r0, #1]
 801be0e:	462a      	mov	r2, r5
 801be10:	2301      	movs	r3, #1
 801be12:	f7ff febf 	bl	801bb94 <disk_write>
 801be16:	b110      	cbz	r0, 801be1e <move_window+0x36>
				return FR_DISK_ERR;
 801be18:	2001      	movs	r0, #1
 801be1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->wflag = 0;
 801be1e:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 801be20:	69a2      	ldr	r2, [r4, #24]
 801be22:	6a20      	ldr	r0, [r4, #32]
 801be24:	1811      	adds	r1, r2, r0
 801be26:	428d      	cmp	r5, r1
 801be28:	d2ea      	bcs.n	801be00 <move_window+0x18>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 801be2a:	78e7      	ldrb	r7, [r4, #3]
 801be2c:	2f01      	cmp	r7, #1
 801be2e:	d9e7      	bls.n	801be00 <move_window+0x18>
					wsect += fs->sects_fat;
 801be30:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drive, fs->win, wsect, 1);
 801be32:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
					wsect += fs->sects_fat;
 801be34:	18ed      	adds	r5, r5, r3
					disk_write(fs->drive, fs->win, wsect, 1);
 801be36:	4641      	mov	r1, r8
 801be38:	462a      	mov	r2, r5
 801be3a:	2301      	movs	r3, #1
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 801be3c:	3f01      	subs	r7, #1
					wsect += fs->sects_fat;
					disk_write(fs->drive, fs->win, wsect, 1);
 801be3e:	f7ff fea9 	bl	801bb94 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 801be42:	b2ff      	uxtb	r7, r7
 801be44:	e7f2      	b.n	801be2c <move_window+0x44>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 801be46:	7860      	ldrb	r0, [r4, #1]
 801be48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801be4c:	4632      	mov	r2, r6
 801be4e:	2301      	movs	r3, #1
 801be50:	f7ff fe7e 	bl	801bb50 <disk_read>
 801be54:	2800      	cmp	r0, #0
 801be56:	d1df      	bne.n	801be18 <move_window+0x30>
				return FR_DISK_ERR;
			fs->winsect = sector;
 801be58:	62e6      	str	r6, [r4, #44]	; 0x2c
		}
	}

	return FR_OK;
}
 801be5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801be5e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 801be5e:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;


	res = move_window(fs, 0);
 801be60:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 801be62:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
 801be64:	f7ff ffc0 	bl	801bde8 <move_window>
 801be68:	4605      	mov	r5, r0
	if (res == FR_OK) {
 801be6a:	2d00      	cmp	r5, #0
 801be6c:	d151      	bne.n	801bf12 <sync+0xb4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 801be6e:	7823      	ldrb	r3, [r4, #0]
 801be70:	2b03      	cmp	r3, #3
 801be72:	d146      	bne.n	801bf02 <sync+0xa4>
 801be74:	7960      	ldrb	r0, [r4, #5]
 801be76:	2800      	cmp	r0, #0
 801be78:	d043      	beq.n	801bf02 <sync+0xa4>
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
 801be7a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801be7e:	4630      	mov	r0, r6
 801be80:	4629      	mov	r1, r5
 801be82:	f44f 7200 	mov.w	r2, #512	; 0x200

	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
 801be86:	62e5      	str	r5, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
 801be88:	f7ff ff23 	bl	801bcd2 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 801be8c:	2352      	movs	r3, #82	; 0x52
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 801be8e:	2155      	movs	r1, #85	; 0x55
 801be90:	22aa      	movs	r2, #170	; 0xaa
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 801be92:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801be96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 801be9a:	6923      	ldr	r3, [r4, #16]
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 801be9c:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 801bea0:	2061      	movs	r0, #97	; 0x61
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 801bea2:	2172      	movs	r1, #114	; 0x72
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 801bea4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 801bea8:	2241      	movs	r2, #65	; 0x41
 801beaa:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
 801beae:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 801beb2:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
 801beb6:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
 801beba:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 801bebe:	0e19      	lsrs	r1, r3, #24
 801bec0:	0c1a      	lsrs	r2, r3, #16
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 801bec2:	f884 0217 	strb.w	r0, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 801bec6:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
 801beca:	f3c3 2007 	ubfx	r0, r3, #8, #8
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 801bece:	68e3      	ldr	r3, [r4, #12]
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 801bed0:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
 801bed4:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 801bed8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bedc:	0c1a      	lsrs	r2, r3, #16
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 801bede:	f884 121b 	strb.w	r1, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 801bee2:	0e19      	lsrs	r1, r3, #24
 801bee4:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 801bee8:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 801beec:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
 801bef0:	f884 121f 	strb.w	r1, [r4, #543]	; 0x21f
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 801bef4:	7860      	ldrb	r0, [r4, #1]
 801bef6:	6962      	ldr	r2, [r4, #20]
 801bef8:	4631      	mov	r1, r6
 801befa:	2301      	movs	r3, #1
 801befc:	f7ff fe4a 	bl	801bb94 <disk_write>
			fs->fsi_flag = 0;
 801bf00:	7165      	strb	r5, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 801bf02:	2100      	movs	r1, #0
 801bf04:	7860      	ldrb	r0, [r4, #1]
 801bf06:	460a      	mov	r2, r1
 801bf08:	f7ff fe66 	bl	801bbd8 <disk_ioctl>
 801bf0c:	3000      	adds	r0, #0
 801bf0e:	bf18      	it	ne
 801bf10:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 801bf12:	bd70      	pop	{r4, r5, r6, pc}

0801bf14 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 801bf14:	b510      	push	{r4, lr}
 801bf16:	4604      	mov	r4, r0
 801bf18:	460a      	mov	r2, r1
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 801bf1a:	7840      	ldrb	r0, [r0, #1]
 801bf1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801bf20:	2301      	movs	r3, #1
 801bf22:	f7ff fe15 	bl	801bb50 <disk_read>
 801bf26:	bb80      	cbnz	r0, 801bf8a <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 801bf28:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 801bf2c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 801bf30:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
 801bf34:	4b17      	ldr	r3, [pc, #92]	; (801bf94 <check_fs+0x80>)
 801bf36:	b20a      	sxth	r2, r1
 801bf38:	429a      	cmp	r2, r3
 801bf3a:	d128      	bne.n	801bf8e <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801bf3c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801bf40:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 801bf44:	0413      	lsls	r3, r2, #16
 801bf46:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 801bf4a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 801bf4e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801bf52:	4311      	orrs	r1, r2
 801bf54:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 801bf58:	4b0f      	ldr	r3, [pc, #60]	; (801bf98 <check_fs+0x84>)
 801bf5a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	d016      	beq.n	801bf90 <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 801bf62:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 801bf66:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 801bf6a:	0402      	lsls	r2, r0, #16
 801bf6c:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 801bf70:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 801bf74:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
 801bf78:	4301      	orrs	r1, r0
 801bf7a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801bf7e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		return 0;
 801bf82:	1ac0      	subs	r0, r0, r3
 801bf84:	bf18      	it	ne
 801bf86:	2001      	movne	r0, #1
 801bf88:	bd10      	pop	{r4, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 801bf8a:	2003      	movs	r0, #3
 801bf8c:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 801bf8e:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
 801bf90:	bd10      	pop	{r4, pc}
 801bf92:	bf00      	nop
 801bf94:	ffffaa55 	.word	0xffffaa55
 801bf98:	00544146 	.word	0x00544146

0801bf9c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 801bf9c:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
 801bf9e:	b168      	cbz	r0, 801bfbc <validate+0x20>
 801bfa0:	7803      	ldrb	r3, [r0, #0]
 801bfa2:	b15b      	cbz	r3, 801bfbc <validate+0x20>
 801bfa4:	88c2      	ldrh	r2, [r0, #6]
 801bfa6:	428a      	cmp	r2, r1
 801bfa8:	d108      	bne.n	801bfbc <validate+0x20>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 801bfaa:	7840      	ldrb	r0, [r0, #1]
 801bfac:	f7ff fdcc 	bl	801bb48 <disk_status>
 801bfb0:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;
 801bfb4:	bf0c      	ite	eq
 801bfb6:	2000      	moveq	r0, #0
 801bfb8:	2003      	movne	r0, #3
 801bfba:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
 801bfbc:	2009      	movs	r0, #9

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 801bfbe:	bd08      	pop	{r3, pc}

0801bfc0 <get_fat>:
{
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 801bfc0:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 801bfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfc6:	4605      	mov	r5, r0
 801bfc8:	460c      	mov	r4, r1
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 801bfca:	d95d      	bls.n	801c088 <get_fat+0xc8>
 801bfcc:	69c3      	ldr	r3, [r0, #28]
 801bfce:	4299      	cmp	r1, r3
 801bfd0:	d25a      	bcs.n	801c088 <get_fat+0xc8>
		return 1;

	fsect = fs->fatbase;
	switch (fs->fs_type) {
 801bfd2:	7801      	ldrb	r1, [r0, #0]


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;

	fsect = fs->fatbase;
 801bfd4:	6a06      	ldr	r6, [r0, #32]
	switch (fs->fs_type) {
 801bfd6:	2902      	cmp	r1, #2
 801bfd8:	d028      	beq.n	801c02c <get_fat+0x6c>
 801bfda:	2903      	cmp	r1, #3
 801bfdc:	d036      	beq.n	801c04c <get_fat+0x8c>
 801bfde:	2901      	cmp	r1, #1
 801bfe0:	d14e      	bne.n	801c080 <get_fat+0xc0>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 801bfe2:	eb04 0754 	add.w	r7, r4, r4, lsr #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 801bfe6:	eb06 2157 	add.w	r1, r6, r7, lsr #9
 801bfea:	f7ff fefd 	bl	801bde8 <move_window>
 801bfee:	2800      	cmp	r0, #0
 801bff0:	d146      	bne.n	801c080 <get_fat+0xc0>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 801bff2:	05f8      	lsls	r0, r7, #23
 801bff4:	eb05 52d0 	add.w	r2, r5, r0, lsr #23
 801bff8:	3701      	adds	r7, #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 801bffa:	4628      	mov	r0, r5
 801bffc:	eb06 2157 	add.w	r1, r6, r7, lsr #9
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 801c000:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 801c004:	f7ff fef0 	bl	801bde8 <move_window>
 801c008:	2800      	cmp	r0, #0
 801c00a:	d139      	bne.n	801c080 <get_fat+0xc0>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 801c00c:	05ff      	lsls	r7, r7, #23
 801c00e:	eb05 55d7 	add.w	r5, r5, r7, lsr #23
 801c012:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801c016:	ea48 2103 	orr.w	r1, r8, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801c01a:	07e3      	lsls	r3, r4, #31
 801c01c:	d502      	bpl.n	801c024 <get_fat+0x64>
 801c01e:	0908      	lsrs	r0, r1, #4
 801c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c024:	0508      	lsls	r0, r1, #20
 801c026:	0d00      	lsrs	r0, r0, #20
 801c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 801c02c:	eb06 2114 	add.w	r1, r6, r4, lsr #8
 801c030:	f7ff feda 	bl	801bde8 <move_window>
 801c034:	bb20      	cbnz	r0, 801c080 <get_fat+0xc0>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 801c036:	0624      	lsls	r4, r4, #24
 801c038:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 801c03c:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 801c040:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 801c044:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 801c048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 801c04c:	eb06 11d4 	add.w	r1, r6, r4, lsr #7
 801c050:	f7ff feca 	bl	801bde8 <move_window>
 801c054:	b9a0      	cbnz	r0, 801c080 <get_fat+0xc0>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 801c056:	0664      	lsls	r4, r4, #25
 801c058:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 801c05c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 801c060:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
 801c064:	0419      	lsls	r1, r3, #16
 801c066:	ea41 6002 	orr.w	r0, r1, r2, lsl #24
 801c06a:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 801c06e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 801c072:	4310      	orrs	r0, r2
 801c074:	ea40 2103 	orr.w	r1, r0, r3, lsl #8
 801c078:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 801c07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 801c080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
 801c088:	2001      	movs	r0, #1
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
 801c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c08e <put_fat>:
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 801c08e:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 801c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c094:	4604      	mov	r4, r0
 801c096:	460d      	mov	r5, r1
 801c098:	4616      	mov	r6, r2
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 801c09a:	d96d      	bls.n	801c178 <put_fat+0xea>
 801c09c:	69c3      	ldr	r3, [r0, #28]
 801c09e:	4299      	cmp	r1, r3
 801c0a0:	d26a      	bcs.n	801c178 <put_fat+0xea>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
		switch (fs->fs_type) {
 801c0a2:	7801      	ldrb	r1, [r0, #0]

	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
 801c0a4:	6a07      	ldr	r7, [r0, #32]
		switch (fs->fs_type) {
 801c0a6:	2902      	cmp	r1, #2
 801c0a8:	d03d      	beq.n	801c126 <put_fat+0x98>
 801c0aa:	2903      	cmp	r1, #3
 801c0ac:	d04a      	beq.n	801c144 <put_fat+0xb6>
 801c0ae:	2901      	cmp	r1, #1
 801c0b0:	d15d      	bne.n	801c16e <put_fat+0xe0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 801c0b2:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			res = move_window(fs, fsect + (bc / SS(fs)));
 801c0b6:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 801c0ba:	f7ff fe95 	bl	801bde8 <move_window>
			if (res != FR_OK) break;
 801c0be:	2800      	cmp	r0, #0
 801c0c0:	d156      	bne.n	801c170 <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 801c0c2:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 801c0c6:	0dd0      	lsrs	r0, r2, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801c0c8:	f015 0501 	ands.w	r5, r5, #1
 801c0cc:	b2f3      	uxtb	r3, r6
 801c0ce:	d007      	beq.n	801c0e0 <put_fat+0x52>
 801c0d0:	1821      	adds	r1, r4, r0
 801c0d2:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 801c0d6:	f002 010f 	and.w	r1, r2, #15
 801c0da:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 801c0de:	b2db      	uxtb	r3, r3
 801c0e0:	1820      	adds	r0, r4, r0
			bc++;
 801c0e2:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
 801c0e6:	2201      	movs	r2, #1
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801c0e8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			bc++;
			fs->wflag = 1;
 801c0ec:	7122      	strb	r2, [r4, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 801c0f4:	f7ff fe78 	bl	801bde8 <move_window>
			if (res != FR_OK) break;
 801c0f8:	bbd0      	cbnz	r0, 801c170 <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 801c0fa:	ea4f 58c8 	mov.w	r8, r8, lsl #23
 801c0fe:	ea4f 58d8 	mov.w	r8, r8, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801c102:	b115      	cbz	r5, 801c10a <put_fat+0x7c>
 801c104:	f3c6 1607 	ubfx	r6, r6, #4, #8
 801c108:	e008      	b.n	801c11c <put_fat+0x8e>
 801c10a:	eb04 0108 	add.w	r1, r4, r8
 801c10e:	f3c6 2603 	ubfx	r6, r6, #8, #4
 801c112:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 801c116:	f023 020f 	bic.w	r2, r3, #15
 801c11a:	4316      	orrs	r6, r2
 801c11c:	eb04 0108 	add.w	r1, r4, r8
 801c120:	f881 6030 	strb.w	r6, [r1, #48]	; 0x30
 801c124:	e024      	b.n	801c170 <put_fat+0xe2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 801c126:	eb07 2115 	add.w	r1, r7, r5, lsr #8
 801c12a:	f7ff fe5d 	bl	801bde8 <move_window>
			if (res != FR_OK) break;
 801c12e:	b9f8      	cbnz	r0, 801c170 <put_fat+0xe2>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 801c130:	0629      	lsls	r1, r5, #24
 801c132:	eb04 55d1 	add.w	r5, r4, r1, lsr #23
 801c136:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 801c13a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c13e:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
 801c142:	e015      	b.n	801c170 <put_fat+0xe2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 801c144:	eb07 11d5 	add.w	r1, r7, r5, lsr #7
 801c148:	f7ff fe4e 	bl	801bde8 <move_window>
			if (res != FR_OK) break;
 801c14c:	b980      	cbnz	r0, 801c170 <put_fat+0xe2>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 801c14e:	066d      	lsls	r5, r5, #25
 801c150:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 801c154:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801c158:	0c32      	lsrs	r2, r6, #16
 801c15a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 801c15e:	0e36      	lsrs	r6, r6, #24
 801c160:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 801c164:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
 801c168:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
 801c16c:	e000      	b.n	801c170 <put_fat+0xe2>
			break;

		default :
			res = FR_INT_ERR;
 801c16e:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 801c170:	2301      	movs	r3, #1
 801c172:	7123      	strb	r3, [r4, #4]
 801c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
 801c178:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 801c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c17e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 801c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c182:	4605      	mov	r5, r0
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 801c184:	f8d0 801c 	ldr.w	r8, [r0, #28]
	if (clst == 0) {		/* Create new chain */
 801c188:	460f      	mov	r7, r1
 801c18a:	b929      	cbnz	r1, 801c198 <create_chain+0x1a>
		scl = fs->last_clust;			/* Get suggested start point */
 801c18c:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= mcl) scl = 1;
 801c18e:	b176      	cbz	r6, 801c1ae <create_chain+0x30>
 801c190:	4546      	cmp	r6, r8
 801c192:	bf28      	it	cs
 801c194:	2601      	movcs	r6, #1
 801c196:	e00b      	b.n	801c1b0 <create_chain+0x32>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801c198:	f7ff ff12 	bl	801bfc0 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 801c19c:	2801      	cmp	r0, #1
 801c19e:	d802      	bhi.n	801c1a6 <create_chain+0x28>
 801c1a0:	2001      	movs	r0, #1
 801c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 801c1a6:	4540      	cmp	r0, r8
 801c1a8:	d337      	bcc.n	801c21a <create_chain+0x9c>
 801c1aa:	463e      	mov	r6, r7
 801c1ac:	e000      	b.n	801c1b0 <create_chain+0x32>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
 801c1ae:	2601      	movs	r6, #1
 801c1b0:	4634      	mov	r4, r6
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 801c1b2:	3401      	adds	r4, #1
		if (ncl >= mcl) {				/* Wrap around */
 801c1b4:	4544      	cmp	r4, r8
 801c1b6:	d305      	bcc.n	801c1c4 <create_chain+0x46>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
 801c1b8:	2e01      	cmp	r6, #1
 801c1ba:	d802      	bhi.n	801c1c2 <create_chain+0x44>
 801c1bc:	2000      	movs	r0, #0
 801c1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
 801c1c2:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 801c1c4:	4628      	mov	r0, r5
 801c1c6:	4621      	mov	r1, r4
 801c1c8:	f7ff fefa 	bl	801bfc0 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 801c1cc:	b150      	cbz	r0, 801c1e4 <create_chain+0x66>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 801c1ce:	1c41      	adds	r1, r0, #1
 801c1d0:	d103      	bne.n	801c1da <create_chain+0x5c>
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 801c1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 801c1da:	2801      	cmp	r0, #1
 801c1dc:	d0e0      	beq.n	801c1a0 <create_chain+0x22>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
 801c1de:	42b4      	cmp	r4, r6
 801c1e0:	d1e7      	bne.n	801c1b2 <create_chain+0x34>
 801c1e2:	e7eb      	b.n	801c1bc <create_chain+0x3e>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 801c1e4:	4628      	mov	r0, r5
 801c1e6:	4621      	mov	r1, r4
 801c1e8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801c1ec:	f7ff ff4f 	bl	801c08e <put_fat>
 801c1f0:	2800      	cmp	r0, #0
 801c1f2:	d1ee      	bne.n	801c1d2 <create_chain+0x54>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
 801c1f4:	b947      	cbnz	r7, 801c208 <create_chain+0x8a>
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 801c1f6:	692b      	ldr	r3, [r5, #16]
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 801c1f8:	60ec      	str	r4, [r5, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 801c1fa:	1c5a      	adds	r2, r3, #1
 801c1fc:	d00c      	beq.n	801c218 <create_chain+0x9a>
		fs->free_clust--;
 801c1fe:	1e58      	subs	r0, r3, #1
		fs->fsi_flag = 1;
 801c200:	2101      	movs	r1, #1
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
		fs->free_clust--;
 801c202:	6128      	str	r0, [r5, #16]
		fs->fsi_flag = 1;
 801c204:	7169      	strb	r1, [r5, #5]
 801c206:	e007      	b.n	801c218 <create_chain+0x9a>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
 801c208:	4628      	mov	r0, r5
 801c20a:	4639      	mov	r1, r7
 801c20c:	4622      	mov	r2, r4
 801c20e:	f7ff ff3e 	bl	801c08e <put_fat>
 801c212:	2800      	cmp	r0, #0
 801c214:	d1dd      	bne.n	801c1d2 <create_chain+0x54>
 801c216:	e7ee      	b.n	801c1f6 <create_chain+0x78>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
		fs->free_clust--;
		fs->fsi_flag = 1;
 801c218:	4620      	mov	r0, r4
	}

	return ncl;		/* Return new cluster number */
}
 801c21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c21e <remove_chain>:
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 801c21e:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801c220:	b570      	push	{r4, r5, r6, lr}
 801c222:	4604      	mov	r4, r0
 801c224:	460d      	mov	r5, r1
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 801c226:	d922      	bls.n	801c26e <remove_chain+0x50>
 801c228:	69c3      	ldr	r3, [r0, #28]
 801c22a:	4299      	cmp	r1, r3
 801c22c:	d21f      	bcs.n	801c26e <remove_chain+0x50>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 801c22e:	69e0      	ldr	r0, [r4, #28]
 801c230:	4285      	cmp	r5, r0
 801c232:	d205      	bcs.n	801c240 <remove_chain+0x22>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 801c234:	4620      	mov	r0, r4
 801c236:	4629      	mov	r1, r5
 801c238:	f7ff fec2 	bl	801bfc0 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 801c23c:	4606      	mov	r6, r0
 801c23e:	b908      	cbnz	r0, 801c244 <remove_chain+0x26>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801c240:	2000      	movs	r0, #0
 801c242:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 801c244:	2801      	cmp	r0, #1
 801c246:	d012      	beq.n	801c26e <remove_chain+0x50>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801c248:	1c43      	adds	r3, r0, #1
 801c24a:	d00e      	beq.n	801c26a <remove_chain+0x4c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 801c24c:	4620      	mov	r0, r4
 801c24e:	4629      	mov	r1, r5
 801c250:	2200      	movs	r2, #0
 801c252:	f7ff ff1c 	bl	801c08e <put_fat>
			if (res != FR_OK) break;
 801c256:	b958      	cbnz	r0, 801c270 <remove_chain+0x52>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 801c258:	6921      	ldr	r1, [r4, #16]
 801c25a:	1c48      	adds	r0, r1, #1
 801c25c:	d003      	beq.n	801c266 <remove_chain+0x48>
				fs->free_clust++;
 801c25e:	1c4a      	adds	r2, r1, #1
				fs->fsi_flag = 1;
 801c260:	2501      	movs	r5, #1
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
 801c262:	6122      	str	r2, [r4, #16]
				fs->fsi_flag = 1;
 801c264:	7165      	strb	r5, [r4, #5]
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801c266:	4635      	mov	r5, r6
 801c268:	e7e1      	b.n	801c22e <remove_chain+0x10>
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801c26a:	2001      	movs	r0, #1
 801c26c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;
 801c26e:	2002      	movs	r0, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 801c270:	bd70      	pop	{r4, r5, r6, pc}

0801c272 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801c272:	69c3      	ldr	r3, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 801c274:	3902      	subs	r1, #2
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801c276:	1e9a      	subs	r2, r3, #2
 801c278:	4291      	cmp	r1, r2
 801c27a:	d204      	bcs.n	801c286 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 801c27c:	7882      	ldrb	r2, [r0, #2]
 801c27e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c280:	fb02 0001 	mla	r0, r2, r1, r0
 801c284:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801c286:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 801c288:	4770      	bx	lr

0801c28a <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 801c28a:	b570      	push	{r4, r5, r6, lr}
 801c28c:	4604      	mov	r4, r0
 801c28e:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 801c290:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
 801c292:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 801c294:	2901      	cmp	r1, #1
 801c296:	d101      	bne.n	801c29c <dir_seek+0x12>
		return FR_INT_ERR;
 801c298:	2002      	movs	r0, #2
 801c29a:	bd70      	pop	{r4, r5, r6, pc}
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 801c29c:	6803      	ldr	r3, [r0, #0]
 801c29e:	69da      	ldr	r2, [r3, #28]
 801c2a0:	4291      	cmp	r1, r2
 801c2a2:	d2f9      	bcs.n	801c298 <dir_seek+0xe>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801c2a4:	b971      	cbnz	r1, 801c2c4 <dir_seek+0x3a>
 801c2a6:	7818      	ldrb	r0, [r3, #0]
 801c2a8:	2803      	cmp	r0, #3
 801c2aa:	d101      	bne.n	801c2b0 <dir_seek+0x26>
		clst = dj->fs->dirbase;
 801c2ac:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table */
 801c2ae:	b949      	cbnz	r1, 801c2c4 <dir_seek+0x3a>
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801c2b0:	8919      	ldrh	r1, [r3, #8]
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
 801c2b2:	2000      	movs	r0, #0
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801c2b4:	42a9      	cmp	r1, r5
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
 801c2b6:	60e0      	str	r0, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801c2b8:	d9ee      	bls.n	801c298 <dir_seek+0xe>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 801c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2bc:	eb03 1215 	add.w	r2, r3, r5, lsr #4
 801c2c0:	6122      	str	r2, [r4, #16]
 801c2c2:	e019      	b.n	801c2f8 <dir_seek+0x6e>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 801c2c4:	789e      	ldrb	r6, [r3, #2]
 801c2c6:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 801c2c8:	42b5      	cmp	r5, r6
 801c2ca:	d30e      	bcc.n	801c2ea <dir_seek+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 801c2cc:	6820      	ldr	r0, [r4, #0]
 801c2ce:	f7ff fe77 	bl	801bfc0 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c2d2:	1c42      	adds	r2, r0, #1
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 801c2d4:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c2d6:	d018      	beq.n	801c30a <dir_seek+0x80>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 801c2d8:	2801      	cmp	r0, #1
 801c2da:	d9dd      	bls.n	801c298 <dir_seek+0xe>
 801c2dc:	6823      	ldr	r3, [r4, #0]
 801c2de:	69da      	ldr	r2, [r3, #28]
 801c2e0:	4290      	cmp	r0, r2
 801c2e2:	d2d9      	bcs.n	801c298 <dir_seek+0xe>
				return FR_INT_ERR;
			idx -= ic;
 801c2e4:	1bad      	subs	r5, r5, r6
 801c2e6:	b2ad      	uxth	r5, r5
 801c2e8:	e7ee      	b.n	801c2c8 <dir_seek+0x3e>
		}
		dj->clust = clst;
 801c2ea:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 801c2ec:	6820      	ldr	r0, [r4, #0]
 801c2ee:	f7ff ffc0 	bl	801c272 <clust2sect>
 801c2f2:	eb00 1115 	add.w	r1, r0, r5, lsr #4
 801c2f6:	6121      	str	r1, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 801c2f8:	f005 050f 	and.w	r5, r5, #15
 801c2fc:	6820      	ldr	r0, [r4, #0]
 801c2fe:	016d      	lsls	r5, r5, #5
 801c300:	3530      	adds	r5, #48	; 0x30
 801c302:	1941      	adds	r1, r0, r5
 801c304:	6161      	str	r1, [r4, #20]

	return FR_OK;	/* Seek succeeded */
 801c306:	2000      	movs	r0, #0
 801c308:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c30a:	2001      	movs	r0, #1
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 801c30c:	bd70      	pop	{r4, r5, r6, pc}

0801c30e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801c30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 801c312:	88c6      	ldrh	r6, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801c314:	4604      	mov	r4, r0
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 801c316:	1c70      	adds	r0, r6, #1
 801c318:	b286      	uxth	r6, r0
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801c31a:	460f      	mov	r7, r1
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 801c31c:	b916      	cbnz	r6, 801c324 <dir_next+0x16>
		return FR_NO_FILE;
 801c31e:	2004      	movs	r0, #4
 801c320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 801c324:	6923      	ldr	r3, [r4, #16]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d0f9      	beq.n	801c31e <dir_next+0x10>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 801c32a:	f016 080f 	ands.w	r8, r6, #15
 801c32e:	d15c      	bne.n	801c3ea <dir_next+0xdc>
		dj->sect++;					/* Next sector */
 801c330:	1c59      	adds	r1, r3, #1
 801c332:	6121      	str	r1, [r4, #16]

		if (dj->clust == 0) {	/* Static table */
 801c334:	68e1      	ldr	r1, [r4, #12]
 801c336:	6820      	ldr	r0, [r4, #0]
 801c338:	b919      	cbnz	r1, 801c342 <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 801c33a:	8901      	ldrh	r1, [r0, #8]
 801c33c:	42b1      	cmp	r1, r6
 801c33e:	d9ee      	bls.n	801c31e <dir_next+0x10>
 801c340:	e053      	b.n	801c3ea <dir_next+0xdc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 801c342:	7882      	ldrb	r2, [r0, #2]
 801c344:	1e53      	subs	r3, r2, #1
 801c346:	ea13 1216 	ands.w	r2, r3, r6, lsr #4
 801c34a:	d14e      	bne.n	801c3ea <dir_next+0xdc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 801c34c:	f7ff fe38 	bl	801bfc0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 801c350:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 801c352:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 801c354:	d802      	bhi.n	801c35c <dir_next+0x4e>
 801c356:	2002      	movs	r0, #2
 801c358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801c35c:	3001      	adds	r0, #1
 801c35e:	d102      	bne.n	801c366 <dir_next+0x58>
 801c360:	2001      	movs	r0, #1
 801c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 801c366:	6820      	ldr	r0, [r4, #0]
 801c368:	69c1      	ldr	r1, [r0, #28]
 801c36a:	428d      	cmp	r5, r1
 801c36c:	d337      	bcc.n	801c3de <dir_next+0xd0>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 801c36e:	2f00      	cmp	r7, #0
 801c370:	d0d5      	beq.n	801c31e <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 801c372:	68e1      	ldr	r1, [r4, #12]
 801c374:	f7ff ff03 	bl	801c17e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801c378:	4605      	mov	r5, r0
 801c37a:	2800      	cmp	r0, #0
 801c37c:	d041      	beq.n	801c402 <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;
 801c37e:	2801      	cmp	r0, #1
 801c380:	d0e9      	beq.n	801c356 <dir_next+0x48>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801c382:	1c41      	adds	r1, r0, #1
 801c384:	d0ec      	beq.n	801c360 <dir_next+0x52>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 801c386:	6820      	ldr	r0, [r4, #0]
 801c388:	2100      	movs	r1, #0
 801c38a:	f7ff fd2d 	bl	801bde8 <move_window>
 801c38e:	4607      	mov	r7, r0
 801c390:	2800      	cmp	r0, #0
 801c392:	d1e5      	bne.n	801c360 <dir_next+0x52>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 801c394:	6820      	ldr	r0, [r4, #0]
 801c396:	4639      	mov	r1, r7
 801c398:	3030      	adds	r0, #48	; 0x30
 801c39a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c39e:	f7ff fc98 	bl	801bcd2 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 801c3a2:	f8d4 9000 	ldr.w	r9, [r4]
 801c3a6:	4629      	mov	r1, r5
 801c3a8:	4648      	mov	r0, r9
 801c3aa:	f7ff ff62 	bl	801c272 <clust2sect>
 801c3ae:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801c3b2:	6820      	ldr	r0, [r4, #0]
 801c3b4:	7882      	ldrb	r2, [r0, #2]
 801c3b6:	42ba      	cmp	r2, r7
 801c3b8:	d90e      	bls.n	801c3d8 <dir_next+0xca>
						dj->fs->wflag = 1;
 801c3ba:	2101      	movs	r1, #1
 801c3bc:	7101      	strb	r1, [r0, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 801c3be:	6820      	ldr	r0, [r4, #0]
 801c3c0:	2100      	movs	r1, #0
 801c3c2:	f7ff fd11 	bl	801bde8 <move_window>
 801c3c6:	2800      	cmp	r0, #0
 801c3c8:	d1ca      	bne.n	801c360 <dir_next+0x52>
						dj->fs->winsect++;
 801c3ca:	6820      	ldr	r0, [r4, #0]
 801c3cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801c3ce:	3701      	adds	r7, #1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 801c3d0:	1c53      	adds	r3, r2, #1
 801c3d2:	62c3      	str	r3, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801c3d4:	b2ff      	uxtb	r7, r7
 801c3d6:	e7ec      	b.n	801c3b2 <dir_next+0xa4>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 801c3d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c3da:	1bdf      	subs	r7, r3, r7
 801c3dc:	62c7      	str	r7, [r0, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 801c3de:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 801c3e0:	6820      	ldr	r0, [r4, #0]
 801c3e2:	4629      	mov	r1, r5
 801c3e4:	f7ff ff45 	bl	801c272 <clust2sect>
 801c3e8:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 801c3ea:	6820      	ldr	r0, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 801c3ec:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 801c3ee:	ea4f 1848 	mov.w	r8, r8, lsl #5
 801c3f2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 801c3f6:	eb00 0208 	add.w	r2, r0, r8
 801c3fa:	6162      	str	r2, [r4, #20]

	return FR_OK;
 801c3fc:	2000      	movs	r0, #0
 801c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801c402:	2007      	movs	r0, #7

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
 801c404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c408 <dir_find.part.5>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
 801c408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c40c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801c410:	4606      	mov	r6, r0
 801c412:	464c      	mov	r4, r9

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 801c414:	6830      	ldr	r0, [r6, #0]
 801c416:	6931      	ldr	r1, [r6, #16]
 801c418:	f7ff fce6 	bl	801bde8 <move_window>
		if (res != FR_OK) break;
 801c41c:	4680      	mov	r8, r0
 801c41e:	2800      	cmp	r0, #0
 801c420:	f040 8083 	bne.w	801c52a <dir_find.part.5+0x122>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 801c424:	6975      	ldr	r5, [r6, #20]
		c = dir[DIR_Name];
 801c426:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c428:	2f00      	cmp	r7, #0
 801c42a:	d078      	beq.n	801c51e <dir_find.part.5+0x116>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 801c42c:	7aea      	ldrb	r2, [r5, #11]
		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c42e:	2fe5      	cmp	r7, #229	; 0xe5
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 801c430:	f002 033f 	and.w	r3, r2, #63	; 0x3f
		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c434:	d069      	beq.n	801c50a <dir_find.part.5+0x102>
 801c436:	f002 0008 	and.w	r0, r2, #8
 801c43a:	b2c1      	uxtb	r1, r0
 801c43c:	b111      	cbz	r1, 801c444 <dir_find.part.5+0x3c>
 801c43e:	2b0f      	cmp	r3, #15
 801c440:	d163      	bne.n	801c50a <dir_find.part.5+0x102>
 801c442:	e001      	b.n	801c448 <dir_find.part.5+0x40>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c444:	2b0f      	cmp	r3, #15
 801c446:	d14a      	bne.n	801c4de <dir_find.part.5+0xd6>
				if (dj->lfn) {
 801c448:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 801c44c:	f1bb 0f00 	cmp.w	fp, #0
 801c450:	d05c      	beq.n	801c50c <dir_find.part.5+0x104>
					if (c & 0x40) {		/* Is it start of LFN sequence? */
 801c452:	f007 0040 	and.w	r0, r7, #64	; 0x40
 801c456:	b2c1      	uxtb	r1, r0
 801c458:	b131      	cbz	r1, 801c468 <dir_find.part.5+0x60>
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
 801c45a:	88f4      	ldrh	r4, [r6, #6]
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & 0x40) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
 801c45c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
 801c460:	8434      	strh	r4, [r6, #32]
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & 0x40) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
 801c462:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
 801c466:	e001      	b.n	801c46c <dir_find.part.5+0x64>
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c468:	42a7      	cmp	r7, r4
 801c46a:	d14e      	bne.n	801c50a <dir_find.part.5+0x102>
 801c46c:	7b6b      	ldrb	r3, [r5, #13]
 801c46e:	454b      	cmp	r3, r9
 801c470:	d14b      	bne.n	801c50a <dir_find.part.5+0x102>
{
	int i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 801c472:	782a      	ldrb	r2, [r5, #0]
 801c474:	f002 00bf 	and.w	r0, r2, #191	; 0xbf
 801c478:	1e44      	subs	r4, r0, #1
 801c47a:	210d      	movs	r1, #13
 801c47c:	434c      	muls	r4, r1
	s = 0; wc = 1;
 801c47e:	f04f 0801 	mov.w	r8, #1
 801c482:	f04f 0a00 	mov.w	sl, #0
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 801c486:	4b2a      	ldr	r3, [pc, #168]	; (801c530 <dir_find.part.5+0x128>)
 801c488:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801c48c:	186a      	adds	r2, r5, r1
 801c48e:	5c6b      	ldrb	r3, [r5, r1]
 801c490:	7850      	ldrb	r0, [r2, #1]
 801c492:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 801c496:	f1b8 0f00 	cmp.w	r8, #0
 801c49a:	d00b      	beq.n	801c4b4 <dir_find.part.5+0xac>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 801c49c:	f7ff fbfe 	bl	801bc9c <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 801c4a0:	2cfe      	cmp	r4, #254	; 0xfe
	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 801c4a2:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 801c4a4:	dc31      	bgt.n	801c50a <dir_find.part.5+0x102>
 801c4a6:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
 801c4aa:	f7ff fbf7 	bl	801bc9c <ff_wtoupper>
 801c4ae:	3401      	adds	r4, #1
 801c4b0:	4580      	cmp	r8, r0
 801c4b2:	e002      	b.n	801c4ba <dir_find.part.5+0xb2>
				return FALSE;			/* Not matched */
		} else {
			if (uc != 0xFFFF) return FALSE;	/* Check filler */
 801c4b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c4b8:	4288      	cmp	r0, r1
 801c4ba:	d126      	bne.n	801c50a <dir_find.part.5+0x102>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 801c4bc:	f10a 0a01 	add.w	sl, sl, #1
 801c4c0:	f1ba 0f0d 	cmp.w	sl, #13
 801c4c4:	d1df      	bne.n	801c486 <dir_find.part.5+0x7e>

	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
 801c4c6:	782a      	ldrb	r2, [r5, #0]
 801c4c8:	f002 0040 	and.w	r0, r2, #64	; 0x40
 801c4cc:	b2c3      	uxtb	r3, r0
 801c4ce:	b34b      	cbz	r3, 801c524 <dir_find.part.5+0x11c>
 801c4d0:	f1b8 0f00 	cmp.w	r8, #0
 801c4d4:	d026      	beq.n	801c524 <dir_find.part.5+0x11c>
 801c4d6:	f83b 4014 	ldrh.w	r4, [fp, r4, lsl #1]
 801c4da:	b31c      	cbz	r4, 801c524 <dir_find.part.5+0x11c>
 801c4dc:	e015      	b.n	801c50a <dir_find.part.5+0x102>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 801c4de:	b924      	cbnz	r4, 801c4ea <dir_find.part.5+0xe2>
 801c4e0:	4628      	mov	r0, r5
 801c4e2:	f7ff fbfd 	bl	801bce0 <sum_sfn>
 801c4e6:	4581      	cmp	r9, r0
 801c4e8:	d01f      	beq.n	801c52a <dir_find.part.5+0x122>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 801c4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c4ee:	8432      	strh	r2, [r6, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 801c4f0:	69b2      	ldr	r2, [r6, #24]
 801c4f2:	7ad3      	ldrb	r3, [r2, #11]
 801c4f4:	f013 0301 	ands.w	r3, r3, #1
 801c4f8:	d107      	bne.n	801c50a <dir_find.part.5+0x102>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 801c4fa:	5ce8      	ldrb	r0, [r5, r3]
 801c4fc:	5cd1      	ldrb	r1, [r2, r3]
 801c4fe:	3301      	adds	r3, #1
 801c500:	4288      	cmp	r0, r1
 801c502:	d102      	bne.n	801c50a <dir_find.part.5+0x102>
 801c504:	2b0b      	cmp	r3, #11
 801c506:	d1f8      	bne.n	801c4fa <dir_find.part.5+0xf2>
 801c508:	e00f      	b.n	801c52a <dir_find.part.5+0x122>
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c50a:	24ff      	movs	r4, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
 801c50c:	4630      	mov	r0, r6
 801c50e:	2100      	movs	r1, #0
 801c510:	f7ff fefd 	bl	801c30e <dir_next>
	} while (res == FR_OK);
 801c514:	4680      	mov	r8, r0
 801c516:	2800      	cmp	r0, #0
 801c518:	f43f af7c 	beq.w	801c414 <dir_find.part.5+0xc>
 801c51c:	e005      	b.n	801c52a <dir_find.part.5+0x122>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c51e:	f04f 0804 	mov.w	r8, #4
 801c522:	e002      	b.n	801c52a <dir_find.part.5+0x122>
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c524:	1e79      	subs	r1, r7, #1
 801c526:	b2cc      	uxtb	r4, r1
 801c528:	e7f0      	b.n	801c50c <dir_find.part.5+0x104>
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
 801c52a:	4640      	mov	r0, r8
 801c52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c530:	08020342 	.word	0x08020342

0801c534 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 801c534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 801c538:	780b      	ldrb	r3, [r1, #0]
 801c53a:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 801c53c:	4606      	mov	r6, r0
 801c53e:	4689      	mov	r9, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 801c540:	d001      	beq.n	801c546 <follow_path+0x12>
 801c542:	2b5c      	cmp	r3, #92	; 0x5c
 801c544:	d101      	bne.n	801c54a <follow_path+0x16>
		path++;
 801c546:	f109 0901 	add.w	r9, r9, #1
	dj->sclust = 0;						/* Start from the root dir */
 801c54a:	2400      	movs	r4, #0
 801c54c:	60b4      	str	r4, [r6, #8]
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 801c54e:	f899 0000 	ldrb.w	r0, [r9]
 801c552:	281f      	cmp	r0, #31
 801c554:	d870      	bhi.n	801c638 <follow_path+0x104>
		res = dir_seek(dj, 0);
 801c556:	4630      	mov	r0, r6
 801c558:	4621      	mov	r1, r4
 801c55a:	f7ff fe96 	bl	801c28a <dir_seek>
		dj->dir = NULL;
 801c55e:	6174      	str	r4, [r6, #20]
 801c560:	e10f      	b.n	801c782 <follow_path+0x24e>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c562:	f108 0801 	add.w	r8, r8, #1
 801c566:	f83b 7018 	ldrh.w	r7, [fp, r8, lsl #1]
 801c56a:	2f20      	cmp	r7, #32
 801c56c:	d0f9      	beq.n	801c562 <follow_path+0x2e>
 801c56e:	2f2e      	cmp	r7, #46	; 0x2e
 801c570:	d0f7      	beq.n	801c562 <follow_path+0x2e>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c572:	f1b8 0f00 	cmp.w	r8, #0
 801c576:	d001      	beq.n	801c57c <follow_path+0x48>
 801c578:	f044 0403 	orr.w	r4, r4, #3
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 801c57c:	eb0b 0145 	add.w	r1, fp, r5, lsl #1

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c580:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
 801c584:	2a2e      	cmp	r2, #46	; 0x2e
 801c586:	d001      	beq.n	801c58c <follow_path+0x58>
 801c588:	3d01      	subs	r5, #1
 801c58a:	d1f9      	bne.n	801c580 <follow_path+0x4c>
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c58c:	2200      	movs	r2, #0
 801c58e:	f04f 0a08 	mov.w	sl, #8
 801c592:	4617      	mov	r7, r2
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 801c594:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 801c598:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on enf of the LFN */
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	f040 808b 	bne.w	801c6b8 <follow_path+0x184>
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
 801c5a2:	69b3      	ldr	r3, [r6, #24]
 801c5a4:	7819      	ldrb	r1, [r3, #0]
 801c5a6:	29e5      	cmp	r1, #229	; 0xe5
 801c5a8:	d101      	bne.n	801c5ae <follow_path+0x7a>
 801c5aa:	2005      	movs	r0, #5
 801c5ac:	7018      	strb	r0, [r3, #0]

	if (ni == 8) b <<= 2;
 801c5ae:	f1ba 0f08 	cmp.w	sl, #8
 801c5b2:	d101      	bne.n	801c5b8 <follow_path+0x84>
 801c5b4:	00ba      	lsls	r2, r7, #2
 801c5b6:	b2d7      	uxtb	r7, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 801c5b8:	f007 030c 	and.w	r3, r7, #12
 801c5bc:	2b0c      	cmp	r3, #12
 801c5be:	f000 80c4 	beq.w	801c74a <follow_path+0x216>
 801c5c2:	f007 0103 	and.w	r1, r7, #3
 801c5c6:	2903      	cmp	r1, #3
 801c5c8:	f000 80bf 	beq.w	801c74a <follow_path+0x216>
		cf |= NS_LFN;
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 801c5cc:	f004 0002 	and.w	r0, r4, #2
 801c5d0:	b2c2      	uxtb	r2, r0
 801c5d2:	b94a      	cbnz	r2, 801c5e8 <follow_path+0xb4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c5d4:	f007 0703 	and.w	r7, r7, #3
 801c5d8:	2f01      	cmp	r7, #1
 801c5da:	bf08      	it	eq
 801c5dc:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c5e0:	2b04      	cmp	r3, #4
 801c5e2:	bf08      	it	eq
 801c5e4:	f044 0408 	orreq.w	r4, r4, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
 801c5e8:	69b3      	ldr	r3, [r6, #24]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 801c5ea:	4630      	mov	r0, r6
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
	}

	dj->fn[NS] = cf;	/* SFN is created */
 801c5ec:	72dc      	strb	r4, [r3, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 801c5ee:	2100      	movs	r1, #0
 801c5f0:	f7ff fe4b 	bl	801c28a <dir_seek>
	if (res != FR_OK) return res;
 801c5f4:	b910      	cbnz	r0, 801c5fc <follow_path+0xc8>
 801c5f6:	4630      	mov	r0, r6
 801c5f8:	f7ff ff06 	bl	801c408 <dir_find.part.5>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
 801c5fc:	69b1      	ldr	r1, [r6, #24]
 801c5fe:	7aca      	ldrb	r2, [r1, #11]
 801c600:	f002 0304 	and.w	r3, r2, #4
 801c604:	b2d9      	uxtb	r1, r3
			if (res != FR_OK) {				/* Could not find the object */
 801c606:	2800      	cmp	r0, #0
 801c608:	f040 80a2 	bne.w	801c750 <follow_path+0x21c>
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
 801c60c:	2900      	cmp	r1, #0
 801c60e:	f040 80b8 	bne.w	801c782 <follow_path+0x24e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 801c612:	6970      	ldr	r0, [r6, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 801c614:	7ac2      	ldrb	r2, [r0, #11]
 801c616:	f002 0310 	and.w	r3, r2, #16
 801c61a:	b2d9      	uxtb	r1, r3
 801c61c:	2900      	cmp	r1, #0
 801c61e:	f000 809e 	beq.w	801c75e <follow_path+0x22a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801c622:	7d44      	ldrb	r4, [r0, #21]
 801c624:	7d05      	ldrb	r5, [r0, #20]
 801c626:	7ec1      	ldrb	r1, [r0, #27]
 801c628:	7e80      	ldrb	r0, [r0, #26]
 801c62a:	ea45 2204 	orr.w	r2, r5, r4, lsl #8
 801c62e:	ea40 2301 	orr.w	r3, r0, r1, lsl #8
 801c632:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 801c636:	60b4      	str	r4, [r6, #8]
	const XCHAR *p;

	/* Create LFN in Unicode */
	si = di = 0;
	p = *path;
	lfn = dj->lfn;
 801c638:	f8d6 b01c 	ldr.w	fp, [r6, #28]
	WCHAR w, *lfn;
	int i, ni, si, di;
	const XCHAR *p;

	/* Create LFN in Unicode */
	si = di = 0;
 801c63c:	2500      	movs	r5, #0
	p = *path;
	lfn = dj->lfn;
	for (;;) {
		w = p[si++];					/* Get a character */
 801c63e:	f819 0005 	ldrb.w	r0, [r9, r5]
 801c642:	1c6c      	adds	r4, r5, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 801c644:	281f      	cmp	r0, #31
 801c646:	d91c      	bls.n	801c682 <follow_path+0x14e>
 801c648:	282f      	cmp	r0, #47	; 0x2f
 801c64a:	d01a      	beq.n	801c682 <follow_path+0x14e>
 801c64c:	285c      	cmp	r0, #92	; 0x5c
 801c64e:	d018      	beq.n	801c682 <follow_path+0x14e>
		if (di >= _MAX_LFN)				/* Reject too long name */
 801c650:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801c654:	f000 808f 	beq.w	801c776 <follow_path+0x242>
			b = p[si++];				/* Get 2nd byte */
			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
				return FR_INVALID_NAME;
			w = (w << 8) + b;
		}
		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
 801c658:	2101      	movs	r1, #1
 801c65a:	f7ff fb03 	bl	801bc64 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c65e:	2800      	cmp	r0, #0
 801c660:	f000 8089 	beq.w	801c776 <follow_path+0x242>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 801c664:	287f      	cmp	r0, #127	; 0x7f
 801c666:	d806      	bhi.n	801c676 <follow_path+0x142>
 801c668:	4a47      	ldr	r2, [pc, #284]	; (801c788 <follow_path+0x254>)
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 801c66a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801c66e:	b111      	cbz	r1, 801c676 <follow_path+0x142>
 801c670:	4281      	cmp	r1, r0
 801c672:	d1fa      	bne.n	801c66a <follow_path+0x136>
 801c674:	e07f      	b.n	801c776 <follow_path+0x242>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 801c676:	eb0b 0544 	add.w	r5, fp, r4, lsl #1
		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
 801c67a:	f825 0c02 	strh.w	r0, [r5, #-2]
 801c67e:	4625      	mov	r5, r4
 801c680:	e7dd      	b.n	801c63e <follow_path+0x10a>
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 801c682:	44a1      	add	r9, r4
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 801c684:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801c688:	281f      	cmp	r0, #31
 801c68a:	bf94      	ite	ls
 801c68c:	2404      	movls	r4, #4
 801c68e:	2400      	movhi	r4, #0
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 801c690:	2d00      	cmp	r5, #0
 801c692:	d070      	beq.n	801c776 <follow_path+0x242>
		w = lfn[di - 1];
 801c694:	f833 0d02 	ldrh.w	r0, [r3, #-2]!
		if (w != ' ' && w != '.') break;
 801c698:	2820      	cmp	r0, #32
 801c69a:	d001      	beq.n	801c6a0 <follow_path+0x16c>
 801c69c:	282e      	cmp	r0, #46	; 0x2e
 801c69e:	d101      	bne.n	801c6a4 <follow_path+0x170>
		di--;
 801c6a0:	3d01      	subs	r5, #1
 801c6a2:	e7f5      	b.n	801c690 <follow_path+0x15c>
	}
	if (!di) return FR_INVALID_NAME;	/* Reject null string */

	lfn[di] = 0;						/* LFN is created */
 801c6a4:	f04f 0800 	mov.w	r8, #0
 801c6a8:	f82b 8015 	strh.w	r8, [fp, r5, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 801c6ac:	69b0      	ldr	r0, [r6, #24]
 801c6ae:	2120      	movs	r1, #32
 801c6b0:	220b      	movs	r2, #11
 801c6b2:	f7ff fb0e 	bl	801bcd2 <mem_set>
 801c6b6:	e756      	b.n	801c566 <follow_path+0x32>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on enf of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c6b8:	2b20      	cmp	r3, #32
 801c6ba:	d003      	beq.n	801c6c4 <follow_path+0x190>
 801c6bc:	2b2e      	cmp	r3, #46	; 0x2e
 801c6be:	d104      	bne.n	801c6ca <follow_path+0x196>
 801c6c0:	45a8      	cmp	r8, r5
 801c6c2:	d05a      	beq.n	801c77a <follow_path+0x246>
			cf |= NS_LOSS | NS_LFN; continue;
 801c6c4:	f044 0403 	orr.w	r4, r4, #3
 801c6c8:	e764      	b.n	801c594 <follow_path+0x60>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c6ca:	4552      	cmp	r2, sl
 801c6cc:	da02      	bge.n	801c6d4 <follow_path+0x1a0>
 801c6ce:	45a8      	cmp	r8, r5
 801c6d0:	d115      	bne.n	801c6fe <follow_path+0x1ca>
 801c6d2:	e052      	b.n	801c77a <follow_path+0x246>
			if (ni == 11) {				/* Long extension */
 801c6d4:	f1ba 0f0b 	cmp.w	sl, #11
 801c6d8:	d104      	bne.n	801c6e4 <follow_path+0x1b0>
				cf |= NS_LOSS | NS_LFN; break;
 801c6da:	f044 0403 	orr.w	r4, r4, #3
 801c6de:	f04f 0a0b 	mov.w	sl, #11
 801c6e2:	e75e      	b.n	801c5a2 <follow_path+0x6e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c6e4:	45a8      	cmp	r8, r5
 801c6e6:	d003      	beq.n	801c6f0 <follow_path+0x1bc>
 801c6e8:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 801c6ec:	f73f af59 	bgt.w	801c5a2 <follow_path+0x6e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
 801c6f0:	00bf      	lsls	r7, r7, #2
 801c6f2:	b2ff      	uxtb	r7, r7
 801c6f4:	46a8      	mov	r8, r5
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c6f6:	f04f 0a0b 	mov.w	sl, #11
 801c6fa:	2208      	movs	r2, #8
 801c6fc:	e74a      	b.n	801c594 <follow_path+0x60>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
 801c6fe:	2b7f      	cmp	r3, #127	; 0x7f
 801c700:	d90e      	bls.n	801c720 <follow_path+0x1ec>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c702:	4618      	mov	r0, r3
 801c704:	2100      	movs	r1, #0
 801c706:	9201      	str	r2, [sp, #4]
 801c708:	f7ff faac 	bl	801bc64 <ff_convert>
			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 801c70c:	9a01      	ldr	r2, [sp, #4]
 801c70e:	4603      	mov	r3, r0
 801c710:	b118      	cbz	r0, 801c71a <follow_path+0x1e6>
 801c712:	481e      	ldr	r0, [pc, #120]	; (801c78c <follow_path+0x258>)
 801c714:	18c3      	adds	r3, r0, r3
 801c716:	f813 3c80 	ldrb.w	r3, [r3, #-128]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c71a:	f044 0402 	orr.w	r4, r4, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
 801c71e:	b12b      	cbz	r3, 801c72c <follow_path+0x1f8>
 801c720:	481b      	ldr	r0, [pc, #108]	; (801c790 <follow_path+0x25c>)
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 801c722:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801c726:	b129      	cbz	r1, 801c734 <follow_path+0x200>
 801c728:	4299      	cmp	r1, r3
 801c72a:	d1fa      	bne.n	801c722 <follow_path+0x1ee>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
 801c72c:	f044 0403 	orr.w	r4, r4, #3
 801c730:	235f      	movs	r3, #95	; 0x5f
 801c732:	e006      	b.n	801c742 <follow_path+0x20e>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c734:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 801c738:	b281      	uxth	r1, r0
 801c73a:	2919      	cmp	r1, #25
 801c73c:	d811      	bhi.n	801c762 <follow_path+0x22e>
					b |= 2;
 801c73e:	f047 0702 	orr.w	r7, r7, #2
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 801c742:	69b0      	ldr	r0, [r6, #24]
 801c744:	5483      	strb	r3, [r0, r2]
 801c746:	3201      	adds	r2, #1
 801c748:	e724      	b.n	801c594 <follow_path+0x60>

	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
		cf |= NS_LFN;
 801c74a:	f044 0402 	orr.w	r4, r4, #2
 801c74e:	e73d      	b.n	801c5cc <follow_path+0x98>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
 801c750:	2804      	cmp	r0, #4
 801c752:	d116      	bne.n	801c782 <follow_path+0x24e>
					res = FR_NO_PATH;
 801c754:	2900      	cmp	r1, #0
 801c756:	bf14      	ite	ne
 801c758:	2004      	movne	r0, #4
 801c75a:	2005      	moveq	r0, #5
 801c75c:	e011      	b.n	801c782 <follow_path+0x24e>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 801c75e:	2005      	movs	r0, #5
 801c760:	e00f      	b.n	801c782 <follow_path+0x24e>
				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c762:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 801c766:	b281      	uxth	r1, r0
 801c768:	2919      	cmp	r1, #25
 801c76a:	d8ea      	bhi.n	801c742 <follow_path+0x20e>
						b |= 1; w -= 0x20;
 801c76c:	3b20      	subs	r3, #32
 801c76e:	f047 0701 	orr.w	r7, r7, #1
 801c772:	b29b      	uxth	r3, r3
 801c774:	e7e5      	b.n	801c742 <follow_path+0x20e>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
 801c776:	2006      	movs	r0, #6
 801c778:	e003      	b.n	801c782 <follow_path+0x24e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
 801c77a:	f1ba 0f0b 	cmp.w	sl, #11
 801c77e:	d1b7      	bne.n	801c6f0 <follow_path+0x1bc>
 801c780:	e7ab      	b.n	801c6da <follow_path+0x1a6>
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
 801c782:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c786:	bf00      	nop
 801c788:	08020289 	.word	0x08020289
 801c78c:	080202c2 	.word	0x080202c2
 801c790:	08020292 	.word	0x08020292

0801c794 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 801c794:	b538      	push	{r3, r4, r5, lr}
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 801c796:	8c01      	ldrh	r1, [r0, #32]
{
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
 801c798:	88c5      	ldrh	r5, [r0, #6]
	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 801c79a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c79e:	4299      	cmp	r1, r3
 801c7a0:	bf08      	it	eq
 801c7a2:	4629      	moveq	r1, r5
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 801c7a4:	4604      	mov	r4, r0
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 801c7a6:	f7ff fd70 	bl	801c28a <dir_seek>
	if (res == FR_OK) {
 801c7aa:	4601      	mov	r1, r0
 801c7ac:	b9b8      	cbnz	r0, 801c7de <dir_remove+0x4a>
		do {
			res = move_window(dj->fs, dj->sect);
 801c7ae:	6921      	ldr	r1, [r4, #16]
 801c7b0:	6820      	ldr	r0, [r4, #0]
 801c7b2:	f7ff fb19 	bl	801bde8 <move_window>
			if (res != FR_OK) break;
 801c7b6:	4601      	mov	r1, r0
 801c7b8:	b970      	cbnz	r0, 801c7d8 <dir_remove+0x44>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 801c7ba:	6960      	ldr	r0, [r4, #20]
 801c7bc:	22e5      	movs	r2, #229	; 0xe5
 801c7be:	7002      	strb	r2, [r0, #0]
			dj->fs->wflag = 1;
 801c7c0:	6823      	ldr	r3, [r4, #0]
 801c7c2:	2001      	movs	r0, #1
 801c7c4:	7118      	strb	r0, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 801c7c6:	88e2      	ldrh	r2, [r4, #6]
 801c7c8:	42aa      	cmp	r2, r5
 801c7ca:	d208      	bcs.n	801c7de <dir_remove+0x4a>
			res = dir_next(dj, FALSE);	/* Next entry */
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	f7ff fd9e 	bl	801c30e <dir_next>
		} while (res == FR_OK);
 801c7d2:	4601      	mov	r1, r0
 801c7d4:	2800      	cmp	r0, #0
 801c7d6:	d0ea      	beq.n	801c7ae <dir_remove+0x1a>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c7d8:	2904      	cmp	r1, #4
 801c7da:	bf08      	it	eq
 801c7dc:	2102      	moveq	r1, #2
		}
	}
#endif

	return res;
}
 801c7de:	4608      	mov	r0, r1
 801c7e0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c7e4 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 801c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
 801c7e8:	27ff      	movs	r7, #255	; 0xff
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 801c7ea:	4605      	mov	r5, r0
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
 801c7ec:	463c      	mov	r4, r7
#endif

	res = FR_NO_FILE;
 801c7ee:	2604      	movs	r6, #4
	while (dj->sect) {
 801c7f0:	6929      	ldr	r1, [r5, #16]
 801c7f2:	2900      	cmp	r1, #0
 801c7f4:	d06c      	beq.n	801c8d0 <dir_read+0xec>
		res = move_window(dj->fs, dj->sect);
 801c7f6:	6828      	ldr	r0, [r5, #0]
 801c7f8:	f7ff faf6 	bl	801bde8 <move_window>
		if (res != FR_OK) break;
 801c7fc:	4606      	mov	r6, r0
 801c7fe:	2800      	cmp	r0, #0
 801c800:	d167      	bne.n	801c8d2 <dir_read+0xee>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 801c802:	696b      	ldr	r3, [r5, #20]
		c = dir[DIR_Name];
 801c804:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c806:	2a00      	cmp	r2, #0
 801c808:	d069      	beq.n	801c8de <dir_read+0xfa>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c80a:	2ae5      	cmp	r2, #229	; 0xe5
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 801c80c:	7ad8      	ldrb	r0, [r3, #11]
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c80e:	d056      	beq.n	801c8be <dir_read+0xda>
 801c810:	2a2e      	cmp	r2, #46	; 0x2e
 801c812:	d054      	beq.n	801c8be <dir_read+0xda>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 801c814:	f000 013f 	and.w	r1, r0, #63	; 0x3f
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c818:	f000 0008 	and.w	r0, r0, #8
 801c81c:	b2c0      	uxtb	r0, r0
 801c81e:	b110      	cbz	r0, 801c826 <dir_read+0x42>
 801c820:	290f      	cmp	r1, #15
 801c822:	d14c      	bne.n	801c8be <dir_read+0xda>
 801c824:	e001      	b.n	801c82a <dir_read+0x46>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c826:	290f      	cmp	r1, #15
 801c828:	d13f      	bne.n	801c8aa <dir_read+0xc6>
				if (c & 0x40) {			/* Is it start of LFN sequence? */
 801c82a:	f002 0640 	and.w	r6, r2, #64	; 0x40
 801c82e:	b2f1      	uxtb	r1, r6
 801c830:	b129      	cbz	r1, 801c83e <dir_read+0x5a>
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
 801c832:	88ec      	ldrh	r4, [r5, #6]
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (c & 0x40) {			/* Is it start of LFN sequence? */
					sum = dir[LDIR_Chksum];
 801c834:	7b5f      	ldrb	r7, [r3, #13]
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
 801c836:	842c      	strh	r4, [r5, #32]
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (c & 0x40) {			/* Is it start of LFN sequence? */
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
 801c838:	f002 04bf 	and.w	r4, r2, #191	; 0xbf
 801c83c:	e001      	b.n	801c842 <dir_read+0x5e>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c83e:	42a2      	cmp	r2, r4
 801c840:	d13d      	bne.n	801c8be <dir_read+0xda>
 801c842:	7b5a      	ldrb	r2, [r3, #13]
 801c844:	42ba      	cmp	r2, r7
 801c846:	d13a      	bne.n	801c8be <dir_read+0xda>
{
	int i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c848:	7818      	ldrb	r0, [r3, #0]
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c84a:	69ee      	ldr	r6, [r5, #28]
{
	int i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c84c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801c850:	1e4a      	subs	r2, r1, #1
 801c852:	200d      	movs	r0, #13
 801c854:	4342      	muls	r2, r0

	s = 0; wc = 1;
 801c856:	f04f 0e01 	mov.w	lr, #1
 801c85a:	2100      	movs	r1, #0
	do {
		uc = LD_WORD(dir+LfnOfs[s]);			/* Pick an LFN character from the entry */
 801c85c:	4822      	ldr	r0, [pc, #136]	; (801c8e8 <dir_read+0x104>)
 801c85e:	f811 c000 	ldrb.w	ip, [r1, r0]
 801c862:	eb03 000c 	add.w	r0, r3, ip
 801c866:	f890 8001 	ldrb.w	r8, [r0, #1]
 801c86a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801c86e:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
		if (wc) {	/* Last char has not been processed */
 801c872:	f1be 0f00 	cmp.w	lr, #0
 801c876:	d006      	beq.n	801c886 <dir_read+0xa2>
			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 801c878:	2afe      	cmp	r2, #254	; 0xfe
 801c87a:	dc20      	bgt.n	801c8be <dir_read+0xda>
			lfnbuf[i++] = wc = uc;				/* Store it */
 801c87c:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);			/* Pick an LFN character from the entry */
 801c880:	4686      	mov	lr, r0
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;				/* Store it */
 801c882:	3201      	adds	r2, #1
 801c884:	e003      	b.n	801c88e <dir_read+0xaa>
		} else {
			if (uc != 0xFFFF) return FALSE;		/* Check filler */
 801c886:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801c88a:	4560      	cmp	r0, ip
 801c88c:	d117      	bne.n	801c8be <dir_read+0xda>
		}
	} while (++s < 13);						/* Read all character in the entry */
 801c88e:	3101      	adds	r1, #1
 801c890:	290d      	cmp	r1, #13
 801c892:	d1e3      	bne.n	801c85c <dir_read+0x78>

	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	f003 0040 	and.w	r0, r3, #64	; 0x40
 801c89a:	b2c1      	uxtb	r1, r0
 801c89c:	b1e1      	cbz	r1, 801c8d8 <dir_read+0xf4>
		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 801c89e:	2afe      	cmp	r2, #254	; 0xfe
 801c8a0:	dc0d      	bgt.n	801c8be <dir_read+0xda>
		lfnbuf[i] = 0;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c8a8:	e016      	b.n	801c8d8 <dir_read+0xf4>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 801c8aa:	b924      	cbnz	r4, 801c8b6 <dir_read+0xd2>
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f7ff fa17 	bl	801bce0 <sum_sfn>
 801c8b2:	4287      	cmp	r7, r0
 801c8b4:	d015      	beq.n	801c8e2 <dir_read+0xfe>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 801c8b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c8ba:	842b      	strh	r3, [r5, #32]
 801c8bc:	e011      	b.n	801c8e2 <dir_read+0xfe>
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c8be:	24ff      	movs	r4, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 801c8c0:	4628      	mov	r0, r5
 801c8c2:	2100      	movs	r1, #0
 801c8c4:	f7ff fd23 	bl	801c30e <dir_next>
		if (res != FR_OK) break;
 801c8c8:	4606      	mov	r6, r0
 801c8ca:	2800      	cmp	r0, #0
 801c8cc:	d090      	beq.n	801c7f0 <dir_read+0xc>
 801c8ce:	e000      	b.n	801c8d2 <dir_read+0xee>
	}

	if (res != FR_OK) dj->sect = 0;
 801c8d0:	b13e      	cbz	r6, 801c8e2 <dir_read+0xfe>
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	612a      	str	r2, [r5, #16]
 801c8d6:	e004      	b.n	801c8e2 <dir_read+0xfe>
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 801c8d8:	3c01      	subs	r4, #1
 801c8da:	b2e4      	uxtb	r4, r4
 801c8dc:	e7f0      	b.n	801c8c0 <dir_read+0xdc>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c8de:	2604      	movs	r6, #4
 801c8e0:	e7f7      	b.n	801c8d2 <dir_read+0xee>
	}

	if (res != FR_OK) dj->sect = 0;

	return res;
}
 801c8e2:	4630      	mov	r0, r6
 801c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8e8:	08020342 	.word	0x08020342

0801c8ec <gen_numname>:
	BYTE *dst,			/* Pointer to genartated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD num			/* Sequense number */
)
{
 801c8ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8ee:	461c      	mov	r4, r3
 801c8f0:	4616      	mov	r6, r2
	char ns[8];
	int i, j;


	mem_cpy(dst, src, 11);
 801c8f2:	220b      	movs	r2, #11
	BYTE *dst,			/* Pointer to genartated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD num			/* Sequense number */
)
{
 801c8f4:	4605      	mov	r5, r0
	char ns[8];
	int i, j;


	mem_cpy(dst, src, 11);
 801c8f6:	f7ff f9e3 	bl	801bcc0 <mem_cpy>

	if (num > 5) {	/* On many collisions, generate a hash number instead of sequencial number */
 801c8fa:	2c05      	cmp	r4, #5
 801c8fc:	d90b      	bls.n	801c916 <gen_numname+0x2a>

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 801c8fe:	1eb2      	subs	r2, r6, #2


	mem_cpy(dst, src, 11);

	if (num > 5) {	/* On many collisions, generate a hash number instead of sequencial number */
		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
 801c900:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801c904:	0863      	lsrs	r3, r4, #1
 801c906:	ea43 34c4 	orr.w	r4, r3, r4, lsl #15
 801c90a:	8853      	ldrh	r3, [r2, #2]
 801c90c:	fa10 f184 	uxtah	r1, r0, r4
 801c910:	b28c      	uxth	r4, r1
 801c912:	2b00      	cmp	r3, #0
 801c914:	d1f4      	bne.n	801c900 <gen_numname+0x14>
	BYTE *dst,			/* Pointer to genartated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD num			/* Sequense number */
)
{
 801c916:	2307      	movs	r3, #7
	}

	/* itoa */
	i = 7;
	do {
		ns[i--] = (num % 10) + '0';
 801c918:	200a      	movs	r0, #10
 801c91a:	fbb4 f2f0 	udiv	r2, r4, r0
 801c91e:	fb00 4412 	mls	r4, r0, r2, r4
 801c922:	3430      	adds	r4, #48	; 0x30
 801c924:	f80d 4003 	strb.w	r4, [sp, r3]
		num /= 10;
 801c928:	b294      	uxth	r4, r2
	}

	/* itoa */
	i = 7;
	do {
		ns[i--] = (num % 10) + '0';
 801c92a:	3b01      	subs	r3, #1
		num /= 10;
	} while (num);
 801c92c:	2c00      	cmp	r4, #0
 801c92e:	d1f3      	bne.n	801c918 <gen_numname+0x2c>
	ns[i] = '~';
 801c930:	a902      	add	r1, sp, #8
 801c932:	18c8      	adds	r0, r1, r3
 801c934:	227e      	movs	r2, #126	; 0x7e
 801c936:	f800 2c08 	strb.w	r2, [r0, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c93a:	429c      	cmp	r4, r3
 801c93c:	da04      	bge.n	801c948 <gen_numname+0x5c>
 801c93e:	5d29      	ldrb	r1, [r5, r4]
 801c940:	2920      	cmp	r1, #32
 801c942:	d001      	beq.n	801c948 <gen_numname+0x5c>
 801c944:	3401      	adds	r4, #1
 801c946:	e7f8      	b.n	801c93a <gen_numname+0x4e>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c948:	2b07      	cmp	r3, #7
 801c94a:	dc05      	bgt.n	801c958 <gen_numname+0x6c>
 801c94c:	aa02      	add	r2, sp, #8
 801c94e:	18d1      	adds	r1, r2, r3
 801c950:	3301      	adds	r3, #1
 801c952:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 801c956:	e000      	b.n	801c95a <gen_numname+0x6e>
 801c958:	2020      	movs	r0, #32
 801c95a:	5528      	strb	r0, [r5, r4]
 801c95c:	3401      	adds	r4, #1
	} while (j < 8);
 801c95e:	2c07      	cmp	r4, #7
 801c960:	ddf2      	ble.n	801c948 <gen_numname+0x5c>
}
 801c962:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0801c964 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 801c964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 801c968:	6986      	ldr	r6, [r0, #24]
 801c96a:	f8d0 801c 	ldr.w	r8, [r0, #28]
	mem_cpy(sn, fn, 12);
 801c96e:	220c      	movs	r2, #12
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 801c970:	4604      	mov	r4, r0
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
	mem_cpy(sn, fn, 12);
 801c972:	4631      	mov	r1, r6
 801c974:	a801      	add	r0, sp, #4
 801c976:	f7ff f9a3 	bl	801bcc0 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c97a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801c97e:	07dd      	lsls	r5, r3, #31
 801c980:	d522      	bpl.n	801c9c8 <dir_register+0x64>
		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
 801c982:	2000      	movs	r0, #0
 801c984:	72f0      	strb	r0, [r6, #11]
		for (n = 1; n < 100; n++) {
 801c986:	2701      	movs	r7, #1
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
 801c988:	61e0      	str	r0, [r4, #28]
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 801c98a:	4630      	mov	r0, r6
 801c98c:	a901      	add	r1, sp, #4
 801c98e:	4642      	mov	r2, r8
 801c990:	463b      	mov	r3, r7
 801c992:	f7ff ffab 	bl	801c8ec <gen_numname>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 801c996:	4620      	mov	r0, r4
 801c998:	2100      	movs	r1, #0
 801c99a:	f7ff fc76 	bl	801c28a <dir_seek>
	if (res != FR_OK) return res;
 801c99e:	4605      	mov	r5, r0
 801c9a0:	b950      	cbnz	r0, 801c9b8 <dir_register+0x54>
 801c9a2:	4620      	mov	r0, r4
 801c9a4:	f7ff fd30 	bl	801c408 <dir_find.part.5>
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 801c9a8:	4605      	mov	r5, r0
 801c9aa:	b928      	cbnz	r0, 801c9b8 <dir_register+0x54>

	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 801c9ac:	3701      	adds	r7, #1
 801c9ae:	b2bf      	uxth	r7, r7
 801c9b0:	2f64      	cmp	r7, #100	; 0x64
 801c9b2:	d1ea      	bne.n	801c98a <dir_register+0x26>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c9b4:	2507      	movs	r5, #7
 801c9b6:	e0b4      	b.n	801cb22 <dir_register+0x1be>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c9b8:	2d04      	cmp	r5, #4
 801c9ba:	f040 80b2 	bne.w	801cb22 <dir_register+0x1be>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 801c9be:	f89d 100f 	ldrb.w	r1, [sp, #15]
 801c9c2:	72f1      	strb	r1, [r6, #11]
 801c9c4:	f8c4 801c 	str.w	r8, [r4, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
 801c9c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801c9cc:	f002 0502 	and.w	r5, r2, #2
 801c9d0:	b2eb      	uxtb	r3, r5
 801c9d2:	b913      	cbnz	r3, 801c9da <dir_register+0x76>
		for (ne = 0; lfn[ne]; ne++) ;
		ne = (ne + 25) / 13;
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
 801c9d4:	f04f 0801 	mov.w	r8, #1
 801c9d8:	e00d      	b.n	801c9f6 <dir_register+0x92>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
 801c9da:	2000      	movs	r0, #0
		for (ne = 0; lfn[ne]; ne++) ;
 801c9dc:	f838 1010 	ldrh.w	r1, [r8, r0, lsl #1]
 801c9e0:	b111      	cbz	r1, 801c9e8 <dir_register+0x84>
 801c9e2:	1c45      	adds	r5, r0, #1
 801c9e4:	b2a8      	uxth	r0, r5
 801c9e6:	e7f9      	b.n	801c9dc <dir_register+0x78>
		ne = (ne + 25) / 13;
 801c9e8:	f100 0819 	add.w	r8, r0, #25
 801c9ec:	220d      	movs	r2, #13
 801c9ee:	fb98 f5f2 	sdiv	r5, r8, r2
 801c9f2:	fa1f f885 	uxth.w	r8, r5
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
	}

	/* Reserve contiguous entries */
	res = dir_seek(dj, 0);
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	2100      	movs	r1, #0
 801c9fa:	f7ff fc46 	bl	801c28a <dir_seek>
	if (res != FR_OK) return res;
 801c9fe:	4605      	mov	r5, r0
 801ca00:	2800      	cmp	r0, #0
 801ca02:	f040 808e 	bne.w	801cb22 <dir_register+0x1be>
 801ca06:	4607      	mov	r7, r0
 801ca08:	4606      	mov	r6, r0
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
 801ca0a:	6820      	ldr	r0, [r4, #0]
 801ca0c:	6921      	ldr	r1, [r4, #16]
 801ca0e:	f7ff f9eb 	bl	801bde8 <move_window>
		if (res != FR_OK) break;
 801ca12:	4605      	mov	r5, r0
 801ca14:	2800      	cmp	r0, #0
 801ca16:	f040 8084 	bne.w	801cb22 <dir_register+0x1be>
		c = *dj->dir;				/* Check the entry status */
 801ca1a:	6963      	ldr	r3, [r4, #20]
 801ca1c:	7818      	ldrb	r0, [r3, #0]
		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
 801ca1e:	28e5      	cmp	r0, #229	; 0xe5
 801ca20:	d000      	beq.n	801ca24 <dir_register+0xc0>
 801ca22:	b930      	cbnz	r0, 801ca32 <dir_register+0xce>
			if (n == 0) is = dj->index;	/* First index of the contigulus entry */
 801ca24:	b906      	cbnz	r6, 801ca28 <dir_register+0xc4>
 801ca26:	88e7      	ldrh	r7, [r4, #6]
			if (++n == ne) break;	/* A contiguous entry that requiered count is found */
 801ca28:	3601      	adds	r6, #1
 801ca2a:	b2b6      	uxth	r6, r6
 801ca2c:	4546      	cmp	r6, r8
 801ca2e:	d101      	bne.n	801ca34 <dir_register+0xd0>
 801ca30:	e008      	b.n	801ca44 <dir_register+0xe0>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
 801ca32:	462e      	mov	r6, r5
		}
		res = dir_next(dj, TRUE);	/* Next entry with table streach */
 801ca34:	4620      	mov	r0, r4
 801ca36:	2101      	movs	r1, #1
 801ca38:	f7ff fc69 	bl	801c30e <dir_next>
	} while (res == FR_OK);
 801ca3c:	4605      	mov	r5, r0
 801ca3e:	2800      	cmp	r0, #0
 801ca40:	d0e3      	beq.n	801ca0a <dir_register+0xa6>
 801ca42:	e06e      	b.n	801cb22 <dir_register+0x1be>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
 801ca44:	2e01      	cmp	r6, #1
 801ca46:	d053      	beq.n	801caf0 <dir_register+0x18c>
		res = dir_seek(dj, is);
 801ca48:	4620      	mov	r0, r4
 801ca4a:	4639      	mov	r1, r7
 801ca4c:	f7ff fc1d 	bl	801c28a <dir_seek>
		if (res == FR_OK) {
 801ca50:	4605      	mov	r5, r0
 801ca52:	2800      	cmp	r0, #0
 801ca54:	d165      	bne.n	801cb22 <dir_register+0x1be>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
 801ca56:	69a0      	ldr	r0, [r4, #24]
 801ca58:	f7ff f942 	bl	801bce0 <sum_sfn>
			ne--;
 801ca5c:	1e71      	subs	r1, r6, #1
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_seek(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
 801ca5e:	4607      	mov	r7, r0
			ne--;
 801ca60:	b28e      	uxth	r6, r1
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 801ca62:	6820      	ldr	r0, [r4, #0]
 801ca64:	6921      	ldr	r1, [r4, #16]
 801ca66:	f7ff f9bf 	bl	801bde8 <move_window>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 801ca6e:	2800      	cmp	r0, #0
 801ca70:	d157      	bne.n	801cb22 <dir_register+0x1be>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 801ca72:	6962      	ldr	r2, [r4, #20]
 801ca74:	f8d4 e01c 	ldr.w	lr, [r4, #28]
{
	int i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 801ca78:	7357      	strb	r7, [r2, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801ca7a:	200f      	movs	r0, #15
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 801ca7c:	b2f5      	uxtb	r5, r6
	int i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801ca7e:	72d0      	strb	r0, [r2, #11]
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 801ca80:	1e69      	subs	r1, r5, #1
 801ca82:	200d      	movs	r0, #13
 801ca84:	4341      	muls	r1, r0
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
 801ca86:	7313      	strb	r3, [r2, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 801ca88:	7693      	strb	r3, [r2, #26]
 801ca8a:	76d3      	strb	r3, [r2, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
 801ca8c:	4618      	mov	r0, r3
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 801ca8e:	f64f 7cff 	movw	ip, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 801ca92:	f8df 8098 	ldr.w	r8, [pc, #152]	; 801cb2c <dir_register+0x1c8>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 801ca96:	4563      	cmp	r3, ip
 801ca98:	bf18      	it	ne
 801ca9a:	f83e 3011 	ldrhne.w	r3, [lr, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 801ca9e:	f810 c008 	ldrb.w	ip, [r0, r8]
 801caa2:	f802 300c 	strb.w	r3, [r2, ip]
 801caa6:	4494      	add	ip, r2
 801caa8:	ea4f 2813 	mov.w	r8, r3, lsr #8
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 801caac:	bf18      	it	ne
 801caae:	3101      	addne	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 801cab0:	f88c 8001 	strb.w	r8, [ip, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
 801cab4:	3001      	adds	r0, #1
 801cab6:	f64f 7cff 	movw	ip, #65535	; 0xffff
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 801caba:	2b00      	cmp	r3, #0
 801cabc:	bf08      	it	eq
 801cabe:	4663      	moveq	r3, ip
	} while (++s < 13);
 801cac0:	280d      	cmp	r0, #13
 801cac2:	d1e4      	bne.n	801ca8e <dir_register+0x12a>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 801cac4:	4563      	cmp	r3, ip
 801cac6:	d002      	beq.n	801cace <dir_register+0x16a>
 801cac8:	f83e 3011 	ldrh.w	r3, [lr, r1, lsl #1]
 801cacc:	b913      	cbnz	r3, 801cad4 <dir_register+0x170>
 801cace:	f046 0540 	orr.w	r5, r6, #64	; 0x40
 801cad2:	b2ed      	uxtb	r5, r5
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801cad4:	7015      	strb	r5, [r2, #0]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
 801cad6:	6821      	ldr	r1, [r4, #0]
 801cad8:	2201      	movs	r2, #1
 801cada:	710a      	strb	r2, [r1, #4]
				res = dir_next(dj, FALSE);	/* Next entry */
 801cadc:	4620      	mov	r0, r4
 801cade:	2100      	movs	r1, #0
 801cae0:	f7ff fc15 	bl	801c30e <dir_next>
			} while (res == FR_OK && --ne);
 801cae4:	4605      	mov	r5, r0
 801cae6:	b9e0      	cbnz	r0, 801cb22 <dir_register+0x1be>
 801cae8:	3e01      	subs	r6, #1
 801caea:	b2b6      	uxth	r6, r6
 801caec:	2e00      	cmp	r6, #0
 801caee:	d1b8      	bne.n	801ca62 <dir_register+0xfe>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
 801caf0:	6820      	ldr	r0, [r4, #0]
 801caf2:	6921      	ldr	r1, [r4, #16]
 801caf4:	f7ff f978 	bl	801bde8 <move_window>
		if (res == FR_OK) {
 801caf8:	4605      	mov	r5, r0
 801cafa:	b990      	cbnz	r0, 801cb22 <dir_register+0x1be>
			dir = dj->dir;
 801cafc:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, 32);		/* Clean the entry */
 801cafe:	4629      	mov	r1, r5
 801cb00:	4630      	mov	r0, r6
 801cb02:	2220      	movs	r2, #32
 801cb04:	f7ff f8e5 	bl	801bcd2 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 801cb08:	4630      	mov	r0, r6
 801cb0a:	69a1      	ldr	r1, [r4, #24]
 801cb0c:	220b      	movs	r2, #11
 801cb0e:	f7ff f8d7 	bl	801bcc0 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 801cb12:	69a0      	ldr	r0, [r4, #24]
 801cb14:	7ac3      	ldrb	r3, [r0, #11]
 801cb16:	f003 0118 	and.w	r1, r3, #24
 801cb1a:	7331      	strb	r1, [r6, #12]
			dj->fs->wflag = 1;
 801cb1c:	6820      	ldr	r0, [r4, #0]
 801cb1e:	2201      	movs	r2, #1
 801cb20:	7102      	strb	r2, [r0, #4]
		}
	}

	return res;
}
 801cb22:	4628      	mov	r0, r5
 801cb24:	b004      	add	sp, #16
 801cb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb2a:	bf00      	nop
 801cb2c:	08020342 	.word	0x08020342

0801cb30 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 801cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 801cb32:	6803      	ldr	r3, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 801cb34:	4615      	mov	r5, r2
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 801cb36:	781a      	ldrb	r2, [r3, #0]
 801cb38:	3a30      	subs	r2, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 801cb3a:	2a09      	cmp	r2, #9
 801cb3c:	d904      	bls.n	801cb48 <chk_mounted+0x18>
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 801cb3e:	489e      	ldr	r0, [pc, #632]	; (801cdb8 <chk_mounted+0x288>)
 801cb40:	6804      	ldr	r4, [r0, #0]
 801cb42:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
 801cb44:	b94c      	cbnz	r4, 801cb5a <chk_mounted+0x2a>
 801cb46:	e0aa      	b.n	801cc9e <chk_mounted+0x16e>
	const XCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 801cb48:	785c      	ldrb	r4, [r3, #1]
 801cb4a:	2c3a      	cmp	r4, #58	; 0x3a
 801cb4c:	d1f7      	bne.n	801cb3e <chk_mounted+0xe>
		p += 2; *path = p;			/* Return pointer to the path name */
 801cb4e:	3302      	adds	r3, #2
 801cb50:	6003      	str	r3, [r0, #0]
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 801cb52:	2a00      	cmp	r2, #0
 801cb54:	d0f3      	beq.n	801cb3e <chk_mounted+0xe>
		return FR_INVALID_DRIVE;
 801cb56:	200b      	movs	r0, #11
 801cb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 801cb5a:	7821      	ldrb	r1, [r4, #0]
 801cb5c:	b179      	cbz	r1, 801cb7e <chk_mounted+0x4e>
		stat = disk_status(fs->drive);
 801cb5e:	7860      	ldrb	r0, [r4, #1]
 801cb60:	f7fe fff2 	bl	801bb48 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 801cb64:	07c2      	lsls	r2, r0, #31
 801cb66:	d40a      	bmi.n	801cb7e <chk_mounted+0x4e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 801cb68:	2d00      	cmp	r5, #0
 801cb6a:	f000 809a 	beq.w	801cca2 <chk_mounted+0x172>
 801cb6e:	f000 0004 	and.w	r0, r0, #4
 801cb72:	b2c1      	uxtb	r1, r0
				return FR_WRITE_PROTECTED;
 801cb74:	2900      	cmp	r1, #0
 801cb76:	bf14      	ite	ne
 801cb78:	200a      	movne	r0, #10
 801cb7a:	2000      	moveq	r0, #0
 801cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 801cb7e:	2000      	movs	r0, #0
 801cb80:	7020      	strb	r0, [r4, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 801cb82:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 801cb84:	f7fe ffc6 	bl	801bb14 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 801cb88:	07c3      	lsls	r3, r0, #31
 801cb8a:	f100 808c 	bmi.w	801cca6 <chk_mounted+0x176>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801cb8e:	b12d      	cbz	r5, 801cb9c <chk_mounted+0x6c>
 801cb90:	f000 0204 	and.w	r2, r0, #4
 801cb94:	b2d3      	uxtb	r3, r2
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f040 8087 	bne.w	801ccaa <chk_mounted+0x17a>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 801cb9c:	2100      	movs	r1, #0
 801cb9e:	4620      	mov	r0, r4
 801cba0:	f7ff f9b8 	bl	801bf14 <check_fs>

	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 801cba4:	2801      	cmp	r0, #1
 801cba6:	d117      	bne.n	801cbd8 <chk_mounted+0xa8>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
 801cba8:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
 801cbac:	b908      	cbnz	r0, 801cbb2 <chk_mounted+0x82>
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
 801cbae:	200d      	movs	r0, #13
 801cbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 801cbb2:	f894 61f8 	ldrb.w	r6, [r4, #504]	; 0x1f8
 801cbb6:	f894 11f9 	ldrb.w	r1, [r4, #505]	; 0x1f9
 801cbba:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
 801cbbe:	0432      	lsls	r2, r6, #16
 801cbc0:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 801cbc4:	f894 11f7 	ldrb.w	r1, [r4, #503]	; 0x1f7
 801cbc8:	4318      	orrs	r0, r3
 801cbca:	ea40 2601 	orr.w	r6, r0, r1, lsl #8
			fmt = check_fs(fs, bsect);					/* Check the partition */
 801cbce:	4631      	mov	r1, r6
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f7ff f99f 	bl	801bf14 <check_fs>
 801cbd6:	e000      	b.n	801cbda <chk_mounted+0xaa>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 801cbd8:	2600      	movs	r6, #0
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 801cbda:	2803      	cmp	r0, #3
 801cbdc:	d067      	beq.n	801ccae <chk_mounted+0x17e>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 801cbde:	2800      	cmp	r0, #0
 801cbe0:	d1e5      	bne.n	801cbae <chk_mounted+0x7e>
 801cbe2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 801cbe6:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
 801cbea:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
 801cbee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbf2:	d1dc      	bne.n	801cbae <chk_mounted+0x7e>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 801cbf4:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
 801cbf8:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 801cbfc:	ea57 2205 	orrs.w	r2, r7, r5, lsl #8
 801cc00:	d10d      	bne.n	801cc1e <chk_mounted+0xee>
 801cc02:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801cc06:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
 801cc0a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cc0e:	f894 7055 	ldrb.w	r7, [r4, #85]	; 0x55
 801cc12:	0410      	lsls	r0, r2, #16
 801cc14:	ea40 6501 	orr.w	r5, r0, r1, lsl #24
 801cc18:	431d      	orrs	r5, r3
 801cc1a:	ea45 2207 	orr.w	r2, r5, r7, lsl #8
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801cc1e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801cc22:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 801cc26:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801cc2a:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
 801cc2e:	61a2      	str	r2, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801cc30:	70e1      	strb	r1, [r4, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 801cc32:	434a      	muls	r2, r1
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801cc34:	ea45 2100 	orr.w	r1, r5, r0, lsl #8
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801cc38:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 801cc3c:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801cc40:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801cc44:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 801cc48:	f894 7043 	ldrb.w	r7, [r4, #67]	; 0x43
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801cc4c:	70a5      	strb	r5, [r4, #2]
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801cc4e:	1873      	adds	r3, r6, r1
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801cc50:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801cc54:	6223      	str	r3, [r4, #32]
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801cc56:	8120      	strh	r0, [r4, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801cc58:	d10e      	bne.n	801cc78 <chk_mounted+0x148>
 801cc5a:	f894 7052 	ldrb.w	r7, [r4, #82]	; 0x52
 801cc5e:	f894 e053 	ldrb.w	lr, [r4, #83]	; 0x53
 801cc62:	f894 c050 	ldrb.w	ip, [r4, #80]	; 0x50
 801cc66:	043f      	lsls	r7, r7, #16
 801cc68:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 801cc6c:	f894 e051 	ldrb.w	lr, [r4, #81]	; 0x51
 801cc70:	ea47 070c 	orr.w	r7, r7, ip
 801cc74:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 801cc78:	1a79      	subs	r1, r7, r1
 801cc7a:	0900      	lsrs	r0, r0, #4
 801cc7c:	1a89      	subs	r1, r1, r2
 801cc7e:	1a09      	subs	r1, r1, r0
		) / fs->csize + 2;
 801cc80:	fbb1 f5f5 	udiv	r5, r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 801cc84:	1ca9      	adds	r1, r5, #2
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801cc86:	f640 75f6 	movw	r5, #4086	; 0xff6
 801cc8a:	42a9      	cmp	r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 801cc8c:	61e1      	str	r1, [r4, #28]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801cc8e:	f240 808f 	bls.w	801cdb0 <chk_mounted+0x280>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 801cc92:	f505 4570 	add.w	r5, r5, #61440	; 0xf000
 801cc96:	42a9      	cmp	r1, r5
 801cc98:	d80b      	bhi.n	801ccb2 <chk_mounted+0x182>
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801cc9a:	2502      	movs	r5, #2
 801cc9c:	e089      	b.n	801cdb2 <chk_mounted+0x282>

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
 801cc9e:	200c      	movs	r0, #12
 801cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
 801cca2:	4628      	mov	r0, r5
 801cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
 801cca6:	2003      	movs	r0, #3
 801cca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 801ccaa:	200a      	movs	r0, #10
 801ccac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 801ccae:	2001      	movs	r0, #1
 801ccb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 801ccb2:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 801ccb6:	f894 505f 	ldrb.w	r5, [r4, #95]	; 0x5f
 801ccba:	0409      	lsls	r1, r1, #16
 801ccbc:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 801ccc0:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
 801ccc4:	4329      	orrs	r1, r5
 801ccc6:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 801ccca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 801ccce:	6261      	str	r1, [r4, #36]	; 0x24
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 801ccd0:	2503      	movs	r5, #3

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801ccd2:	181b      	adds	r3, r3, r0

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
 801ccd4:	2100      	movs	r1, #0

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801ccd6:	189a      	adds	r2, r3, r2

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 801ccd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 801ccdc:	2d03      	cmp	r5, #3

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801ccde:	62a2      	str	r2, [r4, #40]	; 0x28

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 801cce0:	6120      	str	r0, [r4, #16]
	fs->wflag = 0;
 801cce2:	7121      	strb	r1, [r4, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 801cce4:	d15a      	bne.n	801cd9c <chk_mounted+0x26c>
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 801cce6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 801ccea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
 801ccee:	7161      	strb	r1, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 801ccf0:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 801ccf4:	1832      	adds	r2, r6, r0
 801ccf6:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801ccf8:	7860      	ldrb	r0, [r4, #1]
 801ccfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ccfe:	2301      	movs	r3, #1
 801cd00:	f7fe ff26 	bl	801bb50 <disk_read>
 801cd04:	2800      	cmp	r0, #0
 801cd06:	d149      	bne.n	801cd9c <chk_mounted+0x26c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801cd08:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
 801cd0c:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
 801cd10:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801cd14:	4929      	ldr	r1, [pc, #164]	; (801cdbc <chk_mounted+0x28c>)
 801cd16:	b218      	sxth	r0, r3
 801cd18:	4288      	cmp	r0, r1
 801cd1a:	d13f      	bne.n	801cd9c <chk_mounted+0x26c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801cd1c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 801cd20:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801cd24:	0410      	lsls	r0, r2, #16
 801cd26:	ea40 6103 	orr.w	r1, r0, r3, lsl #24
 801cd2a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801cd2e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801cd32:	4319      	orrs	r1, r3
 801cd34:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801cd38:	4921      	ldr	r1, [pc, #132]	; (801cdc0 <chk_mounted+0x290>)
 801cd3a:	4288      	cmp	r0, r1
 801cd3c:	d12e      	bne.n	801cd9c <chk_mounted+0x26c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 801cd3e:	f894 2216 	ldrb.w	r2, [r4, #534]	; 0x216
 801cd42:	f894 3217 	ldrb.w	r3, [r4, #535]	; 0x217
 801cd46:	0410      	lsls	r0, r2, #16
 801cd48:	ea40 6103 	orr.w	r1, r0, r3, lsl #24
 801cd4c:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 801cd50:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
 801cd54:	4319      	orrs	r1, r3
 801cd56:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801cd5a:	491a      	ldr	r1, [pc, #104]	; (801cdc4 <chk_mounted+0x294>)
 801cd5c:	4288      	cmp	r0, r1
 801cd5e:	d11d      	bne.n	801cd9c <chk_mounted+0x26c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801cd60:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 801cd64:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 801cd68:	0418      	lsls	r0, r3, #16
 801cd6a:	ea40 6102 	orr.w	r1, r0, r2, lsl #24
 801cd6e:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 801cd72:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 801cd76:	4311      	orrs	r1, r2
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801cd78:	f894 221a 	ldrb.w	r2, [r4, #538]	; 0x21a
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801cd7c:	ea41 2003 	orr.w	r0, r1, r3, lsl #8
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801cd80:	f894 121b 	ldrb.w	r1, [r4, #539]	; 0x21b
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801cd84:	60e0      	str	r0, [r4, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801cd86:	0413      	lsls	r3, r2, #16
 801cd88:	ea43 6001 	orr.w	r0, r3, r1, lsl #24
 801cd8c:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
 801cd90:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 801cd94:	4308      	orrs	r0, r1
 801cd96:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
 801cd9a:	6123      	str	r3, [r4, #16]
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801cd9c:	490a      	ldr	r1, [pc, #40]	; (801cdc8 <chk_mounted+0x298>)
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 801cd9e:	7025      	strb	r5, [r4, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801cda0:	880a      	ldrh	r2, [r1, #0]
 801cda2:	1c53      	adds	r3, r2, #1
 801cda4:	b29a      	uxth	r2, r3
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
 801cda6:	2000      	movs	r0, #0
 801cda8:	62e0      	str	r0, [r4, #44]	; 0x2c
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801cdaa:	800a      	strh	r2, [r1, #0]
 801cdac:	80e2      	strh	r2, [r4, #6]

	return FR_OK;
 801cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 801cdb0:	2501      	movs	r5, #1
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 801cdb2:	18d1      	adds	r1, r2, r3
 801cdb4:	6261      	str	r1, [r4, #36]	; 0x24
 801cdb6:	e78c      	b.n	801ccd2 <chk_mounted+0x1a2>
 801cdb8:	200013a4 	.word	0x200013a4
 801cdbc:	ffffaa55 	.word	0xffffaa55
 801cdc0:	41615252 	.word	0x41615252
 801cdc4:	61417272 	.word	0x61417272
 801cdc8:	200013a0 	.word	0x200013a0

0801cdcc <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 801cdcc:	b948      	cbnz	r0, 801cde2 <f_mount+0x16>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
 801cdce:	4a06      	ldr	r2, [pc, #24]	; (801cde8 <f_mount+0x1c>)
 801cdd0:	6813      	ldr	r3, [r2, #0]

	if (rfs) {
 801cdd2:	b103      	cbz	r3, 801cdd6 <f_mount+0xa>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 801cdd4:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 801cdd6:	b109      	cbz	r1, 801cddc <f_mount+0x10>
		fs->fs_type = 0;			/* Clear new fs object */
 801cdd8:	2000      	movs	r0, #0
 801cdda:	7008      	strb	r0, [r1, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 801cddc:	6011      	str	r1, [r2, #0]

	return FR_OK;
 801cdde:	2000      	movs	r0, #0
 801cde0:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 801cde2:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
 801cde4:	4770      	bx	lr
 801cde6:	bf00      	nop
 801cde8:	200013a4 	.word	0x200013a4

0801cdec <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdf0:	b08e      	sub	sp, #56	; 0x38
 801cdf2:	4605      	mov	r5, r0
 801cdf4:	a80e      	add	r0, sp, #56	; 0x38
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 801cdf6:	2300      	movs	r3, #0
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cdf8:	f840 1d34 	str.w	r1, [r0, #-52]!
 801cdfc:	4617      	mov	r7, r2
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 801cdfe:	602b      	str	r3, [r5, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 801ce00:	a905      	add	r1, sp, #20
 801ce02:	f002 021e 	and.w	r2, r2, #30
 801ce06:	f7ff fe93 	bl	801cb30 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801ce0a:	2800      	cmp	r0, #0
 801ce0c:	f040 80a2 	bne.w	801cf54 <f_open+0x168>
	INITBUF(dj, sfn, lfn);
 801ce10:	4952      	ldr	r1, [pc, #328]	; (801cf5c <f_open+0x170>)
 801ce12:	a802      	add	r0, sp, #8
 801ce14:	900b      	str	r0, [sp, #44]	; 0x2c
 801ce16:	910c      	str	r1, [sp, #48]	; 0x30
	res = follow_path(&dj, path);	/* Follow the file path */
 801ce18:	a805      	add	r0, sp, #20
 801ce1a:	9901      	ldr	r1, [sp, #4]
 801ce1c:	f7ff fb8a 	bl	801c534 <follow_path>

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ce20:	f017 0f1c 	tst.w	r7, #28
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 801ce24:	f007 061f 	and.w	r6, r7, #31
	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);	/* Follow the file path */

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ce28:	d059      	beq.n	801cede <f_open+0xf2>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 801ce2a:	b160      	cbz	r0, 801ce46 <f_open+0x5a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 801ce2c:	2804      	cmp	r0, #4
 801ce2e:	f040 8091 	bne.w	801cf54 <f_open+0x168>
				res = dir_register(&dj);
 801ce32:	a805      	add	r0, sp, #20
 801ce34:	f7ff fd96 	bl	801c964 <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	f040 808b 	bne.w	801cf54 <f_open+0x168>
			mode |= FA_CREATE_ALWAYS;
 801ce3e:	f046 0608 	orr.w	r6, r6, #8
			dir = dj.dir;			/* Created entry (SFN entry) */
 801ce42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ce44:	e035      	b.n	801ceb2 <f_open+0xc6>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 801ce46:	f007 0104 	and.w	r1, r7, #4
 801ce4a:	b2cb      	uxtb	r3, r1
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d17c      	bne.n	801cf4a <f_open+0x15e>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
 801ce50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 801ce52:	2c00      	cmp	r4, #0
 801ce54:	d07d      	beq.n	801cf52 <f_open+0x166>
 801ce56:	7ae2      	ldrb	r2, [r4, #11]
 801ce58:	f012 0011 	ands.w	r0, r2, #17
 801ce5c:	d179      	bne.n	801cf52 <f_open+0x166>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 801ce5e:	f007 0708 	and.w	r7, r7, #8
 801ce62:	b2ff      	uxtb	r7, r7
 801ce64:	b32f      	cbz	r7, 801ceb2 <f_open+0xc6>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801ce66:	7d61      	ldrb	r1, [r4, #21]
 801ce68:	7d23      	ldrb	r3, [r4, #20]
 801ce6a:	7ea2      	ldrb	r2, [r4, #26]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 801ce6c:	7520      	strb	r0, [r4, #20]
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801ce6e:	ea43 2701 	orr.w	r7, r3, r1, lsl #8
 801ce72:	7ee1      	ldrb	r1, [r4, #27]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 801ce74:	7560      	strb	r0, [r4, #21]
				ST_WORD(dir+DIR_FstClusLO, 0);
 801ce76:	76a0      	strb	r0, [r4, #26]
 801ce78:	76e0      	strb	r0, [r4, #27]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 801ce7a:	7720      	strb	r0, [r4, #28]
 801ce7c:	7760      	strb	r0, [r4, #29]
 801ce7e:	77a0      	strb	r0, [r4, #30]
 801ce80:	77e0      	strb	r0, [r4, #31]
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801ce82:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 801ce86:	9805      	ldr	r0, [sp, #20]
 801ce88:	2301      	movs	r3, #1
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
 801ce8a:	ea51 4707 	orrs.w	r7, r1, r7, lsl #16
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 801ce8e:	7103      	strb	r3, [r0, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 801ce90:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				if (cl) {
 801ce94:	d007      	beq.n	801cea6 <f_open+0xba>
					res = remove_chain(dj.fs, cl);
 801ce96:	4639      	mov	r1, r7
 801ce98:	f7ff f9c1 	bl	801c21e <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	d159      	bne.n	801cf54 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801cea0:	9805      	ldr	r0, [sp, #20]
 801cea2:	3f01      	subs	r7, #1
 801cea4:	60c7      	str	r7, [r0, #12]
				}
				res = move_window(dj.fs, ps);
 801cea6:	9805      	ldr	r0, [sp, #20]
 801cea8:	4641      	mov	r1, r8
 801ceaa:	f7fe ff9d 	bl	801bde8 <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801ceae:	2800      	cmp	r0, #0
 801ceb0:	d150      	bne.n	801cf54 <f_open+0x168>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 801ceb2:	f006 0208 	and.w	r2, r6, #8
 801ceb6:	b2d1      	uxtb	r1, r2
 801ceb8:	b311      	cbz	r1, 801cf00 <f_open+0x114>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 801ceba:	2300      	movs	r3, #0
 801cebc:	72e3      	strb	r3, [r4, #11]
			ps = get_fattime();
 801cebe:	f7fe fecf 	bl	801bc60 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
			dj.fs->wflag = 1;
 801cec2:	9b05      	ldr	r3, [sp, #20]
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 801cec4:	73a0      	strb	r0, [r4, #14]
 801cec6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801ceca:	73e2      	strb	r2, [r4, #15]
 801cecc:	0c01      	lsrs	r1, r0, #16
			dj.fs->wflag = 1;
 801cece:	2201      	movs	r2, #1
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 801ced0:	0e00      	lsrs	r0, r0, #24
 801ced2:	7421      	strb	r1, [r4, #16]
 801ced4:	7460      	strb	r0, [r4, #17]
			dj.fs->wflag = 1;
			mode |= FA__WRITTEN;				/* Set file changed flag */
 801ced6:	f046 0620 	orr.w	r6, r6, #32
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
			dj.fs->wflag = 1;
 801ceda:	711a      	strb	r2, [r3, #4]
 801cedc:	e010      	b.n	801cf00 <f_open+0x114>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 801cede:	2800      	cmp	r0, #0
 801cee0:	d138      	bne.n	801cf54 <f_open+0x168>
		dir = dj.dir;
 801cee2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 801cee4:	2c00      	cmp	r4, #0
 801cee6:	d032      	beq.n	801cf4e <f_open+0x162>
 801cee8:	7ae3      	ldrb	r3, [r4, #11]
 801ceea:	f003 0210 	and.w	r2, r3, #16
 801ceee:	b2d0      	uxtb	r0, r2
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d12c      	bne.n	801cf4e <f_open+0x162>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801cef4:	f007 0702 	and.w	r7, r7, #2
 801cef8:	b2ff      	uxtb	r7, r7
 801cefa:	b10f      	cbz	r7, 801cf00 <f_open+0x114>
 801cefc:	07d9      	lsls	r1, r3, #31
 801cefe:	d428      	bmi.n	801cf52 <f_open+0x166>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801cf00:	9b05      	ldr	r3, [sp, #20]
	fp->dir_ptr = dj.dir;
 801cf02:	980a      	ldr	r0, [sp, #40]	; 0x28
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801cf04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
 801cf06:	71ae      	strb	r6, [r5, #6]
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801cf08:	61e9      	str	r1, [r5, #28]
	fp->dir_ptr = dj.dir;
 801cf0a:	6228      	str	r0, [r5, #32]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801cf0c:	7d22      	ldrb	r2, [r4, #20]
 801cf0e:	7d61      	ldrb	r1, [r4, #21]
 801cf10:	7ee0      	ldrb	r0, [r4, #27]
 801cf12:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 801cf16:	7ea2      	ldrb	r2, [r4, #26]
 801cf18:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 801cf1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 801cf20:	6129      	str	r1, [r5, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801cf22:	7fa2      	ldrb	r2, [r4, #30]
 801cf24:	7fe0      	ldrb	r0, [r4, #31]
 801cf26:	0411      	lsls	r1, r2, #16
 801cf28:	7f22      	ldrb	r2, [r4, #28]
 801cf2a:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 801cf2e:	4310      	orrs	r0, r2
 801cf30:	7f61      	ldrb	r1, [r4, #29]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801cf32:	602b      	str	r3, [r5, #0]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 801cf34:	22ff      	movs	r2, #255	; 0xff
 801cf36:	71ea      	strb	r2, [r5, #7]
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801cf38:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801cf3c:	88db      	ldrh	r3, [r3, #6]
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801cf3e:	60e8      	str	r0, [r5, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 801cf40:	2000      	movs	r0, #0
 801cf42:	60a8      	str	r0, [r5, #8]
	fp->dsect = 0;
 801cf44:	61a8      	str	r0, [r5, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801cf46:	80ab      	strh	r3, [r5, #4]
 801cf48:	e004      	b.n	801cf54 <f_open+0x168>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
 801cf4a:	2008      	movs	r0, #8
 801cf4c:	e002      	b.n	801cf54 <f_open+0x168>
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
 801cf4e:	2004      	movs	r0, #4
 801cf50:	e000      	b.n	801cf54 <f_open+0x168>
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
 801cf52:	2007      	movs	r0, #7
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
 801cf54:	b00e      	add	sp, #56	; 0x38
 801cf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf5a:	bf00      	nop
 801cf5c:	200011a0 	.word	0x200011a0

0801cf60 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801cf60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf64:	4604      	mov	r4, r0
 801cf66:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
 801cf68:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801cf6a:	4688      	mov	r8, r1
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
 801cf6c:	f8ca 3000 	str.w	r3, [sl]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801cf70:	6800      	ldr	r0, [r0, #0]
 801cf72:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801cf74:	4617      	mov	r7, r2
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801cf76:	f7ff f811 	bl	801bf9c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801cf7a:	4605      	mov	r5, r0
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	f040 80a2 	bne.w	801d0c6 <f_read+0x166>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 801cf82:	79a0      	ldrb	r0, [r4, #6]
 801cf84:	0601      	lsls	r1, r0, #24
 801cf86:	f100 809b 	bmi.w	801d0c0 <f_read+0x160>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 801cf8a:	07c2      	lsls	r2, r0, #31
 801cf8c:	f140 809a 	bpl.w	801d0c4 <f_read+0x164>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 801cf90:	68e1      	ldr	r1, [r4, #12]
 801cf92:	68a2      	ldr	r2, [r4, #8]
 801cf94:	1a8e      	subs	r6, r1, r2
 801cf96:	42b7      	cmp	r7, r6
 801cf98:	bf38      	it	cc
 801cf9a:	463e      	movcc	r6, r7
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
 801cf9c:	2e00      	cmp	r6, #0
 801cf9e:	f000 8092 	beq.w	801d0c6 <f_read+0x166>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 801cfa2:	68a3      	ldr	r3, [r4, #8]
 801cfa4:	05da      	lsls	r2, r3, #23
 801cfa6:	d172      	bne.n	801d08e <f_read+0x12e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 801cfa8:	6820      	ldr	r0, [r4, #0]
 801cfaa:	79e1      	ldrb	r1, [r4, #7]
 801cfac:	7882      	ldrb	r2, [r0, #2]
 801cfae:	4291      	cmp	r1, r2
 801cfb0:	d30c      	bcc.n	801cfcc <f_read+0x6c>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 801cfb2:	b90b      	cbnz	r3, 801cfb8 <f_read+0x58>
 801cfb4:	6920      	ldr	r0, [r4, #16]
 801cfb6:	e002      	b.n	801cfbe <f_read+0x5e>
 801cfb8:	6961      	ldr	r1, [r4, #20]
 801cfba:	f7ff f801 	bl	801bfc0 <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 801cfbe:	2801      	cmp	r0, #1
 801cfc0:	d90b      	bls.n	801cfda <f_read+0x7a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801cfc2:	1c43      	adds	r3, r0, #1
 801cfc4:	d058      	beq.n	801d078 <f_read+0x118>
				fp->curr_clust = clst;				/* Update current cluster */
 801cfc6:	6160      	str	r0, [r4, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 801cfc8:	2000      	movs	r0, #0
 801cfca:	71e0      	strb	r0, [r4, #7]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801cfcc:	f8d4 b000 	ldr.w	fp, [r4]
 801cfd0:	6961      	ldr	r1, [r4, #20]
 801cfd2:	4658      	mov	r0, fp
 801cfd4:	f7ff f94d 	bl	801c272 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801cfd8:	b920      	cbnz	r0, 801cfe4 <f_read+0x84>
 801cfda:	79a0      	ldrb	r0, [r4, #6]
 801cfdc:	f060 037f 	orn	r3, r0, #127	; 0x7f
 801cfe0:	71a3      	strb	r3, [r4, #6]
 801cfe2:	e06d      	b.n	801d0c0 <f_read+0x160>
			sect += fp->csect;
 801cfe4:	79e3      	ldrb	r3, [r4, #7]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 801cfe6:	0a77      	lsrs	r7, r6, #9
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 801cfe8:	eb00 0903 	add.w	r9, r0, r3
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 801cfec:	d026      	beq.n	801d03c <f_read+0xdc>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801cfee:	f89b 0002 	ldrb.w	r0, [fp, #2]
 801cff2:	18f9      	adds	r1, r7, r3
 801cff4:	4281      	cmp	r1, r0
					cc = fp->fs->csize - fp->csect;
 801cff6:	bf88      	it	hi
 801cff8:	ebc3 0700 	rsbhi	r7, r3, r0
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 801cffc:	4641      	mov	r1, r8
 801cffe:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d002:	464a      	mov	r2, r9
 801d004:	b2fb      	uxtb	r3, r7
 801d006:	f7fe fda3 	bl	801bb50 <disk_read>
 801d00a:	79a1      	ldrb	r1, [r4, #6]
 801d00c:	2800      	cmp	r0, #0
 801d00e:	d134      	bne.n	801d07a <f_read+0x11a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 801d010:	f001 0340 	and.w	r3, r1, #64	; 0x40
 801d014:	b2da      	uxtb	r2, r3
 801d016:	b162      	cbz	r2, 801d032 <f_read+0xd2>
 801d018:	69a0      	ldr	r0, [r4, #24]
 801d01a:	ebc9 0100 	rsb	r1, r9, r0
 801d01e:	42b9      	cmp	r1, r7
 801d020:	d207      	bcs.n	801d032 <f_read+0xd2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 801d022:	eb08 2041 	add.w	r0, r8, r1, lsl #9
 801d026:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d02a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801d02e:	f7fe fe47 	bl	801bcc0 <mem_cpy>
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 801d032:	79e3      	ldrb	r3, [r4, #7]
 801d034:	18fa      	adds	r2, r7, r3
 801d036:	71e2      	strb	r2, [r4, #7]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 801d038:	027f      	lsls	r7, r7, #9
				continue;
 801d03a:	e036      	b.n	801d0aa <f_read+0x14a>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 801d03c:	79a1      	ldrb	r1, [r4, #6]
 801d03e:	f001 0240 	and.w	r2, r1, #64	; 0x40
 801d042:	b2d0      	uxtb	r0, r2
 801d044:	b160      	cbz	r0, 801d060 <f_read+0x100>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801d046:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801d04a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d04e:	69a2      	ldr	r2, [r4, #24]
 801d050:	2301      	movs	r3, #1
 801d052:	f7fe fd9f 	bl	801bb94 <disk_write>
 801d056:	79a1      	ldrb	r1, [r4, #6]
 801d058:	b978      	cbnz	r0, 801d07a <f_read+0x11a>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 801d05a:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 801d05e:	71a3      	strb	r3, [r4, #6]
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 801d060:	69a1      	ldr	r1, [r4, #24]
 801d062:	4549      	cmp	r1, r9
 801d064:	d00e      	beq.n	801d084 <f_read+0x124>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 801d066:	4621      	mov	r1, r4
 801d068:	2301      	movs	r3, #1
 801d06a:	f851 2b24 	ldr.w	r2, [r1], #36
 801d06e:	7850      	ldrb	r0, [r2, #1]
 801d070:	464a      	mov	r2, r9
 801d072:	f7fe fd6d 	bl	801bb50 <disk_read>
 801d076:	b128      	cbz	r0, 801d084 <f_read+0x124>
					ABORT(fp->fs, FR_DISK_ERR);
 801d078:	79a1      	ldrb	r1, [r4, #6]
 801d07a:	f061 057f 	orn	r5, r1, #127	; 0x7f
 801d07e:	71a5      	strb	r5, [r4, #6]
 801d080:	2501      	movs	r5, #1
 801d082:	e020      	b.n	801d0c6 <f_read+0x166>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
 801d084:	79e7      	ldrb	r7, [r4, #7]
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 801d086:	f8c4 9018 	str.w	r9, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801d08a:	1c78      	adds	r0, r7, #1
 801d08c:	71e0      	strb	r0, [r4, #7]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801d08e:	68a3      	ldr	r3, [r4, #8]
 801d090:	05d9      	lsls	r1, r3, #23
 801d092:	0dca      	lsrs	r2, r1, #23
 801d094:	f5c2 7700 	rsb	r7, r2, #512	; 0x200
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 801d098:	18a1      	adds	r1, r4, r2
 801d09a:	42be      	cmp	r6, r7
 801d09c:	bf38      	it	cc
 801d09e:	4637      	movcc	r7, r6
 801d0a0:	4640      	mov	r0, r8
 801d0a2:	3124      	adds	r1, #36	; 0x24
 801d0a4:	463a      	mov	r2, r7
 801d0a6:	f7fe fe0b 	bl	801bcc0 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801d0aa:	68a0      	ldr	r0, [r4, #8]
 801d0ac:	f8da 3000 	ldr.w	r3, [sl]
 801d0b0:	19c1      	adds	r1, r0, r7
 801d0b2:	19da      	adds	r2, r3, r7
 801d0b4:	60a1      	str	r1, [r4, #8]
 801d0b6:	44b8      	add	r8, r7
 801d0b8:	f8ca 2000 	str.w	r2, [sl]
 801d0bc:	1bf6      	subs	r6, r6, r7
 801d0be:	e76d      	b.n	801cf9c <f_read+0x3c>
	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801d0c0:	2502      	movs	r5, #2
 801d0c2:	e000      	b.n	801d0c6 <f_read+0x166>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 801d0c4:	2507      	movs	r5, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 801d0c6:	4628      	mov	r0, r5
 801d0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0cc <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 801d0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
 801d0d4:	2300      	movs	r3, #0
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 801d0d6:	4688      	mov	r8, r1
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
 801d0d8:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801d0dc:	6800      	ldr	r0, [r0, #0]
 801d0de:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 801d0e0:	4617      	mov	r7, r2
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801d0e2:	f7fe ff5b 	bl	801bf9c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801d0e6:	4605      	mov	r5, r0
 801d0e8:	2800      	cmp	r0, #0
 801d0ea:	f040 80bb 	bne.w	801d264 <f_write+0x198>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 801d0ee:	79a0      	ldrb	r0, [r4, #6]
 801d0f0:	0602      	lsls	r2, r0, #24
 801d0f2:	d455      	bmi.n	801d1a0 <f_write+0xd4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 801d0f4:	f000 0102 	and.w	r1, r0, #2
 801d0f8:	b2ca      	uxtb	r2, r1
 801d0fa:	2a00      	cmp	r2, #0
 801d0fc:	f000 80b1 	beq.w	801d262 <f_write+0x196>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 801d100:	68e3      	ldr	r3, [r4, #12]
 801d102:	42df      	cmn	r7, r3
 801d104:	bf28      	it	cs
 801d106:	2700      	movcs	r7, #0
 801d108:	e033      	b.n	801d172 <f_write+0xa6>
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 801d10a:	79e3      	ldrb	r3, [r4, #7]
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Write maximum contiguous sectors directly */
 801d10c:	0a7e      	lsrs	r6, r7, #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 801d10e:	eb00 0a03 	add.w	sl, r0, r3
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Write maximum contiguous sectors directly */
 801d112:	d073      	beq.n	801d1fc <f_write+0x130>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801d114:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801d118:	18f0      	adds	r0, r6, r3
 801d11a:	4290      	cmp	r0, r2
					cc = fp->fs->csize - fp->csect;
 801d11c:	bf88      	it	hi
 801d11e:	ebc3 0602 	rsbhi	r6, r3, r2
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 801d122:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d126:	4641      	mov	r1, r8
 801d128:	4652      	mov	r2, sl
 801d12a:	b2f3      	uxtb	r3, r6
 801d12c:	f7fe fd32 	bl	801bb94 <disk_write>
 801d130:	2800      	cmp	r0, #0
 801d132:	d173      	bne.n	801d21c <f_write+0x150>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 801d134:	69a3      	ldr	r3, [r4, #24]
 801d136:	ebca 0103 	rsb	r1, sl, r3
 801d13a:	42b1      	cmp	r1, r6
 801d13c:	d20b      	bcs.n	801d156 <f_write+0x8a>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801d13e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801d142:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d146:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 801d14a:	f7fe fdb9 	bl	801bcc0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801d14e:	79a2      	ldrb	r2, [r4, #6]
 801d150:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 801d154:	71a0      	strb	r0, [r4, #6]
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 801d156:	79e3      	ldrb	r3, [r4, #7]
 801d158:	18f1      	adds	r1, r6, r3
 801d15a:	71e1      	strb	r1, [r4, #7]
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 801d15c:	0276      	lsls	r6, r6, #9
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 801d15e:	68a2      	ldr	r2, [r4, #8]
 801d160:	f8d9 3000 	ldr.w	r3, [r9]
 801d164:	1990      	adds	r0, r2, r6
 801d166:	1999      	adds	r1, r3, r6
 801d168:	60a0      	str	r0, [r4, #8]
 801d16a:	44b0      	add	r8, r6
 801d16c:	f8c9 1000 	str.w	r1, [r9]
 801d170:	1bbf      	subs	r7, r7, r6
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
 801d172:	b1e7      	cbz	r7, 801d1ae <f_write+0xe2>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 801d174:	68a3      	ldr	r3, [r4, #8]
 801d176:	05da      	lsls	r2, r3, #23
 801d178:	d15b      	bne.n	801d232 <f_write+0x166>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 801d17a:	6820      	ldr	r0, [r4, #0]
 801d17c:	79e1      	ldrb	r1, [r4, #7]
 801d17e:	7882      	ldrb	r2, [r0, #2]
 801d180:	4291      	cmp	r1, r2
 801d182:	d31f      	bcc.n	801d1c4 <f_write+0xf8>
				if (fp->fptr == 0) {				/* On the top of the file? */
 801d184:	b973      	cbnz	r3, 801d1a4 <f_write+0xd8>
					clst = fp->org_clust;			/* Follow from the origin */
 801d186:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)					/* When there is no cluster chain, */
 801d188:	b921      	cbnz	r1, 801d194 <f_write+0xc8>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801d18a:	f7fe fff8 	bl	801c17e <create_chain>
 801d18e:	4601      	mov	r1, r0
 801d190:	6120      	str	r0, [r4, #16]
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 801d192:	b161      	cbz	r1, 801d1ae <f_write+0xe2>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801d194:	2901      	cmp	r1, #1
 801d196:	79a2      	ldrb	r2, [r4, #6]
 801d198:	d10f      	bne.n	801d1ba <f_write+0xee>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801d19a:	f062 007f 	orn	r0, r2, #127	; 0x7f
 801d19e:	71a0      	strb	r0, [r4, #6]
 801d1a0:	2502      	movs	r5, #2
 801d1a2:	e05f      	b.n	801d264 <f_write+0x198>
				if (fp->fptr == 0) {				/* On the top of the file? */
					clst = fp->org_clust;			/* Follow from the origin */
					if (clst == 0)					/* When there is no cluster chain, */
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
 801d1a4:	6961      	ldr	r1, [r4, #20]
 801d1a6:	f7fe ffea 	bl	801c17e <create_chain>
 801d1aa:	4601      	mov	r1, r0
 801d1ac:	e7f1      	b.n	801d192 <f_write+0xc6>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801d1ae:	68a3      	ldr	r3, [r4, #8]
 801d1b0:	68e1      	ldr	r1, [r4, #12]
 801d1b2:	428b      	cmp	r3, r1
 801d1b4:	d950      	bls.n	801d258 <f_write+0x18c>
 801d1b6:	60e3      	str	r3, [r4, #12]
 801d1b8:	e04e      	b.n	801d258 <f_write+0x18c>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801d1ba:	1c48      	adds	r0, r1, #1
 801d1bc:	d02f      	beq.n	801d21e <f_write+0x152>
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector address in the cluster */
 801d1be:	2000      	movs	r0, #0
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
 801d1c0:	6161      	str	r1, [r4, #20]
				fp->csect = 0;						/* Reset sector address in the cluster */
 801d1c2:	71e0      	strb	r0, [r4, #7]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 801d1c4:	79a3      	ldrb	r3, [r4, #6]
 801d1c6:	f003 0140 	and.w	r1, r3, #64	; 0x40
 801d1ca:	b2ca      	uxtb	r2, r1
 801d1cc:	b162      	cbz	r2, 801d1e8 <f_write+0x11c>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801d1ce:	4621      	mov	r1, r4
 801d1d0:	69a2      	ldr	r2, [r4, #24]
 801d1d2:	f851 0b24 	ldr.w	r0, [r1], #36
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	7840      	ldrb	r0, [r0, #1]
 801d1da:	f7fe fcdb 	bl	801bb94 <disk_write>
 801d1de:	79a2      	ldrb	r2, [r4, #6]
 801d1e0:	b9e8      	cbnz	r0, 801d21e <f_write+0x152>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 801d1e2:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801d1e6:	71a3      	strb	r3, [r4, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801d1e8:	f8d4 b000 	ldr.w	fp, [r4]
 801d1ec:	6961      	ldr	r1, [r4, #20]
 801d1ee:	4658      	mov	r0, fp
 801d1f0:	f7ff f83f 	bl	801c272 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	d188      	bne.n	801d10a <f_write+0x3e>
 801d1f8:	79a2      	ldrb	r2, [r4, #6]
 801d1fa:	e7ce      	b.n	801d19a <f_write+0xce>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 801d1fc:	69a1      	ldr	r1, [r4, #24]
 801d1fe:	4551      	cmp	r1, sl
 801d200:	d012      	beq.n	801d228 <f_write+0x15c>
				if (fp->fptr < fp->fsize &&
 801d202:	68a2      	ldr	r2, [r4, #8]
 801d204:	68e0      	ldr	r0, [r4, #12]
 801d206:	4282      	cmp	r2, r0
 801d208:	d20e      	bcs.n	801d228 <f_write+0x15c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 801d20a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d20e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801d212:	4652      	mov	r2, sl
 801d214:	2301      	movs	r3, #1
 801d216:	f7fe fc9b 	bl	801bb50 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
 801d21a:	b128      	cbz	r0, 801d228 <f_write+0x15c>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 801d21c:	79a2      	ldrb	r2, [r4, #6]
 801d21e:	f062 057f 	orn	r5, r2, #127	; 0x7f
 801d222:	71a5      	strb	r5, [r4, #6]
 801d224:	2501      	movs	r5, #1
 801d226:	e01d      	b.n	801d264 <f_write+0x198>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
 801d228:	79e6      	ldrb	r6, [r4, #7]
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 801d22a:	f8c4 a018 	str.w	sl, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801d22e:	1c73      	adds	r3, r6, #1
 801d230:	71e3      	strb	r3, [r4, #7]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 801d232:	68a1      	ldr	r1, [r4, #8]
 801d234:	05ca      	lsls	r2, r1, #23
 801d236:	0dd0      	lsrs	r0, r2, #23
 801d238:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 801d23c:	42b7      	cmp	r7, r6
 801d23e:	bf38      	it	cc
 801d240:	463e      	movcc	r6, r7
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 801d242:	1820      	adds	r0, r4, r0
 801d244:	4641      	mov	r1, r8
 801d246:	3024      	adds	r0, #36	; 0x24
 801d248:	4632      	mov	r2, r6
 801d24a:	f7fe fd39 	bl	801bcc0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 801d24e:	79a3      	ldrb	r3, [r4, #6]
 801d250:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 801d254:	71a1      	strb	r1, [r4, #6]
 801d256:	e782      	b.n	801d15e <f_write+0x92>
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 801d258:	79a2      	ldrb	r2, [r4, #6]
 801d25a:	f042 0020 	orr.w	r0, r2, #32
 801d25e:	71a0      	strb	r0, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 801d260:	e000      	b.n	801d264 <f_write+0x198>
	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 801d262:	2507      	movs	r5, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 801d264:	4628      	mov	r0, r5
 801d266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d26a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 801d26a:	b538      	push	{r3, r4, r5, lr}
 801d26c:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 801d26e:	6800      	ldr	r0, [r0, #0]
 801d270:	88a1      	ldrh	r1, [r4, #4]
 801d272:	f7fe fe93 	bl	801bf9c <validate>
	if (res == FR_OK) {
 801d276:	2800      	cmp	r0, #0
 801d278:	d14c      	bne.n	801d314 <f_sync+0xaa>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801d27a:	79a3      	ldrb	r3, [r4, #6]
 801d27c:	f003 0220 	and.w	r2, r3, #32
 801d280:	b2d1      	uxtb	r1, r2
 801d282:	2900      	cmp	r1, #0
 801d284:	d046      	beq.n	801d314 <f_sync+0xaa>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 801d286:	f003 0040 	and.w	r0, r3, #64	; 0x40
 801d28a:	b2c3      	uxtb	r3, r0
 801d28c:	b16b      	cbz	r3, 801d2aa <f_sync+0x40>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801d28e:	4621      	mov	r1, r4
 801d290:	2301      	movs	r3, #1
 801d292:	f851 2b24 	ldr.w	r2, [r1], #36
 801d296:	7850      	ldrb	r0, [r2, #1]
 801d298:	69a2      	ldr	r2, [r4, #24]
 801d29a:	f7fe fc7b 	bl	801bb94 <disk_write>
 801d29e:	2800      	cmp	r0, #0
 801d2a0:	d137      	bne.n	801d312 <f_sync+0xa8>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 801d2a2:	79a1      	ldrb	r1, [r4, #6]
 801d2a4:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 801d2a8:	71a0      	strb	r0, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801d2aa:	6820      	ldr	r0, [r4, #0]
 801d2ac:	69e1      	ldr	r1, [r4, #28]
 801d2ae:	f7fe fd9b 	bl	801bde8 <move_window>
			if (res == FR_OK) {
 801d2b2:	2800      	cmp	r0, #0
 801d2b4:	d12e      	bne.n	801d314 <f_sync+0xaa>
				dir = fp->dir_ptr;
 801d2b6:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 801d2b8:	7aeb      	ldrb	r3, [r5, #11]
 801d2ba:	f043 0220 	orr.w	r2, r3, #32
 801d2be:	72ea      	strb	r2, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 801d2c0:	68e1      	ldr	r1, [r4, #12]
 801d2c2:	7729      	strb	r1, [r5, #28]
 801d2c4:	89a0      	ldrh	r0, [r4, #12]
 801d2c6:	0a03      	lsrs	r3, r0, #8
 801d2c8:	776b      	strb	r3, [r5, #29]
 801d2ca:	89e2      	ldrh	r2, [r4, #14]
 801d2cc:	77aa      	strb	r2, [r5, #30]
 801d2ce:	7be1      	ldrb	r1, [r4, #15]
 801d2d0:	77e9      	strb	r1, [r5, #31]
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 801d2d2:	6920      	ldr	r0, [r4, #16]
 801d2d4:	76a8      	strb	r0, [r5, #26]
 801d2d6:	8a23      	ldrh	r3, [r4, #16]
 801d2d8:	0a1a      	lsrs	r2, r3, #8
 801d2da:	76ea      	strb	r2, [r5, #27]
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 801d2dc:	8a61      	ldrh	r1, [r4, #18]
 801d2de:	7529      	strb	r1, [r5, #20]
 801d2e0:	8a60      	ldrh	r0, [r4, #18]
 801d2e2:	0a03      	lsrs	r3, r0, #8
 801d2e4:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();			/* Updated time */
 801d2e6:	f7fe fcbb 	bl	801bc60 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
 801d2ea:	75a8      	strb	r0, [r5, #22]
 801d2ec:	0c01      	lsrs	r1, r0, #16
 801d2ee:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801d2f2:	0e00      	lsrs	r0, r0, #24
 801d2f4:	75ea      	strb	r2, [r5, #23]
 801d2f6:	7668      	strb	r0, [r5, #25]
 801d2f8:	7629      	strb	r1, [r5, #24]
				fp->flag &= ~FA__WRITTEN;
 801d2fa:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
 801d2fc:	6821      	ldr	r1, [r4, #0]
 801d2fe:	2001      	movs	r0, #1
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
 801d300:	f023 0220 	bic.w	r2, r3, #32
 801d304:	71a2      	strb	r2, [r4, #6]
				fp->fs->wflag = 1;
 801d306:	7108      	strb	r0, [r1, #4]
				res = sync(fp->fs);
 801d308:	6820      	ldr	r0, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 801d30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync(fp->fs);
 801d30e:	f7fe bda6 	b.w	801be5e <sync>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801d312:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 801d314:	bd38      	pop	{r3, r4, r5, pc}

0801d316 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801d316:	b510      	push	{r4, lr}
 801d318:	4604      	mov	r4, r0
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
 801d31a:	f7ff ffa6 	bl	801d26a <f_sync>
	if (res == FR_OK) fp->fs = NULL;
 801d31e:	b900      	cbnz	r0, 801d322 <f_close+0xc>
 801d320:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
 801d322:	bd10      	pop	{r4, pc}

0801d324 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801d324:	b510      	push	{r4, lr}
 801d326:	b086      	sub	sp, #24
 801d328:	4604      	mov	r4, r0
 801d32a:	a806      	add	r0, sp, #24
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
 801d32c:	2200      	movs	r2, #0

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801d32e:	f840 1d14 	str.w	r1, [r0, #-20]!
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
 801d332:	4621      	mov	r1, r4
 801d334:	f7ff fbfc 	bl	801cb30 <chk_mounted>
	if (res == FR_OK) {
 801d338:	bb30      	cbnz	r0, 801d388 <f_opendir+0x64>
		INITBUF((*dj), sfn, lfn);
 801d33a:	4814      	ldr	r0, [pc, #80]	; (801d38c <f_opendir+0x68>)
		res = follow_path(dj, path);			/* Follow the path to the directory */
 801d33c:	9901      	ldr	r1, [sp, #4]
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
	if (res == FR_OK) {
		INITBUF((*dj), sfn, lfn);
 801d33e:	61e0      	str	r0, [r4, #28]
 801d340:	ab03      	add	r3, sp, #12
 801d342:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 801d344:	4620      	mov	r0, r4
 801d346:	f7ff f8f5 	bl	801c534 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801d34a:	b9c0      	cbnz	r0, 801d37e <f_opendir+0x5a>
			dir = dj->dir;
 801d34c:	6963      	ldr	r3, [r4, #20]
			if (dir) {							/* It is not the root dir */
 801d34e:	b17b      	cbz	r3, 801d370 <f_opendir+0x4c>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 801d350:	7ada      	ldrb	r2, [r3, #11]
 801d352:	f002 0110 	and.w	r1, r2, #16
 801d356:	b2c8      	uxtb	r0, r1
 801d358:	b1a8      	cbz	r0, 801d386 <f_opendir+0x62>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801d35a:	7d59      	ldrb	r1, [r3, #21]
 801d35c:	7d1a      	ldrb	r2, [r3, #20]
 801d35e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 801d362:	7ed9      	ldrb	r1, [r3, #27]
 801d364:	7e9b      	ldrb	r3, [r3, #26]
 801d366:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 801d36a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 801d36e:	60a0      	str	r0, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 801d370:	6821      	ldr	r1, [r4, #0]
 801d372:	88cb      	ldrh	r3, [r1, #6]
				res = dir_seek(dj, 0);			/* Rewind dir */
 801d374:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 801d376:	80a3      	strh	r3, [r4, #4]
				res = dir_seek(dj, 0);			/* Rewind dir */
 801d378:	2100      	movs	r1, #0
 801d37a:	f7fe ff86 	bl	801c28a <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d37e:	2804      	cmp	r0, #4
 801d380:	bf08      	it	eq
 801d382:	2005      	moveq	r0, #5
 801d384:	e000      	b.n	801d388 <f_opendir+0x64>
			dir = dj->dir;
			if (dir) {							/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 801d386:	2005      	movs	r0, #5
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 801d388:	b006      	add	sp, #24
 801d38a:	bd10      	pop	{r4, pc}
 801d38c:	200011a0 	.word	0x200011a0

0801d390 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 801d390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d392:	4604      	mov	r4, r0
 801d394:	460e      	mov	r6, r1
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 801d396:	6800      	ldr	r0, [r0, #0]
 801d398:	88a1      	ldrh	r1, [r4, #4]
 801d39a:	f7fe fdff 	bl	801bf9c <validate>
	if (res == FR_OK) {
 801d39e:	4605      	mov	r5, r0
 801d3a0:	b9f0      	cbnz	r0, 801d3e0 <f_readdir+0x50>
		INITBUF((*dj), sfn, lfn);
 801d3a2:	4811      	ldr	r0, [pc, #68]	; (801d3e8 <f_readdir+0x58>)
 801d3a4:	ab01      	add	r3, sp, #4
 801d3a6:	61e0      	str	r0, [r4, #28]
 801d3a8:	61a3      	str	r3, [r4, #24]
		if (!fno) {
			res = dir_seek(dj, 0);
 801d3aa:	4620      	mov	r0, r4


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res == FR_OK) {
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
 801d3ac:	b91e      	cbnz	r6, 801d3b6 <f_readdir+0x26>
			res = dir_seek(dj, 0);
 801d3ae:	4629      	mov	r1, r5
 801d3b0:	f7fe ff6b 	bl	801c28a <dir_seek>
 801d3b4:	e013      	b.n	801d3de <f_readdir+0x4e>
		} else {
			res = dir_read(dj);
 801d3b6:	f7ff fa15 	bl	801c7e4 <dir_read>
			if (res == FR_NO_FILE) {
 801d3ba:	2804      	cmp	r0, #4
 801d3bc:	d101      	bne.n	801d3c2 <f_readdir+0x32>
				dj->sect = 0;
 801d3be:	6125      	str	r5, [r4, #16]
 801d3c0:	e000      	b.n	801d3c4 <f_readdir+0x34>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 801d3c2:	b960      	cbnz	r0, 801d3de <f_readdir+0x4e>
				get_fileinfo(dj, fno);		/* Get the object information */
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	4631      	mov	r1, r6
 801d3c8:	f7fe fc99 	bl	801bcfe <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
 801d3cc:	2100      	movs	r1, #0
 801d3ce:	4620      	mov	r0, r4
 801d3d0:	f7fe ff9d 	bl	801c30e <dir_next>
				if (res == FR_NO_FILE) {
 801d3d4:	2804      	cmp	r0, #4
 801d3d6:	d102      	bne.n	801d3de <f_readdir+0x4e>
					dj->sect = 0;
 801d3d8:	2100      	movs	r1, #0
 801d3da:	6121      	str	r1, [r4, #16]
 801d3dc:	e000      	b.n	801d3e0 <f_readdir+0x50>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
 801d3de:	4605      	mov	r5, r0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
 801d3e0:	4628      	mov	r0, r5
 801d3e2:	b004      	add	sp, #16
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	bf00      	nop
 801d3e8:	200011a0 	.word	0x200011a0

0801d3ec <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
 801d3ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3f0:	ab02      	add	r3, sp, #8
 801d3f2:	4688      	mov	r8, r1
 801d3f4:	f843 0d04 	str.w	r0, [r3, #-4]!
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
 801d3f8:	4611      	mov	r1, r2
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
 801d3fa:	4616      	mov	r6, r2
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	2200      	movs	r2, #0
 801d400:	f7ff fb96 	bl	801cb30 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
 801d404:	4604      	mov	r4, r0
 801d406:	2800      	cmp	r0, #0
 801d408:	d161      	bne.n	801d4ce <f_getfree+0xe2>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
 801d40a:	6830      	ldr	r0, [r6, #0]
 801d40c:	69c7      	ldr	r7, [r0, #28]
 801d40e:	6902      	ldr	r2, [r0, #16]
 801d410:	1eb9      	subs	r1, r7, #2
 801d412:	428a      	cmp	r2, r1
 801d414:	d802      	bhi.n	801d41c <f_getfree+0x30>
		*nclst = (*fatfs)->free_clust;
 801d416:	f8c8 2000 	str.w	r2, [r8]
		LEAVE_FF(*fatfs, FR_OK);
 801d41a:	e058      	b.n	801d4ce <f_getfree+0xe2>
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
 801d41c:	f890 9000 	ldrb.w	r9, [r0]
	n = 0;
	if (fat == FS_FAT12) {
 801d420:	f1b9 0f01 	cmp.w	r9, #1
 801d424:	d111      	bne.n	801d44a <f_getfree+0x5e>
 801d426:	2702      	movs	r7, #2
 801d428:	4625      	mov	r5, r4
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
 801d42a:	6830      	ldr	r0, [r6, #0]
 801d42c:	4639      	mov	r1, r7
 801d42e:	f7fe fdc7 	bl	801bfc0 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 801d432:	1c43      	adds	r3, r0, #1
 801d434:	d046      	beq.n	801d4c4 <f_getfree+0xd8>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 801d436:	2801      	cmp	r0, #1
 801d438:	d046      	beq.n	801d4c8 <f_getfree+0xdc>
			if (stat == 0) n++;
 801d43a:	b900      	cbnz	r0, 801d43e <f_getfree+0x52>
 801d43c:	3501      	adds	r5, #1
		} while (++clst < (*fatfs)->max_clust);
 801d43e:	6831      	ldr	r1, [r6, #0]
 801d440:	69cb      	ldr	r3, [r1, #28]
 801d442:	3701      	adds	r7, #1
 801d444:	429f      	cmp	r7, r3
 801d446:	d3f0      	bcc.n	801d42a <f_getfree+0x3e>
 801d448:	e032      	b.n	801d4b0 <f_getfree+0xc4>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
 801d44a:	6a01      	ldr	r1, [r0, #32]
		i = 0; p = 0;
 801d44c:	4623      	mov	r3, r4
 801d44e:	4622      	mov	r2, r4
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
	n = 0;
 801d450:	4625      	mov	r5, r4
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
 801d452:	b952      	cbnz	r2, 801d46a <f_getfree+0x7e>
				res = move_window(*fatfs, sect++);
 801d454:	6830      	ldr	r0, [r6, #0]
 801d456:	f101 0a01 	add.w	sl, r1, #1
 801d45a:	f7fe fcc5 	bl	801bde8 <move_window>
				if (res != FR_OK)
 801d45e:	bba8      	cbnz	r0, 801d4cc <f_getfree+0xe0>
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
 801d460:	6833      	ldr	r3, [r6, #0]
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
 801d462:	4651      	mov	r1, sl
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
 801d464:	3330      	adds	r3, #48	; 0x30
				i = SS(*fatfs);
 801d466:	f44f 7200 	mov.w	r2, #512	; 0x200
			}
			if (fat == FS_FAT16) {
 801d46a:	f1b9 0f02 	cmp.w	r9, #2
 801d46e:	d109      	bne.n	801d484 <f_getfree+0x98>
				if (LD_WORD(p) == 0) n++;
 801d470:	f893 e001 	ldrb.w	lr, [r3, #1]
 801d474:	7818      	ldrb	r0, [r3, #0]
 801d476:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
 801d47a:	bf08      	it	eq
 801d47c:	3501      	addeq	r5, #1
				p += 2; i -= 2;
 801d47e:	3302      	adds	r3, #2
 801d480:	3a02      	subs	r2, #2
 801d482:	e013      	b.n	801d4ac <f_getfree+0xc0>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 801d484:	7898      	ldrb	r0, [r3, #2]
 801d486:	f893 c003 	ldrb.w	ip, [r3, #3]
 801d48a:	f893 e000 	ldrb.w	lr, [r3]
 801d48e:	0400      	lsls	r0, r0, #16
 801d490:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 801d494:	f893 c001 	ldrb.w	ip, [r3, #1]
 801d498:	ea40 000e 	orr.w	r0, r0, lr
 801d49c:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 801d4a0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 801d4a4:	b900      	cbnz	r0, 801d4a8 <f_getfree+0xbc>
 801d4a6:	3501      	adds	r5, #1
				p += 4; i -= 4;
 801d4a8:	3304      	adds	r3, #4
 801d4aa:	3a04      	subs	r2, #4
			}
		} while (--clst);
 801d4ac:	3f01      	subs	r7, #1
 801d4ae:	d1d0      	bne.n	801d452 <f_getfree+0x66>
	}
	(*fatfs)->free_clust = n;
 801d4b0:	6830      	ldr	r0, [r6, #0]
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 801d4b2:	f1b9 0f03 	cmp.w	r9, #3
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
				p += 4; i -= 4;
			}
		} while (--clst);
	}
	(*fatfs)->free_clust = n;
 801d4b6:	6105      	str	r5, [r0, #16]
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 801d4b8:	d101      	bne.n	801d4be <f_getfree+0xd2>
 801d4ba:	2201      	movs	r2, #1
 801d4bc:	7142      	strb	r2, [r0, #5]
	*nclst = n;
 801d4be:	f8c8 5000 	str.w	r5, [r8]

	LEAVE_FF(*fatfs, FR_OK);
 801d4c2:	e004      	b.n	801d4ce <f_getfree+0xe2>
	n = 0;
	if (fat == FS_FAT12) {
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 801d4c4:	2401      	movs	r4, #1
 801d4c6:	e002      	b.n	801d4ce <f_getfree+0xe2>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 801d4c8:	2402      	movs	r4, #2
 801d4ca:	e000      	b.n	801d4ce <f_getfree+0xe2>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
 801d4cc:	4604      	mov	r4, r0
	(*fatfs)->free_clust = n;
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
	*nclst = n;

	LEAVE_FF(*fatfs, FR_OK);
}
 801d4ce:	4620      	mov	r0, r4
 801d4d0:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

0801d4d4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
 801d4d4:	b510      	push	{r4, lr}
 801d4d6:	b098      	sub	sp, #96	; 0x60
 801d4d8:	ab18      	add	r3, sp, #96	; 0x60
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
 801d4da:	a906      	add	r1, sp, #24
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
 801d4dc:	f843 0d5c 	str.w	r0, [r3, #-92]!
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
 801d4e0:	2201      	movs	r2, #1
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f7ff fb24 	bl	801cb30 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801d4e8:	2800      	cmp	r0, #0
 801d4ea:	d147      	bne.n	801d57c <f_unlink+0xa8>

	INITBUF(dj, sfn, lfn);
 801d4ec:	4924      	ldr	r1, [pc, #144]	; (801d580 <f_unlink+0xac>)
 801d4ee:	a803      	add	r0, sp, #12
 801d4f0:	900c      	str	r0, [sp, #48]	; 0x30
 801d4f2:	910d      	str	r1, [sp, #52]	; 0x34
	res = follow_path(&dj, path);			/* Follow the file path */
 801d4f4:	a806      	add	r0, sp, #24
 801d4f6:	9901      	ldr	r1, [sp, #4]
 801d4f8:	f7ff f81c 	bl	801c534 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d13d      	bne.n	801d57c <f_unlink+0xa8>

	dir = dj.dir;
 801d500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (!dir)								/* Is it the root directory? */
 801d502:	2b00      	cmp	r3, #0
 801d504:	d037      	beq.n	801d576 <f_unlink+0xa2>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 801d506:	7ada      	ldrb	r2, [r3, #11]
 801d508:	07d0      	lsls	r0, r2, #31
 801d50a:	d501      	bpl.n	801d510 <f_unlink+0x3c>
		LEAVE_FF(dj.fs, FR_DENIED);
 801d50c:	2007      	movs	r0, #7
 801d50e:	e035      	b.n	801d57c <f_unlink+0xa8>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801d510:	7d18      	ldrb	r0, [r3, #20]
 801d512:	7ed9      	ldrb	r1, [r3, #27]
 801d514:	7d5c      	ldrb	r4, [r3, #21]
 801d516:	7e9b      	ldrb	r3, [r3, #26]

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 801d518:	f002 0210 	and.w	r2, r2, #16
	dir = dj.dir;
	if (!dir)								/* Is it the root directory? */
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801d51c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 801d520:	ea43 2001 	orr.w	r0, r3, r1, lsl #8

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 801d524:	b2d1      	uxtb	r1, r2
	dir = dj.dir;
	if (!dir)								/* Is it the root directory? */
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801d526:	ea40 4404 	orr.w	r4, r0, r4, lsl #16

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 801d52a:	b921      	cbnz	r1, 801d536 <f_unlink+0x62>
		res = dir_read(&sdj);
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
	}

	res = dir_remove(&dj);					/* Remove directory entry */
 801d52c:	a806      	add	r0, sp, #24
 801d52e:	f7ff f931 	bl	801c794 <dir_remove>
	if (res == FR_OK) {
 801d532:	b1a8      	cbz	r0, 801d560 <f_unlink+0x8c>
 801d534:	e022      	b.n	801d57c <f_unlink+0xa8>
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 801d536:	2c01      	cmp	r4, #1
 801d538:	d91f      	bls.n	801d57a <f_unlink+0xa6>
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 801d53a:	a80f      	add	r0, sp, #60	; 0x3c
 801d53c:	a906      	add	r1, sp, #24
 801d53e:	2224      	movs	r2, #36	; 0x24
 801d540:	f7fe fbbe 	bl	801bcc0 <mem_cpy>
		sdj.sclust = dclst;
		res = dir_seek(&sdj, 2);
 801d544:	a80f      	add	r0, sp, #60	; 0x3c
 801d546:	2102      	movs	r1, #2
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
 801d548:	9411      	str	r4, [sp, #68]	; 0x44
		res = dir_seek(&sdj, 2);
 801d54a:	f7fe fe9e 	bl	801c28a <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801d54e:	b9a8      	cbnz	r0, 801d57c <f_unlink+0xa8>
		res = dir_read(&sdj);
 801d550:	a80f      	add	r0, sp, #60	; 0x3c
 801d552:	f7ff f947 	bl	801c7e4 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 801d556:	2800      	cmp	r0, #0
 801d558:	d0d8      	beq.n	801d50c <f_unlink+0x38>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 801d55a:	2804      	cmp	r0, #4
 801d55c:	d0e6      	beq.n	801d52c <f_unlink+0x58>
 801d55e:	e00d      	b.n	801d57c <f_unlink+0xa8>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
	if (res == FR_OK) {
		if (dclst)
 801d560:	b91c      	cbnz	r4, 801d56a <f_unlink+0x96>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
		if (res == FR_OK) res = sync(dj.fs);
 801d562:	9806      	ldr	r0, [sp, #24]
 801d564:	f7fe fc7b 	bl	801be5e <sync>
 801d568:	e008      	b.n	801d57c <f_unlink+0xa8>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
	if (res == FR_OK) {
		if (dclst)
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
 801d56a:	9806      	ldr	r0, [sp, #24]
 801d56c:	4621      	mov	r1, r4
 801d56e:	f7fe fe56 	bl	801c21e <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
 801d572:	b918      	cbnz	r0, 801d57c <f_unlink+0xa8>
 801d574:	e7f5      	b.n	801d562 <f_unlink+0x8e>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
	if (!dir)								/* Is it the root directory? */
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
 801d576:	2006      	movs	r0, #6
 801d578:	e000      	b.n	801d57c <f_unlink+0xa8>
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 801d57a:	2002      	movs	r0, #2
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
		if (res == FR_OK) res = sync(dj.fs);
	}

	LEAVE_FF(dj.fs, res);
}
 801d57c:	b018      	add	sp, #96	; 0x60
 801d57e:	bd10      	pop	{r4, pc}
 801d580:	200011a0 	.word	0x200011a0

0801d584 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
 801d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d588:	b091      	sub	sp, #68	; 0x44
 801d58a:	ab10      	add	r3, sp, #64	; 0x40
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
 801d58c:	a907      	add	r1, sp, #28
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
 801d58e:	f843 0d34 	str.w	r0, [r3, #-52]!
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
 801d592:	2201      	movs	r2, #1
 801d594:	4618      	mov	r0, r3
 801d596:	f7ff facb 	bl	801cb30 <chk_mounted>
 801d59a:	4606      	mov	r6, r0
 801d59c:	4605      	mov	r5, r0
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801d59e:	2800      	cmp	r0, #0
 801d5a0:	f040 80c3 	bne.w	801d72a <f_mkdir+0x1a6>

	INITBUF(dj, sfn, lfn);
 801d5a4:	4963      	ldr	r1, [pc, #396]	; (801d734 <f_mkdir+0x1b0>)
 801d5a6:	a804      	add	r0, sp, #16
 801d5a8:	900d      	str	r0, [sp, #52]	; 0x34
 801d5aa:	910e      	str	r1, [sp, #56]	; 0x38
	res = follow_path(&dj, path);			/* Follow the file path */
 801d5ac:	a807      	add	r0, sp, #28
 801d5ae:	9903      	ldr	r1, [sp, #12]
 801d5b0:	f7fe ffc0 	bl	801c534 <follow_path>
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 801d5b4:	4606      	mov	r6, r0
 801d5b6:	b170      	cbz	r0, 801d5d6 <f_mkdir+0x52>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
 801d5b8:	2804      	cmp	r0, #4
 801d5ba:	f040 80b6 	bne.w	801d72a <f_mkdir+0x1a6>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
 801d5be:	9807      	ldr	r0, [sp, #28]
 801d5c0:	4629      	mov	r1, r5
 801d5c2:	f7fe fddc 	bl	801c17e <create_chain>
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
 801d5c6:	4604      	mov	r4, r0
 801d5c8:	b138      	cbz	r0, 801d5da <f_mkdir+0x56>
	if (dclst == 1) res = FR_INT_ERR;
 801d5ca:	2801      	cmp	r0, #1
 801d5cc:	d007      	beq.n	801d5de <f_mkdir+0x5a>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d5ce:	1c46      	adds	r6, r0, #1
 801d5d0:	d107      	bne.n	801d5e2 <f_mkdir+0x5e>
 801d5d2:	2601      	movs	r6, #1
 801d5d4:	e0a9      	b.n	801d72a <f_mkdir+0x1a6>
	res = chk_mounted(&path, &dj.fs, 1);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);

	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);			/* Follow the file path */
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 801d5d6:	2608      	movs	r6, #8
 801d5d8:	e0a7      	b.n	801d72a <f_mkdir+0x1a6>
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
 801d5da:	2607      	movs	r6, #7
 801d5dc:	e0a5      	b.n	801d72a <f_mkdir+0x1a6>
	if (dclst == 1) res = FR_INT_ERR;
 801d5de:	2602      	movs	r6, #2
 801d5e0:	e0a3      	b.n	801d72a <f_mkdir+0x1a6>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
 801d5e2:	9807      	ldr	r0, [sp, #28]
 801d5e4:	4629      	mov	r1, r5
 801d5e6:	f7fe fbff 	bl	801bde8 <move_window>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801d5ea:	4606      	mov	r6, r0
 801d5ec:	2800      	cmp	r0, #0
 801d5ee:	f040 809c 	bne.w	801d72a <f_mkdir+0x1a6>
	dsect = clust2sect(dj.fs, dclst);
 801d5f2:	9f07      	ldr	r7, [sp, #28]
 801d5f4:	4621      	mov	r1, r4
 801d5f6:	4638      	mov	r0, r7
 801d5f8:	f7fe fe3b 	bl	801c272 <clust2sect>

	dir = dj.fs->win;						/* Initialize the new directory table */
 801d5fc:	f107 0530 	add.w	r5, r7, #48	; 0x30
	mem_set(dir, 0, SS(dj.fs));
 801d600:	4631      	mov	r1, r6
 801d602:	f44f 7200 	mov.w	r2, #512	; 0x200
	if (dclst == 1) res = FR_INT_ERR;
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);
 801d606:	4683      	mov	fp, r0

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
 801d608:	4628      	mov	r0, r5
 801d60a:	f7fe fb62 	bl	801bcd2 <mem_set>
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
 801d60e:	2120      	movs	r1, #32
 801d610:	220b      	movs	r2, #11
 801d612:	4628      	mov	r0, r5
 801d614:	f7fe fb5d 	bl	801bcd2 <mem_set>
	dir[DIR_Name] = '.';
 801d618:	262e      	movs	r6, #46	; 0x2e
	dir[DIR_Attr] = AM_DIR;
 801d61a:	2210      	movs	r2, #16
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
 801d61c:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
	dir[DIR_Attr] = AM_DIR;
 801d620:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
	tim = get_fattime();
 801d624:	f7fe fb1c 	bl	801bc60 <get_fattime>
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d628:	0c22      	lsrs	r2, r4, #16
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 801d62a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801d62e:	fa5f fa80 	uxtb.w	sl, r0
 801d632:	f3c0 4907 	ubfx	r9, r0, #16, #8
 801d636:	ea4f 6810 	mov.w	r8, r0, lsr #24
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801d63a:	b2e0      	uxtb	r0, r4
 801d63c:	f3c4 2107 	ubfx	r1, r4, #8, #8
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 801d640:	f88d 3009 	strb.w	r3, [sp, #9]
 801d644:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801d648:	9000      	str	r0, [sp, #0]
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d64a:	b2d3      	uxtb	r3, r2
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801d64c:	f887 004a 	strb.w	r0, [r7, #74]	; 0x4a
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d650:	0a10      	lsrs	r0, r2, #8
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801d652:	f88d 100a 	strb.w	r1, [sp, #10]
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 801d656:	2220      	movs	r2, #32
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801d658:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d65c:	f88d 000b 	strb.w	r0, [sp, #11]
 801d660:	f887 0045 	strb.w	r0, [r7, #69]	; 0x45
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 801d664:	4629      	mov	r1, r5
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 801d666:	f887 a046 	strb.w	sl, [r7, #70]	; 0x46
 801d66a:	f887 9048 	strb.w	r9, [r7, #72]	; 0x48
 801d66e:	f887 8049 	strb.w	r8, [r7, #73]	; 0x49
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d672:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 801d676:	f107 0050 	add.w	r0, r7, #80	; 0x50
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d67a:	9301      	str	r3, [sp, #4]
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 801d67c:	f7fe fb20 	bl	801bcc0 <mem_cpy>
	dir[33] = '.';
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 801d680:	9a07      	ldr	r2, [sp, #28]
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
 801d682:	f887 6051 	strb.w	r6, [r7, #81]	; 0x51
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 801d686:	7811      	ldrb	r1, [r2, #0]
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
	pclst = dj.sclust;
 801d688:	9e09      	ldr	r6, [sp, #36]	; 0x24
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 801d68a:	2903      	cmp	r1, #3
 801d68c:	d103      	bne.n	801d696 <f_mkdir+0x112>
 801d68e:	6a53      	ldr	r3, [r2, #36]	; 0x24
		pclst = 0;
 801d690:	429e      	cmp	r6, r3
 801d692:	bf08      	it	eq
 801d694:	2600      	moveq	r6, #0
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 801d696:	f887 606a 	strb.w	r6, [r7, #106]	; 0x6a
 801d69a:	f3c6 2007 	ubfx	r0, r6, #8, #8
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 801d69e:	0c36      	lsrs	r6, r6, #16
 801d6a0:	0a32      	lsrs	r2, r6, #8
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 801d6a2:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 801d6a6:	f887 6064 	strb.w	r6, [r7, #100]	; 0x64
 801d6aa:	f887 2065 	strb.w	r2, [r7, #101]	; 0x65
	if (dclst == 1) res = FR_INT_ERR;
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);
 801d6ae:	465f      	mov	r7, fp
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 801d6b0:	9807      	ldr	r0, [sp, #28]

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
 801d6b2:	ebcb 0107 	rsb	r1, fp, r7
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 801d6b6:	7886      	ldrb	r6, [r0, #2]
 801d6b8:	b2cb      	uxtb	r3, r1
 801d6ba:	429e      	cmp	r6, r3
 801d6bc:	d90f      	bls.n	801d6de <f_mkdir+0x15a>
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
 801d6be:	2301      	movs	r3, #1
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
 801d6c0:	62c7      	str	r7, [r0, #44]	; 0x2c
		dj.fs->wflag = 1;
 801d6c2:	7103      	strb	r3, [r0, #4]
		res = move_window(dj.fs, 0);
 801d6c4:	2100      	movs	r1, #0
 801d6c6:	f7fe fb8f 	bl	801bde8 <move_window>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
 801d6ca:	3701      	adds	r7, #1
		dj.fs->wflag = 1;
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
 801d6cc:	4606      	mov	r6, r0
 801d6ce:	bb60      	cbnz	r0, 801d72a <f_mkdir+0x1a6>
		mem_set(dir, 0, SS(dj.fs));
 801d6d0:	4628      	mov	r0, r5
 801d6d2:	4631      	mov	r1, r6
 801d6d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d6d8:	f7fe fafb 	bl	801bcd2 <mem_set>
 801d6dc:	e7e8      	b.n	801d6b0 <f_mkdir+0x12c>
	}

	res = dir_register(&dj);
 801d6de:	a807      	add	r0, sp, #28
 801d6e0:	f7ff f940 	bl	801c964 <dir_register>
	if (res != FR_OK) {
 801d6e4:	4606      	mov	r6, r0
 801d6e6:	b120      	cbz	r0, 801d6f2 <f_mkdir+0x16e>
		remove_chain(dj.fs, dclst);
 801d6e8:	9807      	ldr	r0, [sp, #28]
 801d6ea:	4621      	mov	r1, r4
 801d6ec:	f7fe fd97 	bl	801c21e <remove_chain>
 801d6f0:	e01b      	b.n	801d72a <f_mkdir+0x1a6>
	} else {
		dir = dj.dir;
 801d6f2:	980c      	ldr	r0, [sp, #48]	; 0x30
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 801d6f4:	f89d 1009 	ldrb.w	r1, [sp, #9]
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 801d6f8:	9e00      	ldr	r6, [sp, #0]
	if (res != FR_OK) {
		remove_chain(dj.fs, dclst);
	} else {
		dir = dj.dir;
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 801d6fa:	75c1      	strb	r1, [r0, #23]
	res = dir_register(&dj);
	if (res != FR_OK) {
		remove_chain(dj.fs, dclst);
	} else {
		dir = dj.dir;
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
 801d6fc:	2210      	movs	r2, #16
 801d6fe:	72c2      	strb	r2, [r0, #11]
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 801d700:	f89d 300a 	ldrb.w	r3, [sp, #10]
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d704:	9a01      	ldr	r2, [sp, #4]
 801d706:	f89d 100b 	ldrb.w	r1, [sp, #11]
		remove_chain(dj.fs, dclst);
	} else {
		dir = dj.dir;
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 801d70a:	7686      	strb	r6, [r0, #26]
	if (res != FR_OK) {
		remove_chain(dj.fs, dclst);
	} else {
		dir = dj.dir;
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 801d70c:	f880 a016 	strb.w	sl, [r0, #22]
 801d710:	f880 9018 	strb.w	r9, [r0, #24]
 801d714:	f880 8019 	strb.w	r8, [r0, #25]
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 801d718:	76c3      	strb	r3, [r0, #27]
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801d71a:	7502      	strb	r2, [r0, #20]
 801d71c:	7541      	strb	r1, [r0, #21]
		dj.fs->wflag = 1;
 801d71e:	9807      	ldr	r0, [sp, #28]
 801d720:	2601      	movs	r6, #1
 801d722:	7106      	strb	r6, [r0, #4]
		res = sync(dj.fs);
 801d724:	f7fe fb9b 	bl	801be5e <sync>
 801d728:	4606      	mov	r6, r0
	}

	LEAVE_FF(dj.fs, res);
}
 801d72a:	4630      	mov	r0, r6
 801d72c:	b011      	add	sp, #68	; 0x44
 801d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d732:	bf00      	nop
 801d734:	200011a0 	.word	0x200011a0

0801d738 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
 801d738:	b530      	push	{r4, r5, lr}
 801d73a:	b09f      	sub	sp, #124	; 0x7c
 801d73c:	460c      	mov	r4, r1
 801d73e:	9001      	str	r0, [sp, #4]
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
 801d740:	4840      	ldr	r0, [pc, #256]	; (801d844 <f_rename+0x10c>)
 801d742:	ab03      	add	r3, sp, #12
 801d744:	9013      	str	r0, [sp, #76]	; 0x4c
	res = chk_mounted(&path_old, &dj_old.fs, 1);
 801d746:	a90c      	add	r1, sp, #48	; 0x30
 801d748:	a801      	add	r0, sp, #4
 801d74a:	2201      	movs	r2, #1
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
 801d74c:	9312      	str	r3, [sp, #72]	; 0x48
	res = chk_mounted(&path_old, &dj_old.fs, 1);
 801d74e:	f7ff f9ef 	bl	801cb30 <chk_mounted>
	if (res == FR_OK) {
 801d752:	2800      	cmp	r0, #0
 801d754:	d174      	bne.n	801d840 <f_rename+0x108>
		dj_new.fs = dj_old.fs;
 801d756:	990c      	ldr	r1, [sp, #48]	; 0x30
		res = follow_path(&dj_old, path_old);	/* Check old object */
 801d758:	a80c      	add	r0, sp, #48	; 0x30


	INITBUF(dj_old, sfn, lfn);
	res = chk_mounted(&path_old, &dj_old.fs, 1);
	if (res == FR_OK) {
		dj_new.fs = dj_old.fs;
 801d75a:	9115      	str	r1, [sp, #84]	; 0x54
		res = follow_path(&dj_old, path_old);	/* Check old object */
 801d75c:	9901      	ldr	r1, [sp, #4]
 801d75e:	f7fe fee9 	bl	801c534 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
 801d762:	2800      	cmp	r0, #0
 801d764:	d16c      	bne.n	801d840 <f_rename+0x108>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 801d766:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d768:	2900      	cmp	r1, #0
 801d76a:	d05c      	beq.n	801d826 <f_rename+0xee>
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 801d76c:	a806      	add	r0, sp, #24
 801d76e:	310b      	adds	r1, #11
 801d770:	2215      	movs	r2, #21
 801d772:	f7fe faa5 	bl	801bcc0 <mem_cpy>

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
 801d776:	a815      	add	r0, sp, #84	; 0x54
 801d778:	a90c      	add	r1, sp, #48	; 0x30
 801d77a:	2224      	movs	r2, #36	; 0x24
 801d77c:	f7fe faa0 	bl	801bcc0 <mem_cpy>
	res = follow_path(&dj_new, path_new);		/* Check new object */
 801d780:	a815      	add	r0, sp, #84	; 0x54
 801d782:	4621      	mov	r1, r4
 801d784:	f7fe fed6 	bl	801c534 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 801d788:	2800      	cmp	r0, #0
 801d78a:	d04e      	beq.n	801d82a <f_rename+0xf2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 801d78c:	2804      	cmp	r0, #4
 801d78e:	d157      	bne.n	801d840 <f_rename+0x108>
		res = dir_register(&dj_new);			/* Register the new object */
 801d790:	a815      	add	r0, sp, #84	; 0x54
 801d792:	f7ff f8e7 	bl	801c964 <dir_register>
		if (res == FR_OK) {
 801d796:	2800      	cmp	r0, #0
 801d798:	d152      	bne.n	801d840 <f_rename+0x108>
			dir = dj_new.dir;					/* Copy object information into new entry */
 801d79a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
			mem_cpy(dir+13, buf+2, 19);
 801d79c:	f10d 011a 	add.w	r1, sp, #26
 801d7a0:	f104 000d 	add.w	r0, r4, #13
 801d7a4:	2213      	movs	r2, #19
 801d7a6:	f7fe fa8b 	bl	801bcc0 <mem_cpy>
			dir[DIR_Attr] = buf[0] | AM_ARC;
 801d7aa:	f89d 2018 	ldrb.w	r2, [sp, #24]
			dj_old.fs->wflag = 1;
 801d7ae:	990c      	ldr	r1, [sp, #48]	; 0x30
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
 801d7b0:	f042 0320 	orr.w	r3, r2, #32
			dj_old.fs->wflag = 1;
 801d7b4:	2001      	movs	r0, #1
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
 801d7b6:	72e3      	strb	r3, [r4, #11]
			dj_old.fs->wflag = 1;
 801d7b8:	7108      	strb	r0, [r1, #4]
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
 801d7ba:	7ae2      	ldrb	r2, [r4, #11]
 801d7bc:	f002 0310 	and.w	r3, r2, #16
 801d7c0:	b2d8      	uxtb	r0, r3
 801d7c2:	2800      	cmp	r0, #0
 801d7c4:	d035      	beq.n	801d832 <f_rename+0xfa>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
 801d7c6:	7ee2      	ldrb	r2, [r4, #27]
 801d7c8:	7d61      	ldrb	r1, [r4, #21]
 801d7ca:	7ea0      	ldrb	r0, [r4, #26]
 801d7cc:	7d23      	ldrb	r3, [r4, #20]
 801d7ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d7d0:	4311      	orrs	r1, r2
 801d7d2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 801d7d6:	4319      	orrs	r1, r3
 801d7d8:	4628      	mov	r0, r5
 801d7da:	f7fe fd4a 	bl	801c272 <clust2sect>
				if (!dw) {
 801d7de:	4601      	mov	r1, r0
 801d7e0:	b328      	cbz	r0, 801d82e <f_rename+0xf6>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
 801d7e2:	4628      	mov	r0, r5
 801d7e4:	f7fe fb00 	bl	801bde8 <move_window>
					dir = dj_new.fs->win+32;
 801d7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
					if (res == FR_OK && dir[1] == '.') {
 801d7ea:	bb48      	cbnz	r0, 801d840 <f_rename+0x108>
 801d7ec:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 801d7f0:	292e      	cmp	r1, #46	; 0x2e
 801d7f2:	d11e      	bne.n	801d832 <f_rename+0xfa>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
 801d7f4:	781a      	ldrb	r2, [r3, #0]
 801d7f6:	2a03      	cmp	r2, #3
 801d7f8:	d103      	bne.n	801d802 <f_rename+0xca>
 801d7fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d7fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d7fe:	4281      	cmp	r1, r0
 801d800:	d001      	beq.n	801d806 <f_rename+0xce>
 801d802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d804:	e000      	b.n	801d808 <f_rename+0xd0>
 801d806:	2200      	movs	r2, #0
						ST_WORD(dir+DIR_FstClusLO, dw);
 801d808:	f3c2 2007 	ubfx	r0, r2, #8, #8
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 801d80c:	0c11      	lsrs	r1, r2, #16
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
					if (res == FR_OK && dir[1] == '.') {
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
						ST_WORD(dir+DIR_FstClusLO, dw);
 801d80e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801d812:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 801d816:	0a0a      	lsrs	r2, r1, #8
						dj_new.fs->wflag = 1;
 801d818:	2001      	movs	r0, #1
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
					if (res == FR_OK && dir[1] == '.') {
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
						ST_WORD(dir+DIR_FstClusLO, dw);
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 801d81a:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 801d81e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
						dj_new.fs->wflag = 1;
 801d822:	7118      	strb	r0, [r3, #4]
 801d824:	e005      	b.n	801d832 <f_rename+0xfa>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 801d826:	2004      	movs	r0, #4
 801d828:	e00a      	b.n	801d840 <f_rename+0x108>
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 801d82a:	2008      	movs	r0, #8
 801d82c:	e008      	b.n	801d840 <f_rename+0x108>
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
 801d82e:	2002      	movs	r0, #2
 801d830:	e006      	b.n	801d840 <f_rename+0x108>
						dj_new.fs->wflag = 1;
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
 801d832:	a80c      	add	r0, sp, #48	; 0x30
 801d834:	f7fe ffae 	bl	801c794 <dir_remove>
				if (res == FR_OK)
 801d838:	b910      	cbnz	r0, 801d840 <f_rename+0x108>
					res = sync(dj_old.fs);
 801d83a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d83c:	f7fe fb0f 	bl	801be5e <sync>
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
 801d840:	b01f      	add	sp, #124	; 0x7c
 801d842:	bd30      	pop	{r4, r5, pc}
 801d844:	200011a0 	.word	0x200011a0

0801d848 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
 801d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d84c:	460d      	mov	r5, r1
 801d84e:	b087      	sub	sp, #28
 801d850:	4614      	mov	r4, r2
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 801d852:	2800      	cmp	r0, #0
 801d854:	f040 828a 	bne.w	801dd6c <f_mkfs+0x524>
	if (partition >= 2) return FR_MKFS_ABORTED;
 801d858:	2901      	cmp	r1, #1
 801d85a:	d901      	bls.n	801d860 <f_mkfs+0x18>
 801d85c:	200e      	movs	r0, #14
 801d85e:	e2ab      	b.n	801ddb8 <f_mkfs+0x570>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
 801d860:	4ab7      	ldr	r2, [pc, #732]	; (801db40 <f_mkfs+0x2f8>)
 801d862:	6816      	ldr	r6, [r2, #0]
	if (!fs) return FR_NOT_ENABLED;
 801d864:	2e00      	cmp	r6, #0
 801d866:	f000 8283 	beq.w	801dd70 <f_mkfs+0x528>
	fs->fs_type = 0;
 801d86a:	7030      	strb	r0, [r6, #0]
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
 801d86c:	f7fe f952 	bl	801bb14 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801d870:	07c3      	lsls	r3, r0, #31
 801d872:	f100 827f 	bmi.w	801dd74 <f_mkfs+0x52c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801d876:	f000 0004 	and.w	r0, r0, #4
 801d87a:	b2c0      	uxtb	r0, r0
 801d87c:	2800      	cmp	r0, #0
 801d87e:	f040 827b 	bne.w	801dd78 <f_mkfs+0x530>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
 801d882:	2101      	movs	r1, #1
 801d884:	aa04      	add	r2, sp, #16
 801d886:	f7fe f9a7 	bl	801bbd8 <disk_ioctl>
 801d88a:	2800      	cmp	r0, #0
 801d88c:	d1e6      	bne.n	801d85c <f_mkfs+0x14>
 801d88e:	9904      	ldr	r1, [sp, #16]
 801d890:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801d894:	d3e2      	bcc.n	801d85c <f_mkfs+0x14>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
 801d896:	f1b1 6ffa 	cmp.w	r1, #131072000	; 0x7d00000
 801d89a:	bf84      	itt	hi
 801d89c:	f04f 61fa 	movhi.w	r1, #131072000	; 0x7d00000
 801d8a0:	9104      	strhi	r1, [sp, #16]
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
 801d8a2:	9b04      	ldr	r3, [sp, #16]
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
 801d8a4:	2d00      	cmp	r5, #0
 801d8a6:	bf0c      	ite	eq
 801d8a8:	223f      	moveq	r2, #63	; 0x3f
 801d8aa:	2200      	movne	r2, #0
	n_part -= b_part;
 801d8ac:	1a9b      	subs	r3, r3, r2
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
 801d8ae:	9201      	str	r2, [sp, #4]
	n_part -= b_part;
 801d8b0:	9304      	str	r3, [sp, #16]
 801d8b2:	f04f 0a07 	mov.w	sl, #7
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
 801d8b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d8ba:	42a0      	cmp	r0, r4
 801d8bc:	d005      	beq.n	801d8ca <f_mkfs+0x82>
 801d8be:	0040      	lsls	r0, r0, #1
 801d8c0:	f1ba 0a01 	subs.w	sl, sl, #1
 801d8c4:	d1f9      	bne.n	801d8ba <f_mkfs+0x72>
	if (d != allocsize) allocsize = 0;
 801d8c6:	42a0      	cmp	r0, r4
 801d8c8:	d101      	bne.n	801d8ce <f_mkfs+0x86>
	if (!allocsize) {					/* Auto selection of cluster size */
 801d8ca:	b96c      	cbnz	r4, 801d8e8 <f_mkfs+0xa0>
 801d8cc:	e000      	b.n	801d8d0 <f_mkfs+0x88>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
	if (d != allocsize) allocsize = 0;
 801d8ce:	4654      	mov	r4, sl
	if (!allocsize) {					/* Auto selection of cluster size */
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
 801d8d0:	4a9c      	ldr	r2, [pc, #624]	; (801db44 <f_mkfs+0x2fc>)
 801d8d2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
#define N_FATS		1			/* 1 or 2 */
#define MAX_SECTOR	131072000UL	/* Maximum partition size */
#define MIN_SECTOR	2000UL		/* Minimum partition size */


FRESULT f_mkfs (
 801d8d6:	1c61      	adds	r1, r4, #1
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
	if (d != allocsize) allocsize = 0;
	if (!allocsize) {					/* Auto selection of cluster size */
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
 801d8d8:	4283      	cmp	r3, r0
 801d8da:	d201      	bcs.n	801d8e0 <f_mkfs+0x98>
 801d8dc:	460c      	mov	r4, r1
 801d8de:	e7f7      	b.n	801d8d0 <f_mkfs+0x88>
		allocsize = cstbl[n];
 801d8e0:	4999      	ldr	r1, [pc, #612]	; (801db48 <f_mkfs+0x300>)
 801d8e2:	9405      	str	r4, [sp, #20]
 801d8e4:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
 801d8e8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801d8ec:	bf38      	it	cc
 801d8ee:	f44f 7400 	movcc.w	r4, #512	; 0x200

	allocsize /= SS(fs);		/* Number of sectors per cluster */
 801d8f2:	ea4f 2a54 	mov.w	sl, r4, lsr #9

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
 801d8f6:	fbb3 f3fa 	udiv	r3, r3, sl
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
 801d8fa:	f640 72f4 	movw	r2, #4084	; 0xff4
 801d8fe:	4293      	cmp	r3, r2
 801d900:	f240 8248 	bls.w	801dd94 <f_mkfs+0x54c>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
 801d904:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 801d908:	4293      	cmp	r3, r2
 801d90a:	f240 8237 	bls.w	801dd7c <f_mkfs+0x534>
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 801d90e:	f103 0e82 	add.w	lr, r3, #130	; 0x82
 801d912:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 801d916:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 801d91a:	ea4f 2b50 	mov.w	fp, r0, lsr #9
		n_rsv = 33 - partition;
 801d91e:	f1c5 0921 	rsb	r9, r5, #33	; 0x21
 801d922:	2403      	movs	r4, #3
		n_dir = 0;
 801d924:	f04f 0800 	mov.w	r8, #0
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
 801d928:	2000      	movs	r0, #0
 801d92a:	2103      	movs	r1, #3
 801d92c:	aa05      	add	r2, sp, #20
 801d92e:	f7fe f953 	bl	801bbd8 <disk_ioctl>
 801d932:	2800      	cmp	r0, #0
 801d934:	d192      	bne.n	801d85c <f_mkfs+0x14>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
 801d936:	9f01      	ldr	r7, [sp, #4]
 801d938:	eb09 0107 	add.w	r1, r9, r7
 801d93c:	9102      	str	r1, [sp, #8]
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
 801d93e:	9f05      	ldr	r7, [sp, #20]
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
 801d940:	9b02      	ldr	r3, [sp, #8]
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
 801d942:	eb08 020b 	add.w	r2, r8, fp
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
 801d946:	1e79      	subs	r1, r7, #1
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
 801d948:	18d0      	adds	r0, r2, r3

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
 801d94a:	180a      	adds	r2, r1, r0
 801d94c:	427b      	negs	r3, r7
 801d94e:	401a      	ands	r2, r3
	n_fat += (n - b_data) / N_FATS;
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 801d950:	9b04      	ldr	r3, [sp, #16]
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
 801d952:	9205      	str	r2, [sp, #20]
	n_fat += (n - b_data) / N_FATS;
 801d954:	ebc0 000b 	rsb	r0, r0, fp
 801d958:	1887      	adds	r7, r0, r2
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 801d95a:	ebc9 0103 	rsb	r1, r9, r3
 801d95e:	1bca      	subs	r2, r1, r7
 801d960:	ebc8 0002 	rsb	r0, r8, r2
 801d964:	fbb0 f1fa 	udiv	r1, r0, sl
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
 801d968:	2c02      	cmp	r4, #2
	n = (b_data + n - 1) & ~(n - 1);
	n_fat += (n - b_data) / N_FATS;
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 801d96a:	9103      	str	r1, [sp, #12]
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
 801d96c:	d102      	bne.n	801d974 <f_mkfs+0x12c>
 801d96e:	f640 72f4 	movw	r2, #4084	; 0xff4
 801d972:	e003      	b.n	801d97c <f_mkfs+0x134>
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
 801d974:	2c03      	cmp	r4, #3
 801d976:	d105      	bne.n	801d984 <f_mkfs+0x13c>
 801d978:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 801d97c:	9803      	ldr	r0, [sp, #12]
 801d97e:	4290      	cmp	r0, r2
 801d980:	f67f af6c 	bls.w	801d85c <f_mkfs+0x14>
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
 801d984:	2d00      	cmp	r5, #0
 801d986:	d15d      	bne.n	801da44 <f_mkfs+0x1fc>
		DWORD n_disk = b_part + n_part;
 801d988:	9901      	ldr	r1, [sp, #4]

		mem_set(fs->win, 0, SS(fs));
 801d98a:	f106 0b30 	add.w	fp, r6, #48	; 0x30
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;
 801d98e:	18cb      	adds	r3, r1, r3

		mem_set(fs->win, 0, SS(fs));
 801d990:	4658      	mov	r0, fp
 801d992:	4629      	mov	r1, r5
 801d994:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	f7fe f99a 	bl	801bcd2 <mem_set>
		tbl = fs->win+MBR_Table;
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
 801d99e:	2001      	movs	r0, #1
 801d9a0:	2280      	movs	r2, #128	; 0x80
 801d9a2:	f886 21ee 	strb.w	r2, [r6, #494]	; 0x1ee
 801d9a6:	f886 01ef 	strb.w	r0, [r6, #495]	; 0x1ef
 801d9aa:	f886 01f0 	strb.w	r0, [r6, #496]	; 0x1f0
 801d9ae:	f886 51f1 	strb.w	r5, [r6, #497]	; 0x1f1
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
 801d9b2:	4966      	ldr	r1, [pc, #408]	; (801db4c <f_mkfs+0x304>)
 801d9b4:	9b00      	ldr	r3, [sp, #0]
 801d9b6:	428b      	cmp	r3, r1
 801d9b8:	d80b      	bhi.n	801d9d2 <f_mkfs+0x18a>
			n_disk = n_disk / 63 / 255;
 801d9ba:	f643 60c1 	movw	r0, #16065	; 0x3ec1
 801d9be:	fbb3 f1f0 	udiv	r1, r3, r0
			tbl[7] = (BYTE)n_disk;
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
 801d9c2:	088b      	lsrs	r3, r1, #2
 801d9c4:	f043 023f 	orr.w	r2, r3, #63	; 0x3f
		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
			n_disk = n_disk / 63 / 255;
			tbl[7] = (BYTE)n_disk;
 801d9c8:	f886 11f5 	strb.w	r1, [r6, #501]	; 0x1f5
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
 801d9cc:	f886 21f4 	strb.w	r2, [r6, #500]	; 0x1f4
 801d9d0:	e004      	b.n	801d9dc <f_mkfs+0x194>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
 801d9d2:	22ff      	movs	r2, #255	; 0xff
 801d9d4:	f886 21f4 	strb.w	r2, [r6, #500]	; 0x1f4
 801d9d8:	f886 21f5 	strb.w	r2, [r6, #501]	; 0x1f5
		}
		tbl[5] = 254;
 801d9dc:	20fe      	movs	r0, #254	; 0xfe
		if (fmt != FS_FAT32)			/* System ID */
 801d9de:	2c03      	cmp	r4, #3
			tbl[7] = (BYTE)n_disk;
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
		}
		tbl[5] = 254;
 801d9e0:	f886 01f3 	strb.w	r0, [r6, #499]	; 0x1f3
		if (fmt != FS_FAT32)			/* System ID */
 801d9e4:	d006      	beq.n	801d9f4 <f_mkfs+0x1ac>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
 801d9e6:	9b04      	ldr	r3, [sp, #16]
 801d9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d9ec:	bf2c      	ite	cs
 801d9ee:	2106      	movcs	r1, #6
 801d9f0:	2104      	movcc	r1, #4
 801d9f2:	e000      	b.n	801d9f6 <f_mkfs+0x1ae>
		else
			tbl[4] = 0x0c;
 801d9f4:	210c      	movs	r1, #12
 801d9f6:	f886 11f2 	strb.w	r1, [r6, #498]	; 0x1f2
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801d9fa:	9904      	ldr	r1, [sp, #16]
		tbl[5] = 254;
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 801d9fc:	223f      	movs	r2, #63	; 0x3f
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801d9fe:	f3c1 2307 	ubfx	r3, r1, #8, #8
		tbl[5] = 254;
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 801da02:	f886 21f6 	strb.w	r2, [r6, #502]	; 0x1f6
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801da06:	0c0a      	lsrs	r2, r1, #16
		tbl[5] = 254;
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 801da08:	2000      	movs	r0, #0
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801da0a:	f886 11fa 	strb.w	r1, [r6, #506]	; 0x1fa
 801da0e:	f886 31fb 	strb.w	r3, [r6, #507]	; 0x1fb
 801da12:	0e09      	lsrs	r1, r1, #24
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 801da14:	2355      	movs	r3, #85	; 0x55
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801da16:	f886 21fc 	strb.w	r2, [r6, #508]	; 0x1fc
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 801da1a:	22aa      	movs	r2, #170	; 0xaa
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801da1c:	f886 11fd 	strb.w	r1, [r6, #509]	; 0x1fd
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 801da20:	f886 322e 	strb.w	r3, [r6, #558]	; 0x22e
 801da24:	f886 222f 	strb.w	r2, [r6, #559]	; 0x22f
		tbl[5] = 254;
		if (fmt != FS_FAT32)			/* System ID */
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
		else
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 801da28:	f886 01f7 	strb.w	r0, [r6, #503]	; 0x1f7
 801da2c:	f886 01f8 	strb.w	r0, [r6, #504]	; 0x1f8
 801da30:	f886 01f9 	strb.w	r0, [r6, #505]	; 0x1f9
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
 801da34:	4659      	mov	r1, fp
 801da36:	4602      	mov	r2, r0
 801da38:	2301      	movs	r3, #1
 801da3a:	f7fe f8ab 	bl	801bb94 <disk_write>
 801da3e:	b120      	cbz	r0, 801da4a <f_mkfs+0x202>
			return FR_DISK_ERR;
 801da40:	2001      	movs	r0, #1
 801da42:	e1b9      	b.n	801ddb8 <f_mkfs+0x570>
		partition = 0xF8;
	} else {
		partition = 0xF0;
 801da44:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 801da48:	e001      	b.n	801da4e <f_mkfs+0x206>
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
			return FR_DISK_ERR;
		partition = 0xF8;
 801da4a:	f04f 0bf8 	mov.w	fp, #248	; 0xf8
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
 801da4e:	f106 0530 	add.w	r5, r6, #48	; 0x30
	mem_set(tbl, 0, SS(fs));
 801da52:	2100      	movs	r1, #0
 801da54:	4628      	mov	r0, r5
 801da56:	f44f 7200 	mov.w	r2, #512	; 0x200
 801da5a:	f7fe f93a 	bl	801bcd2 <mem_set>
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 801da5e:	2390      	movs	r3, #144	; 0x90
 801da60:	20eb      	movs	r0, #235	; 0xeb
 801da62:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
	if (n_part < 0x10000) {						/* Number of total sectors */
 801da66:	9b04      	ldr	r3, [sp, #16]
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 801da68:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
 801da6c:	21fe      	movs	r1, #254	; 0xfe
 801da6e:	2000      	movs	r0, #0
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 801da70:	2202      	movs	r2, #2
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 801da72:	f886 1031 	strb.w	r1, [r6, #49]	; 0x31
 801da76:	f886 0033 	strb.w	r0, [r6, #51]	; 0x33
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 801da7a:	2101      	movs	r1, #1

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 801da7c:	f886 003b 	strb.w	r0, [r6, #59]	; 0x3b
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
 801da80:	fa5f fa8a 	uxtb.w	sl, sl
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 801da84:	f886 003f 	strb.w	r0, [r6, #63]	; 0x3f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
 801da88:	f886 0041 	strb.w	r0, [r6, #65]	; 0x41
 801da8c:	4580      	cmp	r8, r0
 801da8e:	bf18      	it	ne
 801da90:	2002      	movne	r0, #2
	if (n_part < 0x10000) {						/* Number of total sectors */
 801da92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
 801da96:	f886 0042 	strb.w	r0, [r6, #66]	; 0x42

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 801da9a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
 801da9e:	f886 a03d 	strb.w	sl, [r6, #61]	; 0x3d
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 801daa2:	f886 903e 	strb.w	r9, [r6, #62]	; 0x3e
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 801daa6:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
 801daaa:	b298      	uxth	r0, r3
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
	if (n_part < 0x10000) {						/* Number of total sectors */
 801daac:	d205      	bcs.n	801daba <f_mkfs+0x272>
		ST_WORD(tbl+BPB_TotSec16, n_part);
 801daae:	0a00      	lsrs	r0, r0, #8
 801dab0:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
 801dab4:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
 801dab8:	e00a      	b.n	801dad0 <f_mkfs+0x288>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
 801daba:	0c19      	lsrs	r1, r3, #16
 801dabc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 801dac0:	0a02      	lsrs	r2, r0, #8
 801dac2:	0e1b      	lsrs	r3, r3, #24
 801dac4:	f886 2051 	strb.w	r2, [r6, #81]	; 0x51
 801dac8:	f886 1052 	strb.w	r1, [r6, #82]	; 0x52
 801dacc:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
 801dad0:	9b01      	ldr	r3, [sp, #4]
	if (n_part < 0x10000) {						/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_part);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
 801dad2:	f886 b045 	strb.w	fp, [r6, #69]	; 0x45
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 801dad6:	f04f 0900 	mov.w	r9, #0
 801dada:	223f      	movs	r2, #63	; 0x3f
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 801dadc:	21ff      	movs	r1, #255	; 0xff
		ST_WORD(tbl+BPB_TotSec16, n_part);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 801dade:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
 801dae2:	f886 9049 	strb.w	r9, [r6, #73]	; 0x49
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 801dae6:	f886 104a 	strb.w	r1, [r6, #74]	; 0x4a
 801daea:	f886 904b 	strb.w	r9, [r6, #75]	; 0x4b
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
 801daee:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 801daf2:	f886 904d 	strb.w	r9, [r6, #77]	; 0x4d
 801daf6:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
 801dafa:	f886 904f 	strb.w	r9, [r6, #79]	; 0x4f
	n = get_fattime();							/* Use current time as a VSN */
 801dafe:	f7fe f8af 	bl	801bc60 <get_fattime>
	if (fmt != FS_FAT32) {
 801db02:	2c03      	cmp	r4, #3
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
	n = get_fattime();							/* Use current time as a VSN */
 801db04:	9005      	str	r0, [sp, #20]
 801db06:	b282      	uxth	r2, r0
	if (fmt != FS_FAT32) {
 801db08:	d024      	beq.n	801db54 <f_mkfs+0x30c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 801db0a:	0c01      	lsrs	r1, r0, #16
 801db0c:	0a12      	lsrs	r2, r2, #8
 801db0e:	0e03      	lsrs	r3, r0, #24
 801db10:	f886 0057 	strb.w	r0, [r6, #87]	; 0x57
 801db14:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
 801db18:	f3c7 2007 	ubfx	r0, r7, #8, #8
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
	n = get_fattime();							/* Use current time as a VSN */
	if (fmt != FS_FAT32) {
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 801db1c:	f886 1059 	strb.w	r1, [r6, #89]	; 0x59
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 801db20:	2280      	movs	r2, #128	; 0x80
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
 801db22:	2129      	movs	r1, #41	; 0x29
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
	n = get_fattime();							/* Use current time as a VSN */
	if (fmt != FS_FAT32) {
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
 801db24:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
 801db28:	f886 1056 	strb.w	r1, [r6, #86]	; 0x56
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
	n = get_fattime();							/* Use current time as a VSN */
	if (fmt != FS_FAT32) {
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 801db2c:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
 801db30:	f886 7046 	strb.w	r7, [r6, #70]	; 0x46
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 801db34:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
 801db38:	f106 005b 	add.w	r0, r6, #91	; 0x5b
 801db3c:	4904      	ldr	r1, [pc, #16]	; (801db50 <f_mkfs+0x308>)
 801db3e:	e03c      	b.n	801dbba <f_mkfs+0x372>
 801db40:	200013a4 	.word	0x200013a4
 801db44:	08020248 	.word	0x08020248
 801db48:	08020274 	.word	0x08020274
 801db4c:	00fb03ff 	.word	0x00fb03ff
 801db50:	0802029a 	.word	0x0802029a
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
 801db54:	0a11      	lsrs	r1, r2, #8
 801db56:	0c03      	lsrs	r3, r0, #16
 801db58:	f886 0073 	strb.w	r0, [r6, #115]	; 0x73
 801db5c:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
 801db60:	0e00      	lsrs	r0, r0, #24
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801db62:	0c39      	lsrs	r1, r7, #16
 801db64:	f3c7 2207 	ubfx	r2, r7, #8, #8
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
 801db68:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
 801db6c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801db70:	0e3b      	lsrs	r3, r7, #24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 801db72:	2002      	movs	r0, #2
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801db74:	f886 1056 	strb.w	r1, [r6, #86]	; 0x56
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 801db78:	2106      	movs	r1, #6
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801db7a:	f886 2055 	strb.w	r2, [r6, #85]	; 0x55
 801db7e:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 801db82:	f886 005c 	strb.w	r0, [r6, #92]	; 0x5c
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
 801db86:	2201      	movs	r2, #1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 801db88:	2029      	movs	r0, #41	; 0x29
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 801db8a:	f886 1062 	strb.w	r1, [r6, #98]	; 0x62
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 801db8e:	2380      	movs	r3, #128	; 0x80
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
 801db90:	498b      	ldr	r1, [pc, #556]	; (801ddc0 <f_mkfs+0x578>)
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 801db92:	f886 0072 	strb.w	r0, [r6, #114]	; 0x72
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801db96:	f886 7054 	strb.w	r7, [r6, #84]	; 0x54
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 801db9a:	f886 905d 	strb.w	r9, [r6, #93]	; 0x5d
 801db9e:	f886 905e 	strb.w	r9, [r6, #94]	; 0x5e
 801dba2:	f886 905f 	strb.w	r9, [r6, #95]	; 0x5f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
 801dba6:	f886 2060 	strb.w	r2, [r6, #96]	; 0x60
 801dbaa:	f886 9061 	strb.w	r9, [r6, #97]	; 0x61
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 801dbae:	f886 9063 	strb.w	r9, [r6, #99]	; 0x63
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 801dbb2:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
 801dbb6:	f106 0077 	add.w	r0, r6, #119	; 0x77
 801dbba:	2213      	movs	r2, #19
 801dbbc:	f7fe f880 	bl	801bcc0 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
 801dbc0:	2355      	movs	r3, #85	; 0x55
 801dbc2:	20aa      	movs	r0, #170	; 0xaa
 801dbc4:	f886 322e 	strb.w	r3, [r6, #558]	; 0x22e
 801dbc8:	f886 022f 	strb.w	r0, [r6, #559]	; 0x22f
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
 801dbcc:	4629      	mov	r1, r5
 801dbce:	2000      	movs	r0, #0
 801dbd0:	9a01      	ldr	r2, [sp, #4]
 801dbd2:	2301      	movs	r3, #1
 801dbd4:	f7fd ffde 	bl	801bb94 <disk_write>
 801dbd8:	2800      	cmp	r0, #0
 801dbda:	f47f af31 	bne.w	801da40 <f_mkfs+0x1f8>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
 801dbde:	2c03      	cmp	r4, #3
 801dbe0:	d105      	bne.n	801dbee <f_mkfs+0x3a6>
		disk_write(drv, tbl, b_part+6, 1);
 801dbe2:	9a01      	ldr	r2, [sp, #4]
 801dbe4:	4629      	mov	r1, r5
 801dbe6:	3206      	adds	r2, #6
 801dbe8:	2301      	movs	r3, #1
 801dbea:	f7fd ffd3 	bl	801bb94 <disk_write>

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
 801dbee:	2100      	movs	r1, #0
 801dbf0:	4628      	mov	r0, r5
 801dbf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801dbf6:	f7fe f86c 	bl	801bcd2 <mem_set>
		if (fmt != FS_FAT32) {
 801dbfa:	2c03      	cmp	r4, #3
 801dbfc:	d012      	beq.n	801dc24 <f_mkfs+0x3dc>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 801dbfe:	4a71      	ldr	r2, [pc, #452]	; (801ddc4 <f_mkfs+0x57c>)
 801dc00:	2c01      	cmp	r4, #1
 801dc02:	bf18      	it	ne
 801dc04:	f06f 02ff 	mvnne.w	r2, #255	; 0xff
			n |= partition;
 801dc08:	ea42 010b 	orr.w	r1, r2, fp
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
 801dc0c:	23ff      	movs	r3, #255	; 0xff
 801dc0e:	0e08      	lsrs	r0, r1, #24
	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
			n |= partition;
 801dc10:	9105      	str	r1, [sp, #20]
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
 801dc12:	f886 1030 	strb.w	r1, [r6, #48]	; 0x30
 801dc16:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 801dc1a:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 801dc1e:	f886 0033 	strb.w	r0, [r6, #51]	; 0x33
 801dc22:	e01a      	b.n	801dc5a <f_mkfs+0x412>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
 801dc24:	23ff      	movs	r3, #255	; 0xff
 801dc26:	21f8      	movs	r1, #248	; 0xf8
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 801dc28:	200f      	movs	r0, #15
		if (fmt != FS_FAT32) {
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
			n |= partition;
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
 801dc2a:	f886 1030 	strb.w	r1, [r6, #48]	; 0x30
 801dc2e:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 801dc32:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 801dc36:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
			ST_DWORD(tbl+4, 0xFFFFFFFF);
 801dc3a:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 801dc3e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
 801dc42:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 801dc46:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 801dc4a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 801dc4e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 801dc52:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
 801dc56:	f886 003b 	strb.w	r0, [r6, #59]	; 0x3b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801dc5a:	9a02      	ldr	r2, [sp, #8]
 801dc5c:	4629      	mov	r1, r5
 801dc5e:	f102 0901 	add.w	r9, r2, #1
 801dc62:	2000      	movs	r0, #0
 801dc64:	9a02      	ldr	r2, [sp, #8]
 801dc66:	2301      	movs	r3, #1
 801dc68:	f7fd ff94 	bl	801bb94 <disk_write>
 801dc6c:	4601      	mov	r1, r0
 801dc6e:	2800      	cmp	r0, #0
 801dc70:	f47f aee6 	bne.w	801da40 <f_mkfs+0x1f8>
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
 801dc74:	4628      	mov	r0, r5
 801dc76:	f44f 7200 	mov.w	r2, #512	; 0x200
 801dc7a:	f7fe f82a 	bl	801bcd2 <mem_set>
		for (n = 1; n < n_fat; n++) {
 801dc7e:	2101      	movs	r1, #1
 801dc80:	9105      	str	r1, [sp, #20]
 801dc82:	9b05      	ldr	r3, [sp, #20]
 801dc84:	42bb      	cmp	r3, r7
 801dc86:	d20f      	bcs.n	801dca8 <f_mkfs+0x460>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801dc88:	2000      	movs	r0, #0
 801dc8a:	4629      	mov	r1, r5
 801dc8c:	464a      	mov	r2, r9
 801dc8e:	2301      	movs	r3, #1
 801dc90:	f109 0b01 	add.w	fp, r9, #1
 801dc94:	f7fd ff7e 	bl	801bb94 <disk_write>
 801dc98:	2800      	cmp	r0, #0
 801dc9a:	f47f aed1 	bne.w	801da40 <f_mkfs+0x1f8>
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
 801dc9e:	9805      	ldr	r0, [sp, #20]
 801dca0:	1c41      	adds	r1, r0, #1
 801dca2:	9105      	str	r1, [sp, #20]
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801dca4:	46d9      	mov	r9, fp
 801dca6:	e7ec      	b.n	801dc82 <f_mkfs+0x43a>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
 801dca8:	2c03      	cmp	r4, #3
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
 801dcaa:	46cb      	mov	fp, r9
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
 801dcac:	bf18      	it	ne
 801dcae:	fa5f fa88 	uxtbne.w	sl, r8
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801dcb2:	2000      	movs	r0, #0
 801dcb4:	4629      	mov	r1, r5
 801dcb6:	464a      	mov	r2, r9
 801dcb8:	2301      	movs	r3, #1
 801dcba:	f7fd ff6b 	bl	801bb94 <disk_write>
 801dcbe:	f109 0801 	add.w	r8, r9, #1
 801dcc2:	4607      	mov	r7, r0
 801dcc4:	2800      	cmp	r0, #0
 801dcc6:	f47f aebb 	bne.w	801da40 <f_mkfs+0x1f8>
#define N_FATS		1			/* 1 or 2 */
#define MAX_SECTOR	131072000UL	/* Maximum partition size */
#define MIN_SECTOR	2000UL		/* Minimum partition size */


FRESULT f_mkfs (
 801dcca:	eb0a 020b 	add.w	r2, sl, fp
	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
	} while (--m);
 801dcce:	b2d1      	uxtb	r1, r2
 801dcd0:	fa5f f388 	uxtb.w	r3, r8
 801dcd4:	4299      	cmp	r1, r3
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801dcd6:	46c1      	mov	r9, r8
			return FR_DISK_ERR;
	} while (--m);
 801dcd8:	d1eb      	bne.n	801dcb2 <f_mkfs+0x46a>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
 801dcda:	2c03      	cmp	r4, #3
 801dcdc:	d13d      	bne.n	801dd5a <f_mkfs+0x512>
		ST_WORD(tbl+BS_55AA, 0xAA55);
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 801dcde:	2352      	movs	r3, #82	; 0x52
 801dce0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 801dce4:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 801dce8:	2361      	movs	r3, #97	; 0x61
			return FR_DISK_ERR;
	} while (--m);

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
 801dcea:	21aa      	movs	r1, #170	; 0xaa
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 801dcec:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 801dcf0:	f886 3217 	strb.w	r3, [r6, #535]	; 0x217
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801dcf4:	9b03      	ldr	r3, [sp, #12]
			return FR_DISK_ERR;
	} while (--m);

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
 801dcf6:	f886 122f 	strb.w	r1, [r6, #559]	; 0x22f
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 801dcfa:	2172      	movs	r1, #114	; 0x72
			return FR_DISK_ERR;
	} while (--m);

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
 801dcfc:	2255      	movs	r2, #85	; 0x55
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 801dcfe:	f886 1214 	strb.w	r1, [r6, #532]	; 0x214
 801dd02:	f886 1215 	strb.w	r1, [r6, #533]	; 0x215
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801dd06:	1e59      	subs	r1, r3, #1
 801dd08:	0c0b      	lsrs	r3, r1, #16
			return FR_DISK_ERR;
	} while (--m);

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
 801dd0a:	f886 222e 	strb.w	r2, [r6, #558]	; 0x22e
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 801dd0e:	2241      	movs	r2, #65	; 0x41
 801dd10:	f886 2033 	strb.w	r2, [r6, #51]	; 0x33
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 801dd14:	f886 2216 	strb.w	r2, [r6, #534]	; 0x216
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801dd18:	f886 321a 	strb.w	r3, [r6, #538]	; 0x21a
 801dd1c:	f3c1 2207 	ubfx	r2, r1, #8, #8
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
		disk_write(drv, tbl, b_part+1, 1);
 801dd20:	9b01      	ldr	r3, [sp, #4]
	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801dd22:	f886 1218 	strb.w	r1, [r6, #536]	; 0x218
 801dd26:	f886 2219 	strb.w	r2, [r6, #537]	; 0x219
 801dd2a:	0e09      	lsrs	r1, r1, #24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
 801dd2c:	22ff      	movs	r2, #255	; 0xff
	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
		ST_WORD(tbl+BS_55AA, 0xAA55);
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801dd2e:	f886 121b 	strb.w	r1, [r6, #539]	; 0x21b
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
 801dd32:	f886 221c 	strb.w	r2, [r6, #540]	; 0x21c
 801dd36:	f886 221d 	strb.w	r2, [r6, #541]	; 0x21d
 801dd3a:	f886 221e 	strb.w	r2, [r6, #542]	; 0x21e
 801dd3e:	f886 221f 	strb.w	r2, [r6, #543]	; 0x21f
		disk_write(drv, tbl, b_part+1, 1);
 801dd42:	4629      	mov	r1, r5
 801dd44:	1c5a      	adds	r2, r3, #1
 801dd46:	2301      	movs	r3, #1
 801dd48:	f7fd ff24 	bl	801bb94 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
 801dd4c:	9a01      	ldr	r2, [sp, #4]
 801dd4e:	4638      	mov	r0, r7
 801dd50:	4629      	mov	r1, r5
 801dd52:	3207      	adds	r2, #7
 801dd54:	2301      	movs	r3, #1
 801dd56:	f7fd ff1d 	bl	801bb94 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
 801dd5a:	2000      	movs	r0, #0
 801dd5c:	4601      	mov	r1, r0
 801dd5e:	4602      	mov	r2, r0
 801dd60:	f7fd ff3a 	bl	801bbd8 <disk_ioctl>
 801dd64:	3000      	adds	r0, #0
 801dd66:	bf18      	it	ne
 801dd68:	2001      	movne	r0, #1
 801dd6a:	e025      	b.n	801ddb8 <f_mkfs+0x570>
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 801dd6c:	200b      	movs	r0, #11
 801dd6e:	e023      	b.n	801ddb8 <f_mkfs+0x570>
	if (partition >= 2) return FR_MKFS_ABORTED;

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
	if (!fs) return FR_NOT_ENABLED;
 801dd70:	200c      	movs	r0, #12
 801dd72:	e021      	b.n	801ddb8 <f_mkfs+0x570>
	fs->fs_type = 0;
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801dd74:	2003      	movs	r0, #3
 801dd76:	e01f      	b.n	801ddb8 <f_mkfs+0x570>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801dd78:	200a      	movs	r0, #10
 801dd7a:	e01d      	b.n	801ddb8 <f_mkfs+0x570>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
 801dd7c:	f503 7881 	add.w	r8, r3, #258	; 0x102
 801dd80:	ea4f 0948 	mov.w	r9, r8, lsl #1
 801dd84:	f109 3cff 	add.w	ip, r9, #4294967295	; 0xffffffff
 801dd88:	ea4f 2b5c 	mov.w	fp, ip, lsr #9
		n_rsv = 1 + partition;
 801dd8c:	f105 0901 	add.w	r9, r5, #1
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
 801dd90:	2402      	movs	r4, #2
 801dd92:	e00e      	b.n	801ddb2 <f_mkfs+0x56a>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
 801dd94:	f04f 0b03 	mov.w	fp, #3
 801dd98:	fb0b f003 	mul.w	r0, fp, r3
 801dd9c:	f100 0101 	add.w	r1, r0, #1
 801dda0:	ea4f 0451 	mov.w	r4, r1, lsr #1
 801dda4:	f204 2302 	addw	r3, r4, #514	; 0x202
 801dda8:	ea4f 2b53 	mov.w	fp, r3, lsr #9
		n_rsv = 1 + partition;
 801ddac:	f105 0901 	add.w	r9, r5, #1
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
 801ddb0:	2401      	movs	r4, #1
	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
 801ddb2:	f04f 0820 	mov.w	r8, #32
		break;
 801ddb6:	e5b7      	b.n	801d928 <f_mkfs+0xe0>
		disk_write(drv, tbl, b_part+1, 1);
		disk_write(drv, tbl, b_part+7, 1);
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
 801ddb8:	b007      	add	sp, #28
 801ddba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddbe:	bf00      	nop
 801ddc0:	080202ae 	.word	0x080202ae
 801ddc4:	00ffff00 	.word	0x00ffff00

0801ddc8 <__aeabi_llsr>:
 801ddc8:	40d0      	lsrs	r0, r2
 801ddca:	1c0b      	adds	r3, r1, #0
 801ddcc:	40d1      	lsrs	r1, r2
 801ddce:	469c      	mov	ip, r3
 801ddd0:	3a20      	subs	r2, #32
 801ddd2:	40d3      	lsrs	r3, r2
 801ddd4:	4318      	orrs	r0, r3
 801ddd6:	4252      	negs	r2, r2
 801ddd8:	4663      	mov	r3, ip
 801ddda:	4093      	lsls	r3, r2
 801dddc:	4318      	orrs	r0, r3
 801ddde:	4770      	bx	lr

0801dde0 <__aeabi_llsl>:
 801dde0:	4091      	lsls	r1, r2
 801dde2:	1c03      	adds	r3, r0, #0
 801dde4:	4090      	lsls	r0, r2
 801dde6:	469c      	mov	ip, r3
 801dde8:	3a20      	subs	r2, #32
 801ddea:	4093      	lsls	r3, r2
 801ddec:	4319      	orrs	r1, r3
 801ddee:	4252      	negs	r2, r2
 801ddf0:	4663      	mov	r3, ip
 801ddf2:	40d3      	lsrs	r3, r2
 801ddf4:	4319      	orrs	r1, r3
 801ddf6:	4770      	bx	lr

0801ddf8 <__aeabi_ldivmod>:
 801ddf8:	b973      	cbnz	r3, 801de18 <__aeabi_ldivmod+0x20>
 801ddfa:	b96a      	cbnz	r2, 801de18 <__aeabi_ldivmod+0x20>
 801ddfc:	2900      	cmp	r1, #0
 801ddfe:	bf08      	it	eq
 801de00:	2800      	cmpeq	r0, #0
 801de02:	bfbc      	itt	lt
 801de04:	2000      	movlt	r0, #0
 801de06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 801de0a:	bfc4      	itt	gt
 801de0c:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
 801de10:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801de14:	f000 b838 	b.w	801de88 <__aeabi_idiv0>
 801de18:	b082      	sub	sp, #8
 801de1a:	46ec      	mov	ip, sp
 801de1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 801de20:	f000 f806 	bl	801de30 <__gnu_ldivmod_helper>
 801de24:	f8dd e004 	ldr.w	lr, [sp, #4]
 801de28:	b002      	add	sp, #8
 801de2a:	bc0c      	pop	{r2, r3}
 801de2c:	4770      	bx	lr
 801de2e:	bf00      	nop

0801de30 <__gnu_ldivmod_helper>:
 801de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de32:	4616      	mov	r6, r2
 801de34:	4604      	mov	r4, r0
 801de36:	460d      	mov	r5, r1
 801de38:	461f      	mov	r7, r3
 801de3a:	f000 f827 	bl	801de8c <__divdi3>
 801de3e:	fb06 f301 	mul.w	r3, r6, r1
 801de42:	fb00 3707 	mla	r7, r0, r7, r3
 801de46:	fba6 2300 	umull	r2, r3, r6, r0
 801de4a:	18fb      	adds	r3, r7, r3
 801de4c:	1aa2      	subs	r2, r4, r2
 801de4e:	eb65 0303 	sbc.w	r3, r5, r3
 801de52:	9c06      	ldr	r4, [sp, #24]
 801de54:	e9c4 2300 	strd	r2, r3, [r4]
 801de58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de5a:	bf00      	nop

0801de5c <__gnu_uldivmod_helper>:
 801de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de5e:	4616      	mov	r6, r2
 801de60:	4604      	mov	r4, r0
 801de62:	460d      	mov	r5, r1
 801de64:	461f      	mov	r7, r3
 801de66:	f000 f96f 	bl	801e148 <__udivdi3>
 801de6a:	fb00 f707 	mul.w	r7, r0, r7
 801de6e:	fba0 2306 	umull	r2, r3, r0, r6
 801de72:	fb06 7701 	mla	r7, r6, r1, r7
 801de76:	18fb      	adds	r3, r7, r3
 801de78:	1aa2      	subs	r2, r4, r2
 801de7a:	eb65 0303 	sbc.w	r3, r5, r3
 801de7e:	9c06      	ldr	r4, [sp, #24]
 801de80:	e9c4 2300 	strd	r2, r3, [r4]
 801de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de86:	bf00      	nop

0801de88 <__aeabi_idiv0>:
 801de88:	4770      	bx	lr
 801de8a:	bf00      	nop

0801de8c <__divdi3>:
 801de8c:	2900      	cmp	r1, #0
 801de8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801de92:	461d      	mov	r5, r3
 801de94:	f2c0 809d 	blt.w	801dfd2 <__divdi3+0x146>
 801de98:	2400      	movs	r4, #0
 801de9a:	2d00      	cmp	r5, #0
 801de9c:	f2c0 8094 	blt.w	801dfc8 <__divdi3+0x13c>
 801dea0:	4680      	mov	r8, r0
 801dea2:	460f      	mov	r7, r1
 801dea4:	4694      	mov	ip, r2
 801dea6:	461e      	mov	r6, r3
 801dea8:	bbe3      	cbnz	r3, 801df24 <__divdi3+0x98>
 801deaa:	428a      	cmp	r2, r1
 801deac:	d955      	bls.n	801df5a <__divdi3+0xce>
 801deae:	fab2 f782 	clz	r7, r2
 801deb2:	b147      	cbz	r7, 801dec6 <__divdi3+0x3a>
 801deb4:	f1c7 0520 	rsb	r5, r7, #32
 801deb8:	fa20 f605 	lsr.w	r6, r0, r5
 801debc:	fa01 f107 	lsl.w	r1, r1, r7
 801dec0:	40ba      	lsls	r2, r7
 801dec2:	4331      	orrs	r1, r6
 801dec4:	40b8      	lsls	r0, r7
 801dec6:	0c17      	lsrs	r7, r2, #16
 801dec8:	fbb1 f6f7 	udiv	r6, r1, r7
 801decc:	0c03      	lsrs	r3, r0, #16
 801dece:	fa1f fc82 	uxth.w	ip, r2
 801ded2:	fb07 1116 	mls	r1, r7, r6, r1
 801ded6:	fb0c f506 	mul.w	r5, ip, r6
 801deda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801dede:	429d      	cmp	r5, r3
 801dee0:	d908      	bls.n	801def4 <__divdi3+0x68>
 801dee2:	1e71      	subs	r1, r6, #1
 801dee4:	189b      	adds	r3, r3, r2
 801dee6:	f080 8113 	bcs.w	801e110 <__divdi3+0x284>
 801deea:	429d      	cmp	r5, r3
 801deec:	f240 8110 	bls.w	801e110 <__divdi3+0x284>
 801def0:	3e02      	subs	r6, #2
 801def2:	189b      	adds	r3, r3, r2
 801def4:	1b59      	subs	r1, r3, r5
 801def6:	fbb1 f5f7 	udiv	r5, r1, r7
 801defa:	fb07 1315 	mls	r3, r7, r5, r1
 801defe:	b280      	uxth	r0, r0
 801df00:	fb0c fc05 	mul.w	ip, ip, r5
 801df04:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 801df08:	458c      	cmp	ip, r1
 801df0a:	d907      	bls.n	801df1c <__divdi3+0x90>
 801df0c:	1e6b      	subs	r3, r5, #1
 801df0e:	188a      	adds	r2, r1, r2
 801df10:	f080 8100 	bcs.w	801e114 <__divdi3+0x288>
 801df14:	4594      	cmp	ip, r2
 801df16:	f240 80fd 	bls.w	801e114 <__divdi3+0x288>
 801df1a:	3d02      	subs	r5, #2
 801df1c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 801df20:	2500      	movs	r5, #0
 801df22:	e003      	b.n	801df2c <__divdi3+0xa0>
 801df24:	428b      	cmp	r3, r1
 801df26:	d90c      	bls.n	801df42 <__divdi3+0xb6>
 801df28:	2500      	movs	r5, #0
 801df2a:	4629      	mov	r1, r5
 801df2c:	460a      	mov	r2, r1
 801df2e:	462b      	mov	r3, r5
 801df30:	b114      	cbz	r4, 801df38 <__divdi3+0xac>
 801df32:	4252      	negs	r2, r2
 801df34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801df38:	4610      	mov	r0, r2
 801df3a:	4619      	mov	r1, r3
 801df3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801df40:	4770      	bx	lr
 801df42:	fab3 f583 	clz	r5, r3
 801df46:	2d00      	cmp	r5, #0
 801df48:	f040 8087 	bne.w	801e05a <__divdi3+0x1ce>
 801df4c:	428b      	cmp	r3, r1
 801df4e:	d301      	bcc.n	801df54 <__divdi3+0xc8>
 801df50:	4282      	cmp	r2, r0
 801df52:	d8ea      	bhi.n	801df2a <__divdi3+0x9e>
 801df54:	2500      	movs	r5, #0
 801df56:	2101      	movs	r1, #1
 801df58:	e7e8      	b.n	801df2c <__divdi3+0xa0>
 801df5a:	b912      	cbnz	r2, 801df62 <__divdi3+0xd6>
 801df5c:	2601      	movs	r6, #1
 801df5e:	fbb6 f2f2 	udiv	r2, r6, r2
 801df62:	fab2 f682 	clz	r6, r2
 801df66:	2e00      	cmp	r6, #0
 801df68:	d139      	bne.n	801dfde <__divdi3+0x152>
 801df6a:	1a8e      	subs	r6, r1, r2
 801df6c:	0c13      	lsrs	r3, r2, #16
 801df6e:	fa1f fc82 	uxth.w	ip, r2
 801df72:	2501      	movs	r5, #1
 801df74:	fbb6 f7f3 	udiv	r7, r6, r3
 801df78:	fb03 6117 	mls	r1, r3, r7, r6
 801df7c:	ea4f 4910 	mov.w	r9, r0, lsr #16
 801df80:	fb0c f807 	mul.w	r8, ip, r7
 801df84:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 801df88:	45b0      	cmp	r8, r6
 801df8a:	d906      	bls.n	801df9a <__divdi3+0x10e>
 801df8c:	1e79      	subs	r1, r7, #1
 801df8e:	18b6      	adds	r6, r6, r2
 801df90:	d202      	bcs.n	801df98 <__divdi3+0x10c>
 801df92:	45b0      	cmp	r8, r6
 801df94:	f200 80d3 	bhi.w	801e13e <__divdi3+0x2b2>
 801df98:	460f      	mov	r7, r1
 801df9a:	ebc8 0606 	rsb	r6, r8, r6
 801df9e:	fbb6 f1f3 	udiv	r1, r6, r3
 801dfa2:	fb03 6311 	mls	r3, r3, r1, r6
 801dfa6:	b280      	uxth	r0, r0
 801dfa8:	fb0c fc01 	mul.w	ip, ip, r1
 801dfac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801dfb0:	459c      	cmp	ip, r3
 801dfb2:	d906      	bls.n	801dfc2 <__divdi3+0x136>
 801dfb4:	1e4e      	subs	r6, r1, #1
 801dfb6:	189a      	adds	r2, r3, r2
 801dfb8:	d202      	bcs.n	801dfc0 <__divdi3+0x134>
 801dfba:	4594      	cmp	ip, r2
 801dfbc:	f200 80c2 	bhi.w	801e144 <__divdi3+0x2b8>
 801dfc0:	4631      	mov	r1, r6
 801dfc2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801dfc6:	e7b1      	b.n	801df2c <__divdi3+0xa0>
 801dfc8:	43e4      	mvns	r4, r4
 801dfca:	4252      	negs	r2, r2
 801dfcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801dfd0:	e766      	b.n	801dea0 <__divdi3+0x14>
 801dfd2:	4240      	negs	r0, r0
 801dfd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801dfd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801dfdc:	e75d      	b.n	801de9a <__divdi3+0xe>
 801dfde:	40b2      	lsls	r2, r6
 801dfe0:	f1c6 0920 	rsb	r9, r6, #32
 801dfe4:	fa21 f709 	lsr.w	r7, r1, r9
 801dfe8:	fa20 f509 	lsr.w	r5, r0, r9
 801dfec:	0c13      	lsrs	r3, r2, #16
 801dfee:	fa01 f106 	lsl.w	r1, r1, r6
 801dff2:	fbb7 f8f3 	udiv	r8, r7, r3
 801dff6:	ea45 0901 	orr.w	r9, r5, r1
 801dffa:	fa1f fc82 	uxth.w	ip, r2
 801dffe:	fb03 7718 	mls	r7, r3, r8, r7
 801e002:	ea4f 4119 	mov.w	r1, r9, lsr #16
 801e006:	fb0c f508 	mul.w	r5, ip, r8
 801e00a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 801e00e:	40b0      	lsls	r0, r6
 801e010:	42bd      	cmp	r5, r7
 801e012:	d90a      	bls.n	801e02a <__divdi3+0x19e>
 801e014:	18bf      	adds	r7, r7, r2
 801e016:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 801e01a:	f080 808e 	bcs.w	801e13a <__divdi3+0x2ae>
 801e01e:	42bd      	cmp	r5, r7
 801e020:	f240 808b 	bls.w	801e13a <__divdi3+0x2ae>
 801e024:	f1a8 0802 	sub.w	r8, r8, #2
 801e028:	18bf      	adds	r7, r7, r2
 801e02a:	1b79      	subs	r1, r7, r5
 801e02c:	fbb1 f5f3 	udiv	r5, r1, r3
 801e030:	fb03 1715 	mls	r7, r3, r5, r1
 801e034:	fa1f f989 	uxth.w	r9, r9
 801e038:	fb0c f605 	mul.w	r6, ip, r5
 801e03c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 801e040:	428e      	cmp	r6, r1
 801e042:	d906      	bls.n	801e052 <__divdi3+0x1c6>
 801e044:	1e6f      	subs	r7, r5, #1
 801e046:	1889      	adds	r1, r1, r2
 801e048:	d271      	bcs.n	801e12e <__divdi3+0x2a2>
 801e04a:	428e      	cmp	r6, r1
 801e04c:	d96f      	bls.n	801e12e <__divdi3+0x2a2>
 801e04e:	3d02      	subs	r5, #2
 801e050:	1889      	adds	r1, r1, r2
 801e052:	1b8e      	subs	r6, r1, r6
 801e054:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 801e058:	e78c      	b.n	801df74 <__divdi3+0xe8>
 801e05a:	f1c5 0120 	rsb	r1, r5, #32
 801e05e:	fa22 f301 	lsr.w	r3, r2, r1
 801e062:	fa06 f605 	lsl.w	r6, r6, r5
 801e066:	431e      	orrs	r6, r3
 801e068:	fa27 f201 	lsr.w	r2, r7, r1
 801e06c:	ea4f 4916 	mov.w	r9, r6, lsr #16
 801e070:	fa07 f705 	lsl.w	r7, r7, r5
 801e074:	fa20 f101 	lsr.w	r1, r0, r1
 801e078:	fbb2 f8f9 	udiv	r8, r2, r9
 801e07c:	430f      	orrs	r7, r1
 801e07e:	0c3b      	lsrs	r3, r7, #16
 801e080:	fa1f fa86 	uxth.w	sl, r6
 801e084:	fb09 2218 	mls	r2, r9, r8, r2
 801e088:	fb0a fb08 	mul.w	fp, sl, r8
 801e08c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801e090:	4593      	cmp	fp, r2
 801e092:	fa0c fc05 	lsl.w	ip, ip, r5
 801e096:	d908      	bls.n	801e0aa <__divdi3+0x21e>
 801e098:	1992      	adds	r2, r2, r6
 801e09a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 801e09e:	d24a      	bcs.n	801e136 <__divdi3+0x2aa>
 801e0a0:	4593      	cmp	fp, r2
 801e0a2:	d948      	bls.n	801e136 <__divdi3+0x2aa>
 801e0a4:	f1a8 0802 	sub.w	r8, r8, #2
 801e0a8:	1992      	adds	r2, r2, r6
 801e0aa:	ebcb 0302 	rsb	r3, fp, r2
 801e0ae:	fbb3 f1f9 	udiv	r1, r3, r9
 801e0b2:	fb09 3211 	mls	r2, r9, r1, r3
 801e0b6:	b2bf      	uxth	r7, r7
 801e0b8:	fb0a fa01 	mul.w	sl, sl, r1
 801e0bc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 801e0c0:	459a      	cmp	sl, r3
 801e0c2:	d906      	bls.n	801e0d2 <__divdi3+0x246>
 801e0c4:	1e4a      	subs	r2, r1, #1
 801e0c6:	199b      	adds	r3, r3, r6
 801e0c8:	d233      	bcs.n	801e132 <__divdi3+0x2a6>
 801e0ca:	459a      	cmp	sl, r3
 801e0cc:	d931      	bls.n	801e132 <__divdi3+0x2a6>
 801e0ce:	3902      	subs	r1, #2
 801e0d0:	199b      	adds	r3, r3, r6
 801e0d2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 801e0d6:	0c0f      	lsrs	r7, r1, #16
 801e0d8:	fa1f f88c 	uxth.w	r8, ip
 801e0dc:	fb08 f607 	mul.w	r6, r8, r7
 801e0e0:	b28a      	uxth	r2, r1
 801e0e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e0e6:	fb08 f802 	mul.w	r8, r8, r2
 801e0ea:	fb0c 6202 	mla	r2, ip, r2, r6
 801e0ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e0f2:	fb0c fc07 	mul.w	ip, ip, r7
 801e0f6:	4296      	cmp	r6, r2
 801e0f8:	bf88      	it	hi
 801e0fa:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 801e0fe:	ebca 0303 	rsb	r3, sl, r3
 801e102:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 801e106:	4563      	cmp	r3, ip
 801e108:	d30e      	bcc.n	801e128 <__divdi3+0x29c>
 801e10a:	d005      	beq.n	801e118 <__divdi3+0x28c>
 801e10c:	2500      	movs	r5, #0
 801e10e:	e70d      	b.n	801df2c <__divdi3+0xa0>
 801e110:	460e      	mov	r6, r1
 801e112:	e6ef      	b.n	801def4 <__divdi3+0x68>
 801e114:	461d      	mov	r5, r3
 801e116:	e701      	b.n	801df1c <__divdi3+0x90>
 801e118:	fa1f f888 	uxth.w	r8, r8
 801e11c:	fa00 f005 	lsl.w	r0, r0, r5
 801e120:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 801e124:	42a8      	cmp	r0, r5
 801e126:	d2f1      	bcs.n	801e10c <__divdi3+0x280>
 801e128:	3901      	subs	r1, #1
 801e12a:	2500      	movs	r5, #0
 801e12c:	e6fe      	b.n	801df2c <__divdi3+0xa0>
 801e12e:	463d      	mov	r5, r7
 801e130:	e78f      	b.n	801e052 <__divdi3+0x1c6>
 801e132:	4611      	mov	r1, r2
 801e134:	e7cd      	b.n	801e0d2 <__divdi3+0x246>
 801e136:	4688      	mov	r8, r1
 801e138:	e7b7      	b.n	801e0aa <__divdi3+0x21e>
 801e13a:	46b0      	mov	r8, r6
 801e13c:	e775      	b.n	801e02a <__divdi3+0x19e>
 801e13e:	3f02      	subs	r7, #2
 801e140:	18b6      	adds	r6, r6, r2
 801e142:	e72a      	b.n	801df9a <__divdi3+0x10e>
 801e144:	3902      	subs	r1, #2
 801e146:	e73c      	b.n	801dfc2 <__divdi3+0x136>

0801e148 <__udivdi3>:
 801e148:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 801e14c:	4614      	mov	r4, r2
 801e14e:	4605      	mov	r5, r0
 801e150:	460e      	mov	r6, r1
 801e152:	2b00      	cmp	r3, #0
 801e154:	d13d      	bne.n	801e1d2 <__udivdi3+0x8a>
 801e156:	428a      	cmp	r2, r1
 801e158:	d949      	bls.n	801e1ee <__udivdi3+0xa6>
 801e15a:	fab2 f782 	clz	r7, r2
 801e15e:	b147      	cbz	r7, 801e172 <__udivdi3+0x2a>
 801e160:	f1c7 0120 	rsb	r1, r7, #32
 801e164:	fa20 f201 	lsr.w	r2, r0, r1
 801e168:	fa06 f607 	lsl.w	r6, r6, r7
 801e16c:	40bc      	lsls	r4, r7
 801e16e:	4316      	orrs	r6, r2
 801e170:	40bd      	lsls	r5, r7
 801e172:	0c22      	lsrs	r2, r4, #16
 801e174:	fbb6 f0f2 	udiv	r0, r6, r2
 801e178:	0c2f      	lsrs	r7, r5, #16
 801e17a:	b2a1      	uxth	r1, r4
 801e17c:	fb02 6610 	mls	r6, r2, r0, r6
 801e180:	fb01 f300 	mul.w	r3, r1, r0
 801e184:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 801e188:	42b3      	cmp	r3, r6
 801e18a:	d908      	bls.n	801e19e <__udivdi3+0x56>
 801e18c:	1e47      	subs	r7, r0, #1
 801e18e:	1936      	adds	r6, r6, r4
 801e190:	f080 80f8 	bcs.w	801e384 <__udivdi3+0x23c>
 801e194:	42b3      	cmp	r3, r6
 801e196:	f240 80f5 	bls.w	801e384 <__udivdi3+0x23c>
 801e19a:	3802      	subs	r0, #2
 801e19c:	1936      	adds	r6, r6, r4
 801e19e:	1af6      	subs	r6, r6, r3
 801e1a0:	fbb6 f3f2 	udiv	r3, r6, r2
 801e1a4:	fb02 6213 	mls	r2, r2, r3, r6
 801e1a8:	b2ad      	uxth	r5, r5
 801e1aa:	fb01 f103 	mul.w	r1, r1, r3
 801e1ae:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 801e1b2:	4291      	cmp	r1, r2
 801e1b4:	d907      	bls.n	801e1c6 <__udivdi3+0x7e>
 801e1b6:	1e5e      	subs	r6, r3, #1
 801e1b8:	1912      	adds	r2, r2, r4
 801e1ba:	f080 80e5 	bcs.w	801e388 <__udivdi3+0x240>
 801e1be:	4291      	cmp	r1, r2
 801e1c0:	f240 80e2 	bls.w	801e388 <__udivdi3+0x240>
 801e1c4:	3b02      	subs	r3, #2
 801e1c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801e1ca:	2100      	movs	r1, #0
 801e1cc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 801e1d0:	4770      	bx	lr
 801e1d2:	428b      	cmp	r3, r1
 801e1d4:	d843      	bhi.n	801e25e <__udivdi3+0x116>
 801e1d6:	fab3 f483 	clz	r4, r3
 801e1da:	2c00      	cmp	r4, #0
 801e1dc:	d142      	bne.n	801e264 <__udivdi3+0x11c>
 801e1de:	428b      	cmp	r3, r1
 801e1e0:	d302      	bcc.n	801e1e8 <__udivdi3+0xa0>
 801e1e2:	4282      	cmp	r2, r0
 801e1e4:	f200 80df 	bhi.w	801e3a6 <__udivdi3+0x25e>
 801e1e8:	2100      	movs	r1, #0
 801e1ea:	2001      	movs	r0, #1
 801e1ec:	e7ee      	b.n	801e1cc <__udivdi3+0x84>
 801e1ee:	b912      	cbnz	r2, 801e1f6 <__udivdi3+0xae>
 801e1f0:	2701      	movs	r7, #1
 801e1f2:	fbb7 f4f2 	udiv	r4, r7, r2
 801e1f6:	fab4 f284 	clz	r2, r4
 801e1fa:	2a00      	cmp	r2, #0
 801e1fc:	f040 8088 	bne.w	801e310 <__udivdi3+0x1c8>
 801e200:	1b0a      	subs	r2, r1, r4
 801e202:	0c23      	lsrs	r3, r4, #16
 801e204:	b2a7      	uxth	r7, r4
 801e206:	2101      	movs	r1, #1
 801e208:	fbb2 f6f3 	udiv	r6, r2, r3
 801e20c:	fb03 2216 	mls	r2, r3, r6, r2
 801e210:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 801e214:	fb07 f006 	mul.w	r0, r7, r6
 801e218:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 801e21c:	4290      	cmp	r0, r2
 801e21e:	d907      	bls.n	801e230 <__udivdi3+0xe8>
 801e220:	1912      	adds	r2, r2, r4
 801e222:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801e226:	d202      	bcs.n	801e22e <__udivdi3+0xe6>
 801e228:	4290      	cmp	r0, r2
 801e22a:	f200 80ce 	bhi.w	801e3ca <__udivdi3+0x282>
 801e22e:	4666      	mov	r6, ip
 801e230:	1a12      	subs	r2, r2, r0
 801e232:	fbb2 f0f3 	udiv	r0, r2, r3
 801e236:	fb03 2310 	mls	r3, r3, r0, r2
 801e23a:	b2ad      	uxth	r5, r5
 801e23c:	fb07 f700 	mul.w	r7, r7, r0
 801e240:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 801e244:	429f      	cmp	r7, r3
 801e246:	d907      	bls.n	801e258 <__udivdi3+0x110>
 801e248:	1e42      	subs	r2, r0, #1
 801e24a:	191b      	adds	r3, r3, r4
 801e24c:	f080 809e 	bcs.w	801e38c <__udivdi3+0x244>
 801e250:	429f      	cmp	r7, r3
 801e252:	f240 809b 	bls.w	801e38c <__udivdi3+0x244>
 801e256:	3802      	subs	r0, #2
 801e258:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801e25c:	e7b6      	b.n	801e1cc <__udivdi3+0x84>
 801e25e:	2100      	movs	r1, #0
 801e260:	4608      	mov	r0, r1
 801e262:	e7b3      	b.n	801e1cc <__udivdi3+0x84>
 801e264:	f1c4 0620 	rsb	r6, r4, #32
 801e268:	fa22 f506 	lsr.w	r5, r2, r6
 801e26c:	fa03 f304 	lsl.w	r3, r3, r4
 801e270:	432b      	orrs	r3, r5
 801e272:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801e276:	fa21 f506 	lsr.w	r5, r1, r6
 801e27a:	fa01 f104 	lsl.w	r1, r1, r4
 801e27e:	fa20 f606 	lsr.w	r6, r0, r6
 801e282:	fbb5 f7fc 	udiv	r7, r5, ip
 801e286:	ea46 0a01 	orr.w	sl, r6, r1
 801e28a:	fa1f f883 	uxth.w	r8, r3
 801e28e:	fb0c 5517 	mls	r5, ip, r7, r5
 801e292:	ea4f 411a 	mov.w	r1, sl, lsr #16
 801e296:	fb08 f907 	mul.w	r9, r8, r7
 801e29a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801e29e:	45a9      	cmp	r9, r5
 801e2a0:	fa02 f204 	lsl.w	r2, r2, r4
 801e2a4:	d903      	bls.n	801e2ae <__udivdi3+0x166>
 801e2a6:	1e7e      	subs	r6, r7, #1
 801e2a8:	18ed      	adds	r5, r5, r3
 801e2aa:	d37f      	bcc.n	801e3ac <__udivdi3+0x264>
 801e2ac:	4637      	mov	r7, r6
 801e2ae:	ebc9 0105 	rsb	r1, r9, r5
 801e2b2:	fbb1 f6fc 	udiv	r6, r1, ip
 801e2b6:	fb0c 1516 	mls	r5, ip, r6, r1
 801e2ba:	fa1f fa8a 	uxth.w	sl, sl
 801e2be:	fb08 f806 	mul.w	r8, r8, r6
 801e2c2:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 801e2c6:	4588      	cmp	r8, r1
 801e2c8:	d903      	bls.n	801e2d2 <__udivdi3+0x18a>
 801e2ca:	1e75      	subs	r5, r6, #1
 801e2cc:	18c9      	adds	r1, r1, r3
 801e2ce:	d373      	bcc.n	801e3b8 <__udivdi3+0x270>
 801e2d0:	462e      	mov	r6, r5
 801e2d2:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801e2d6:	0c37      	lsrs	r7, r6, #16
 801e2d8:	fa1f fc82 	uxth.w	ip, r2
 801e2dc:	fb0c f507 	mul.w	r5, ip, r7
 801e2e0:	0c12      	lsrs	r2, r2, #16
 801e2e2:	b2b3      	uxth	r3, r6
 801e2e4:	fb0c fc03 	mul.w	ip, ip, r3
 801e2e8:	fb02 5303 	mla	r3, r2, r3, r5
 801e2ec:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 801e2f0:	fb02 f207 	mul.w	r2, r2, r7
 801e2f4:	429d      	cmp	r5, r3
 801e2f6:	bf88      	it	hi
 801e2f8:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 801e2fc:	ebc8 0101 	rsb	r1, r8, r1
 801e300:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e304:	4291      	cmp	r1, r2
 801e306:	d34b      	bcc.n	801e3a0 <__udivdi3+0x258>
 801e308:	d042      	beq.n	801e390 <__udivdi3+0x248>
 801e30a:	4630      	mov	r0, r6
 801e30c:	2100      	movs	r1, #0
 801e30e:	e75d      	b.n	801e1cc <__udivdi3+0x84>
 801e310:	4094      	lsls	r4, r2
 801e312:	f1c2 0520 	rsb	r5, r2, #32
 801e316:	fa21 f605 	lsr.w	r6, r1, r5
 801e31a:	0c23      	lsrs	r3, r4, #16
 801e31c:	fa20 f705 	lsr.w	r7, r0, r5
 801e320:	fa01 f102 	lsl.w	r1, r1, r2
 801e324:	fbb6 fcf3 	udiv	ip, r6, r3
 801e328:	4339      	orrs	r1, r7
 801e32a:	0c0d      	lsrs	r5, r1, #16
 801e32c:	b2a7      	uxth	r7, r4
 801e32e:	fb03 661c 	mls	r6, r3, ip, r6
 801e332:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e336:	fb07 f80c 	mul.w	r8, r7, ip
 801e33a:	45b0      	cmp	r8, r6
 801e33c:	fa00 f502 	lsl.w	r5, r0, r2
 801e340:	d908      	bls.n	801e354 <__udivdi3+0x20c>
 801e342:	1936      	adds	r6, r6, r4
 801e344:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 801e348:	d23d      	bcs.n	801e3c6 <__udivdi3+0x27e>
 801e34a:	45b0      	cmp	r8, r6
 801e34c:	d93b      	bls.n	801e3c6 <__udivdi3+0x27e>
 801e34e:	f1ac 0c02 	sub.w	ip, ip, #2
 801e352:	1936      	adds	r6, r6, r4
 801e354:	ebc8 0206 	rsb	r2, r8, r6
 801e358:	fbb2 f0f3 	udiv	r0, r2, r3
 801e35c:	fb03 2610 	mls	r6, r3, r0, r2
 801e360:	b28a      	uxth	r2, r1
 801e362:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801e366:	fb07 f100 	mul.w	r1, r7, r0
 801e36a:	4291      	cmp	r1, r2
 801e36c:	d906      	bls.n	801e37c <__udivdi3+0x234>
 801e36e:	1e46      	subs	r6, r0, #1
 801e370:	1912      	adds	r2, r2, r4
 801e372:	d226      	bcs.n	801e3c2 <__udivdi3+0x27a>
 801e374:	4291      	cmp	r1, r2
 801e376:	d924      	bls.n	801e3c2 <__udivdi3+0x27a>
 801e378:	3802      	subs	r0, #2
 801e37a:	1912      	adds	r2, r2, r4
 801e37c:	1a52      	subs	r2, r2, r1
 801e37e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 801e382:	e741      	b.n	801e208 <__udivdi3+0xc0>
 801e384:	4638      	mov	r0, r7
 801e386:	e70a      	b.n	801e19e <__udivdi3+0x56>
 801e388:	4633      	mov	r3, r6
 801e38a:	e71c      	b.n	801e1c6 <__udivdi3+0x7e>
 801e38c:	4610      	mov	r0, r2
 801e38e:	e763      	b.n	801e258 <__udivdi3+0x110>
 801e390:	fa1f fc8c 	uxth.w	ip, ip
 801e394:	fa00 f004 	lsl.w	r0, r0, r4
 801e398:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 801e39c:	4298      	cmp	r0, r3
 801e39e:	d2b4      	bcs.n	801e30a <__udivdi3+0x1c2>
 801e3a0:	1e70      	subs	r0, r6, #1
 801e3a2:	2100      	movs	r1, #0
 801e3a4:	e712      	b.n	801e1cc <__udivdi3+0x84>
 801e3a6:	4621      	mov	r1, r4
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	e70f      	b.n	801e1cc <__udivdi3+0x84>
 801e3ac:	45a9      	cmp	r9, r5
 801e3ae:	f67f af7d 	bls.w	801e2ac <__udivdi3+0x164>
 801e3b2:	3f02      	subs	r7, #2
 801e3b4:	18ed      	adds	r5, r5, r3
 801e3b6:	e77a      	b.n	801e2ae <__udivdi3+0x166>
 801e3b8:	4588      	cmp	r8, r1
 801e3ba:	d989      	bls.n	801e2d0 <__udivdi3+0x188>
 801e3bc:	3e02      	subs	r6, #2
 801e3be:	18c9      	adds	r1, r1, r3
 801e3c0:	e787      	b.n	801e2d2 <__udivdi3+0x18a>
 801e3c2:	4630      	mov	r0, r6
 801e3c4:	e7da      	b.n	801e37c <__udivdi3+0x234>
 801e3c6:	4684      	mov	ip, r0
 801e3c8:	e7c4      	b.n	801e354 <__udivdi3+0x20c>
 801e3ca:	3e02      	subs	r6, #2
 801e3cc:	1912      	adds	r2, r2, r4
 801e3ce:	e72f      	b.n	801e230 <__udivdi3+0xe8>

0801e3d0 <__libc_init_array>:
 801e3d0:	b538      	push	{r3, r4, r5, lr}
 801e3d2:	4d0e      	ldr	r5, [pc, #56]	; (801e40c <__libc_init_array+0x3c>)
 801e3d4:	4b0e      	ldr	r3, [pc, #56]	; (801e410 <__libc_init_array+0x40>)
 801e3d6:	1ae8      	subs	r0, r5, r3
 801e3d8:	1085      	asrs	r5, r0, #2
 801e3da:	2400      	movs	r4, #0
 801e3dc:	42ac      	cmp	r4, r5
 801e3de:	d005      	beq.n	801e3ec <__libc_init_array+0x1c>
 801e3e0:	490b      	ldr	r1, [pc, #44]	; (801e410 <__libc_init_array+0x40>)
 801e3e2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 801e3e6:	4790      	blx	r2
 801e3e8:	3401      	adds	r4, #1
 801e3ea:	e7f7      	b.n	801e3dc <__libc_init_array+0xc>
 801e3ec:	f7f3 fffc 	bl	80123e8 <_init>
 801e3f0:	4908      	ldr	r1, [pc, #32]	; (801e414 <__libc_init_array+0x44>)
 801e3f2:	4a09      	ldr	r2, [pc, #36]	; (801e418 <__libc_init_array+0x48>)
 801e3f4:	1a54      	subs	r4, r2, r1
 801e3f6:	10a5      	asrs	r5, r4, #2
 801e3f8:	2400      	movs	r4, #0
 801e3fa:	42ac      	cmp	r4, r5
 801e3fc:	d005      	beq.n	801e40a <__libc_init_array+0x3a>
 801e3fe:	4b05      	ldr	r3, [pc, #20]	; (801e414 <__libc_init_array+0x44>)
 801e400:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e404:	4780      	blx	r0
 801e406:	3401      	adds	r4, #1
 801e408:	e7f7      	b.n	801e3fa <__libc_init_array+0x2a>
 801e40a:	bd38      	pop	{r3, r4, r5, pc}
 801e40c:	08020450 	.word	0x08020450
 801e410:	08020450 	.word	0x08020450
 801e414:	08020450 	.word	0x08020450
 801e418:	08020450 	.word	0x08020450

0801e41c <memcpy>:
 801e41c:	b510      	push	{r4, lr}
 801e41e:	2300      	movs	r3, #0
 801e420:	4293      	cmp	r3, r2
 801e422:	d003      	beq.n	801e42c <memcpy+0x10>
 801e424:	5ccc      	ldrb	r4, [r1, r3]
 801e426:	54c4      	strb	r4, [r0, r3]
 801e428:	3301      	adds	r3, #1
 801e42a:	e7f9      	b.n	801e420 <memcpy+0x4>
 801e42c:	bd10      	pop	{r4, pc}

0801e42e <memset>:
 801e42e:	1882      	adds	r2, r0, r2
 801e430:	4603      	mov	r3, r0
 801e432:	4293      	cmp	r3, r2
 801e434:	d002      	beq.n	801e43c <memset+0xe>
 801e436:	f803 1b01 	strb.w	r1, [r3], #1
 801e43a:	e7fa      	b.n	801e432 <memset+0x4>
 801e43c:	4770      	bx	lr

0801e43e <strcat>:
 801e43e:	b510      	push	{r4, lr}
 801e440:	4604      	mov	r4, r0
 801e442:	4622      	mov	r2, r4
 801e444:	3401      	adds	r4, #1
 801e446:	7813      	ldrb	r3, [r2, #0]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d1fa      	bne.n	801e442 <strcat+0x4>
 801e44c:	5ccc      	ldrb	r4, [r1, r3]
 801e44e:	54d4      	strb	r4, [r2, r3]
 801e450:	3301      	adds	r3, #1
 801e452:	2c00      	cmp	r4, #0
 801e454:	d1fa      	bne.n	801e44c <strcat+0xe>
 801e456:	bd10      	pop	{r4, pc}

0801e458 <strcpy>:
 801e458:	4603      	mov	r3, r0
 801e45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e45e:	f803 2b01 	strb.w	r2, [r3], #1
 801e462:	2a00      	cmp	r2, #0
 801e464:	d1f9      	bne.n	801e45a <strcpy+0x2>
 801e466:	4770      	bx	lr

0801e468 <strlen>:
 801e468:	4603      	mov	r3, r0
 801e46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e46e:	2a00      	cmp	r2, #0
 801e470:	d1fb      	bne.n	801e46a <strlen+0x2>
 801e472:	1a18      	subs	r0, r3, r0
 801e474:	3801      	subs	r0, #1
 801e476:	4770      	bx	lr

0801e478 <strncmp>:
 801e478:	b570      	push	{r4, r5, r6, lr}
 801e47a:	b192      	cbz	r2, 801e4a2 <strncmp+0x2a>
 801e47c:	460b      	mov	r3, r1
 801e47e:	4605      	mov	r5, r0
 801e480:	b91a      	cbnz	r2, 801e48a <strncmp+0x12>
 801e482:	7828      	ldrb	r0, [r5, #0]
 801e484:	7819      	ldrb	r1, [r3, #0]
 801e486:	1a40      	subs	r0, r0, r1
 801e488:	bd70      	pop	{r4, r5, r6, pc}
 801e48a:	f810 6b01 	ldrb.w	r6, [r0], #1
 801e48e:	781c      	ldrb	r4, [r3, #0]
 801e490:	3101      	adds	r1, #1
 801e492:	42b4      	cmp	r4, r6
 801e494:	d1f5      	bne.n	801e482 <strncmp+0xa>
 801e496:	2a01      	cmp	r2, #1
 801e498:	d0f3      	beq.n	801e482 <strncmp+0xa>
 801e49a:	3a01      	subs	r2, #1
 801e49c:	2c00      	cmp	r4, #0
 801e49e:	d1ed      	bne.n	801e47c <strncmp+0x4>
 801e4a0:	e7ef      	b.n	801e482 <strncmp+0xa>
 801e4a2:	4610      	mov	r0, r2
 801e4a4:	bd70      	pop	{r4, r5, r6, pc}

0801e4a6 <strncpy>:
 801e4a6:	b530      	push	{r4, r5, lr}
 801e4a8:	3901      	subs	r1, #1
 801e4aa:	4603      	mov	r3, r0
 801e4ac:	461c      	mov	r4, r3
 801e4ae:	b13a      	cbz	r2, 801e4c0 <strncpy+0x1a>
 801e4b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801e4b4:	f803 5b01 	strb.w	r5, [r3], #1
 801e4b8:	3a01      	subs	r2, #1
 801e4ba:	461c      	mov	r4, r3
 801e4bc:	2d00      	cmp	r5, #0
 801e4be:	d1f5      	bne.n	801e4ac <strncpy+0x6>
 801e4c0:	1899      	adds	r1, r3, r2
 801e4c2:	428c      	cmp	r4, r1
 801e4c4:	d003      	beq.n	801e4ce <strncpy+0x28>
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	f804 2b01 	strb.w	r2, [r4], #1
 801e4cc:	e7f9      	b.n	801e4c2 <strncpy+0x1c>
 801e4ce:	bd30      	pop	{r4, r5, pc}

0801e4d0 <__strtok_r>:
 801e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4d2:	b910      	cbnz	r0, 801e4da <__strtok_r+0xa>
 801e4d4:	6810      	ldr	r0, [r2, #0]
 801e4d6:	2800      	cmp	r0, #0
 801e4d8:	d028      	beq.n	801e52c <__strtok_r+0x5c>
 801e4da:	4604      	mov	r4, r0
 801e4dc:	4627      	mov	r7, r4
 801e4de:	460e      	mov	r6, r1
 801e4e0:	7838      	ldrb	r0, [r7, #0]
 801e4e2:	3401      	adds	r4, #1
 801e4e4:	f816 5b01 	ldrb.w	r5, [r6], #1
 801e4e8:	b145      	cbz	r5, 801e4fc <__strtok_r+0x2c>
 801e4ea:	42a8      	cmp	r0, r5
 801e4ec:	d1fa      	bne.n	801e4e4 <__strtok_r+0x14>
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d1f4      	bne.n	801e4dc <__strtok_r+0xc>
 801e4f2:	6014      	str	r4, [r2, #0]
 801e4f4:	4638      	mov	r0, r7
 801e4f6:	f804 3c01 	strb.w	r3, [r4, #-1]
 801e4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4fc:	4623      	mov	r3, r4
 801e4fe:	b938      	cbnz	r0, 801e510 <__strtok_r+0x40>
 801e500:	6010      	str	r0, [r2, #0]
 801e502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e504:	f817 5b01 	ldrb.w	r5, [r7], #1
 801e508:	4285      	cmp	r5, r0
 801e50a:	d006      	beq.n	801e51a <__strtok_r+0x4a>
 801e50c:	2d00      	cmp	r5, #0
 801e50e:	d1f9      	bne.n	801e504 <__strtok_r+0x34>
 801e510:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e514:	460f      	mov	r7, r1
 801e516:	461e      	mov	r6, r3
 801e518:	e7f4      	b.n	801e504 <__strtok_r+0x34>
 801e51a:	b118      	cbz	r0, 801e524 <__strtok_r+0x54>
 801e51c:	2100      	movs	r1, #0
 801e51e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801e522:	e000      	b.n	801e526 <__strtok_r+0x56>
 801e524:	4606      	mov	r6, r0
 801e526:	6016      	str	r6, [r2, #0]
 801e528:	1e60      	subs	r0, r4, #1
 801e52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e52e <strtok_r>:
 801e52e:	2301      	movs	r3, #1
 801e530:	f7ff bfce 	b.w	801e4d0 <__strtok_r>
